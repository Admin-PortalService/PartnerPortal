/**
* DevExpress Analytics (dist\js\dx-analytics-core.js)
* Version:  22.2.3
* Build date: Dec 6, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 62);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = ko;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Disposable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return deserializeArray; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return serializeDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return deserializeDate; });
/* harmony import */ var knockout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var knockout__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(knockout__WEBPACK_IMPORTED_MODULE_0__);

class Disposable {
    constructor() {
        this._disposables = [];
        this.isDisposing = false;
    }
    disposeObservableArray(array) {
        if (array) {
            array().forEach((item) => { item.dispose && item.dispose(); });
        }
    }
    resetObservableArray(array) {
        if (array)
            array([]);
    }
    disposeArray(array) {
        if (array) {
            array.forEach((item) => { item.dispose && item.dispose(); });
            array.splice(0, array.length);
        }
    }
    dispose() {
        if (!this.isDisposing) {
            this.isDisposing = true;
            (this._disposables || []).reverse().forEach(x => x && x.dispose && x.dispose());
            this._disposables = [];
        }
    }
    removeProperties() {
        Object.keys(this).forEach((propertyName) => {
            delete this[propertyName];
        });
    }
}
function deserializeArray(model, creator) {
    var result = Object.keys(model || {}).map(propertyName => creator(model[propertyName]));
    return knockout__WEBPACK_IMPORTED_MODULE_0__["observableArray"](result);
}
function toStringWithDelimiter(values, delimiter) {
    return (values || []).map(value => {
        var str = value !== undefined && value !== null ? value.toString() : '00';
        if (str.length === 1) {
            str = '0' + str;
        }
        return str;
    }).join(delimiter);
}
function serializeDate(date) {
    var datePart = [date.getMonth() + 1, date.getDate(), date.getFullYear()];
    var timePart = toStringWithDelimiter([date.getHours(), date.getMinutes(), date.getSeconds()], ':');
    return timePart === '00:00:00' ? toStringWithDelimiter([datePart[2], datePart[0], datePart[1]], '-')
        : toStringWithDelimiter(datePart, '/') + ' ' + timePart;
}
function deserializeDate(dateTime) {
    var dateTimeParts = dateTime.split(' ');
    var dateArgs = dateTimeParts[0].split('-');
    var timeArgs = [0, 0, 0];
    if (dateTimeParts.length > 1) {
        dateArgs = dateTimeParts[0].split('/');
        dateArgs.splice(0, 0, dateArgs.splice(2, 1)[0]);
        timeArgs = dateTimeParts[1].split(':').map(x => parseInt(x));
        if (timeArgs.length !== 3)
            return null;
    }
    if (dateArgs.length !== 3)
        return null;
    dateArgs = dateArgs.map(x => parseInt(x));
    return new Date(dateArgs[0], dateArgs[1] - 1, dateArgs[2], timeArgs[0], timeArgs[1], timeArgs[2]);
}


/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return addCultureInfo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _stringEndsWith; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return updateLocalization; });
/* harmony import */ var _serializer_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(6);
/* harmony import */ var _localization__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(9);


function addCultureInfo(json) {
    Object(_serializer_utils__WEBPACK_IMPORTED_MODULE_0__[/* extend */ "b"])(_localization__WEBPACK_IMPORTED_MODULE_1__[/* messages */ "i"], json.messages);
}
function getLocalization(text, id, _removeWinSymblols) {
    return Object(_localization__WEBPACK_IMPORTED_MODULE_1__[/* getLocalization */ "d"])(text, id, _localization__WEBPACK_IMPORTED_MODULE_1__[/* removeWinSymbols */ "l"]);
}
function _stringEndsWith(value, searchString) {
    return value.indexOf(searchString, value.length - searchString.length) !== -1;
}
function updateLocalization(object) {
    Object(_serializer_utils__WEBPACK_IMPORTED_MODULE_0__[/* extend */ "b"])(_localization__WEBPACK_IMPORTED_MODULE_1__[/* custom_localization_values */ "b"], object);
    var messages = {};
    Object.keys(object).forEach(name => {
        messages[name] = object[name];
    });
    addCultureInfo({
        messages: messages
    });
}


/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CriteriaOperatorPreprocessor", function() { return CriteriaOperatorPreprocessor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "criteriaCreator", function() { return criteriaCreator; });
/* harmony import */ var _operators_options_unary__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(10);

class CriteriaOperatorPreprocessor {
    constructor() {
        this._func = [];
        this._factory = {};
        this._changeTypeFactory = {};
    }
    addListener(func) {
        var index = this._func.indexOf(func);
        if (index === -1) {
            this._func.push(func);
        }
    }
    removeListener(func) {
        var index = this._func.indexOf(func);
        if (index !== -1) {
            this._func.splice(index, 1);
        }
    }
    register(operatorType, create, changeType) {
        this._factory[operatorType] = create;
        if (changeType)
            this._changeTypeFactory[operatorType] = (changeOperator) => {
                var operand = changeType(changeOperator);
                if (changeOperator.reverse) {
                    operand = this.process('unary', {
                        operator: operand,
                        operatorType: _operators_options_unary__WEBPACK_IMPORTED_MODULE_0__["UnaryOperatorType"].Not
                    });
                }
                return operand;
            };
    }
    process(operatorType, options = {}) {
        var operand = operatorType in this._factory ? this._factory[operatorType](options) : this._factory['default']();
        this._func.forEach(func => { operand = func(operand, { operatorType: operatorType, options: options || {} }); });
        return operand;
    }
    changeByType(value) {
        if (this._changeTypeFactory[value._type]) {
            return this._changeTypeFactory[value._type](value);
        }
        return null;
    }
}
var criteriaCreator = new CriteriaOperatorPreprocessor();


/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FunctionOperatorType", function() { return FunctionOperatorType; });
var FunctionOperatorType;
(function (FunctionOperatorType) {
    FunctionOperatorType[FunctionOperatorType["None"] = 0] = "None";
    FunctionOperatorType[FunctionOperatorType["Custom"] = 1] = "Custom";
    FunctionOperatorType[FunctionOperatorType["CustomNonDeterministic"] = 2] = "CustomNonDeterministic";
    FunctionOperatorType[FunctionOperatorType["Iif"] = 3] = "Iif";
    FunctionOperatorType[FunctionOperatorType["InRange"] = 4] = "InRange";
    FunctionOperatorType[FunctionOperatorType["IsNull"] = 5] = "IsNull";
    FunctionOperatorType[FunctionOperatorType["IsNullOrEmpty"] = 6] = "IsNullOrEmpty";
    FunctionOperatorType[FunctionOperatorType["Trim"] = 7] = "Trim";
    FunctionOperatorType[FunctionOperatorType["Len"] = 8] = "Len";
    FunctionOperatorType[FunctionOperatorType["Substring"] = 9] = "Substring";
    FunctionOperatorType[FunctionOperatorType["Upper"] = 10] = "Upper";
    FunctionOperatorType[FunctionOperatorType["Lower"] = 11] = "Lower";
    FunctionOperatorType[FunctionOperatorType["Concat"] = 12] = "Concat";
    FunctionOperatorType[FunctionOperatorType["Ascii"] = 13] = "Ascii";
    FunctionOperatorType[FunctionOperatorType["Char"] = 14] = "Char";
    FunctionOperatorType[FunctionOperatorType["ToStr"] = 15] = "ToStr";
    FunctionOperatorType[FunctionOperatorType["Replace"] = 16] = "Replace";
    FunctionOperatorType[FunctionOperatorType["Reverse"] = 17] = "Reverse";
    FunctionOperatorType[FunctionOperatorType["Insert"] = 18] = "Insert";
    FunctionOperatorType[FunctionOperatorType["CharIndex"] = 19] = "CharIndex";
    FunctionOperatorType[FunctionOperatorType["Remove"] = 20] = "Remove";
    FunctionOperatorType[FunctionOperatorType["Abs"] = 21] = "Abs";
    FunctionOperatorType[FunctionOperatorType["Sqr"] = 22] = "Sqr";
    FunctionOperatorType[FunctionOperatorType["Cos"] = 23] = "Cos";
    FunctionOperatorType[FunctionOperatorType["Sin"] = 24] = "Sin";
    FunctionOperatorType[FunctionOperatorType["Atn"] = 25] = "Atn";
    FunctionOperatorType[FunctionOperatorType["Exp"] = 26] = "Exp";
    FunctionOperatorType[FunctionOperatorType["Log"] = 27] = "Log";
    FunctionOperatorType[FunctionOperatorType["Rnd"] = 28] = "Rnd";
    FunctionOperatorType[FunctionOperatorType["Tan"] = 29] = "Tan";
    FunctionOperatorType[FunctionOperatorType["Power"] = 30] = "Power";
    FunctionOperatorType[FunctionOperatorType["Sign"] = 31] = "Sign";
    FunctionOperatorType[FunctionOperatorType["Round"] = 32] = "Round";
    FunctionOperatorType[FunctionOperatorType["Ceiling"] = 33] = "Ceiling";
    FunctionOperatorType[FunctionOperatorType["Floor"] = 34] = "Floor";
    FunctionOperatorType[FunctionOperatorType["Max"] = 35] = "Max";
    FunctionOperatorType[FunctionOperatorType["Min"] = 36] = "Min";
    FunctionOperatorType[FunctionOperatorType["Acos"] = 37] = "Acos";
    FunctionOperatorType[FunctionOperatorType["Asin"] = 38] = "Asin";
    FunctionOperatorType[FunctionOperatorType["Atn2"] = 39] = "Atn2";
    FunctionOperatorType[FunctionOperatorType["BigMul"] = 40] = "BigMul";
    FunctionOperatorType[FunctionOperatorType["Cosh"] = 41] = "Cosh";
    FunctionOperatorType[FunctionOperatorType["Log10"] = 42] = "Log10";
    FunctionOperatorType[FunctionOperatorType["Sinh"] = 43] = "Sinh";
    FunctionOperatorType[FunctionOperatorType["Tanh"] = 44] = "Tanh";
    FunctionOperatorType[FunctionOperatorType["PadLeft"] = 45] = "PadLeft";
    FunctionOperatorType[FunctionOperatorType["PadRight"] = 46] = "PadRight";
    FunctionOperatorType[FunctionOperatorType["StartsWith"] = 47] = "StartsWith";
    FunctionOperatorType[FunctionOperatorType["EndsWith"] = 48] = "EndsWith";
    FunctionOperatorType[FunctionOperatorType["Contains"] = 49] = "Contains";
    FunctionOperatorType[FunctionOperatorType["ToInt"] = 50] = "ToInt";
    FunctionOperatorType[FunctionOperatorType["ToLong"] = 51] = "ToLong";
    FunctionOperatorType[FunctionOperatorType["ToFloat"] = 52] = "ToFloat";
    FunctionOperatorType[FunctionOperatorType["ToDouble"] = 53] = "ToDouble";
    FunctionOperatorType[FunctionOperatorType["ToDecimal"] = 54] = "ToDecimal";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeThisYear"] = 55] = "LocalDateTimeThisYear";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeThisMonth"] = 56] = "LocalDateTimeThisMonth";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeLastWeek"] = 57] = "LocalDateTimeLastWeek";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeThisWeek"] = 58] = "LocalDateTimeThisWeek";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeYesterday"] = 59] = "LocalDateTimeYesterday";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeToday"] = 60] = "LocalDateTimeToday";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNow"] = 61] = "LocalDateTimeNow";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeTomorrow"] = 62] = "LocalDateTimeTomorrow";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeDayAfterTomorrow"] = 63] = "LocalDateTimeDayAfterTomorrow";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNextWeek"] = 64] = "LocalDateTimeNextWeek";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeTwoWeeksAway"] = 65] = "LocalDateTimeTwoWeeksAway";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNextMonth"] = 66] = "LocalDateTimeNextMonth";
    FunctionOperatorType[FunctionOperatorType["LocalDateTimeNextYear"] = 67] = "LocalDateTimeNextYear";
    FunctionOperatorType[FunctionOperatorType["InDateRange"] = 68] = "InDateRange";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalBeyondThisYear"] = 69] = "IsOutlookIntervalBeyondThisYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLaterThisYear"] = 70] = "IsOutlookIntervalLaterThisYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLaterThisMonth"] = 71] = "IsOutlookIntervalLaterThisMonth";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalNextWeek"] = 72] = "IsOutlookIntervalNextWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLaterThisWeek"] = 73] = "IsOutlookIntervalLaterThisWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalTomorrow"] = 74] = "IsOutlookIntervalTomorrow";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalToday"] = 75] = "IsOutlookIntervalToday";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalYesterday"] = 76] = "IsOutlookIntervalYesterday";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalEarlierThisWeek"] = 77] = "IsOutlookIntervalEarlierThisWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalLastWeek"] = 78] = "IsOutlookIntervalLastWeek";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalEarlierThisMonth"] = 79] = "IsOutlookIntervalEarlierThisMonth";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalEarlierThisYear"] = 80] = "IsOutlookIntervalEarlierThisYear";
    FunctionOperatorType[FunctionOperatorType["IsOutlookIntervalPriorThisYear"] = 81] = "IsOutlookIntervalPriorThisYear";
    FunctionOperatorType[FunctionOperatorType["IsLastMonth"] = 82] = "IsLastMonth";
    FunctionOperatorType[FunctionOperatorType["IsLastYear"] = 83] = "IsLastYear";
    FunctionOperatorType[FunctionOperatorType["IsNextMonth"] = 84] = "IsNextMonth";
    FunctionOperatorType[FunctionOperatorType["IsNextYear"] = 85] = "IsNextYear";
    FunctionOperatorType[FunctionOperatorType["IsThisWeek"] = 86] = "IsThisWeek";
    FunctionOperatorType[FunctionOperatorType["IsThisMonth"] = 87] = "IsThisMonth";
    FunctionOperatorType[FunctionOperatorType["IsThisYear"] = 88] = "IsThisYear";
    FunctionOperatorType[FunctionOperatorType["IsJanuary"] = 89] = "IsJanuary";
    FunctionOperatorType[FunctionOperatorType["IsFebruary"] = 90] = "IsFebruary";
    FunctionOperatorType[FunctionOperatorType["IsMarch"] = 91] = "IsMarch";
    FunctionOperatorType[FunctionOperatorType["IsApril"] = 92] = "IsApril";
    FunctionOperatorType[FunctionOperatorType["IsMay"] = 93] = "IsMay";
    FunctionOperatorType[FunctionOperatorType["IsJune"] = 94] = "IsJune";
    FunctionOperatorType[FunctionOperatorType["IsJuly"] = 95] = "IsJuly";
    FunctionOperatorType[FunctionOperatorType["IsAugust"] = 96] = "IsAugust";
    FunctionOperatorType[FunctionOperatorType["IsSeptember"] = 97] = "IsSeptember";
    FunctionOperatorType[FunctionOperatorType["IsOctober"] = 98] = "IsOctober";
    FunctionOperatorType[FunctionOperatorType["IsNovember"] = 99] = "IsNovember";
    FunctionOperatorType[FunctionOperatorType["IsDecember"] = 100] = "IsDecember";
    FunctionOperatorType[FunctionOperatorType["IsSameDay"] = 101] = "IsSameDay";
    FunctionOperatorType[FunctionOperatorType["IsYearToDate"] = 102] = "IsYearToDate";
    FunctionOperatorType[FunctionOperatorType["DateDiffTick"] = 103] = "DateDiffTick";
    FunctionOperatorType[FunctionOperatorType["DateDiffSecond"] = 104] = "DateDiffSecond";
    FunctionOperatorType[FunctionOperatorType["DateDiffMilliSecond"] = 105] = "DateDiffMilliSecond";
    FunctionOperatorType[FunctionOperatorType["DateDiffMinute"] = 106] = "DateDiffMinute";
    FunctionOperatorType[FunctionOperatorType["DateDiffHour"] = 107] = "DateDiffHour";
    FunctionOperatorType[FunctionOperatorType["DateDiffDay"] = 108] = "DateDiffDay";
    FunctionOperatorType[FunctionOperatorType["DateDiffMonth"] = 109] = "DateDiffMonth";
    FunctionOperatorType[FunctionOperatorType["DateDiffYear"] = 110] = "DateDiffYear";
    FunctionOperatorType[FunctionOperatorType["GetDate"] = 111] = "GetDate";
    FunctionOperatorType[FunctionOperatorType["GetMilliSecond"] = 112] = "GetMilliSecond";
    FunctionOperatorType[FunctionOperatorType["GetSecond"] = 113] = "GetSecond";
    FunctionOperatorType[FunctionOperatorType["GetMinute"] = 114] = "GetMinute";
    FunctionOperatorType[FunctionOperatorType["GetHour"] = 115] = "GetHour";
    FunctionOperatorType[FunctionOperatorType["GetDay"] = 116] = "GetDay";
    FunctionOperatorType[FunctionOperatorType["GetMonth"] = 117] = "GetMonth";
    FunctionOperatorType[FunctionOperatorType["GetYear"] = 118] = "GetYear";
    FunctionOperatorType[FunctionOperatorType["GetDayOfWeek"] = 119] = "GetDayOfWeek";
    FunctionOperatorType[FunctionOperatorType["GetDayOfYear"] = 120] = "GetDayOfYear";
    FunctionOperatorType[FunctionOperatorType["GetTimeOfDay"] = 121] = "GetTimeOfDay";
    FunctionOperatorType[FunctionOperatorType["Now"] = 122] = "Now";
    FunctionOperatorType[FunctionOperatorType["UtcNow"] = 123] = "UtcNow";
    FunctionOperatorType[FunctionOperatorType["Today"] = 124] = "Today";
    FunctionOperatorType[FunctionOperatorType["AddTimeSpan"] = 125] = "AddTimeSpan";
    FunctionOperatorType[FunctionOperatorType["AddTicks"] = 126] = "AddTicks";
    FunctionOperatorType[FunctionOperatorType["AddMilliSeconds"] = 127] = "AddMilliSeconds";
    FunctionOperatorType[FunctionOperatorType["AddSeconds"] = 128] = "AddSeconds";
    FunctionOperatorType[FunctionOperatorType["AddMinutes"] = 129] = "AddMinutes";
    FunctionOperatorType[FunctionOperatorType["AddHours"] = 130] = "AddHours";
    FunctionOperatorType[FunctionOperatorType["AddDays"] = 131] = "AddDays";
    FunctionOperatorType[FunctionOperatorType["AddMonths"] = 132] = "AddMonths";
    FunctionOperatorType[FunctionOperatorType["AddYears"] = 133] = "AddYears";
    FunctionOperatorType[FunctionOperatorType["OrderDescToken"] = 134] = "OrderDescToken";
})(FunctionOperatorType || (FunctionOperatorType = {}));


/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return knockoutArrayWrapper; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isPlainObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return isEmptyObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return assignObj; });
/* harmony import */ var knockout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var knockout__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(knockout__WEBPACK_IMPORTED_MODULE_0__);

function knockoutArrayWrapper(items, ...onChange) {
    var array = knockout__WEBPACK_IMPORTED_MODULE_0__["observableArray"](items);
    var notifySubscribers = array.notifySubscribers;
    array.notifySubscribers = (valueToNotify, event) => {
        if (onChange) {
            for (var i = 0, len = onChange.length; i < len; i++) {
                onChange[i](valueToNotify, event);
            }
        }
        return notifySubscribers.call(array, valueToNotify, event);
    };
    return array;
}
function isWindow(obj) {
    return obj != null && obj === obj.window;
}
var class2type = {};
var hasOwn = class2type.hasOwnProperty;
['Boolean', 'Number', 'String', 'Function', 'Array', 'Date', 'RegExp', 'Object', 'Error'].forEach(name => class2type['[object ' + name + ']'] = name.toLowerCase());
function type(obj) {
    if (obj == null) {
        return obj + '';
    }
    return typeof obj === 'object' || typeof obj === 'function' ?
        class2type[class2type.toString.call(obj)] || 'object' :
        typeof obj;
}
function isNumeric(obj) {
    return !Array.isArray(obj) && (obj - parseFloat(obj) + 1) >= 0;
}
function isPlainObject(obj) {
    if (type(obj) !== 'object' || obj.nodeType || isWindow(obj)) {
        return false;
    }
    return !(obj.constructor && !hasOwn.call(obj.constructor.prototype, 'isPrototypeOf'));
}
function isEmptyObject(obj) {
    if ((typeof obj) === 'string') {
        return false;
    }
    return obj !== null && typeof obj === 'object' && Object.keys(obj).length === 0;
}
function isFunction(obj) {
    return type(obj) === 'function';
}
function extend(target, object1, ...objectN) {
    var options, name, src, copy, copyIsArray, clone, target = arguments[0] || {}, i = 1, length = arguments.length, deep = false;
    if (typeof target === 'boolean') {
        deep = target;
        target = arguments[i] || {};
        i++;
    }
    if (typeof target !== 'object' && !isFunction(target)) {
        target = {};
    }
    if (i === length) {
        target = this;
        i--;
    }
    for (; i < length; i++) {
        if ((options = arguments[i]) != null) {
            for (name in options) {
                src = target[name];
                copy = options[name];
                if (target === copy) {
                    continue;
                }
                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
                    if (copyIsArray) {
                        copyIsArray = false;
                        clone = src && Array.isArray(src) ? src : [];
                    }
                    else {
                        clone = src && isPlainObject(src) ? src : {};
                    }
                    target[name] = extend(deep, clone, copy);
                }
                else if (copy !== undefined) {
                    target[name] = copy;
                }
            }
        }
    }
    return target;
}
function assignObj(obj, objectProps) {
    return Object.assign(Object.create(Object.getPrototypeOf(obj)), objectProps || obj);
}


/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _defineProperty; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return _definePropertyByString; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return addDisposeCallback; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return createGlobalModuleVariableFunc; });
/* harmony import */ var knockout__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);
/* harmony import */ var knockout__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(knockout__WEBPACK_IMPORTED_MODULE_0__);

function _defineProperty(legacyObject, realObject, propertyName, newPropertyName) {
    delete legacyObject[propertyName];
    newPropertyName = newPropertyName || propertyName;
    Object.defineProperty(legacyObject, propertyName, {
        get: () => { return realObject[newPropertyName]; },
        set: (newVal) => { realObject[newPropertyName] = newVal; },
        configurable: true
    });
}
function _definePropertyByString(rootObject, ...objectPathes) {
    var getAndCreateObject = (path, createNew = true) => {
        var pathParts = path.split('.');
        var foundedObject = rootObject;
        for (var i = 0; i < pathParts.length - 1; i++) {
            if (!foundedObject[pathParts[i]] && createNew) {
                foundedObject[pathParts[i]] = {};
            }
            foundedObject = foundedObject[pathParts[i]];
        }
        return {
            object: foundedObject,
            propertyName: pathParts[pathParts.length - 1]
        };
    };
    var realObjectPath = objectPathes[objectPathes.length - 1];
    var realObject = getAndCreateObject(objectPathes[objectPathes.length - 1]);
    for (var i = 0; i < objectPathes.length - 1; i++) {
        ((legacyObjectPath, legacyObject) => {
            Object.defineProperty(legacyObject.object, legacyObject.propertyName, {
                get: () => {
                    console.warn('DevExpress.' + legacyObjectPath + ' is now deprecated and will be removed in future versions. Use DevExpress.' + realObjectPath + ' instead.');
                    return realObject.object[realObject.propertyName];
                },
                set: (newVal) => {
                    console.warn('DevExpress.' + legacyObjectPath + ' is now deprecated and will be removed in future versions. Use DevExpress.' + realObjectPath + ' instead.');
                    realObject.object[realObject.propertyName] = newVal;
                },
                configurable: true
            });
        })(objectPathes[i], getAndCreateObject(objectPathes[i]));
    }
}
function addDisposeCallback(element, callback) {
    var disposeCallback = () => {
        knockout__WEBPACK_IMPORTED_MODULE_0__["utils"].domNodeDisposal.removeDisposeCallback(element, disposeCallback);
        callback && callback();
        disposeCallback = null;
        callback = null;
    };
    knockout__WEBPACK_IMPORTED_MODULE_0__["utils"].domNodeDisposal.addDisposeCallback(element, disposeCallback);
}
function createGlobalModuleVariableFunc(defaultVal) {
    var currentValue = defaultVal;
    return (newVal) => {
        if (newVal !== undefined)
            currentValue = newVal;
        return currentValue;
    };
}


/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BinaryOperatorType", function() { return BinaryOperatorType; });
var BinaryOperatorType;
(function (BinaryOperatorType) {
    BinaryOperatorType[BinaryOperatorType["Equal"] = 0] = "Equal";
    BinaryOperatorType[BinaryOperatorType["NotEqual"] = 1] = "NotEqual";
    BinaryOperatorType[BinaryOperatorType["Greater"] = 2] = "Greater";
    BinaryOperatorType[BinaryOperatorType["Less"] = 3] = "Less";
    BinaryOperatorType[BinaryOperatorType["LessOrEqual"] = 4] = "LessOrEqual";
    BinaryOperatorType[BinaryOperatorType["GreaterOrEqual"] = 5] = "GreaterOrEqual";
    BinaryOperatorType[BinaryOperatorType["Like"] = 6] = "Like";
    BinaryOperatorType[BinaryOperatorType["BitwiseAnd"] = 7] = "BitwiseAnd";
    BinaryOperatorType[BinaryOperatorType["BitwiseOr"] = 8] = "BitwiseOr";
    BinaryOperatorType[BinaryOperatorType["BitwiseXor"] = 9] = "BitwiseXor";
    BinaryOperatorType[BinaryOperatorType["Divide"] = 10] = "Divide";
    BinaryOperatorType[BinaryOperatorType["Modulo"] = 11] = "Modulo";
    BinaryOperatorType[BinaryOperatorType["Multiply"] = 12] = "Multiply";
    BinaryOperatorType[BinaryOperatorType["Plus"] = 13] = "Plus";
    BinaryOperatorType[BinaryOperatorType["Minus"] = 14] = "Minus";
})(BinaryOperatorType || (BinaryOperatorType = {}));


/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return loadMessages; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return getLocalization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "l", function() { return removeWinSymbols; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Globalize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "i", function() { return messages; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return custom_localization_values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "o", function() { return selectPlaceholder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "j", function() { return noDataText; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "n", function() { return searchPlaceholder; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "m", function() { return resolveFromPromises; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return isCustomizedWithUpdateLocalizationMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return localizeWithUpdateLocalizationMethod; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return localize; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return formatDate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "k", function() { return parseDate; });
/* harmony import */ var devextreme_localization__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(27);
/* harmony import */ var devextreme_localization__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(devextreme_localization__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _serializer_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(2);
/* harmony import */ var _serializer_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(6);




function loadMessages(_messages) {
    Object(_serializer_utils__WEBPACK_IMPORTED_MODULE_3__[/* extend */ "b"])(messages, _messages);
}
function _processLocalization(id, _removeWinSymbols = removeWinSymbols) {
    var text = localize(id);
    if (text && _removeWinSymbols) {
        if (text.indexOf('&') !== -1 ||
            text.indexOf('<u>') !== -1 ||
            text.indexOf('</u>') !== -1) {
            var obj = {};
            obj[id] = text.replace('&', '').replace('<u>', '').replace('</u>', '');
            loadMessages(obj);
            return obj[id];
        }
    }
}
function _getLocalization(text) {
    return localize(text) || text;
}
function getLocalization(text, id = null, _removeWinSymbols = removeWinSymbols) {
    var _localizedText = id && localize(id) || _getLocalization(text);
    _localizedText = id && _processLocalization(id, _removeWinSymbols) || _localizedText;
    if (isCustomizedWithUpdateLocalizationMethod(_localizedText)) {
        text = _localizedText;
    }
    if (!isCustomizedWithUpdateLocalizationMethod(text)) {
        return _localizedText;
    }
    return _getLocalization(text);
}
var removeWinSymbols = true;
var Globalize = Globalize || window['Globalize'];
var messages = {};
var custom_localization_values = {};
function selectPlaceholder() {
    return getLocalization('Select...', 'AnalyticsCoreStringId.PropertyGrid_Editor_EmptyText');
}
function noDataText() {
    return getLocalization('No data to display', 'AnalyticsCoreStringId.DataPreview_Empty');
}
function searchPlaceholder() {
    return getLocalization('Enter text to search...', 'AnalyticsCoreStringId.QueryBuilder_SearchBox_EmptyText');
}
function resolveFromPromises(promises, createModel) {
    var deferred = jquery__WEBPACK_IMPORTED_MODULE_1__["Deferred"]();
    if (promises.length > 0) {
        jquery__WEBPACK_IMPORTED_MODULE_1__["when"](...promises).done((...messages) => {
            messages.forEach(x => loadMessages(x[0]));
        }).always(() => deferred.resolve(createModel()));
    }
    else {
        deferred.resolve(createModel());
    }
    return deferred;
}
function isCustomizedWithUpdateLocalizationMethod(text) {
    return !!custom_localization_values[text];
}
function localizeWithUpdateLocalizationMethod(oldText) {
    return isCustomizedWithUpdateLocalizationMethod(oldText) ? getLocalization(oldText) : false;
}
function localize(val) {
    return messages[val];
}
function formatDate(val) {
    return devextreme_localization__WEBPACK_IMPORTED_MODULE_0__["formatDate"](val, 'shortDate');
}
function parseDate(val, useDefault = true, format) {
    if (!useDefault)
        return format ? devextreme_localization__WEBPACK_IMPORTED_MODULE_0__["parseDate"](val, format) : devextreme_localization__WEBPACK_IMPORTED_MODULE_0__["parseDate"](val, undefined);
    if (val) {
        if (val instanceof Date)
            return val;
        return Object(_serializer_utils__WEBPACK_IMPORTED_MODULE_2__[/* deserializeDate */ "c"])(val);
    }
    return null;
}


/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UnaryOperatorType", function() { return UnaryOperatorType; });
var UnaryOperatorType;
(function (UnaryOperatorType) {
    UnaryOperatorType[UnaryOperatorType["Minus"] = 0] = "Minus";
    UnaryOperatorType[UnaryOperatorType["Plus"] = 1] = "Plus";
    UnaryOperatorType[UnaryOperatorType["BitwiseNot"] = 2] = "BitwiseNot";
    UnaryOperatorType[UnaryOperatorType["Not"] = 3] = "Not";
    UnaryOperatorType[UnaryOperatorType["IsNull"] = 4] = "IsNull";
})(UnaryOperatorType || (UnaryOperatorType = {}));


/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupOperatorType", function() { return GroupOperatorType; });
var GroupOperatorType;
(function (GroupOperatorType) {
    GroupOperatorType[GroupOperatorType["And"] = 0] = "And";
    GroupOperatorType[GroupOperatorType["Or"] = 1] = "Or";
})(GroupOperatorType || (GroupOperatorType = {}));


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return CriteriaOperator; });
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _options_unary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);


class CriteriaOperator {
    constructor() {
        this.type = 'default';
        this.operands = null;
        this.changeValue = (operand, reverse, location) => {
            var result = reverse ? _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_0__["criteriaCreator"].process('unary', { operatorType: _options_unary__WEBPACK_IMPORTED_MODULE_1__["UnaryOperatorType"].Minus, operator: operand }) : operand;
            if (location.index !== null) {
                this[location.name][location.index] = result;
            }
            else {
                this[location.name] = result;
            }
            return result;
        };
        this.changeValueType = (type, location) => {
            var result = new type();
            if (location.index !== null) {
                this[location.name][location.index] = result;
            }
            else {
                this[location.name] = result;
            }
            return result;
        };
        this.assignLeftPart = (operator) => void 0;
        this.assignRightPart = (operator) => void 0;
        this.assignType = (type) => {
            this.operatorType = type;
        };
    }
    get displayType() {
        return this.operatorType;
    }
    get enumType() {
        return null;
    }
    get leftPart() { return null; }
    get rightPart() { return null; }
    assignFrom(criteriaOperator, incorrectSpecificsForAggregate = false, needAssignRightPart = true) {
        var operator = criteriaOperator;
        if (criteriaOperator.type === 'unary' && !Array.isArray(criteriaOperator.leftPart) && criteriaOperator.leftPart.type != 'property') {
            operator = criteriaOperator.leftPart;
        }
        if (incorrectSpecificsForAggregate) {
            this.assignLeftPart(operator.leftPart);
        }
        else {
            this.assignLeftPart(operator);
        }
        if (operator.rightPart) {
            needAssignRightPart && this.assignRightPart(operator);
        }
    }
    children() {
        var operands = [];
        if (this.leftPart)
            operands.push.apply(operands, Array.isArray(this.leftPart) ? this.leftPart : [this.leftPart]);
        if (this.rightPart)
            operands.push.apply(operands, Array.isArray(this.rightPart) ? this.rightPart : [this.rightPart]);
        return operands;
    }
    accept(visitor) { throw 'Not implemented'; }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_0__["criteriaCreator"].register('default', (options) => new CriteriaOperator());


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OperandProperty; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


class OperandProperty extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(propertyName = '', startColumn = -1, startLine = -1, originalPropertyLength = 0, circumflex = false) {
        super();
        this.type = 'property';
        this.propertyName = propertyName;
        this.originalPropertyLength = originalPropertyLength;
        this.startPosition = { column: startColumn, line: startLine };
        this.circumflex = circumflex;
    }
    get displayType() {
        return '[' + this.propertyName + ']';
    }
    accept(visitor) {
        return visitor.visitOperandProperty
            ? visitor.visitOperandProperty(this)
            : _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('property', { propertyName: this.propertyName });
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].register('property', (options) => {
    return new OperandProperty(options.propertyName, options.startColumn, options.startLine, options.originalPropertyLength, options.circumflex);
});


/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AggregateOperand; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _unary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(17);
/* harmony import */ var _options_binary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _options_unary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _options_group__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(11);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(4);






class AggregateOperand extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(property, aggregatedExpression, aggregateType, condition) {
        super();
        this.change = (operationType, item) => {
            var operator = null;
            if (operationType.type === _options_group__WEBPACK_IMPORTED_MODULE_4__["GroupOperatorType"]) {
                operator = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].changeByType(operationType);
                if (operationType.type !== operator.enumType) {
                    operator.leftPart.assignFrom(item);
                }
                else {
                    operator.assignFrom(item);
                }
                this.condition = operator;
            }
            return operator;
        };
        this.assignLeftPart = (criteriaOperator) => {
            if (criteriaOperator.leftPart instanceof AggregateOperand) {
                this.assignFrom(criteriaOperator.leftPart);
            }
            else {
                if (criteriaOperator instanceof AggregateOperand) {
                    this.property = criteriaOperator.property;
                    if (this.aggregatedExpression && criteriaOperator.aggregatedExpression) {
                        this.aggregatedExpression = criteriaOperator.aggregatedExpression;
                    }
                    this.condition = criteriaOperator.condition;
                }
                else {
                    this.property = criteriaOperator.leftPart;
                }
            }
        };
        this.type = 'aggregate';
        this.property = property;
        if (!!condition && condition.type === 'group') {
            this.condition = condition;
        }
        else {
            if (condition instanceof _unary__WEBPACK_IMPORTED_MODULE_1__[/* UnaryOperator */ "a"] && condition.operatorType === _options_unary__WEBPACK_IMPORTED_MODULE_3__["UnaryOperatorType"].Not) {
                if (condition.operand.type === 'group') {
                    this.condition = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('unary', { operator: condition.operand, operatorType: _options_unary__WEBPACK_IMPORTED_MODULE_3__["UnaryOperatorType"].Not });
                }
                else {
                    this.condition = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('unary', {
                        operator: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('group', {
                            operation: _options_group__WEBPACK_IMPORTED_MODULE_4__["GroupOperatorType"].And,
                            operands: condition.operand ? [condition.operand] : []
                        }),
                        operatorType: _options_unary__WEBPACK_IMPORTED_MODULE_3__["UnaryOperatorType"].Not
                    });
                }
            }
            else {
                this.condition = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('group', {
                    operation: _options_group__WEBPACK_IMPORTED_MODULE_4__["GroupOperatorType"].And,
                    operands: condition ? [condition] : []
                });
            }
        }
        this.operatorType = aggregateType;
        this.aggregatedExpression = aggregatedExpression;
    }
    get displayType() {
        return this.operatorType;
    }
    get enumType() {
        return AggregateOperand;
    }
    get leftPart() {
        return this.property;
    }
    children() {
        var operands = [];
        this.condition && operands.push(this.condition);
        this.aggregatedExpression && operands.push(this.aggregatedExpression);
        return operands;
    }
    accept(visitor) {
        return visitor.visitAggregateOperand
            ? visitor.visitAggregateOperand(this)
            : _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('aggregate', {
                aggregateType: this.operatorType,
                aggregatedExpression: this.aggregatedExpression && this.aggregatedExpression.accept(visitor),
                condition: this.condition && this.condition.accept(visitor),
                property: this.property && this.property.accept(visitor)
            });
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].register('aggregate', (options) => {
    return new AggregateOperand(options.property, options.aggregatedExpression, options.aggregateType, options.condition);
}, (operatorType) => {
    var options = {
        property: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('property'),
        aggregateType: operatorType.value,
        aggregatedExpression: null,
        condition: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('group', { operation: _options_group__WEBPACK_IMPORTED_MODULE_4__["GroupOperatorType"].And, operands: [] })
    };
    if (operatorType.value === 'Exists') {
        return _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('aggregate', options);
    }
    else {
        if (operatorType.value !== 'Count') {
            options.aggregatedExpression = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('property');
        }
        return _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('binary', {
            left: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('aggregate', options),
            right: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_5__["criteriaCreator"].process('value', { value: undefined }),
            operatorType: _options_binary__WEBPACK_IMPORTED_MODULE_2__["BinaryOperatorType"].Equal
        });
    }
});


/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return propertiesGridEditorsPaddingLeft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return defaultFontSerialization; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return validateGuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return validateNullableGuid; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return guidValidationRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return guidRequiredValidationRules; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return requiredValidationRules; });
/* harmony import */ var _serializer_internal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(7);
/* harmony import */ var _localization_localization_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(3);


var propertiesGridEditorsPaddingLeft = Object(_serializer_internal__WEBPACK_IMPORTED_MODULE_0__[/* createGlobalModuleVariableFunc */ "d"])(19);
var defaultFontSerialization = Object(_serializer_internal__WEBPACK_IMPORTED_MODULE_0__[/* createGlobalModuleVariableFunc */ "d"])('Times New Roman, 9.75pt');
function RegexGuid(guid) {
    return (/^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/.test(guid)
        || /^\{[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\}$/.test(guid)
        || /^\([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}\)$/.test(guid)
        || /^[0-9a-fA-F]{32}$/.test(guid));
}
function validateGuid(guid) {
    return guid && RegexGuid(guid);
}
function validateNullableGuid(guid) {
    return !guid || RegexGuid(guid);
}
var guidValidationMessage = () => Object(_localization_localization_utils__WEBPACK_IMPORTED_MODULE_1__[/* getLocalization */ "c"])('Guid is required and should have a valid format.', 'AnalyticsCoreStringId.GuidIsRequired_Error');
var guidValidationRules = [{
        type: 'custom',
        validationCallback: (options) => { return validateNullableGuid(options.value); },
        get message() {
            return guidValidationMessage();
        }
    }];
var guidRequiredValidationRules = [{
        type: 'required',
        get message() {
            return guidValidationMessage();
        }
    }];
var requiredValidationRule = {
    type: 'required',
    get message() {
        return Object(_localization_localization_utils__WEBPACK_IMPORTED_MODULE_1__[/* getLocalization */ "c"])('The value cannot be empty', 'AnalyticsCoreStringId.ParametersPanel_DateTimeValueValidationError');
    }
};
var requiredValidationRules = [requiredValidationRule];


/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GroupOperator", function() { return GroupOperator; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _options_group__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(11);
/* harmony import */ var _options_binary__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(8);




class GroupOperator extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(operation, operands) {
        super();
        this.create = (isGroup, property, specifics) => {
            var operator = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('binary', {
                left: property,
                right: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value', { value: '' }),
                operatorType: _options_binary__WEBPACK_IMPORTED_MODULE_3__["BinaryOperatorType"].Equal
            });
            if (isGroup) {
                operator = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('group', { operation: _options_group__WEBPACK_IMPORTED_MODULE_2__["GroupOperatorType"].And, operands: [] });
            }
            else if (specifics && specifics === 'list') {
                operator = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('aggregate', {
                    aggregateType: 'Exisits',
                    property: property,
                    aggregatedExpression: null,
                    condition: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('group', {
                        operands: [],
                        operation: _options_group__WEBPACK_IMPORTED_MODULE_2__["GroupOperatorType"].And
                    })
                });
            }
            this.operands.push(operator);
            return this.operands[this.operands.indexOf(operator)];
        };
        this.change = (operationType, item, incorrectSpecificsForAggregate = false) => {
            var position = this.operands.indexOf(item);
            if (position !== -1) {
                var operator = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].changeByType(operationType);
                if (operationType.type !== operator.enumType && !Array.isArray(operator.leftPart)) {
                    operator.leftPart.assignFrom(item, incorrectSpecificsForAggregate, !operationType.emptyRightPart);
                }
                else {
                    operator.assignFrom(item, incorrectSpecificsForAggregate, !operationType.emptyRightPart);
                }
                this.operands[position] = operator;
            }
            else {
                throw Error('dont have this element in operands collection');
            }
            item = null;
            return this.operands[position];
        };
        this.remove = (operator) => {
            this.operands.splice(this.operands.indexOf(operator), 1);
        };
        this.assignLeftPart = (operator) => {
            this.operands = operator.operands;
        };
        this.operands = [];
        this.type = 'group';
        this.operatorType = operation;
        operands = operands || [_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('default'), _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('default')];
        operands.forEach(operand => this.operands.push(operand));
    }
    static combine(operation, operands) {
        var combinedOperands = [];
        (operands || []).forEach(operand => {
            if (operand.type === 'group' && operand.operatorType === operation) {
                combinedOperands.push.apply(combinedOperands, operand.operands);
            }
            else {
                combinedOperands.push(operand);
            }
        });
        if (combinedOperands.length === 1) {
            return combinedOperands[0];
        }
        return _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('group', { operands: combinedOperands, operation: operation });
    }
    children() {
        return this.operands;
    }
    get displayType() {
        return _options_group__WEBPACK_IMPORTED_MODULE_2__["GroupOperatorType"][this.operatorType];
    }
    get enumType() {
        return _options_group__WEBPACK_IMPORTED_MODULE_2__["GroupOperatorType"];
    }
    accept(visitor) {
        return visitor.visitGroupOperator
            ? visitor.visitGroupOperator(this)
            : new GroupOperator(this.operatorType, this.operands && this.operands.map(op => op.accept(visitor)));
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].register('group', (options) => {
    return new GroupOperator(options.operation, options.operands);
}, (operatorType) => _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('group', {
    operation: operatorType.value,
    operands: []
}));


/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return UnaryOperator; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _options_unary__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(10);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(4);



class UnaryOperator extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(operatorType, operand) {
        super();
        this.type = 'unary';
        this.operand = operand || _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_2__["criteriaCreator"].process('default');
        this.operatorType = operatorType;
    }
    get leftPart() {
        return this.operand;
    }
    assignFrom(criteriaOperator) {
        if (this.operatorType === _options_unary__WEBPACK_IMPORTED_MODULE_1__["UnaryOperatorType"].Not) {
            if (criteriaOperator instanceof UnaryOperator) {
                this.operand.assignFrom(criteriaOperator.operand);
            }
            else {
                this.operand.assignFrom(criteriaOperator);
            }
        }
        else {
            if (criteriaOperator instanceof UnaryOperator) {
                this.operand = criteriaOperator.operand.leftPart;
            }
            else {
                this.operand = (criteriaOperator.leftPart || criteriaOperator);
            }
        }
    }
    get displayType() {
        return _options_unary__WEBPACK_IMPORTED_MODULE_1__["UnaryOperatorType"][this.operatorType];
    }
    get enumType() {
        return _options_unary__WEBPACK_IMPORTED_MODULE_1__["UnaryOperatorType"];
    }
    accept(visitor) {
        return visitor.visitUnaryOperator
            ? visitor.visitUnaryOperator(this)
            : new UnaryOperator(this.operatorType, this.operand && this.operand.accept(visitor));
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_2__["criteriaCreator"].register('unary', (options) => {
    return new UnaryOperator(options.operatorType, options.operator);
}, (operatorType) => _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_2__["criteriaCreator"].process('unary', {
    operatorType: operatorType.value,
    operator: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_2__["criteriaCreator"].process('property')
}));


/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OperandValue; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _property_grid_widgets_internal_internal__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(15);
/* harmony import */ var _property_grid_localization_localization__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(9);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);




class OperandValue extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(value) {
        super();
        this.type = 'value';
        var result = value !== null && value !== undefined ? value : '';
        var isGuid = Object(_property_grid_widgets_internal_internal__WEBPACK_IMPORTED_MODULE_1__[/* validateGuid */ "f"])(value);
        if (value && value['length'] && ((value[0] === "'" && value[value.length - 1] === "'") || isGuid)) {
            this.specifics = 'string';
            if (isGuid && value[0] === '{' && value[value.length - 1] === '}')
                this.specifics = 'guid';
            result = this._processStringValue(value);
        }
        else if (value && value['length'] && value[0] === '#' && value[value.length - 1] === '#') {
            result = value.slice(1, value.length - 1);
            result = Object(_property_grid_localization_localization__WEBPACK_IMPORTED_MODULE_2__[/* parseDate */ "k"])(result);
            if (!result) {
                result = Object(_property_grid_localization_localization__WEBPACK_IMPORTED_MODULE_2__[/* parseDate */ "k"])(value.slice(1, value.length - 1));
            }
        }
        else if (String(value).toLowerCase() === 'true' || String(value).toLowerCase() === 'false') {
            result = String(value).toLowerCase() === 'true' ? 'True' : 'False';
        }
        this.value = result;
    }
    _processStringValue(value) {
        var result = value.slice(1, value.length - 1);
        if (result.indexOf("''") !== -1)
            result = result.replace("''", "'");
        return result;
    }
    get displayType() {
        return this.value || '?';
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].register('value', (options) => {
    return new OperandValue(options.value);
});


/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return InOperator; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


class InOperator extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(criteriaOperator, operands) {
        super();
        this.assignLeftPart = (criteriaOperator) => {
            this.criteriaOperator = criteriaOperator.leftPart;
        };
        this.assignRightPart = (criteriaOperator) => {
            this.operands = [].concat(criteriaOperator.rightPart);
        };
        this.operatorType = 'In';
        this.type = 'in';
        this.operands = [];
        this.criteriaOperator = criteriaOperator || _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('default');
        (operands || []).forEach(operand => this.operands.push(operand));
    }
    get leftPart() {
        return this.criteriaOperator;
    }
    get rightPart() {
        return this.operands;
    }
    get displayType() {
        return 'In';
    }
    get enumType() {
        return InOperator;
    }
    accept(visitor) {
        return visitor.visitInOperator
            ? visitor.visitInOperator(this)
            : new InOperator(this.criteriaOperator && this.criteriaOperator.accept(visitor), this.operands && this.operands.map(op => op.accept(visitor)));
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].register('in', (options) => {
    return new InOperator(options.criteriaOperator, options.operands);
}, (operatorType) => _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('in', {
    criteriaOperator: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('property'),
    operands: [_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value')]
}));


/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return OperandParameter; });
/* harmony import */ var _value__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(18);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


class OperandParameter extends _value__WEBPACK_IMPORTED_MODULE_0__[/* OperandValue */ "a"] {
    constructor(parameterName, value) {
        super(value);
        this.type = 'parameter';
        this.parameterName = parameterName || '';
    }
    get displayType() {
        return '?' + this.parameterName;
    }
    accept(visitor) {
        return visitor.visitOperandParameter
            ? visitor.visitOperandParameter(this)
            : new OperandParameter(this.parameterName, this.value);
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].register('parameter', (options) => {
    return new OperandParameter(options.parameterName, options.value);
});


/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxScrollView;

/***/ }),
/* 22 */
/***/ (function(module, exports) {

module.exports = DevExpress.registerComponent;

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return operatorTokens; });
var operatorTokens = {
    'Plus': '+',
    'Minus': '-',
    'Equal': '=',
    'NotEqual': '<>',
    'Greater': '>',
    'Less': '<',
    'LessOrEqual': '<=',
    'GreaterOrEqual': '>='
};


/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BetweenOperator; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


class BetweenOperator extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(property, begin, end) {
        super();
        this.assignLeftPart = (criteriaOperator) => {
            this.property = criteriaOperator.leftPart;
        };
        this.assignRightPart = (criteriaOperator) => {
            if (Array.isArray(criteriaOperator.rightPart)) {
                if (criteriaOperator.rightPart.length) {
                    this.begin = criteriaOperator.rightPart[0];
                    this.end = criteriaOperator.rightPart.length > 1 ? criteriaOperator.rightPart[1] : _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value');
                }
                else {
                    this.begin = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value');
                    this.end = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value');
                }
            }
            else {
                this.begin = criteriaOperator.rightPart;
                this.end = _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value');
            }
        };
        this.operatorType = 'Between';
        this.type = 'between';
        this.property = property;
        this.begin = begin || _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value');
        this.end = end || _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value');
    }
    get leftPart() {
        return this.property;
    }
    get rightPart() {
        return [this.begin, this.end];
    }
    get displayType() {
        return 'Between';
    }
    get enumType() {
        return BetweenOperator;
    }
    accept(visitor) {
        return visitor.visitBetweenOperator
            ? visitor.visitBetweenOperator(this)
            : new BetweenOperator(this.property && this.property.accept(visitor), this.begin && this.begin.accept(visitor), this.end && this.end.accept(visitor));
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].register('between', (options) => {
    return new BetweenOperator(options.property, options.begin, options.end);
}, (operatorType) => (_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('between', {
    property: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('property'),
    begin: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value'),
    end: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('value')
})));


/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ConstantValue; });
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(4);
/* harmony import */ var _value__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(18);


class ConstantValue extends _value__WEBPACK_IMPORTED_MODULE_1__[/* OperandValue */ "a"] {
    constructor(value) {
        super(value);
        this.type = 'value';
    }
    accept(visitor) {
        return visitor.visitConstantValue
            ? visitor.visitConstantValue(this)
            : new ConstantValue(this.value);
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_0__["criteriaCreator"].register('const', (options) => new ConstantValue((options === null || options === void 0 ? void 0 : options.value) || null));


/***/ }),
/* 26 */
/***/ (function(module, exports) {

module.exports = DevExpress.config;

/***/ }),
/* 27 */
/***/ (function(module, exports) {

module.exports = DevExpress.localization;

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return FunctionOperator; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_operatorTokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _options_function__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(5);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);




class FunctionOperator extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(operatorType, operands) {
        super();
        this.toString = (reverse) => {
            var result = (_utils_operatorTokens__WEBPACK_IMPORTED_MODULE_1__[/* operatorTokens */ "a"][this.displayType] || this.displayType) + '(' + this.operands.map((operand) => {
                return operand.toString();
            }).join(', ') + ')';
            return reverse ? 'Not ' + result : result;
        };
        this.assignLeftPart = (criteriaOperator) => {
            this.operands = [criteriaOperator.leftPart];
        };
        this.assignRightPart = (criteriaOperator) => {
            if (Array.isArray(criteriaOperator.rightPart)) {
                if (criteriaOperator.rightPart.length) {
                    this.operands.push(criteriaOperator.rightPart[0]);
                }
                else {
                    this.operands.push(_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('value'));
                }
            }
            else {
                this.operands.push(criteriaOperator.rightPart);
            }
        };
        this.operands = [];
        this.type = 'function';
        this.operatorType = operatorType;
        operands = operands || [_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('default')];
        operands.forEach(operand => this.operands.push(operand));
    }
    get leftPart() {
        return this.operands[0];
    }
    get rightPart() {
        return this.operands.filter((_, index) => { return index !== 0; });
    }
    get displayType() {
        return _options_function__WEBPACK_IMPORTED_MODULE_2__["FunctionOperatorType"][this.operatorType] || this.operatorType.toString();
    }
    get enumType() {
        return _options_function__WEBPACK_IMPORTED_MODULE_2__["FunctionOperatorType"];
    }
    accept(visitor) {
        return visitor.visitFunctionOperator
            ? visitor.visitFunctionOperator(this)
            : new FunctionOperator(this.operatorType, this.operands && this.operands.map(op => op.accept(visitor)));
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].register('function', (options) => {
    return new FunctionOperator(options.operatorType, options.operands);
}, (operatorType) => new FunctionOperator(operatorType.value, [_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('property')]));


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var criteriaCreator = __webpack_require__(4).criteriaCreator;
var BinaryOperatorType = __webpack_require__(8).BinaryOperatorType;
var UnaryOperatorType = __webpack_require__(10).UnaryOperatorType;
var GroupOperator = __webpack_require__(16).GroupOperator;
var GroupOperatorType = __webpack_require__(11).GroupOperatorType;
var FunctionOperatorType = __webpack_require__(5).FunctionOperatorType;
var JoinOperand = __webpack_require__(33).JoinOperand;
/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var criteriaparser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,6],$V2=[1,23],$V3=[1,8],$V4=[1,9],$V5=[1,10],$V6=[1,11],$V7=[1,18],$V8=[1,12],$V9=[1,13],$Va=[1,14],$Vb=[1,15],$Vc=[1,16],$Vd=[1,17],$Ve=[1,20],$Vf=[1,22],$Vg=[1,21],$Vh=[1,25],$Vi=[1,26],$Vj=[1,27],$Vk=[1,28],$Vl=[1,29],$Vm=[1,30],$Vn=[1,31],$Vo=[1,32],$Vp=[1,33],$Vq=[1,34],$Vr=[1,35],$Vs=[1,36],$Vt=[1,37],$Vu=[1,38],$Vv=[1,39],$Vw=[1,40],$Vx=[1,41],$Vy=[1,42],$Vz=[1,43],$VA=[1,44],$VB=[1,45],$VC=[5,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,28,30,31,33,35,36,45],$VD=[5,9,10,11,12,13,14,15,16,19,20,21,22,23,24,25,26,27,28,30,31,33,35,36,44,45,46,50,51,52],$VE=[1,53],$VF=[5,14,15,16,19,20,21,22,23,24,25,26,27,28,30,31,33,35,36,45],$VG=[5,27,28,30,36,45],$VH=[1,92],$VI=[1,93],$VJ=[5,11,12,14,15,16,19,20,21,22,23,24,25,26,27,28,30,31,33,35,36,45],$VK=[5,19,20,25,26,27,28,30,31,36,45],$VL=[5,19,20,21,22,23,24,25,26,27,28,30,31,36,45],$VM=[30,36],$VN=[1,102],$VO=[1,104];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"expressions":3,"exp":4,"EOF":5,"const":6,"propertyWithAgg":7,"parameter":8,"*":9,"/":10,"+":11,"-":12,"%":13,"|":14,"&":15,"^":16,"!":17,"~":18,"OP_EQ":19,"OP_NE":20,"OP_GT":21,"OP_LT":22,"OP_GE":23,"OP_LE":24,"OP_LIKE":25,"NOT":26,"AND":27,"OR":28,"(":29,")":30,"IS":31,"NULL":32,"OP_IN":33,"arguments":34,"OP_BETWEEN":35,",":36,"NAME_SOFT":37,"STRING":38,"NUMBER":39,"OBJECT":40,"BOOLEAN":41,"GUID":42,"property":43,"[":44,"]":45,".":46,"agg":47,"Count":48,"Exists":49,"FIELD_END":50,"CH":51,"ESC_CH":52,"FIELD_START":53,"?":54,"commaseparated":55,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"*",10:"/",11:"+",12:"-",13:"%",14:"|",15:"&",16:"^",17:"!",18:"~",19:"OP_EQ",20:"OP_NE",21:"OP_GT",22:"OP_LT",23:"OP_GE",24:"OP_LE",25:"OP_LIKE",26:"NOT",27:"AND",28:"OR",29:"(",30:")",31:"IS",32:"NULL",33:"OP_IN",35:"OP_BETWEEN",36:",",37:"NAME_SOFT",38:"STRING",39:"NUMBER",40:"OBJECT",41:"BOOLEAN",42:"GUID",44:"[",45:"]",46:".",48:"Count",49:"Exists",50:"FIELD_END",51:"CH",52:"ESC_CH",53:"FIELD_START",54:"?"},
productions_: [0,[3,2],[4,1],[4,1],[4,1],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,2],[4,2],[4,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,3],[4,4],[4,2],[4,3],[4,3],[4,3],[4,3],[4,4],[4,3],[4,7],[4,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,6],[7,5],[7,3],[7,4],[7,3],[7,1],[7,4],[47,3],[47,1],[47,1],[47,4],[43,2],[43,2],[43,2],[43,3],[43,3],[43,1],[43,1],[43,1],[8,2],[8,1],[34,2],[34,3],[55,1],[55,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:
 this.$ = criteriaCreator.process("const", { value: $$[$0] }); 
break;
case 3: case 4: case 34: case 35: case 36: case 37: case 38:
 this.$ = $$[$0]; 
break;
case 5:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Multiply }); 
break;
case 6:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Divide }); 
break;
case 7:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Plus }); 
break;
case 8:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Minus }); 
break;
case 9:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Modulo }); 
break;
case 10:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.BitwiseOr }); 
break;
case 11:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.BitwiseAnd }); 
break;
case 12:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.BitwiseXor }); 
break;
case 13:
 this.$ = criteriaCreator.process("unary", { operatorType: UnaryOperatorType.Minus, operator: $$[$0] }); 
break;
case 14:
 this.$ = criteriaCreator.process("unary", { operatorType: UnaryOperatorType.Plus, operator: $$[$0] }); 
break;
case 15: case 25:
 this.$ = criteriaCreator.process("unary", { operatorType: UnaryOperatorType.Not, operator: $$[$0] }); 
break;
case 16:
 this.$ = criteriaCreator.process("unary", { operatorType: UnaryOperatorType.BitwiseNot, operator: $$[$0] }); 
break;
case 17:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Equal }); 
break;
case 18:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.NotEqual }); 
break;
case 19:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Greater }); 
break;
case 20:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Less }); 
break;
case 21:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.GreaterOrEqual }); 
break;
case 22:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.LessOrEqual }); 
break;
case 23:
 this.$ = criteriaCreator.process("binary",  { left: $$[$0-2], right: $$[$0], operatorType: BinaryOperatorType.Like }); 
break;
case 24:

            this.$ = criteriaCreator.process("unary", { 
                operatorType: UnaryOperatorType.Not, 
                operator: criteriaCreator.process("binary", { left: $$[$0-3], right: $$[$0], operatorType: BinaryOperatorType.Like }) 
            });
        
break;
case 26:
 this.$ = GroupOperator.combine(GroupOperatorType.And, [$$[$0-2], $$[$0]]); 
break;
case 27:
 this.$ = GroupOperator.combine(GroupOperatorType.Or, [$$[$0-2], $$[$0]]); 
break;
case 28: case 51: case 62:
 this.$ = $$[$0-1]; 
break;
case 29:
 this.$ = criteriaCreator.process("unary", { operatorType: UnaryOperatorType.IsNull, operator: $$[$0-2] }); 
break;
case 30:
 
            this.$ = criteriaCreator.process("unary", { 
                operatorType: UnaryOperatorType.Not,
                operator: criteriaCreator.process("unary", { operatorType: UnaryOperatorType.IsNull, operator: $$[$0-3] })
            }); 
        
break;
case 31:
 this.$ = criteriaCreator.process("in", { criteriaOperator: $$[$0-2], operands: $$[$0] }); 
break;
case 32:
 this.$ = criteriaCreator.process("between", { property: $$[$0-6], begin: $$[$0-3], end: $$[$0-1] }); 
break;
case 33:
 this.$ = criteriaCreator.process("function", { operatorType: FunctionOperatorType[$$[$0-1]] || $$[$0-1], operands: $$[$0] }); 
break;
case 39:
 this.$ = null; 
break;
case 40:
 
            this.$ = JoinOperand.joinOrAggregate(
                criteriaCreator.process("property", { propertyName: $$[$0-5].name, startColumn: $$[$0-5].col, circumflex: $$[$0-5].circumflex, startLine: $$[$0-5].line, originalPropertyLength: _$[$0-5].last_column - _$[$0-5].first_column + 1 }), 
                $$[$0-3], $$[$0].type, $$[$0].expr
            );
        
break;
case 41:
 
            this.$ = JoinOperand.joinOrAggregate(
                criteriaCreator.process("property", { propertyName: $$[$0-4].name, startColumn: $$[$0-4].col, circumflex: $$[$0-4].circumflex, startLine: $$[$0-4].line, originalPropertyLength: _$[$0-4].last_column - _$[$0-4].first_column + 1 }), 
                null, $$[$0].type, $$[$0].expr
            );
        
break;
case 42:
 
            this.$ = JoinOperand.joinOrAggregate(
                criteriaCreator.process("property", { propertyName: $$[$0-2].name, startColumn: $$[$0-2].col, circumflex: $$[$0-2].circumflex, startLine: $$[$0-2].line, originalPropertyLength: _$[$0-2].last_column - _$[$0-2].first_column }), 
                null, $$[$0].type, $$[$0].expr
            );
        
break;
case 43:
 
            this.$ = JoinOperand.joinOrAggregate(
                criteriaCreator.process("property", { propertyName: $$[$0-3].name, startColumn: $$[$0-3].col, circumflex: $$[$0-3].circumflex, startLine: $$[$0-3].line, originalPropertyLength: _$[$0-3].last_column - _$[$0-3].first_column + 1 }), 
                $$[$0-1], 'Exists', null
            );
        
break;
case 44:
 
            this.$ = JoinOperand.joinOrAggregate(
                criteriaCreator.process("property", { propertyName: $$[$0-2].name, startColumn: $$[$0-2].col, circumflex: $$[$0-2].circumflex, startLine: $$[$0-2].line, originalPropertyLength: _$[$0-2].last_column - _$[$0-2].first_column + 1 }), 
                null, 'Exists', null);
        
break;
case 45:
 
            this.$ = criteriaCreator.process("property", { propertyName: $$[$0].name, startColumn: $$[$0].col, circumflex: $$[$0].circumflex, startLine: $$[$0].line, originalPropertyLength: _$[$0].last_column - _$[$0].first_column });
        
break;
case 46:
 
            this.$ = JoinOperand.joinOrAggregate(
                criteriaCreator.process("property", { }), 
                null, $$[$0].type, $$[$0].expr
            ); 
        
break;
case 47:
 this.$ = { type:  $$[$0-2]  };  
break;
case 48:
 this.$ = { type: 'Count' }; 
break;
case 49:
 this.$ = { type: 'Exists' }; 
break;
case 50:
 this.$ = { type:  $$[$0-3], expr: $$[$0-1] }; 
break;
case 52:
 this.$ = { name: $$[$0-1].name + $$[$0], line: $$[$0-1].line, circumflex: $$[$0-1].circumflex, col: $$[$0-1].col }; 
break;
case 53:
 this.$ = { name: $$[$0-1].name + $$[$0].substr(1), line: $$[$0-1].line, circumflex: $$[$0-1].circumflex, col: $$[$0-1].col }; 
break;
case 54:
 
        if($$[$0-2].circumflex && $$[$0-2].started) {
            this.$ = { name: '', line: $$[$0-2].line, circumflex: $$[$0-2].circumflex, col: $$[$0-2].col + 2 }; 
        } else 
            this.$ = { name: $$[$0-2].name + '.', line: $$[$0-2].line, circumflex: $$[$0-2].circumflex, col: $$[$0-2].col }; 
    
break;
case 55:
 
        if($$[$0-2].circumflex && $$[$0-2].started){ 
            this.$ = { name: $$[$0], line: $$[$0-2].line, circumflex: $$[$0-2].circumflex, col: $$[$0-2].col + 1 }; 
        } else 
            this.$ = { name: $$[$0-2].name + '.' + $$[$0], line: $$[$0-2].line, circumflex: $$[$0-2].circumflex, col: $$[$0-2].col }; 
    
break;
case 56:
 this.$ = { name: "", line: _$[$0].first_line - 1, col: _$[$0].first_column + 1 }; 
break;
case 57:
 this.$ = { name: $$[$0], line: _$[$0].first_line - 1, col: _$[$0].first_column }; 
break;
case 58:
 this.$ = { circumflex: true, started: true, name: "", line: _$[$0].first_line - 1, col: _$[$0].first_column + 1 }; 
break;
case 59:
 this.$ = criteriaCreator.process("parameter", { parameterName: $$[$0] }); 
break;
case 60:
 this.$ = criteriaCreator.process("value", { }); 
break;
case 61:
 this.$ = []; 
break;
case 63:
 this.$ = [$$[$0]]; 
break;
case 64:
 this.$ = $$[$0-2].concat($$[$0]); 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{1:[3]},{5:[1,24],9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,31:$Vz,33:$VA,35:$VB},o($VC,[2,2]),o($VC,[2,3]),o($VC,[2,4]),{4:46,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:47,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:48,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:49,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:50,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:51,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},o($VD,[2,57],{34:52,29:$VE}),o($VC,[2,34]),o($VC,[2,35]),o($VC,[2,36]),o($VC,[2,37]),o($VC,[2,38]),o($VC,[2,39]),o($VC,[2,45],{44:[1,54],46:[1,55],50:[1,56],51:[1,57],52:[1,58]}),{45:[1,59]},o($VC,[2,60],{37:[1,60]}),o($VD,[2,56]),o($VD,[2,58]),{1:[2,1]},{4:61,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:62,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:63,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:64,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:65,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:66,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:67,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:68,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:69,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:70,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:71,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:72,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:73,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:74,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:75,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{25:[1,76]},{4:77,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{4:78,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},{26:[1,80],32:[1,79]},{29:$VE,34:81},{29:[1,82]},o($VC,[2,13]),o($VC,[2,14]),o($VC,[2,15]),o($VF,[2,16],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl}),o($VG,[2,25],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,31:$Vz,33:$VA,35:$VB}),{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,30:[1,83],31:$Vz,33:$VA,35:$VB},o($VC,[2,33]),{4:86,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,30:[1,84],32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg,55:85},{4:87,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,45:[1,88],53:$Vf,54:$Vg},{37:[1,91],47:89,48:$VH,49:$VI,53:[1,90]},o($VD,[2,51]),o($VD,[2,52]),o($VD,[2,53]),{46:[1,94]},o($VC,[2,59]),o($VC,[2,5]),o($VC,[2,6]),o($VJ,[2,7],{9:$Vh,10:$Vi,13:$Vl}),o($VJ,[2,8],{9:$Vh,10:$Vi,13:$Vl}),o($VC,[2,9]),o([5,14,19,20,21,22,23,24,25,26,27,28,30,31,33,35,36,45],[2,10],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,15:$Vn,16:$Vo}),o($VF,[2,11],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl}),o([5,14,16,19,20,21,22,23,24,25,26,27,28,30,31,33,35,36,45],[2,12],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,15:$Vn}),o($VK,[2,17],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,21:$Vr,22:$Vs,23:$Vt,24:$Vu,33:$VA,35:$VB}),o($VK,[2,18],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,21:$Vr,22:$Vs,23:$Vt,24:$Vu,33:$VA,35:$VB}),o($VL,[2,19],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,33:$VA,35:$VB}),o($VL,[2,20],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,33:$VA,35:$VB}),o($VL,[2,21],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,33:$VA,35:$VB}),o($VL,[2,22],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,33:$VA,35:$VB}),o($VK,[2,23],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,21:$Vr,22:$Vs,23:$Vt,24:$Vu,33:$VA,35:$VB}),{4:95,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},o($VG,[2,26],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,31:$Vz,33:$VA,35:$VB}),o([5,28,30,36,45],[2,27],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,31:$Vz,33:$VA,35:$VB}),o($VC,[2,29]),{32:[1,96]},o($VC,[2,31]),{4:97,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},o($VC,[2,28]),o($VC,[2,61]),{30:[1,98],36:[1,99]},o($VM,[2,63],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,31:$Vz,33:$VA,35:$VB}),{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,31:$Vz,33:$VA,35:$VB,45:[1,100]},o($VC,[2,44],{46:[1,101]}),o($VC,[2,42]),o($VD,[2,54]),o($VD,[2,55],{29:$VN}),o($VC,[2,48]),o($VC,[2,49]),{37:$VO,47:103,48:$VH,49:$VI},o($VK,[2,24],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,21:$Vr,22:$Vs,23:$Vt,24:$Vu,33:$VA,35:$VB}),o($VC,[2,30]),{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,31:$Vz,33:$VA,35:$VB,36:[1,105]},o($VC,[2,62]),{4:106,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},o($VC,[2,43],{46:[1,107]}),{37:$VO,47:108,48:$VH,49:$VI},{4:110,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,30:[1,109],32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},o($VC,[2,46]),{29:$VN},{4:111,6:3,7:4,8:5,11:$V0,12:$V1,16:$V2,17:$V3,18:$V4,26:$V5,29:$V6,32:$V7,37:$V8,38:$V9,39:$Va,40:$Vb,41:$Vc,42:$Vd,43:19,44:$Ve,53:$Vf,54:$Vg},o($VM,[2,64],{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,31:$Vz,33:$VA,35:$VB}),{37:$VO,47:112,48:$VH,49:$VI},o($VC,[2,41]),o($VC,[2,47]),{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,30:[1,113],31:$Vz,33:$VA,35:$VB},{9:$Vh,10:$Vi,11:$Vj,12:$Vk,13:$Vl,14:$Vm,15:$Vn,16:$Vo,19:$Vp,20:$Vq,21:$Vr,22:$Vs,23:$Vt,24:$Vu,25:$Vv,26:$Vw,27:$Vx,28:$Vy,30:[1,114],31:$Vz,33:$VA,35:$VB},o($VC,[2,40]),o($VC,[2,50]),o($VC,[2,32])],
defaultActions: {24:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: this.begin('INITIAL'); return 44; 
break;
case 1: this.begin('INITIAL'); return 50; 
break;
case 2:return 52;
break;
case 3:return 51;
break;
case 4:return 'INVALID';
break;
case 5:return 38
break;
case 6:return 42
break;
case 7:return 40
break;
case 8:return 39
break;
case 9:return 41
break;
case 10:return 41
break;
case 11:/* skip whitespace */
break;
case 12:return 35
break;
case 13:return 33
break;
case 14:return 26
break;
case 15:return 31
break;
case 16:return 32
break;
case 17:return 9
break;
case 18:return 10
break;
case 19:return 12
break;
case 20:return 11
break;
case 21:return 16
break;
case 22:return 18
break;
case 23:return 20
break;
case 24:return 17
break;
case 25:return 13
break;
case 26:return 20
break;
case 27:return 23
break;
case 28:return 24
break;
case 29:return 21
break;
case 30:return 22
break;
case 31:return 28
break;
case 32:return 27
break;
case 33:return 19
break;
case 34:return 19
break;
case 35:return 25
break;
case 36:return 27
break;
case 37:return 28
break;
case 38:return 15
break;
case 39:return 14
break;
case 40: this.begin('fieldname'); return 53; 
break;
case 41:return 45;
break;
case 42:return 29
break;
case 43:return 30
break;
case 44:return 46
break;
case 45:return 36
break;
case 46:return 54
break;
case 47:return 37
break;
case 48:return 'INVALID'
break;
case 49:return 5
break;
}
},
rules: [/^(?:\]\s*\[)/i,/^(?:\])/i,/^(?:\\.)/i,/^(?:.)/i,/^(?:$)/i,/^(?:'(?:[^\']|(?:('')))*')/i,/^(?:\{[0-9A-Fa-f]{8}[-]?(?:[0-9A-Fa-f]{4}[-]?){3}[0-9A-Fa-f]{12}\})/i,/^(?:#(?:[^\\\#]|(?:\\.))*#)/i,/^(?:[0-9]+(\.[0-9]+([mfMF]{1})?|[bsiluBSILU]{1})?)/i,/^(?:True\b)/i,/^(?:False\b)/i,/^(?:\s+)/i,/^(?:Between\b)/i,/^(?:In\b)/i,/^(?:Not\b)/i,/^(?:Is\b)/i,/^(?:Null\b)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\^)/i,/^(?:~)/i,/^(?:!=)/i,/^(?:!)/i,/^(?:%)/i,/^(?:<>)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:>)/i,/^(?:<)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:==)/i,/^(?:=)/i,/^(?:Like\b)/i,/^(?:And\b)/i,/^(?:Or\b)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?:,)/i,/^(?:\?)/i,/^(?:[_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376-\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E46\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC][\d_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376-\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E46\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*)/i,/^(?:.)/i,/^(?:$)/i],
conditions: {"fieldname":{"rules":[0,1,2,3,4],"inclusive":false},"INITIAL":{"rules":[5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();
exports.criteriaparser = criteriaparser;
exports.parse = function(test) { return criteriaparser.parse(test) };


/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return BinaryOperator; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_operatorTokens__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(23);
/* harmony import */ var _options_binary__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(8);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(4);




class BinaryOperator extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(left, right, operatorType) {
        super();
        this.assignLeftPart = (criteriaOperator) => {
            this.leftOperand = criteriaOperator.leftPart;
        };
        this.assignRightPart = (criteriaOperator) => {
            if (Array.isArray(criteriaOperator.rightPart)) {
                if (criteriaOperator.rightPart.length) {
                    this.rightOperand = criteriaOperator.rightPart[0];
                }
            }
            else {
                this.rightOperand = criteriaOperator.rightPart;
            }
        };
        this.type = 'binary';
        this.leftOperand = left || _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('default');
        this.rightOperand = right || _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('default');
        this.operatorType = operatorType;
    }
    get leftPart() {
        return this.leftOperand;
    }
    get rightPart() {
        return this.rightOperand;
    }
    get displayType() {
        return _utils_operatorTokens__WEBPACK_IMPORTED_MODULE_1__[/* operatorTokens */ "a"][_options_binary__WEBPACK_IMPORTED_MODULE_2__["BinaryOperatorType"][this.operatorType]] || _options_binary__WEBPACK_IMPORTED_MODULE_2__["BinaryOperatorType"][this.operatorType];
    }
    get enumType() {
        return _options_binary__WEBPACK_IMPORTED_MODULE_2__["BinaryOperatorType"];
    }
    accept(visitor) {
        return visitor.visitBinaryOperator
            ? visitor.visitBinaryOperator(this)
            : new BinaryOperator(this.leftOperand && this.leftOperand.accept(visitor), this.rightOperand && this.rightOperand.accept(visitor), this.operatorType);
    }
}
_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].register('binary', (options) => {
    return new BinaryOperator(options.left, options.right, options.operatorType);
}, (operatorType) => _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('binary', {
    left: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('property'),
    right: _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_3__["criteriaCreator"].process('value'),
    operatorType: operatorType.value
}));


/***/ }),
/* 31 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxTextBox;

/***/ }),
/* 32 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxPopup;

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "JoinOperand", function() { return JoinOperand; });
/* harmony import */ var _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(12);
/* harmony import */ var _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);


class JoinOperand extends _criteriaOperator__WEBPACK_IMPORTED_MODULE_0__[/* CriteriaOperator */ "a"] {
    constructor(joinTypeName, condition, type, aggregated) {
        super();
        this.type = 'join';
        this.joinTypeName = joinTypeName;
        this.condition = condition;
        this.operatorType = type;
        this.aggregatedExpression = aggregated;
    }
    static joinOrAggregate(collectionProperty, condition, type, aggregated) {
        if (collectionProperty === null || collectionProperty.propertyName.length < 2 || collectionProperty.propertyName[0] != '<' || collectionProperty.propertyName[collectionProperty.propertyName.length - 1] != '>') {
            return _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('aggregate', {
                property: collectionProperty,
                aggregatedExpression: aggregated,
                aggregateType: type,
                condition: condition
            });
        }
        else {
            return _utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"].process('join', {
                joinTypeName: collectionProperty.propertyName.substring(1, collectionProperty.propertyName.length - 2),
                condition: condition,
                type: type,
                aggregated: aggregated
            });
        }
    }
    accept(visitor) {
        return visitor.visitJoinOperand
            ? visitor.visitJoinOperand(this)
            : new JoinOperand(this.joinTypeName, this.condition && this.condition.accept(visitor), this.operatorType, this.aggregatedExpression && this.aggregatedExpression.accept(visitor));
    }
}


/***/ }),
/* 34 */
/***/ (function(module, exports) {

module.exports = DevExpress.data.DataSource;

/***/ }),
/* 35 */
/***/ (function(module, exports) {

module.exports = window["ace"];

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 37 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 38 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";



/***/ }),
/* 43 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxButton;

/***/ }),
/* 44 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxDropDownBox;

/***/ }),
/* 45 */
/***/ (function(module, exports) {

module.exports = DevExpress.events;

/***/ }),
/* 46 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxSelectBox;

/***/ }),
/* 47 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxMenu;

/***/ }),
/* 48 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.notify;

/***/ }),
/* 49 */
/***/ (function(module, exports) {

module.exports = DevExpress.VERSION;

/***/ }),
/* 50 */
/***/ (function(module, exports) {

module.exports = DevExpress.data.ArrayStore;

/***/ }),
/* 51 */
/***/ (function(module, exports) {

module.exports = DevExpress.data.CustomStore;

/***/ }),
/* 52 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.themes;

/***/ }),
/* 53 */
/***/ (function(module, exports) {

module.exports = DevExpress.validationEngine;

/***/ }),
/* 54 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxTextArea;

/***/ }),
/* 55 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _widgets_criteria_parser_criteriaparser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(29);
/* harmony import */ var _widgets_criteria_parser_criteriaparser__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_widgets_criteria_parser_criteriaparser__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _widgets_criteria_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(4);
/* harmony import */ var _widgets_criteria_operators_criteriaOperator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(12);
/* harmony import */ var _widgets_criteria_operators_property__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(13);
/* harmony import */ var _widgets_criteria_operators_aggregate__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(14);
/* harmony import */ var _widgets_criteria_operators_between__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(24);
/* harmony import */ var _widgets_criteria_operators_binary__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(30);
/* harmony import */ var _widgets_criteria_operators_value__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(18);
/* harmony import */ var _widgets_criteria_operators_constant__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(25);
/* harmony import */ var _widgets_criteria_operators_function__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(28);
/* harmony import */ var _widgets_criteria_operators_group__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(16);
/* harmony import */ var _widgets_criteria_operators_in__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(19);
/* harmony import */ var _widgets_criteria_operators_join__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(33);
/* harmony import */ var _widgets_criteria_operators_parameter__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(20);
/* harmony import */ var _widgets_criteria_operators_unary__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(17);
/* harmony import */ var _widgets_criteria_operators_options_property__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(36);
/* harmony import */ var _widgets_criteria_operators_options_aggregate__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(37);
/* harmony import */ var _widgets_criteria_operators_options_between__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(38);
/* harmony import */ var _widgets_criteria_operators_options_binary__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(8);
/* harmony import */ var _widgets_criteria_operators_options_value__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(39);
/* harmony import */ var _widgets_criteria_operators_options_function__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(5);
/* harmony import */ var _widgets_criteria_operators_options_group__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(11);
/* harmony import */ var _widgets_criteria_operators_options_in__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(40);
/* harmony import */ var _widgets_criteria_operators_options_join__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(41);
/* harmony import */ var _widgets_criteria_operators_options_parameter__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(42);
/* harmony import */ var _widgets_criteria_operators_options_unary__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(10);
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _widgets_criteria_parser_criteriaparser__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== 'default') (function(key) { __webpack_require__.d(__webpack_exports__, key, function() { return _widgets_criteria_parser_criteriaparser__WEBPACK_IMPORTED_MODULE_0__[key]; }) }(__WEBPACK_IMPORT_KEY__));
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CriteriaOperatorPreprocessor", function() { return _widgets_criteria_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["CriteriaOperatorPreprocessor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "criteriaCreator", function() { return _widgets_criteria_utils_criteriaOperatorPreprocessor__WEBPACK_IMPORTED_MODULE_1__["criteriaCreator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CriteriaOperator", function() { return _widgets_criteria_operators_criteriaOperator__WEBPACK_IMPORTED_MODULE_2__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OperandProperty", function() { return _widgets_criteria_operators_property__WEBPACK_IMPORTED_MODULE_3__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AggregateOperand", function() { return _widgets_criteria_operators_aggregate__WEBPACK_IMPORTED_MODULE_4__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BetweenOperator", function() { return _widgets_criteria_operators_between__WEBPACK_IMPORTED_MODULE_5__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BinaryOperator", function() { return _widgets_criteria_operators_binary__WEBPACK_IMPORTED_MODULE_6__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OperandValue", function() { return _widgets_criteria_operators_value__WEBPACK_IMPORTED_MODULE_7__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConstantValue", function() { return _widgets_criteria_operators_constant__WEBPACK_IMPORTED_MODULE_8__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionOperator", function() { return _widgets_criteria_operators_function__WEBPACK_IMPORTED_MODULE_9__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GroupOperator", function() { return _widgets_criteria_operators_group__WEBPACK_IMPORTED_MODULE_10__["GroupOperator"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InOperator", function() { return _widgets_criteria_operators_in__WEBPACK_IMPORTED_MODULE_11__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "JoinOperand", function() { return _widgets_criteria_operators_join__WEBPACK_IMPORTED_MODULE_12__["JoinOperand"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "OperandParameter", function() { return _widgets_criteria_operators_parameter__WEBPACK_IMPORTED_MODULE_13__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnaryOperator", function() { return _widgets_criteria_operators_unary__WEBPACK_IMPORTED_MODULE_14__["a"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BinaryOperatorType", function() { return _widgets_criteria_operators_options_binary__WEBPACK_IMPORTED_MODULE_18__["BinaryOperatorType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "FunctionOperatorType", function() { return _widgets_criteria_operators_options_function__WEBPACK_IMPORTED_MODULE_20__["FunctionOperatorType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "GroupOperatorType", function() { return _widgets_criteria_operators_options_group__WEBPACK_IMPORTED_MODULE_21__["GroupOperatorType"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UnaryOperatorType", function() { return _widgets_criteria_operators_options_unary__WEBPACK_IMPORTED_MODULE_25__["UnaryOperatorType"]; });























































/***/ }),
/* 56 */
/***/ (function(module, exports) {

module.exports = '';

/***/ }),
/* 57 */
/***/ (function(module, exports) {

module.exports = "/mode-json";

/***/ }),
/* 58 */
/***/ (function(module, exports) {

module.exports = "/mode-sql";

/***/ }),
/* 59 */
/***/ (function(module, exports) {

module.exports = "/mode-text";

/***/ }),
/* 60 */
/***/ (function(module, exports) {

module.exports = "/theme-ambiance";

/***/ }),
/* 61 */
/***/ (function(module, exports) {

module.exports = "/theme-dreamweaver";

/***/ }),
/* 62 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-internal.js
var analytics_internal_namespaceObject = {};
__webpack_require__.r(analytics_internal_namespaceObject);
__webpack_require__.d(analytics_internal_namespaceObject, "AccordionKeyboardHelper", function() { return _accordionKeyboardHelper_AccordionKeyboardHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "AccessibilityControlElementBase", function() { return _controlElementBase_AccessibilityControlElementBase; });
__webpack_require__.d(analytics_internal_namespaceObject, "ControlElementWithParentHighlight", function() { return _controlElementWithParentHighlight_ControlElementWithParentHighlight; });
__webpack_require__.d(analytics_internal_namespaceObject, "accessibilityFontSizeZoomFactor", function() { return accessibilityFontSizeZoomFactor; });
__webpack_require__.d(analytics_internal_namespaceObject, "calculateWithZoomFactor", function() { return calculateWithZoomFactor; });
__webpack_require__.d(analytics_internal_namespaceObject, "AccessibilityKeyboardHelperBase", function() { return _keyboardHelperBase_AccessibilityKeyboardHelperBase; });
__webpack_require__.d(analytics_internal_namespaceObject, "KeyboardHelperWithArrowButtonBase", function() { return _keyboardHelperWithArrowButtonBase_KeyboardHelperWithArrowButtonBase; });
__webpack_require__.d(analytics_internal_namespaceObject, "ListKeyboardHelper", function() { return _listKeyboardHelper_ListKeyboardHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "RightPanelKeyboardHelper", function() { return _rightPanelKeyboardHelper_RightPanelKeyboardHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "ToolbarKeyboardHelper", function() { return _toolbarKeyboardHelper_ToolbarKeyboardHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "TreeListKeyboardHelper", function() { return _treeListKeyboardHelper_TreeListKeyboardHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "JSDesignerBindingCommon", function() { return _jsDesignerBindingCommon_JSDesignerBindingCommon; });
__webpack_require__.d(analytics_internal_namespaceObject, "DxAnalyticsComponentCommon", function() { return _jsDesignerBindingCommon_DxAnalyticsComponentCommon; });
__webpack_require__.d(analytics_internal_namespaceObject, "RequestHelper", function() { return RequestHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "DragDropHandler", function() { return _dragDropHandler_DragDropHandler; });
__webpack_require__.d(analytics_internal_namespaceObject, "DragHelperControlRectangle", function() { return _dragHelperContent_DragHelperControlRectangle; });
__webpack_require__.d(analytics_internal_namespaceObject, "DragHelperContent", function() { return _dragHelperContent_DragHelperContent; });
__webpack_require__.d(analytics_internal_namespaceObject, "SelectionDragDropHandler", function() { return _selectionDragDropHandler_SelectionDragDropHandler; });
__webpack_require__.d(analytics_internal_namespaceObject, "ToolboxDragDropHandler", function() { return _toolboxDragDropHandler_ToolboxDragDropHandler; });
__webpack_require__.d(analytics_internal_namespaceObject, "WizardDragDropHandler", function() { return _wizardDragDropHandler_WizardDragDropHandler; });
__webpack_require__.d(analytics_internal_namespaceObject, "dxversions", function() { return dxversions; });
__webpack_require__.d(analytics_internal_namespaceObject, "AjaxSetup", function() { return _ajaxSetup_AjaxSetup; });
__webpack_require__.d(analytics_internal_namespaceObject, "DesignControlsHelper", function() { return _controlsHelper_DesignControlsHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "patchPositionByRTL", function() { return patchPositionByRTL; });
__webpack_require__.d(analytics_internal_namespaceObject, "CssCalculator", function() { return _cssCalculator_CssCalculator; });
__webpack_require__.d(analytics_internal_namespaceObject, "ExpressionType", function() { return ExpressionType; });
__webpack_require__.d(analytics_internal_namespaceObject, "IsDataAccessExpression", function() { return IsDataAccessExpression; });
__webpack_require__.d(analytics_internal_namespaceObject, "editorTypeMapper", function() { return editorTypeMapper; });
__webpack_require__.d(analytics_internal_namespaceObject, "getEditorType", function() { return getEditorType; });
__webpack_require__.d(analytics_internal_namespaceObject, "getTypeNameFromFullName", function() { return getTypeNameFromFullName; });
__webpack_require__.d(analytics_internal_namespaceObject, "getShortTypeName", function() { return getShortTypeName; });
__webpack_require__.d(analytics_internal_namespaceObject, "getControlTypeName", function() { return getControlTypeName; });
__webpack_require__.d(analytics_internal_namespaceObject, "getControlFullName", function() { return getControlFullName; });
__webpack_require__.d(analytics_internal_namespaceObject, "getImageClassName", function() { return getImageClassName; });
__webpack_require__.d(analytics_internal_namespaceObject, "getUniqueNameForNamedObjectsArray", function() { return getUniqueNameForNamedObjectsArray; });
__webpack_require__.d(analytics_internal_namespaceObject, "getUniqueName", function() { return getUniqueName; });
__webpack_require__.d(analytics_internal_namespaceObject, "initGlobalize", function() { return initGlobalize; });
__webpack_require__.d(analytics_internal_namespaceObject, "HoverInfo", function() { return HoverInfo; });
__webpack_require__.d(analytics_internal_namespaceObject, "processTextEditorHotKeys", function() { return processTextEditorHotKeys; });
__webpack_require__.d(analytics_internal_namespaceObject, "InlineTextEdit", function() { return _inlineTextEdit_InlineTextEdit; });
__webpack_require__.d(analytics_internal_namespaceObject, "ObjectStructureTreeListController", function() { return _objectStructureControllers_ObjectStructureTreeListController; });
__webpack_require__.d(analytics_internal_namespaceObject, "ObjectStructureProviderBase", function() { return _objectStructureProviders_ObjectStructureProviderBase; });
__webpack_require__.d(analytics_internal_namespaceObject, "ObjectExplorerProvider", function() { return _objectStructureProviders_ObjectExplorerProvider; });
__webpack_require__.d(analytics_internal_namespaceObject, "ObjectStructureProvider", function() { return _objectStructureProviders_ObjectStructureProvider; });
__webpack_require__.d(analytics_internal_namespaceObject, "papperKindMapper", function() { return papperKindMapper; });
__webpack_require__.d(analytics_internal_namespaceObject, "_addErrorPrefix", function() { return _addErrorPrefix; });
__webpack_require__.d(analytics_internal_namespaceObject, "_processError", function() { return _processError; });
__webpack_require__.d(analytics_internal_namespaceObject, "_errorProcessor", function() { return _errorProcessor; });
__webpack_require__.d(analytics_internal_namespaceObject, "processErrorEvent", function() { return processErrorEvent; });
__webpack_require__.d(analytics_internal_namespaceObject, "Resizable", function() { return _resizable_Resizable; });
__webpack_require__.d(analytics_internal_namespaceObject, "getResizeDirection", function() { return getResizeDirection; });
__webpack_require__.d(analytics_internal_namespaceObject, "Draggable", function() { return _draggable_Draggable; });
__webpack_require__.d(analytics_internal_namespaceObject, "SelectableElement", function() { return selectable_SelectableElement; });
__webpack_require__.d(analytics_internal_namespaceObject, "Selectable", function() { return selectable_Selectable; });
__webpack_require__.d(analytics_internal_namespaceObject, "dxScrollProcessor", function() { return _scrollProcessor_dxScrollProcessor; });
__webpack_require__.d(analytics_internal_namespaceObject, "CustomSortedArrayStore", function() { return _stores_CustomSortedArrayStore; });
__webpack_require__.d(analytics_internal_namespaceObject, "SortedArrayStore", function() { return _stores_SortedArrayStore; });
__webpack_require__.d(analytics_internal_namespaceObject, "ControlsStore", function() { return _stores_ControlsStore; });
__webpack_require__.d(analytics_internal_namespaceObject, "findSurface", function() { return findSurface; });
__webpack_require__.d(analytics_internal_namespaceObject, "getControlNewAbsolutePositionOnResize", function() { return getControlNewAbsolutePositionOnResize; });
__webpack_require__.d(analytics_internal_namespaceObject, "getControlRect", function() { return getControlRect; });
__webpack_require__.d(analytics_internal_namespaceObject, "minHeightWithoutScroll", function() { return minHeightWithoutScroll; });
__webpack_require__.d(analytics_internal_namespaceObject, "chooseBetterPositionOf", function() { return chooseBetterPositionOf; });
__webpack_require__.d(analytics_internal_namespaceObject, "updateSurfaceContentSize", function() { return updateSurfaceContentSize; });
__webpack_require__.d(analytics_internal_namespaceObject, "getToolboxItems", function() { return getToolboxItems; });
__webpack_require__.d(analytics_internal_namespaceObject, "blur", function() { return _utils_blur; });
__webpack_require__.d(analytics_internal_namespaceObject, "convertToCssPixelUnits", function() { return convertToCssPixelUnits; });
__webpack_require__.d(analytics_internal_namespaceObject, "convertFromCssPixelUnits", function() { return convertFromCssPixelUnits; });
__webpack_require__.d(analytics_internal_namespaceObject, "validateName", function() { return validateName; });
__webpack_require__.d(analytics_internal_namespaceObject, "replaceInvalidSymbols", function() { return replaceInvalidSymbols; });
__webpack_require__.d(analytics_internal_namespaceObject, "nameValidationRules", function() { return nameValidationRules; });
__webpack_require__.d(analytics_internal_namespaceObject, "CombinedObject", function() { return _combinedObj_CombinedObject; });
__webpack_require__.d(analytics_internal_namespaceObject, "SurfaceSelection", function() { return _selection_SurfaceSelection; });
__webpack_require__.d(analytics_internal_namespaceObject, "deleteSelection", function() { return deleteSelection; });
__webpack_require__.d(analytics_internal_namespaceObject, "SnapLinesCollector", function() { return _snapLinesCollector_SnapLinesCollector; });
__webpack_require__.d(analytics_internal_namespaceObject, "SnapLinesHelper", function() { return _snapLinesHelper_SnapLinesHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "SnapLineSurface", function() { return _snapLineSurface_SnapLineSurface; });
__webpack_require__.d(analytics_internal_namespaceObject, "ActionListsBase", function() { return _actionList_ActionListsBase; });
__webpack_require__.d(analytics_internal_namespaceObject, "ActionLists", function() { return _actionList_ActionLists; });
__webpack_require__.d(analytics_internal_namespaceObject, "copyPasteStrategy", function() { return _copyPaste_copyPasteStrategy; });
__webpack_require__.d(analytics_internal_namespaceObject, "CopyPasteHandler", function() { return _copyPaste_CopyPasteHandler; });
__webpack_require__.d(analytics_internal_namespaceObject, "KeyboardHelperBase", function() { return _keyboardHelper_KeyboardHelperBase; });
__webpack_require__.d(analytics_internal_namespaceObject, "KeyboardHelper", function() { return KeyboardHelper; });
__webpack_require__.d(analytics_internal_namespaceObject, "KeyDownHandlersManager", function() { return _keyboardHelper_KeyDownHandlersManager; });
__webpack_require__.d(analytics_internal_namespaceObject, "createObservableReverseArrayMapCollection", function() { return createObservableReverseArrayMapCollection; });
__webpack_require__.d(analytics_internal_namespaceObject, "createObservableArrayMapCollection", function() { return createObservableArrayMapCollection; });
__webpack_require__.d(analytics_internal_namespaceObject, "deserializeChildArray", function() { return deserializeChildArray; });
__webpack_require__.d(analytics_internal_namespaceObject, "getFirstItemByPropertyValue", function() { return getFirstItemByPropertyValue; });
__webpack_require__.d(analytics_internal_namespaceObject, "findFirstItemMatchesCondition", function() { return findFirstItemMatchesCondition; });
__webpack_require__.d(analytics_internal_namespaceObject, "find", function() { return find; });
__webpack_require__.d(analytics_internal_namespaceObject, "binaryIndexOf", function() { return binaryIndexOf; });
__webpack_require__.d(analytics_internal_namespaceObject, "compareArrays", function() { return compareArrays; });
__webpack_require__.d(analytics_internal_namespaceObject, "DEBUG", function() { return DEBUG; });
__webpack_require__.d(analytics_internal_namespaceObject, "DebugMode", function() { return DebugMode; });
__webpack_require__.d(analytics_internal_namespaceObject, "DesignerContextGeneratorInternal", function() { return _designerCreator_DesignerContextGeneratorInternal; });
__webpack_require__.d(analytics_internal_namespaceObject, "DesignerContextGenerator", function() { return DesignerContextGenerator; });
__webpack_require__.d(analytics_internal_namespaceObject, "ResizeSettings", function() { return _designerCreator_ResizeSettings; });
__webpack_require__.d(analytics_internal_namespaceObject, "ContextActionsSettings", function() { return _designerCreator_ContextActionsSettings; });
__webpack_require__.d(analytics_internal_namespaceObject, "DragDropSettings", function() { return _designerCreator_DragDropSettings; });
__webpack_require__.d(analytics_internal_namespaceObject, "ControlsHelperSettings", function() { return _designerCreator_ControlsHelperSettings; });
__webpack_require__.d(analytics_internal_namespaceObject, "MenuSettings", function() { return _designerCreator_MenuSettings; });
__webpack_require__.d(analytics_internal_namespaceObject, "SelectionSettings", function() { return _designerCreator_SelectionSettings; });
__webpack_require__.d(analytics_internal_namespaceObject, "CommonDesignerGenerator", function() { return _designerCreator_CommonDesignerGenerator; });
__webpack_require__.d(analytics_internal_namespaceObject, "createDesigner", function() { return createDesigner; });
__webpack_require__.d(analytics_internal_namespaceObject, "FieldListProvider", function() { return _fieldListProvider_FieldListProvider; });
__webpack_require__.d(analytics_internal_namespaceObject, "NotifyType", function() { return NotifyType; });
__webpack_require__.d(analytics_internal_namespaceObject, "NotifyAboutWarning", function() { return NotifyAboutWarning; });
__webpack_require__.d(analytics_internal_namespaceObject, "getErrorMessage", function() { return _infoMessageHelpers_getErrorMessage; });
__webpack_require__.d(analytics_internal_namespaceObject, "ShowMessage", function() { return ShowMessage; });
__webpack_require__.d(analytics_internal_namespaceObject, "_setShowMessageFunc", function() { return _setShowMessageFunc; });
__webpack_require__.d(analytics_internal_namespaceObject, "_resetShowMessageFunc", function() { return _resetShowMessageFunc; });
__webpack_require__.d(analytics_internal_namespaceObject, "roundingXDecimals", function() { return roundingXDecimals; });
__webpack_require__.d(analytics_internal_namespaceObject, "unitsToPixel", function() { return unitsToPixel; });
__webpack_require__.d(analytics_internal_namespaceObject, "pixelToUnits", function() { return pixelToUnits; });
__webpack_require__.d(analytics_internal_namespaceObject, "createUnitProperty", function() { return createUnitProperty; });
__webpack_require__.d(analytics_internal_namespaceObject, "createUnitProperties", function() { return createUnitProperties; });
__webpack_require__.d(analytics_internal_namespaceObject, "copyObservables", function() { return copyObservables; });
__webpack_require__.d(analytics_internal_namespaceObject, "_wrapModelInObservable", function() { return _wrapModelInObservable; });
__webpack_require__.d(analytics_internal_namespaceObject, "collectGroupsFromFlatList", function() { return collectGroupsFromFlatList; });
__webpack_require__.d(analytics_internal_namespaceObject, "compareObjects", function() { return compareObjects; });
__webpack_require__.d(analytics_internal_namespaceObject, "cssTransform", function() { return cssTransform; });
__webpack_require__.d(analytics_internal_namespaceObject, "getFullPath", function() { return getFullPath; });
__webpack_require__.d(analytics_internal_namespaceObject, "loadTemplates", function() { return loadTemplates; });
__webpack_require__.d(analytics_internal_namespaceObject, "getSizeFactor", function() { return getSizeFactor; });
__webpack_require__.d(analytics_internal_namespaceObject, "staticContext", function() { return staticContext; });
__webpack_require__.d(analytics_internal_namespaceObject, "_defaultStaticContext", function() { return _defaultStaticContext; });
__webpack_require__.d(analytics_internal_namespaceObject, "appendStaticContextToRootViewModel", function() { return appendStaticContextToRootViewModel; });
__webpack_require__.d(analytics_internal_namespaceObject, "_ajax", function() { return _ajax; });
__webpack_require__.d(analytics_internal_namespaceObject, "_ajaxWithOptions", function() { return _ajaxWithOptions; });
__webpack_require__.d(analytics_internal_namespaceObject, "ajax", function() { return ajax; });
__webpack_require__.d(analytics_internal_namespaceObject, "setAjax", function() { return setAjax; });
__webpack_require__.d(analytics_internal_namespaceObject, "cutRefs", function() { return cutRefs; });
__webpack_require__.d(analytics_internal_namespaceObject, "DesignerBaseElements", function() { return DesignerBaseElements; });
__webpack_require__.d(analytics_internal_namespaceObject, "generateDefaultParts", function() { return generateDefaultParts; });
__webpack_require__.d(analytics_internal_namespaceObject, "createActionWrappingFunction", function() { return createActionWrappingFunction; });
__webpack_require__.d(analytics_internal_namespaceObject, "localizeNoneString", function() { return localizeNoneString; });
__webpack_require__.d(analytics_internal_namespaceObject, "parseZoom", function() { return parseZoom; });
__webpack_require__.d(analytics_internal_namespaceObject, "getResizableOptions", function() { return getResizableOptions; });
__webpack_require__.d(analytics_internal_namespaceObject, "createPasswordSerializationInfo", function() { return createPasswordSerializationInfo; });
__webpack_require__.d(analytics_internal_namespaceObject, "objectsVisitor", function() { return objectsVisitor; });
__webpack_require__.d(analytics_internal_namespaceObject, "collectionsVisitor", function() { return collectionsVisitor; });
__webpack_require__.d(analytics_internal_namespaceObject, "BordersModel", function() { return _bordereditor_BordersModel; });
__webpack_require__.d(analytics_internal_namespaceObject, "ControlProperties", function() { return _controlProperties_ControlProperties; });
__webpack_require__.d(analytics_internal_namespaceObject, "Group", function() { return _group_Group; });
__webpack_require__.d(analytics_internal_namespaceObject, "dxButtonWithTemplate", function() { return _buttonInlineEditor_dxButtonWithTemplate; });
__webpack_require__.d(analytics_internal_namespaceObject, "BaseActionsProvider", function() { return _actionProvider_BaseActionsProvider; });
__webpack_require__.d(analytics_internal_namespaceObject, "sizeFake", function() { return sizeFake; });
__webpack_require__.d(analytics_internal_namespaceObject, "locationFake", function() { return locationFake; });
__webpack_require__.d(analytics_internal_namespaceObject, "EditorAddOn", function() { return _addon_EditorAddOn; });
__webpack_require__.d(analytics_internal_namespaceObject, "CodeResolver", function() { return _codeResolver_CodeResolver; });
__webpack_require__.d(analytics_internal_namespaceObject, "globalResolver", function() { return globalResolver; });
__webpack_require__.d(analytics_internal_namespaceObject, "PopupService", function() { return _popupService_PopupService; });
__webpack_require__.d(analytics_internal_namespaceObject, "loadMessages", function() { return _localization["f" /* loadMessages */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "getLocalization", function() { return _localization["d" /* getLocalization */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "removeWinSymbols", function() { return _localization["l" /* removeWinSymbols */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "Globalize", function() { return _localization["a" /* Globalize */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "messages", function() { return _localization["i" /* messages */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "custom_localization_values", function() { return _localization["b" /* custom_localization_values */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "selectPlaceholder", function() { return _localization["o" /* selectPlaceholder */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "noDataText", function() { return _localization["j" /* noDataText */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "searchPlaceholder", function() { return _localization["n" /* searchPlaceholder */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "resolveFromPromises", function() { return _localization["m" /* resolveFromPromises */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "isCustomizedWithUpdateLocalizationMethod", function() { return _localization["e" /* isCustomizedWithUpdateLocalizationMethod */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "localizeWithUpdateLocalizationMethod", function() { return _localization["h" /* localizeWithUpdateLocalizationMethod */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "localize", function() { return _localization["g" /* localize */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "formatDate", function() { return _localization["c" /* formatDate */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "parseDate", function() { return _localization["k" /* parseDate */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "StringId", function() { return StringId; });
__webpack_require__.d(analytics_internal_namespaceObject, "SearchMode", function() { return SearchMode; });
__webpack_require__.d(analytics_internal_namespaceObject, "_getFileContent", function() { return _getFileContent; });
__webpack_require__.d(analytics_internal_namespaceObject, "uploadFile", function() { return uploadFile; });
__webpack_require__.d(analytics_internal_namespaceObject, "_replaceUploadFile", function() { return _replaceUploadFile; });
__webpack_require__.d(analytics_internal_namespaceObject, "setUploadFile", function() { return setUploadFile; });
__webpack_require__.d(analytics_internal_namespaceObject, "compareEditorInfo", function() { return compareEditorInfo; });
__webpack_require__.d(analytics_internal_namespaceObject, "findMatchesInString", function() { return findMatchesInString; });
__webpack_require__.d(analytics_internal_namespaceObject, "escapeToRegExp", function() { return escapeToRegExp; });
__webpack_require__.d(analytics_internal_namespaceObject, "stringRemove", function() { return stringRemove; });
__webpack_require__.d(analytics_internal_namespaceObject, "stringReplace", function() { return stringReplace; });
__webpack_require__.d(analytics_internal_namespaceObject, "stringInsert", function() { return stringInsert; });
__webpack_require__.d(analytics_internal_namespaceObject, "formatUnicorn", function() { return formatUnicorn; });
__webpack_require__.d(analytics_internal_namespaceObject, "KeyboardEnum", function() { return KeyboardEnum; });
__webpack_require__.d(analytics_internal_namespaceObject, "KeyboardCodesEnum", function() { return KeyboardCodesEnum; });
__webpack_require__.d(analytics_internal_namespaceObject, "PropertiesAccessibilityProvider", function() { return _propertiesAccessibilityProvider_PropertiesAccessibilityProvider; });
__webpack_require__.d(analytics_internal_namespaceObject, "defaultAccessibilityProvider", function() { return defaultAccessibilityProvider; });
__webpack_require__.d(analytics_internal_namespaceObject, "_defineProperty", function() { return _internal["a" /* _defineProperty */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "_definePropertyByString", function() { return _internal["b" /* _definePropertyByString */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "addDisposeCallback", function() { return _internal["c" /* addDisposeCallback */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "createGlobalModuleVariableFunc", function() { return _internal["d" /* createGlobalModuleVariableFunc */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "knockoutArrayWrapper", function() { return _utils["e" /* knockoutArrayWrapper */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "isPlainObject", function() { return _utils["d" /* isPlainObject */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "isEmptyObject", function() { return _utils["c" /* isEmptyObject */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "extend", function() { return _utils["b" /* extend */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "assignObj", function() { return _utils["a" /* assignObj */]; });
__webpack_require__.d(analytics_internal_namespaceObject, "propertiesVisitor", function() { return propertiesVisitor; });
__webpack_require__.d(analytics_internal_namespaceObject, "checkModelReady", function() { return checkModelReady; });
__webpack_require__.d(analytics_internal_namespaceObject, "guid", function() { return _utils_guid; });
__webpack_require__.d(analytics_internal_namespaceObject, "DisplayExpressionConverter", function() { return _displayNameProvider_DisplayExpressionConverter; });
__webpack_require__.d(analytics_internal_namespaceObject, "cloneHtmlBinding", function() { return cloneHtmlBinding; });
__webpack_require__.d(analytics_internal_namespaceObject, "HighlightEngine", function() { return _searchHighlighting_HighlightEngine; });
__webpack_require__.d(analytics_internal_namespaceObject, "integerValueConverter", function() { return integerValueConverter; });
__webpack_require__.d(analytics_internal_namespaceObject, "enumValueConverter", function() { return enumValueConverter; });
__webpack_require__.d(analytics_internal_namespaceObject, "validateExpression", function() { return validateExpression; });
__webpack_require__.d(analytics_internal_namespaceObject, "floatValueConverter", function() { return floatValueConverter; });
__webpack_require__.d(analytics_internal_namespaceObject, "isDarkTheme", function() { return isDarkTheme; });
__webpack_require__.d(analytics_internal_namespaceObject, "_setIsDarkTheme", function() { return _setIsDarkTheme; });
__webpack_require__.d(analytics_internal_namespaceObject, "setCursorInFunctionParameter", function() { return setCursorInFunctionParameter; });
__webpack_require__.d(analytics_internal_namespaceObject, "isList", function() { return _utils_isList; });
__webpack_require__.d(analytics_internal_namespaceObject, "getParentContainer", function() { return getParentContainer; });
__webpack_require__.d(analytics_internal_namespaceObject, "isNullOrEmptyString", function() { return isNullOrEmptyString; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-utils.js
var analytics_utils_namespaceObject = {};
__webpack_require__.r(analytics_utils_namespaceObject);
__webpack_require__.d(analytics_utils_namespaceObject, "ajaxSetup", function() { return ajaxSetup; });
__webpack_require__.d(analytics_utils_namespaceObject, "TabPanel", function() { return tabPanel_TabPanel; });
__webpack_require__.d(analytics_utils_namespaceObject, "TabInfo", function() { return tabPanel_TabInfo; });
__webpack_require__.d(analytics_utils_namespaceObject, "ToolboxItem", function() { return toolbox_ToolboxItem; });
__webpack_require__.d(analytics_utils_namespaceObject, "TabInfoWithPropertyGrid", function() { return _tabInfoWithPropertyGrid_TabInfoWithPropertyGrid; });
__webpack_require__.d(analytics_utils_namespaceObject, "ControlsFactory", function() { return controlsFactory_ControlsFactory; });
__webpack_require__.d(analytics_utils_namespaceObject, "floatFromModel", function() { return floatFromModel; });
__webpack_require__.d(analytics_utils_namespaceObject, "fromEnum", function() { return fromEnum; });
__webpack_require__.d(analytics_utils_namespaceObject, "parseBool", function() { return parseBool; });
__webpack_require__.d(analytics_utils_namespaceObject, "colorFromString", function() { return colorFromString; });
__webpack_require__.d(analytics_utils_namespaceObject, "saveAsInt", function() { return saveAsInt; });
__webpack_require__.d(analytics_utils_namespaceObject, "colorToInt", function() { return colorToInt; });
__webpack_require__.d(analytics_utils_namespaceObject, "intToColor", function() { return intToColor; });
__webpack_require__.d(analytics_utils_namespaceObject, "colorToString", function() { return colorToString; });
__webpack_require__.d(analytics_utils_namespaceObject, "addCultureInfo", function() { return localization_utils["b" /* addCultureInfo */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "getLocalization", function() { return localization_utils["c" /* getLocalization */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "_stringEndsWith", function() { return localization_utils["a" /* _stringEndsWith */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "updateLocalization", function() { return localization_utils["d" /* updateLocalization */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "registerBaseBinding", function() { return bindingsCacheUtils_registerBaseBinding; });
__webpack_require__.d(analytics_utils_namespaceObject, "addToBindingsCache", function() { return bindingsCacheUtils_addToBindingsCache; });
__webpack_require__.d(analytics_utils_namespaceObject, "addTemplate", function() { return addTemplate; });
__webpack_require__.d(analytics_utils_namespaceObject, "getTemplate", function() { return getTemplate; });
__webpack_require__.d(analytics_utils_namespaceObject, "EventManager", function() { return eventManager_EventManager; });
__webpack_require__.d(analytics_utils_namespaceObject, "ModelSerializer", function() { return serializer_ModelSerializer; });
__webpack_require__.d(analytics_utils_namespaceObject, "Disposable", function() { return utils["a" /* Disposable */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "deserializeArray", function() { return utils["b" /* deserializeArray */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "serializeDate", function() { return utils["d" /* serializeDate */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "deserializeDate", function() { return utils["c" /* deserializeDate */]; });
__webpack_require__.d(analytics_utils_namespaceObject, "_LatestChangeSet", function() { return _LatestChangeSet; });
__webpack_require__.d(analytics_utils_namespaceObject, "UndoEngine", function() { return undoengine_UndoEngine; });
__webpack_require__.d(analytics_utils_namespaceObject, "PathRequest", function() { return PathRequest; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-widgets-internal.js
var analytics_widgets_internal_namespaceObject = {};
__webpack_require__.r(analytics_widgets_internal_namespaceObject);
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TextAlignmentModel", function() { return _textAlignmentEditor_TextAlignmentModel; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "DataMemberTreeListController", function() { return DataMemberTreeListController; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "dxFieldListPicker", function() { return _fieldlistpicker_dxFieldListPicker; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "PopupEditorBase", function() { return _popupEditorBase_PopupEditorBase; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "RequiredNullableEditor", function() { return _requiredNullableEditor_RequiredNullableEditor; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "createNumericEditor", function() { return createNumericEditor; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "CollectionItemWrapper", function() { return _editor_CollectionItemWrapper; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "CollectionEditorViewModel", function() { return _editor_CollectionEditorViewModel; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "dxEllipsisEditor", function() { return _editor_dxEllipsisEditor; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "dxFileImagePicker", function() { return _editor_dxFileImagePicker; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "availableFonts", function() { return availableFonts; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "availableUnits", function() { return availableUnits; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "FontModel", function() { return _model_FontModel; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "registerBaseBinding", function() { return registerBaseBinding; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "addToBindingsCache", function() { return addToBindingsCache; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "extendedTemplates", function() { return extendedTemplates; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "propertiesGridEditorsPaddingLeft", function() { return internal_internal["d" /* propertiesGridEditorsPaddingLeft */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "defaultFontSerialization", function() { return internal_internal["a" /* defaultFontSerialization */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "validateGuid", function() { return internal_internal["f" /* validateGuid */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "validateNullableGuid", function() { return internal_internal["g" /* validateNullableGuid */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "guidValidationRules", function() { return internal_internal["c" /* guidValidationRules */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "guidRequiredValidationRules", function() { return internal_internal["b" /* guidRequiredValidationRules */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "requiredValidationRules", function() { return internal_internal["e" /* requiredValidationRules */]; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "SvgTemplatesEngine", function() { return _svgTemplateEngine_SvgTemplatesEngine; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "aceAvailable", function() { return aceAvailable; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "CodeCompletor", function() { return _codeCompletor_CodeCompletor; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "createFunctionCompletion", function() { return createFunctionCompletion; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "trimBrackets", function() { return trimBrackets; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "functionDisplay", function() { return functionDisplay; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "resetFunctionDisplay", function() { return resetFunctionDisplay; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "insertInFunctionDisplay", function() { return insertInFunctionDisplay; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "operatorNames", function() { return operatorNames; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "Tools", function() { return _tools_Tools; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "ExpressionEditorTreeListController", function() { return _treeListControllers_ExpressionEditorTreeListController; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "ExpressionEditorParametersTreeListController", function() { return _treeListControllers_ExpressionEditorParametersTreeListController; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "RangeSpecific", function() { return RangeSpecific; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "createExpressionEditorCollectionToolOptions", function() { return createExpressionEditorCollectionToolOptions; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "wrapExpressionValue", function() { return wrapExpressionValue; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "FilterEditorAddOn", function() { return _addon_FilterEditorAddOn; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "FilterEditorCodeCompletor", function() { return _codeCompletor_FilterEditorCodeCompletor; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "initDisplayText", function() { return initDisplayText; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "FilterEditorSerializer", function() { return _serializer_FilterEditorSerializer; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "FilterEditorTreeListController", function() { return _treelistController_FilterEditorTreeListController; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "CriteriaSurfaceValidatorState", function() { return CriteriaSurfaceValidatorState; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "CriteriaSurfaceValidator", function() { return _validator_CriteriaSurfaceValidator; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "formatStringStandardPatterns", function() { return formatStringStandardPatterns; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "PopupComponentBase", function() { return _popupComponentBase_PopupComponentBase; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "dxPopupWithAutoHeight", function() { return _popupwithautoheight_dxPopupWithAutoHeight; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "ResizeHelper", function() { return _resizeHelper_ResizeHelper; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "ValueEditorHelper", function() { return _valueEditorHelper_ValueEditorHelper; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "ReorderTreeListDragDropHelper", function() { return _reorderTreeListDragDropHelper_ReorderTreeListDragDropHelper; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TreeListController", function() { return TreeListController; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "maxSearchLevel", function() { return maxSearchLevel; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "treeListEditAction", function() { return treeListEditAction; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "DefaultTreeListItemFactory", function() { return DefaultTreeListItemFactory; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TreeListEllipsisButton", function() { return _treelistItem_TreeListEllipsisButton; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TreeListItemViewModel", function() { return _treelistItem_TreeListItemViewModel; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TreeListRootItemViewModel", function() { return _treelistItem_TreeListRootItemViewModel; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TreeListSearchOptions", function() { return _treeListSearchViewModel_TreeListSearchOptions; });
__webpack_require__.d(analytics_widgets_internal_namespaceObject, "TreeListSearchViewModel", function() { return _treeListSearchViewModel_TreeListSearchViewModel; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-widgets.js
var analytics_widgets_namespaceObject = {};
__webpack_require__.r(analytics_widgets_namespaceObject);
__webpack_require__.d(analytics_widgets_namespaceObject, "EditorTemplates", function() { return editorsInfo_EditorTemplates; });
__webpack_require__.d(analytics_widgets_namespaceObject, "editorTemplates", function() { return editorTemplates; });
__webpack_require__.d(analytics_widgets_namespaceObject, "Editor", function() { return editor_Editor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "EditorValidator", function() { return editorValidator_EditorValidator; });
__webpack_require__.d(analytics_widgets_namespaceObject, "ObjectProperties", function() { return propertygrid_ObjectProperties; });
__webpack_require__.d(analytics_widgets_namespaceObject, "PropertyGridEditor", function() { return propertygrid_PropertyGridEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "PropertyGridEditorFlat", function() { return PropertyGridEditorFlat; });
__webpack_require__.d(analytics_widgets_namespaceObject, "GuidEditor", function() { return guideditor_GuidEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FontEditor", function() { return editor_FontEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "getNotValidRange", function() { return getNotValidRange; });
__webpack_require__.d(analytics_widgets_namespaceObject, "ExpressionEditor", function() { return expressioneditor_ExpressionEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FilterEditorHelper", function() { return helper_FilterEditorHelper; });
__webpack_require__.d(analytics_widgets_namespaceObject, "DefaultFilterEditorHelper", function() { return DefaultFilterEditorHelper; });
__webpack_require__.d(analytics_widgets_namespaceObject, "_setDefaultFilterEditorHelper", function() { return _setDefaultFilterEditorHelper; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FilterEditor", function() { return filtereditor_FilterEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FilterEditorPlain", function() { return filtereditor_FilterEditorPlain; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FilterStringOptions", function() { return filtereditoroptions_FilterStringOptions; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FormatStringEditor", function() { return formatstringeditor_FormatStringEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "ColorPickerEditor", function() { return colorPickerEditor_ColorPickerEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "FieldListEditor", function() { return fieldListEditor_FieldListEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "DataMemberEditor", function() { return dataMemberEditor_DataMemberEditor; });
__webpack_require__.d(analytics_widgets_namespaceObject, "addTemplate", function() { return addTemplate; });
__webpack_require__.d(analytics_widgets_namespaceObject, "getTemplate", function() { return getTemplate; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-widgets-metadata.js
var analytics_widgets_metadata_namespaceObject = {};
__webpack_require__.r(analytics_widgets_metadata_namespaceObject);
__webpack_require__.d(analytics_widgets_metadata_namespaceObject, "fontName", function() { return fontName; });
__webpack_require__.d(analytics_widgets_metadata_namespaceObject, "fontSize", function() { return fontSize; });
__webpack_require__.d(analytics_widgets_metadata_namespaceObject, "fontSizeUnit", function() { return fontSizeUnit; });
__webpack_require__.d(analytics_widgets_metadata_namespaceObject, "fontInfo", function() { return fontInfo; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-widgets-filtering.js
var analytics_widgets_filtering_namespaceObject = {};
__webpack_require__.r(analytics_widgets_filtering_namespaceObject);
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "CriteriaOperatorSurface", function() { return criteriaOperatorSurface_CriteriaOperatorSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "AggregateOperandSurface", function() { return aggregateOperandSurface_AggregateOperandSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "BetweenOperandSurface", function() { return betweenOperandSurface_BetweenOperandSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "BinaryOperandSurface", function() { return binaryOperandSurface_BinaryOperandSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "OperandSurfaceBase", function() { return operandSurfaceBase_OperandSurfaceBase; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "FunctionOperandSurface", function() { return functionOperandSurface_FunctionOperandSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "GroupOperandSurface", function() { return groupOperandSurface_GroupOperandSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "InOperandSurface", function() { return inOperandSurface_InOperandSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "OperandParameterSurface", function() { return operandParameterSurface_OperandParameterSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "OperandPropertySurface", function() { return operandPropertySurface_OperandPropertySurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "OperandValueSurface", function() { return operandValueSurface_OperandValueSurface; });
__webpack_require__.d(analytics_widgets_filtering_namespaceObject, "UnaryOperandSurface", function() { return unaryOperandSurface_UnaryOperandSurface; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-criteria-utils.js
var analytics_criteria_utils_namespaceObject = {};
__webpack_require__.r(analytics_criteria_utils_namespaceObject);
__webpack_require__.d(analytics_criteria_utils_namespaceObject, "criteriaForEach", function() { return criteriaForEach; });
__webpack_require__.d(analytics_criteria_utils_namespaceObject, "CriteriaOperatorPreprocessor", function() { return criteriaOperatorPreprocessor["CriteriaOperatorPreprocessor"]; });
__webpack_require__.d(analytics_criteria_utils_namespaceObject, "criteriaCreator", function() { return criteriaOperatorPreprocessor["criteriaCreator"]; });
__webpack_require__.d(analytics_criteria_utils_namespaceObject, "operatorTokens", function() { return utils_operatorTokens["a" /* operatorTokens */]; });
__webpack_require__.d(analytics_criteria_utils_namespaceObject, "MachineState", function() { return MachineState; });
__webpack_require__.d(analytics_criteria_utils_namespaceObject, "CriteriaOperatorStateMachine", function() { return criteriaOperatorStateMachine_CriteriaOperatorStateMachine; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-widgets-treeList.js
var analytics_widgets_treeList_namespaceObject = {};
__webpack_require__.r(analytics_widgets_treeList_namespaceObject);
__webpack_require__.d(analytics_widgets_treeList_namespaceObject, "LoadChildItemsForCollapsedNodes", function() { return LoadChildItemsForCollapsedNodes; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-elements.js
var analytics_elements_namespaceObject = {};
__webpack_require__.r(analytics_elements_namespaceObject);
__webpack_require__.d(analytics_elements_namespaceObject, "Rectangle", function() { return rectangle_Rectangle; });
__webpack_require__.d(analytics_elements_namespaceObject, "SurfaceElementArea", function() { return baseSurface_SurfaceElementArea; });
__webpack_require__.d(analytics_elements_namespaceObject, "SurfaceElementBase", function() { return baseSurface_SurfaceElementBase; });
__webpack_require__.d(analytics_elements_namespaceObject, "ElementViewModel", function() { return elementViewModel_ElementViewModel; });
__webpack_require__.d(analytics_elements_namespaceObject, "Margins", function() { return margins_Margins; });
__webpack_require__.d(analytics_elements_namespaceObject, "PaddingModel", function() { return paddingModel_PaddingModel; });
__webpack_require__.d(analytics_elements_namespaceObject, "Point", function() { return point_Point; });
__webpack_require__.d(analytics_elements_namespaceObject, "SerializableModel", function() { return serializableModel_SerializableModel; });
__webpack_require__.d(analytics_elements_namespaceObject, "Size", function() { return size_Size; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-elements-metadata.js
var analytics_elements_metadata_namespaceObject = {};
__webpack_require__.r(analytics_elements_metadata_namespaceObject);
__webpack_require__.d(analytics_elements_metadata_namespaceObject, "left", function() { return paddingModelMetaData_left; });
__webpack_require__.d(analytics_elements_metadata_namespaceObject, "right", function() { return paddingModelMetaData_right; });
__webpack_require__.d(analytics_elements_metadata_namespaceObject, "top", function() { return paddingModelMetaData_top; });
__webpack_require__.d(analytics_elements_metadata_namespaceObject, "bottom", function() { return paddingModelMetaData_bottom; });
__webpack_require__.d(analytics_elements_metadata_namespaceObject, "all", function() { return paddingModelMetaData_all; });
__webpack_require__.d(analytics_elements_metadata_namespaceObject, "paddingSerializationsInfo", function() { return paddingSerializationsInfo; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-tools.js
var analytics_tools_namespaceObject = {};
__webpack_require__.r(analytics_tools_namespaceObject);
__webpack_require__.d(analytics_tools_namespaceObject, "ActionId", function() { return ActionId; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-localization.js
var analytics_localization_namespaceObject = {};
__webpack_require__.r(analytics_localization_namespaceObject);
__webpack_require__.d(analytics_localization_namespaceObject, "loadMessages", function() { return loadMessages; });

// NAMESPACE OBJECT: ./node_modules/@devexpress/analytics-core/analytics-widgets-ace.js
var analytics_widgets_ace_namespaceObject = {};
__webpack_require__.r(analytics_widgets_ace_namespaceObject);
__webpack_require__.d(analytics_widgets_ace_namespaceObject, "defineAceDocComments", function() { return defineAceDocComments; });
__webpack_require__.d(analytics_widgets_ace_namespaceObject, "defineAceCriteria", function() { return defineAceCriteria; });
__webpack_require__.d(analytics_widgets_ace_namespaceObject, "defineAce", function() { return defineAce; });

// EXTERNAL MODULE: external "ko"
var external_ko_ = __webpack_require__(0);

// EXTERNAL MODULE: external "jQuery"
var external_jQuery_ = __webpack_require__(1);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/serializer/_internal.js
var _internal = __webpack_require__(7);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/serializer/utils.js
var utils = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/internal/_utils.js

var SearchMode;
(function (SearchMode) {
    SearchMode[SearchMode["contains"] = 0] = "contains";
    SearchMode[SearchMode["startWith"] = 1] = "startWith";
})(SearchMode || (SearchMode = {}));
function _getFileContent(content, readMode) {
    return readMode !== 'text' ? (content).replace(/(^data:[^,]+,)|(^data:)/, '') : content;
}
function _uploadFile(filesHolder, deferred, options) {
    try {
        var files = filesHolder.files;
        for (var i = 0; i < files.length; i++) {
            var file = files[i];
            if (options.type === 'img') {
                var imageType = /image.*/;
                if (!file.type.match(imageType)) {
                    continue;
                }
            }
            var fr = new FileReader();
            var format = file.name.split('.').pop();
            fr.onload = () => {
                try {
                    deferred.resolve({
                        format: format,
                        content: _getFileContent(fr.result, options.readMode)
                    });
                }
                catch (e) {
                    deferred.reject();
                }
            };
            options.readMode === 'text' || format === 'html' || format === 'htm' ? fr.readAsText(file) : fr.readAsDataURL(file);
        }
    }
    catch (e) {
        deferred.reject();
    }
}
var fileUploaderId = 'dxd-fileuploader-input';
function createFileUploaderElement() {
    var input = document.createElement('input');
    input.type = 'file';
    input.id = fileUploaderId;
    input.style.width = '0px';
    input.style.height = '0px';
    input.style.display = 'none';
    document.body.appendChild(input);
    return input;
}
var uploadFile = (options) => {
    var deferred = external_jQuery_["Deferred"]();
    var element = document.getElementById(fileUploaderId);
    if (!element) {
        element = createFileUploaderElement();
    }
    element.accept = options.accept;
    element.onchange = () => {
        _uploadFile(element, deferred, options);
        element.value = '';
    };
    element.click();
    return deferred.promise();
};
var _replaceUploadFile = (newFunc) => uploadFile = newFunc;
function setUploadFile(newFunc) {
    uploadFile = newFunc;
}
function compareEditorInfo(editor1, editor2) {
    return !!editor1 && !!editor2 &&
        editor1.header === editor2.header
        && editor1.content === editor2.content
        && editor1.editorType === editor2.editorType;
}
function findMatchesInString(stringWhereSearch, searchPattern, options) {
    if (!options) {
        var searchExpr = escapeToRegExp(searchPattern);
        return !!stringWhereSearch && stringWhereSearch.match(new RegExp(searchExpr, 'gi'));
    }
    var searchExpr = !options.canUseRegex ? escapeToRegExp(searchPattern) : searchPattern;
    if (options.searchMode == SearchMode.startWith && !options.canUseRegex)
        searchExpr = '^' + searchExpr;
    var exprRule = '';
    if (!options.caseSensitive)
        exprRule = exprRule + 'i';
    if (options.globalMatch)
        exprRule = exprRule + 'g';
    return !!stringWhereSearch && stringWhereSearch.match(new RegExp(searchExpr, exprRule));
}
function escapeToRegExp(value) {
    return value.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function stringRemove(value, start, count) {
    count = count ? count : value.length - start;
    return value.slice(0, start) + value.slice(start + count, value.length);
}
function stringReplace(value, start, count, newChar = '') {
    var temp = value;
    temp = stringRemove(temp, start, count);
    temp = stringInsert(temp, start, Array(count + 1).join(newChar));
    return temp;
}
function stringInsert(value, pos, subStr) {
    return value.substring(0, pos) + subStr + value.substring(pos);
}
function formatUnicorn(text, ...args) {
    var str = text.toString();
    if (args.length) {
        var t = typeof args[0];
        var key;
        var argsFinal = ('string' === t || 'number' === t) ?
            Array.prototype.slice.call(args)
            : args[0];
        for (key in argsFinal) {
            str = str.replace(new RegExp('\\{' + key + '\\}', 'gi'), argsFinal[key]);
        }
    }
    return str;
}
var KeyboardEnum;
(function (KeyboardEnum) {
    KeyboardEnum["Plus"] = "+";
    KeyboardEnum["Minus"] = "-";
    KeyboardEnum["Equal"] = "=";
    KeyboardEnum["Tab"] = "Tab";
    KeyboardEnum["Delete"] = "Delete";
    KeyboardEnum["Enter"] = "Enter";
    KeyboardEnum["Esc"] = "Escape";
    KeyboardEnum["Space"] = " ";
    KeyboardEnum["End"] = "End";
    KeyboardEnum["Home"] = "Home";
    KeyboardEnum["PageUp"] = "PageUp";
    KeyboardEnum["PageDown"] = "PageDown";
    KeyboardEnum["ArrowLeft"] = "ArrowLeft";
    KeyboardEnum["ArrowUp"] = "ArrowUp";
    KeyboardEnum["ArrowRight"] = "ArrowRight";
    KeyboardEnum["ArrowDown"] = "ArrowDown";
})(KeyboardEnum || (KeyboardEnum = {}));
var KeyboardCodesEnum;
(function (KeyboardCodesEnum) {
    KeyboardCodesEnum[KeyboardCodesEnum["Tab"] = 9] = "Tab";
    KeyboardCodesEnum[KeyboardCodesEnum["Enter"] = 13] = "Enter";
    KeyboardCodesEnum[KeyboardCodesEnum["Esc"] = 27] = "Esc";
    KeyboardCodesEnum[KeyboardCodesEnum["Space"] = 32] = "Space";
    KeyboardCodesEnum[KeyboardCodesEnum["End"] = 35] = "End";
    KeyboardCodesEnum[KeyboardCodesEnum["Home"] = 36] = "Home";
    KeyboardCodesEnum[KeyboardCodesEnum["Left"] = 37] = "Left";
    KeyboardCodesEnum[KeyboardCodesEnum["Up"] = 38] = "Up";
    KeyboardCodesEnum[KeyboardCodesEnum["Right"] = 39] = "Right";
    KeyboardCodesEnum[KeyboardCodesEnum["Down"] = 40] = "Down";
})(KeyboardCodesEnum || (KeyboardCodesEnum = {}));

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/_keyboardHelper.js




class _keyboardHelper_KeyboardHelperBase extends utils["a" /* Disposable */] {
    _processShortcut(map, e, index) {
        var method = map[KeyboardCodesEnum[e.keyCode]];
        if (method) {
            return method(e, index);
        }
        return false;
    }
    processShortcut(e, index) {
        return this._processShortcut(this.shortcutMap, e, index);
    }
    processChildrenShortcut(e, index) {
        return this._processShortcut(this.childrenShortcutMap, e, index);
    }
}
class KeyboardHelper extends _keyboardHelper_KeyboardHelperBase {
    constructor(selection, undoEngine) {
        super();
        this._selection = selection;
        this._undoEngine = undoEngine;
        this.shortcutMap = {
            Esc: (e) => { this.processEsc(); return true; },
            Left: (e) => { this.moveSelectedControls(true, true, -1); return true; },
            Up: (e) => { this.moveSelectedControls(true, false, -1); return true; },
            Right: (e) => { this.moveSelectedControls(false, true, 1); return true; },
            Down: (e) => { this.moveSelectedControls(false, false, 1); return true; }
        };
    }
    processEsc() {
        var parent = this._selection.focused() && this._selection.focused().parent;
        parent && this._selection.focused(parent);
    }
    moveSelectedControls(leftUp, isHoriz, sign) {
        var focusedControl = this._selection.focused();
        if (!focusedControl || focusedControl && focusedControl.getControlModel().getMetaData().isCopyDeny) {
            return;
        }
        this._undoEngine && this._undoEngine().start();
        var distance = 1, axisProperty = isHoriz ? 'left' : 'top', lengthProperty = isHoriz ? 'width' : 'height', minAxis, maxSide, newAxis;
        if (focusedControl.rect) {
            minAxis = focusedControl.rect()[axisProperty];
            maxSide = focusedControl.rect()[axisProperty] + focusedControl.rect()[lengthProperty];
        }
        else {
            return;
        }
        this._selection.selectedItems.filter((item) => { return !item.locked; }).forEach((item) => {
            var axis = item.rect()[axisProperty];
            if (axis < minAxis) {
                minAxis = axis;
            }
        });
        this._selection.selectedItems.filter((item) => { return !item.locked; }).forEach((item) => {
            var side = item.rect()[axisProperty] + item.rect()[lengthProperty];
            if (side > maxSide) {
                maxSide = side;
            }
        });
        if ((leftUp && minAxis <= 0) || (!focusedControl.parent.rect || (!leftUp && maxSide.toFixed(5) >= focusedControl.parent.rect()[lengthProperty]))) {
            return;
        }
        else {
            this._selection.selectedItems.filter((item) => { return !item.locked; })
                .filter((item) => { return !!item.rect; })
                .forEach((item) => {
                var newVal = {}, itemAxisProperty = item.rect()[axisProperty], itemLengthProperty = item.rect()[lengthProperty], parentLengthProperty = item.parent.rect()[lengthProperty];
                newAxis = itemAxisProperty + sign * distance;
                if ((leftUp && newAxis >= 0) || (!leftUp && (newAxis + itemLengthProperty) <= parentLengthProperty)) {
                    newVal[axisProperty] = newAxis;
                }
                if (!leftUp && (newAxis + itemLengthProperty) > parentLengthProperty) {
                    newVal[axisProperty] = parentLengthProperty - itemLengthProperty;
                }
                if (leftUp && newAxis < 0 && itemAxisProperty > 0) {
                    newVal[axisProperty] = 0;
                }
                item.rect(newVal);
            });
        }
        this._undoEngine && this._undoEngine().end();
    }
}
class _keyboardHelper_KeyDownHandlersManager {
    constructor(targetElement) {
        this._handlers = [];
        this._targetElement = targetElement;
    }
    get _activeHandler() {
        return this._handlers.length > 0 ? this._handlers[this._handlers.length - 1] : null;
    }
    _removeHandler(handler, eventName) {
        var index = this._handlers.indexOf(handler);
        if (index < 0)
            return;
        this._handlers.splice(index, 1);
        if (index === this._handlers.length) {
            this._targetElement.removeEventListener(eventName, handler);
            if (this._activeHandler)
                this._targetElement.addEventListener(eventName, this._activeHandler);
        }
    }
    bindHandler(element, handler, eventName = 'keydown') {
        if (this._activeHandler)
            this._targetElement.removeEventListener(eventName, this._activeHandler);
        var _handler = (e) => {
            if (external_jQuery_["fn"].constructor(this._targetElement).closest('.dx-designer').length > 0 ||
                external_jQuery_["fn"].constructor(e.target).closest('.dx-designer').length > 0 ||
                e.target === document.body)
                handler(e);
        };
        this._handlers.push(_handler);
        this._targetElement.addEventListener(eventName, _handler);
        Object(_internal["c" /* addDisposeCallback */])(element, () => { this._removeHandler(_handler, eventName); });
    }
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/serializer/_utils.js
var _utils = __webpack_require__(6);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_arrayutils.js


function createObservableReverseArrayMapCollection(elementModels, target, createItem) {
    var array = target();
    elementModels.peek().forEach(item => {
        var surface = createItem(item);
        array.splice(0, 0, surface);
    });
    target.valueHasMutated();
    return elementModels.subscribe((args) => {
        var unwrapedTarget = target();
        var targetLength = unwrapedTarget.length;
        args.forEach((changeSet) => {
            if (changeSet.status === 'deleted') {
                unwrapedTarget.splice(unwrapedTarget.indexOf(changeSet.value.surface), 1);
                targetLength--;
            }
        });
        args.forEach((changeSet) => {
            if (changeSet.status === 'added') {
                unwrapedTarget.splice(targetLength - changeSet.index, 0, createItem(changeSet.value));
                targetLength++;
            }
        });
        target.valueHasMutated();
    }, null, 'arrayChange');
}
function createObservableArrayMapCollection(elementModels, target, createItem) {
    var array = target();
    elementModels.peek().forEach(item => {
        var surface = createItem(item);
        array.push(surface);
    });
    target.valueHasMutated();
    return elementModels.subscribe((args) => {
        var startIndex = target().length, deleteCount = 0, valuesToAdd = [];
        args.forEach((changeSet) => {
            if (changeSet.status === 'deleted') {
                deleteCount++;
                if (changeSet.index < startIndex) {
                    startIndex = changeSet.index;
                }
            }
        });
        args.forEach((changeSet) => {
            if (changeSet.status === 'added') {
                if (changeSet.index < startIndex) {
                    startIndex = changeSet.index;
                }
                valuesToAdd.push(createItem(changeSet.value));
            }
        });
        target.splice.apply(target, [startIndex, deleteCount].concat(valuesToAdd));
    }, null, 'arrayChange');
}
function deserializeChildArray(model, parent, creator) {
    var result = Object.keys(model || {}).map(propertyName => creator(model[propertyName]));
    return Object(_utils["e" /* knockoutArrayWrapper */])(result, (array, event) => {
        if (event === 'beforeChange') {
            return;
        }
        if (event === 'arrayChange') {
            for (var i = 0; i < array.length; i++) {
                parent !== array[i].value.parentModel() && array[i].value.parentModel(parent);
            }
        }
        else {
            for (var i = 0; i < array.length; i++) {
                parent !== array[i].parentModel() && array[i].parentModel(parent);
            }
        }
    });
}
function getFirstItemByPropertyValue(array, propertyName, propertyValue, fromIndex) {
    var fromIndex = fromIndex || 0;
    for (var i = fromIndex; i < array.length; i++) {
        var value = external_ko_["isObservable"](array[i][propertyName]) ? array[i][propertyName].peek() : array[i][propertyName];
        if (value === propertyValue) {
            return array[i];
        }
    }
    return null;
}
function findFirstItemMatchesCondition(array, predicate) {
    for (var i = 0; i < array.length; i++) {
        if (predicate(array[i])) {
            return array[i];
        }
    }
    return null;
}
var find = findFirstItemMatchesCondition;
function binaryIndexOf(ar, el, compare) {
    var m = 0;
    var n = ar.length - 1;
    while (m <= n) {
        var k = (n + m) >> 1;
        var cmp = compare(el, ar[k]);
        if (cmp > 0) {
            m = k + 1;
        }
        else if (cmp < 0) {
            n = k - 1;
        }
        else {
            return k;
        }
    }
    return ~m;
}
function compareArrays(array1, array2) {
    if (!array1 || !array2)
        return false;
    if (array1.length !== array2.length)
        return false;
    for (var i = 0; i < array1.length; i++) {
        if (array1[i] !== array2[i])
            return false;
    }
    return true;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_controlElementBase.js


class _controlElementBase_AccessibilityControlElementBase extends utils["a" /* Disposable */] {
    constructor(element) {
        super();
        this.element = element;
        this._eventListeners = [];
    }
    dispose() {
        super.dispose();
        this._eventListeners.forEach((item) => { item.element.removeEventListener(item.eventType, item.listener); });
        this._eventListeners.length = 0;
        this.element = null;
    }
    addListener(element, eventType, handler) {
        var listener = (e) => {
            handler.call(this, e);
        };
        element.addEventListener(eventType, listener);
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            element.removeEventListener(eventType, listener);
        });
        this._eventListeners.push({ element: element, eventType: eventType, listener: listener });
    }
    setTabIndex(index) {
        this.element.setAttribute('tabindex', index);
    }
    setFocus() {
        this.element.focus();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_keyboardHelperBase.js




class _keyboardHelperBase_AccessibilityKeyboardHelperBase extends _keyboardHelper_KeyboardHelperBase {
    constructor() {
        super();
        this.childrenInitialized = false;
        this.accessibilityCompliantEnabled = false;
        this.focusFirstFocusableDescendant = false;
        this.controlElements = [];
        this._eventListeners = [];
        this.setTabIndexes = (index) => {
            this.controlElements.forEach(button => button.setTabIndex(index));
        };
        this.liveRegion = () => {
            if (!this.liveRegionId)
                return null;
            if (!this._liveRegion || !this._liveRegion.element) {
                this._liveRegion = {
                    element: document.getElementById(this.liveRegionId),
                    changeText: (text, timeout = 200) => {
                        return setTimeout(() => {
                            if (this._liveRegion.element)
                                this._liveRegion.element.textContent = text;
                        }, timeout);
                    }
                };
            }
            return this._liveRegion;
        };
        this.shortcutMap = {
            Esc: (e) => { return this.handleEscKey(e); },
            Tab: (e) => {
                var shiftKey = !!(e && e.shiftKey);
                return shiftKey ? this.handleShiftTabKey(e) : this.handleTabKey(e);
            },
            Enter: (e) => { return this.handleEnterKey(e); },
            Space: (e) => { return this.handleSpaceKey(e); },
            End: (e) => { return this.handleEndKey(e); },
            Home: (e) => { return this.handleHomeKey(e); },
            Up: (e) => { return this.handleUpArrowKey(e); },
            Down: (e) => { return this.handleDownArrowKey(e); },
            Left: (e) => { return this.handleLeftArrowKey(e); },
            Right: (e) => { return this.handleRightArrowKey(e); },
        };
        this.childrenShortcutMap = {
            Tab: (e, index) => {
                var shiftKey = !!(e && e.shiftKey);
                return shiftKey ? this.itemHandleShiftTabKey(e, index) : this.itemHandleTabKey(e, index);
            },
            Enter: (e, index) => { return this.itemHandleEnterKey(e, index); },
            Space: (e, index) => { return this.itemHandleSpaceKey(e, index); },
            End: (e, index) => { return this.itemHandleEndKey(e, index); },
            Home: (e, index) => { return this.itemHandleHomeKey(e, index); },
            Up: (e, index) => { return this.itemHandleUpArrowKey(e, index); },
            Down: (e, index) => { return this.itemHandleDownArrowKey(e, index); },
            Left: (e, index) => { return this.itemHandleLeftArrowKey(e, index); },
            Right: (e, index) => { return this.itemHandleRightArrowKey(e, index); },
            Esc: (e, index) => { return this.itemHandleEscKey(e, index); },
        };
    }
    _disposeItems() {
        this._eventListeners.forEach((item) => { item.element.removeEventListener(item.eventType, item.listener); });
        this._eventListeners.length = 0;
        this.disposeArray(this.controlElements);
        this.controlElements.length = 0;
    }
    initialize() {
        this._disposeItems();
        if (!this._elementContainer)
            return;
        var htmlElements = Array.prototype.slice.call(this._elementContainer.querySelectorAll('.' + this.controlElementClassName));
        if (!htmlElements.length)
            return;
        htmlElements.forEach((element, index) => {
            var newItem = this.createControlElement(element, index);
            if (newItem) {
                this.controlElements.push(newItem);
            }
        });
        this.controlElements.forEach((item, index) => {
            this.addListener(item.element, index, 'click', this.clickHandler);
        });
        this.childrenInitialized = true;
    }
    getIndexByElement(htmlElement) {
        return this.controlElements.map(element => element.element).indexOf(htmlElement);
    }
    createControlElement(element, index) {
        return new _controlElementBase_AccessibilityControlElementBase(element);
    }
    getContainer() {
        return this._elementContainer;
    }
    changeFocus(index, roundTrip = true) {
        var elCount = this.controlElements.length - 1;
        if (index < 0)
            index = roundTrip ? elCount : 0;
        if (index > elCount)
            index = roundTrip ? 0 : elCount;
        this.controlElements[index].setFocus();
        return index;
    }
    bindHandler(elementContainer) {
        this._elementContainer = elementContainer;
        var handlersManager = new _keyboardHelper_KeyDownHandlersManager(this._elementContainer);
        this.initialize();
        var handler = (e) => {
            var target = e.target;
            if (findFirstItemMatchesCondition(Object.keys(target.classList), (key) => target.classList[key] === this.controlElementClassName) && this.processChildrenShortcut(e, this.getIndexByElement(target))
                || this.processShortcut(e)) {
                e.stopPropagation();
                e.preventDefault();
            }
        };
        handlersManager.bindHandler(this._elementContainer, handler);
    }
    handleEscKey(e, index) {
        if (this._prevActiveElement) {
            this._prevActiveElement.focus();
            return true;
        }
        return false;
    }
    handleTabKey(e) {
        return false;
    }
    handleShiftTabKey(e) {
        return false;
    }
    handleEnterKey(e) {
        return false;
    }
    handleSpaceKey(e) {
        return false;
    }
    handleEndKey(e) {
        return false;
    }
    handleHomeKey(e) {
        return false;
    }
    handleUpArrowKey(e) {
        return false;
    }
    handleDownArrowKey(e) {
        return false;
    }
    handleLeftArrowKey(e) {
        return false;
    }
    handleRightArrowKey(e) {
        return false;
    }
    itemHandleHomeKey(e, index) {
        this.changeFocus(0);
        return true;
    }
    itemHandleEndKey(e, index) {
        this.changeFocus(this.controlElements.length - 1);
        return true;
    }
    itemHandleLeftArrowKey(e, index) {
        return false;
    }
    itemHandleRightArrowKey(e, index) {
        return false;
    }
    itemHandleEnterKey(e, index) {
        return false;
    }
    itemHandleSpaceKey(e, index) {
        return false;
    }
    itemHandleUpArrowKey(e, index) {
        return false;
    }
    itemHandleDownArrowKey(e, index) {
        return false;
    }
    itemHandleTabKey(e, index) {
        return false;
    }
    itemHandleShiftTabKey(e, index) {
        return false;
    }
    itemHandleEscKey(e, index) {
        return false;
    }
    setFocusToPrevious(currentIndex, roundTrip = true) {
        return this.changeFocus(currentIndex - 1, roundTrip);
    }
    setFocusToNext(currentIndex, roundTrip = true) {
        return this.changeFocus(currentIndex + 1, roundTrip);
    }
    clickHandler(e, index) {
        this.changeFocus(index);
    }
    dispose() {
        super.dispose();
        this._disposeItems();
        this._elementContainer = null;
        this._prevActiveElement = null;
    }
    addListener(element, index, eventType, handler) {
        var listener = (e) => {
            handler.call(this, e, index);
        };
        element.addEventListener(eventType, listener);
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            element.removeEventListener(eventType, listener);
        });
        this._eventListeners.push({ element: element, eventType: eventType, listener: listener });
    }
    focus(prevActiveElement) {
        if (!this.childrenInitialized && !this._elementContainer)
            return;
        this._prevActiveElement = (prevActiveElement || document.activeElement);
        if (this.childrenInitialized && !this.focusFirstFocusableDescendant) {
            this.changeFocus(this.startIndex || 0);
        }
        else {
            var focusable = this._elementContainer.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])');
            focusable.length && focusable[0].focus();
        }
    }
    lastFocusItem() {
        return document.getElementById('dxrd-designer-last-focus-item-blank');
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_accordionKeyboardHelper.js


class _accordionKeyboardHelper_AccordionKeyboardHelper extends _keyboardHelperBase_AccessibilityKeyboardHelperBase {
    constructor() {
        super(...arguments);
        this.controlElementClassName = 'dxrd-accessibility-accordion-trigger';
        this.focusFirstFocusableDescendant = true;
    }
    _getElementsCount() {
        return Array.prototype.slice.call(this.getContainer().querySelectorAll('.' + this.controlElementClassName)).length;
    }
    _defferedInit() {
        setTimeout(() => {
            if (this.controlElements.length !== this._getElementsCount()) {
                this.initialize();
            }
        }, 20);
    }
    _collapseItem(item) {
        var collapsed = external_ko_["dataFor"](item).collapsed;
        collapsed(!collapsed());
        this._defferedInit();
    }
    initialize() {
        super.initialize();
        this.setTabIndexes(0);
    }
    itemHandleUpArrowKey(e, index) {
        this.setFocusToPrevious(index);
        return true;
    }
    itemHandleDownArrowKey(e, index) {
        this.setFocusToNext(index);
        return true;
    }
    itemHandleEnterKey(e, index) {
        this._collapseItem(e.target);
        return true;
    }
    itemHandleSpaceKey(e, index) {
        this._collapseItem(e.target);
        return true;
    }
    clickHandler(e, index) {
        this._defferedInit();
        super.clickHandler(e, index);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_controlElementWithParentHighlight.js

class _controlElementWithParentHighlight_ControlElementWithParentHighlight extends _controlElementBase_AccessibilityControlElementBase {
    constructor(element, _parentElement) {
        super(element);
        this.element = element;
        this._parentElement = _parentElement;
        this._borderCssClassName = ['dxd-border-accented', 'dx-accessibility-container-highlight'];
        this.toolbarItemHandleFocus = () => {
            this._parentElement.classList.add(...this._borderCssClassName);
        };
        this.toolbarItemHandleBlur = () => {
            this._parentElement.classList.remove(...this._borderCssClassName);
        };
        element.addEventListener('focus', this.toolbarItemHandleFocus);
        element.addEventListener('blur', this.toolbarItemHandleBlur);
    }
    dispose() {
        this.element.removeEventListener('focus', this.toolbarItemHandleFocus);
        this.element.removeEventListener('blur', this.toolbarItemHandleBlur);
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_internal.js

var accessibilityFontSizeZoomFactor = Object(_internal["d" /* createGlobalModuleVariableFunc */])(1);
var calculateWithZoomFactor = function (value) {
    return value * accessibilityFontSizeZoomFactor();
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_keyboardHelperWithArrowButtonBase.js

class _keyboardHelperWithArrowButtonBase_KeyboardHelperWithArrowButtonBase extends _keyboardHelperBase_AccessibilityKeyboardHelperBase {
    constructor() {
        super(...arguments);
        this.startIndex = 0;
    }
    resetTabIndexes() {
        this.setTabIndexes('-1');
    }
    initialize() {
        super.initialize();
        this.resetTabIndexes();
        this.controlElements[this.startIndex] && this.controlElements[this.startIndex].element.setAttribute('tabindex', '0');
    }
    changeFocus(index, roundTrip = true) {
        this.resetTabIndexes();
        var nextIndex = super.changeFocus(index, roundTrip);
        this.controlElements[nextIndex].setTabIndex('0');
        this.controlElements[nextIndex].setFocus();
        this.startIndex = nextIndex;
        return nextIndex;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_listKeyboardHelper.js


class _listKeyboardHelper_ListKeyboardHelper extends _keyboardHelperWithArrowButtonBase_KeyboardHelperWithArrowButtonBase {
    constructor() {
        super(...arguments);
        this.controlElementClassName = 'dx-accessibility-list-item';
    }
    createControlElement(element, index) {
        return new _controlElementWithParentHighlight_ControlElementWithParentHighlight(element, this.getContainer());
    }
    itemHandleUpArrowKey(e, index) {
        this.startIndex = this.setFocusToPrevious(index, false);
        return true;
    }
    itemHandleDownArrowKey(e, index) {
        this.startIndex = this.setFocusToNext(index, false);
        return true;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_rightPanelKeyboardHelper.js



class _rightPanelKeyboardHelper_RightPanelKeyboardHelper extends _keyboardHelperBase_AccessibilityKeyboardHelperBase {
    constructor(_tabPanel) {
        super();
        this._tabPanel = _tabPanel;
        this.controlElementClassName = 'dx-accessibility-rightpanel-button';
    }
    bindHandler(el) {
        super.bindHandler(el);
        this._disposables.push(external_ko_["computed"](() => {
            this._tabPanel.tabs.forEach((tab) => { external_ko_["unwrap"](tab.visible); });
            this.initialize();
        }).extend(({ rateLimit: { timeout: 1, method: 'notifyWhenChangesStop' } })));
    }
    initialize() {
        super.initialize();
        this.setTabIndexes(0);
    }
    createControlElement(element, index) {
        if (external_ko_["unwrap"](this._tabPanel.tabs[index].visible))
            return new _controlElementBase_AccessibilityControlElementBase(element);
    }
    itemHandleDownArrowKey(e, index) {
        this.setFocusToNext(index, true);
        return true;
    }
    itemHandleUpArrowKey(e, index) {
        this.setFocusToPrevious(index, true);
        return true;
    }
}

// EXTERNAL MODULE: external "DevExpress.ui.dxSelectBox"
var external_DevExpress_ui_dxSelectBox_ = __webpack_require__(46);
var external_DevExpress_ui_dxSelectBox_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxSelectBox_);

// EXTERNAL MODULE: external "DevExpress.ui.dxMenu"
var external_DevExpress_ui_dxMenu_ = __webpack_require__(47);
var external_DevExpress_ui_dxMenu_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxMenu_);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/property-grid/localization/localization_utils.js
var localization_utils = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_toolbarKeyboardHelper.js






class _toolbarKeyboardHelper_ToolbarKeyboardHelper extends _keyboardHelperWithArrowButtonBase_KeyboardHelperWithArrowButtonBase {
    constructor(_buttonModels) {
        super();
        this._buttonModels = _buttonModels;
        this.controlElementClassName = 'dx-accessibility-toolbar-item';
        this.liveRegionId = 'dxrd-preview-toolbar-live-region';
        this._disposables.push(external_ko_["computed"](() => {
            this.buttonModels.forEach((button) => { external_ko_["unwrap"](button.visible); });
            setTimeout(() => this.initialize(), 100);
        }));
    }
    createControlElement(element, index) {
        if (external_ko_["unwrap"](this.buttonModels[index].visible))
            return new _toolbarKeyboardHelper_ToolbarItemElement(element, this.getContainer(), this.buttonModels[index], this.liveRegion.bind(this));
    }
    itemHandleEnterKey(e, index) {
        var item = this.controlElements[index];
        item.actionExecute();
        return true;
    }
    itemHandleSpaceKey(e, index) {
        var item = this.controlElements[index];
        item.actionExecute();
        return true;
    }
    itemHandleLeftArrowKey(e, index) {
        this.setFocusToPrevious(index);
        return true;
    }
    itemHandleRightArrowKey(e, index) {
        this.setFocusToNext(index);
        return true;
    }
    get buttonModels() {
        return external_ko_["unwrap"](this._buttonModels);
    }
}
class _toolbarKeyboardHelper_ToolbarItemElement extends _controlElementWithParentHighlight_ControlElementWithParentHighlight {
    constructor(element, _toolbarElement, _toolbarItemModel, _liveRegion) {
        super(element, _toolbarElement);
        this.element = element;
        this._toolbarItemModel = _toolbarItemModel;
        this._liveRegion = _liveRegion;
        this._selectBox = external_DevExpress_ui_dxSelectBox_default.a.getInstance(element.children[0]);
        this._menu = external_DevExpress_ui_dxMenu_default.a.getInstance(element.children[0]);
    }
    _complexItem() {
        if (this._selectBox || this._menu)
            return true;
        return false;
    }
    dispose() {
        super.dispose();
        this._menu = null;
        this._selectBox = null;
    }
    setFocus() {
        if (this._complexItem() && this.element.getAttribute('aria-disabled') !== 'true')
            this._liveRegion().changeText(Object(localization_utils["c" /* getLocalization */])('press Enter or Space to activate the editor', 'ASPxReportsStringId.WebDocumentViewer_AriaActivateEditor'), 200);
        else
            this._liveRegion().changeText('');
        return super.setFocus();
    }
    actionExecute() {
        if (this._complexItem()) {
            this._liveRegion().changeText(Object(localization_utils["c" /* getLocalization */])('Press Alt ↓ or Alt  ↑ to navigate the editor. Press Shift Tab to exit navigation mode.', 'ASPxReportsStringId.WebDocumentViewer_AriaEditorKeyboardNavigation'), 500);
        }
        if (this._selectBox) {
            this._selectBox.focus();
            return;
        }
        if (this._menu) {
            this._menu.focus();
            return;
        }
        if (!external_ko_["unwrap"](this._toolbarItemModel.disabled))
            this._toolbarItemModel.clickAction();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/accessibility/_treeListKeyboardHelper.js



class _treeListKeyboardHelper_TreeListKeyboardHelper extends _listKeyboardHelper_ListKeyboardHelper {
    constructor() {
        super(...arguments);
        this.controlElementClassName = 'dx-accessibility-treelist-item';
    }
    _setFocusToParentNode(item, index) {
        var offset = 1;
        var parentItems = item.parent.items();
        var indexOfParent = parentItems.indexOf(item);
        var getChildCount = (item, _offset) => {
            if (item.hasItems && !item.collapsed()) {
                item.items().forEach(element => {
                    _offset += getChildCount(element, 0);
                });
            }
            _offset += 1;
            return _offset;
        };
        for (var i = 0; i < indexOfParent; i++) {
            offset += getChildCount(parentItems[i], 0);
        }
        this.changeFocus(index - offset);
    }
    _toggleCollapsed(item, model) {
        this.startIndex = this.getIndexByElement(item);
        model.toggleCollapsed();
    }
    _toggleSelected(el) {
        this._getItemModel(el).toggleSelected();
    }
    _getItemModel(el) {
        return external_ko_["dataFor"](el);
    }
    createControlElement(element, index) {
        return new _controlElementBase_AccessibilityControlElementBase(element);
    }
    itemHandleLeftArrowKey(e, index) {
        var item = this._getItemModel(e.target);
        if (item.hasItems && !item.collapsed()) {
            this._toggleCollapsed(e.target, item);
        }
        else {
            this._setFocusToParentNode(item, index);
        }
        return true;
    }
    itemHandleRightArrowKey(e, index) {
        var item = this._getItemModel(e.target);
        if (item.hasItems) {
            if (item.collapsed())
                this._toggleCollapsed(e.target, item);
            else
                this.changeFocus(index + 1, false);
        }
        return true;
    }
    itemHandleEnterKey(e, index) {
        this._toggleSelected(e.target);
        return true;
    }
    itemHandleSpaceKey(e, index) {
        this._toggleSelected(e.target);
        return true;
    }
    clickHandler(e, index) {
        super.clickHandler(e, index);
        this.startIndex = index;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/internal/_svgTemplateEngine.js

class SvgTemplateSource {
    constructor(template, _data, _templates) {
        this._data = _data;
        this._templates = _templates;
        this.templateName = template;
    }
    data(key, value) {
        this._data[this.templateName] = this._data[this.templateName] || {};
        if (arguments.length === 1) {
            return this._data[this.templateName][key];
        }
        this._data[this.templateName][key] = value;
    }
    text(value) {
        if (arguments.length === 0) {
            if (this.templateName in this._templates)
                return this._templates[this.templateName];
            else
                throw new Error('Cannot find template with ID ' + this.templateName);
        }
        this._templates[this.templateName] = value;
    }
}
class _svgTemplateEngine_SvgTemplatesEngine {
    constructor() {
        this._hasTemplate = (name, findEverywhere) => {
            return findEverywhere && !!document.getElementById(name) || this._templates.hasOwnProperty(name);
        };
        this._data = {};
        this._templates = {};
    }
    static get Instance() {
        return this._instance || (this._instance = new this());
    }
    static get templates() {
        return _svgTemplateEngine_SvgTemplatesEngine.Instance._templates;
    }
    static addTemplate(templateName, templateMarkup) {
        _svgTemplateEngine_SvgTemplatesEngine.templates[templateName] = templateMarkup;
    }
    static addTemplates(templates) {
        external_ko_["utils"].extend(_svgTemplateEngine_SvgTemplatesEngine.templates, templates);
    }
    static getExistingTemplate(name, findEverywhere = true) {
        return _svgTemplateEngine_SvgTemplatesEngine.Instance._hasTemplate(name, findEverywhere) ? name : undefined;
    }
}
var makeTemplateSource = external_ko_["templateEngine"].prototype['makeTemplateSource'];
external_ko_["templateEngine"].prototype['makeTemplateSource'] = function (template, doc) {
    if (typeof template === 'string' && _svgTemplateEngine_SvgTemplatesEngine.getExistingTemplate(template, false) && !document.getElementById(template)) {
        return new SvgTemplateSource(template, _svgTemplateEngine_SvgTemplatesEngine['_instance']['_data'], _svgTemplateEngine_SvgTemplatesEngine.templates);
    }
    else {
        return makeTemplateSource.apply(this, [template, doc]);
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/templateUtils.js

function addTemplate(templateName, templateMarkup) {
    _svgTemplateEngine_SvgTemplatesEngine.addTemplate(templateName, templateMarkup);
}
function getTemplate(id) {
    var id = id[0] === '#' ? id.substr(1) : id;
    var item = document.querySelector('#' + id);
    return item && item.innerHTML || _svgTemplateEngine_SvgTemplatesEngine.templates[id];
}

// EXTERNAL MODULE: external "DevExpress.ui.notify"
var external_DevExpress_ui_notify_ = __webpack_require__(48);
var external_DevExpress_ui_notify_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_notify_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_surfaceHelpers.js

function findSurface(viewModel) {
    return !!viewModel ? viewModel['surface'] : null;
}
function getControlNewAbsolutePositionOnResize(snapHelper, absolutePosition, ui, delta) {
    var newAbsolutePosition = {
        top: absolutePosition.top + delta.y,
        left: absolutePosition.left + delta.x,
        bottom: absolutePosition.top + ui.originalSize.height,
        right: absolutePosition.left + ui.originalSize.width
    };
    if (delta.x !== 0) {
        newAbsolutePosition.left = snapHelper.snapPosition(newAbsolutePosition.left, false);
    }
    else if (delta.width !== 0) {
        newAbsolutePosition.right = snapHelper.snapPosition(absolutePosition.left + ui.size.width, false);
    }
    if (delta.y !== 0) {
        newAbsolutePosition.top = snapHelper.snapPosition(newAbsolutePosition.top, true);
    }
    else if (delta.height !== 0) {
        newAbsolutePosition.bottom = snapHelper.snapPosition(absolutePosition.top + ui.size.height, true);
    }
    return newAbsolutePosition;
}
function num(v) {
    return parseInt(v, 10) || 0;
}
function getControlRect(element, control, surface) {
    var curleft = num(element.css('left')), curtop = num(element.css('top'));
    if (surface.rtl()) {
        var posLeft = surface.pageWidth() - surface.margins.left() - element.width();
        if (curleft > posLeft) {
            curleft = posLeft;
        }
    }
    var bounds = element[0].getBoundingClientRect();
    return { top: curtop, left: curleft, width: bounds.width, height: bounds.height };
}
function minHeightWithoutScroll(element) {
    return Math.min(element.scrollHeight, element.offsetHeight, element.clientHeight) + element.offsetTop;
}
function chooseBetterPositionOf(html, designer) {
    return designer && (minHeightWithoutScroll(html) < minHeightWithoutScroll(designer) ? window : designer) || window;
}
function updateSurfaceContentSize(surfaceSize, root, rtl = false) {
    return () => {
        var $root = external_jQuery_["fn"].constructor(root).find('.dxrd-designer').eq(0);
        var toolboxWidth = $root.find('.dxrd-toolbox-wrapper:visible').outerWidth() || 0;
        var rightAreaWidth = ($root.find('.dxrd-right-panel:visible').outerWidth() || 0) + ($root.find('.dxrd-right-tabs:visible').outerWidth() || 0);
        var otherWidth = rightAreaWidth + toolboxWidth, surfaceWidth = $root.width() - (otherWidth);
        $root.find('.dxrd-surface-wrapper').eq(0).css({
            'left': rtl ? rightAreaWidth : toolboxWidth,
            'right': !rtl ? rightAreaWidth : toolboxWidth,
            'width': surfaceWidth,
            'bottom': $root.find('.dxrd-navigation-panel-wrapper:visible').outerHeight() || 0
        });
        surfaceSize(surfaceWidth);
    };
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_debug.js
var DEBUG = false;
function DebugMode(value) {
    DEBUG = value;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_infoMessageHelpers.js




var NotifyType = {
    info: 'info',
    warning: 'warning',
    error: 'error',
    success: 'success'
};
var wrappedConsole = (console => {
    var getWrappedMethod = methodName => (function (...args) {
        if (console && external_jQuery_["isFunction"](console[methodName])) {
            console[methodName].apply(console, arguments);
        }
    });
    return {
        info: getWrappedMethod('info'),
        warn: getWrappedMethod('warn'),
        error: getWrappedMethod('error')
    };
})(window.console);
function NotifyAboutWarning(msg, showForUser = false) {
    if (showForUser) {
        ShowMessage(msg);
    }
    if (DEBUG) {
        throw new Error(msg);
    }
    else {
        wrappedConsole.warn(msg);
    }
}
function _infoMessageHelpers_getErrorMessage(jqXHR) {
    return jqXHR && jqXHR.responseJSON && jqXHR.responseJSON.error ? jqXHR.responseJSON.error : '';
}
var _showMessage = (msg, type = 'error', displayTime, debugInfo, contentTemplate, containerElement) => {
    containerElement = containerElement || external_jQuery_["fn"].constructor('.dx-designer-viewport')[0];
    external_DevExpress_ui_notify_default()({
        message: msg,
        type: type,
        maxWidth: containerElement ? containerElement.clientWidth : undefined,
        position: { boundary: containerElement, collision: 'fit', of: chooseBetterPositionOf(document.documentElement, containerElement), my: 'bottom', at: 'bottom', offset: '0 -10' },
        container: containerElement,
        hideOnOutsideClick: true,
        closeOnSwipe: false,
        displayTime: displayTime || (type === 'error' ? 60000 : 3000),
        contentTemplate: contentTemplate
    });
};
var ShowMessage = _showMessage;
var _setShowMessageFunc = (func) => ShowMessage = func;
var _resetShowMessageFunc = () => ShowMessage = _showMessage;

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_processError.js

var _addErrorPrefix = true;
function _processError(errorThrown, deferred, jqXHR, textStatus, processErrorCallback) {
    var message = errorThrown;
    var error = _infoMessageHelpers_getErrorMessage(jqXHR);
    if (error && error !== message) {
        if (!_addErrorPrefix)
            message = error;
        else
            message += ': ' + error;
    }
    try {
        processErrorCallback ? processErrorCallback(message, jqXHR, textStatus) : NotifyAboutWarning(message);
    }
    finally {
        deferred.reject(jqXHR, textStatus, errorThrown);
    }
}
var _errorProcessor = {
    handlers: [],
    call: (e) => {
        for (var i = 0; i < _errorProcessor.handlers.length; i++) {
            _errorProcessor.handlers[i](e);
        }
    }
};
function processErrorEvent(func) {
    if (func) {
        _errorProcessor.handlers.push(func);
    }
    return {
        dispose: () => {
            func && _removeErrorEvent(func);
        }
    };
}
function _removeErrorEvent(func) {
    _errorProcessor.handlers.splice(_errorProcessor.handlers.indexOf(func), 1);
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/binding/_requestHelper.js
class RequestHelper {
    static generateUri(host, uri) {
        host = host || '';
        if (host && host[host.length - 1] === '/' && uri && uri[0] === '/') {
            return host + uri.substring(1);
        }
        return host + uri;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/binding/_jsDesignerBindingCommon.js







class _jsDesignerBindingCommon_JSDesignerBindingCommon extends utils["a" /* Disposable */] {
    constructor(_options, _customEventRaiser) {
        super();
        this._options = _options;
        this._customEventRaiser = _customEventRaiser;
        this._templateHtml = getTemplate('dxrd-designer');
    }
    dispose() {
        super.dispose();
        if (this.sender && this.sender instanceof utils["a" /* Disposable */])
            this.sender.dispose();
        this.removeProperties();
    }
    _fireEvent(eventName, args) {
        if (this._customEventRaiser) {
            this._customEventRaiser(eventName, args);
            return;
        }
        this._options && this._options.callbacks && this._options.callbacks[eventName] && this._options.callbacks[eventName](this.sender, args);
    }
    _warnForIncorrectCallbackName(publicName, privateName) {
        console.warn('The callback name must be different. Use "' + publicName + '" instead of "' + privateName + '" to call the function with the correct arguments.');
    }
    _checkCallbackName(availableEvents) {
        Object.keys(this._options.callbacks).forEach(callbackName => {
            availableEvents.forEach(event => {
                if (callbackName === event.privateName) {
                    this._warnForIncorrectCallbackName(event.publicName, callbackName);
                }
            });
        });
    }
    _getServerActionUrl(host, uri) {
        return RequestHelper.generateUri(host, uri);
    }
    _generateCallbackDictionary(eventsArray, prefix) {
        var events = _jsDesignerBindingCommon_JSDesignerBindingCommon.convertCallbackArrayToDictionary(eventsArray);
        var result = events;
        if (prefix && this._options.callbacks[prefix]) {
            Object.keys(events).forEach(propertyName => {
                result[propertyName] = this._options.callbacks[prefix][propertyName] || events[propertyName];
            });
        }
        else {
            Object.keys(events).forEach(propertyName => {
                result[propertyName] = this._options.callbacks[propertyName] || events[propertyName];
            });
        }
        return result;
    }
    _getLocalizationRequest() {
        var deferred = external_jQuery_["Deferred"]();
        var requestOptions = this._options.requestOptions;
        if (requestOptions.getLocalizationAction) {
            var actionUrl = this._getServerActionUrl(requestOptions.host, requestOptions.getLocalizationAction);
            external_jQuery_["getJSON"](actionUrl)
                .fail(function (jqXHR, textStatus, errorThrown) {
                try {
                    _processError(errorThrown.message, external_jQuery_["Deferred"](), jqXHR, textStatus);
                }
                finally {
                    deferred.reject();
                }
            }).done((localization) => {
                deferred.resolve(localization);
            });
        }
        else {
            deferred.resolve();
        }
        return deferred.promise();
    }
    _createDisposeFunction(element) {
        Object(_internal["c" /* addDisposeCallback */])(element, () => {
            this.dispose();
        });
    }
    static convertCallbackArrayToDictionary(callbackArray) {
        var callbacks = {};
        callbackArray.forEach((event) => { callbacks[event['privateName']] = event['callback']; });
        return callbacks;
    }
}
class _jsDesignerBindingCommon_DxAnalyticsComponentCommon {
    constructor(_element, _options) {
        this._element = _element;
        this._options = _options;
    }
    getBindingName() {
        return '';
    }
    render() {
        external_ko_["cleanNode"](this._element);
        this._element.setAttribute('data-bind', `${this.getBindingName()}: $data`);
        external_ko_["applyBindings"](this._options, this._element);
    }
    dispose() {
        external_ko_["cleanNode"](this._element);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/binding/_jsDesignerBindingCommonOptions.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/editorsInfo.js

class editorsInfo_EditorTemplates {
    constructor(_useDeferredRegistration = true) {
        this._useDeferredRegistration = _useDeferredRegistration;
        this._editorTemplates = {};
    }
    register(name, editorInfo) {
        if (!!this._editorTemplates[name] && !this._editorTemplates[name]._deferred) {
            throw Error(`Editor with name ${name} is already exists`);
        }
        else if (!this._editorTemplates[name]) {
            this._editorTemplates[name] = editorInfo;
        }
        else {
            delete this._editorTemplates[name]._deferred;
            Object(_utils["b" /* extend */])(this._editorTemplates[name], editorInfo);
        }
    }
    unregister(name) {
        delete this._editorTemplates[name];
    }
    registerEditors(editors) {
        for (var name in editors)
            this.register(name, editors[name]);
    }
    getEditor(name) {
        if (!this._editorTemplates[name] && this._useDeferredRegistration) {
            this._editorTemplates[name] = { _deferred: true };
        }
        return this._editorTemplates[name];
    }
}
var editorTemplates = new editorsInfo_EditorTemplates();

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/_metadata.js

var sizeFake = [
    { propertyName: 'height', displayName: 'Height', localizationId: 'AnalyticsCoreStringId.SizeF.Height', editor: editorTemplates.getEditor('numeric'), editorOptions: { min: 2 } },
    { propertyName: 'width', displayName: 'Width', localizationId: 'AnalyticsCoreStringId.SizeF.Width', editor: editorTemplates.getEditor('numeric'), editorOptions: { min: 2 } }
];
var locationFake = [
    { propertyName: 'x', displayName: 'X', editor: editorTemplates.getEditor('numeric') },
    { propertyName: 'y', displayName: 'Y', editor: editorTemplates.getEditor('numeric') }
];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/size.js


class size_Size {
    constructor(width, height) {
        this.isPropertyDisabled = (name) => void 0;
        this.height = external_ko_["observable"](height).extend({ 'dxdnum': { min: 2 } });
        this.width = external_ko_["observable"](width).extend({ 'dxdnum': { min: 2 } });
    }
    getInfo() {
        return sizeFake;
    }
    static fromString(value = '0, 0') {
        var components = value.split(',');
        return new size_Size(parseFloat(components[0]), parseFloat(components[1]));
    }
    toString() {
        return this.width() + ', ' + this.height();
    }
}
size_Size.unitProperties = ['width', 'height'];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_units.js

function roundingXDecimals(value, useFloor = false, x = 3) {
    return (useFloor ? Math.floor : Math.round)(value * Math.pow(10, x)) / Math.pow(10, x);
}
function unitsToPixel(val, measureUnit, zoom = 1) {
    var result;
    if (measureUnit === 'Test' || measureUnit === 'Pixels') {
        result = 1 * val;
    }
    else if (measureUnit === 'TenthsOfAMillimeter') {
        result = val * 3.78 / 10;
    }
    else {
        result = val * 96 / 100;
    }
    result = result * (zoom);
    return roundingXDecimals(result, true);
}
function pixelToUnits(val, measureUnit, zoom) {
    var result;
    if (measureUnit === 'Test' || measureUnit === 'Pixels') {
        result = 1 * val;
    }
    else if (measureUnit === 'TenthsOfAMillimeter') {
        result = val / 3.78 * 10;
    }
    else {
        result = val / 96 * 100;
    }
    result = result / (zoom);
    return roundingXDecimals(result);
}
function createUnitProperty(model, target, propertyName, property, measureUnit, zoom, afterCreation) {
    var lastVal = 0;
    target[propertyName] = external_ko_["pureComputed"]({
        read: () => {
            var val = property(model)(), newVal = unitsToPixel(val, measureUnit.peek(), zoom());
            if (Math.abs(newVal - lastVal) > 0.2) {
                lastVal = newVal;
                return lastVal;
            }
            return lastVal;
        },
        write: (val) => {
            if (Math.abs(val - lastVal) <= 0.2)
                return;
            lastVal = val;
            var result = pixelToUnits(val, measureUnit.peek(), zoom());
            property(model)(result);
        }
    });
    afterCreation(target[propertyName]);
}
function createUnitProperties(model, target, properties, measureUnit, zoom, afterCreation) {
    if (!properties)
        return;
    Object.keys(properties).forEach(propertyName => {
        createUnitProperty(model, target, propertyName, properties[propertyName], measureUnit, zoom, afterCreation);
    });
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_getNameHelpers.js


function getTypeNameFromFullName(controlType) {
    return controlType.split(',')[0].trim();
}
function getShortTypeName(controlType) {
    var fullTypeName = getTypeNameFromFullName(controlType), typeNameParts = fullTypeName.split('.');
    return typeNameParts[typeNameParts.length - 1];
}
function getControlTypeName(value) {
    var controlType = value.displayType && value.displayType() || value.controlType;
    if (value.getControlFactory) {
        var info = value.getControlFactory().getControlInfo(controlType);
        if (info.displayName)
            controlType = info.displayName;
    }
    return controlType && Object(localization_utils["c" /* getLocalization */])(getShortTypeName(controlType));
}
function getControlFullName(value) {
    if (!value)
        return '';
    var displayName = external_ko_["unwrap"](value.name) || external_ko_["unwrap"](value.displayName), controlType = getControlTypeName(value);
    return displayName + (controlType ? (' (' + controlType + ')') : '');
}
function getImageClassName(controlType, isTemplate = false) {
    var controlType = getTypeNameFromFullName(controlType || '').split('.').join('_'), name;
    if (controlType.indexOf('XR') === 0) {
        name = controlType.slice(2).toLowerCase();
    }
    else if (controlType === 'DevExpress_XtraReports_UI_XtraReport') {
        name = 'master_report';
    }
    return (isTemplate ? 'dxrd-svg-toolbox-' : 'dxrd-image-') + (name ? name : controlType.toLowerCase());
}
function getUniqueNameForNamedObjectsArray(objects, prefix, names) {
    if (prefix.indexOf('XR') === 0) {
        prefix = prefix[2].toLowerCase() + prefix.slice(3);
    }
    else {
        var indexBand = prefix.indexOf('Band');
        if (indexBand !== -1 && prefix !== 'SubBand') {
            prefix = prefix.slice(0, indexBand) + prefix.slice(indexBand + 4);
        }
    }
    return getUniqueName(names || objects.map((item) => { return external_ko_["unwrap"](item.name); }), prefix);
}
function getUniqueName(names, prefix, inculdeFirst = true) {
    var i = inculdeFirst ? 1 : 0, result = inculdeFirst ? (prefix + i) : prefix;
    while (names.filter((item) => { return item === result; }).length > 0) {
        i++;
        result = prefix + i;
    }
    return result;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/toolbox.js



class toolbox_ToolboxItem {
    constructor(info) {
        this.disabled = external_ko_["observable"](false);
        this.info = info;
    }
    get type() {
        return getTypeNameFromFullName(this.info['@ControlType']);
    }
    get imageClassName() {
        return [getImageClassName(this.type), this.disabled() ? 'dxrd-disabled-button' : ''].join(' ');
    }
    get imageTemplateName() {
        var _templateName = getImageClassName(this.type, true);
        return _svgTemplateEngine_SvgTemplatesEngine.getExistingTemplate(_templateName);
    }
    get index() {
        return this.info.index;
    }
    get displayName() {
        return this.info.displayName || this.type;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_utils.js

function getToolboxItems(controlsMap, defaultGroup = '') {
    var toolboxItems = [];
    Object.keys(controlsMap).forEach((controlType) => {
        if (!controlsMap[controlType].nonToolboxItem) {
            var item = {
                '@ControlType': controlType,
                displayName: controlsMap[controlType].displayName,
                index: controlsMap[controlType].toolboxIndex || 0,
                canDrop: controlsMap[controlType].canDrop,
                group: controlsMap[controlType].group || defaultGroup
            };
            if (controlsMap[controlType].size) {
                item['size'] = controlsMap[controlType].size;
            }
            if (controlsMap[controlType].defaultVal) {
                Object.keys(controlsMap[controlType].defaultVal).forEach((name) => {
                    item[name] = controlsMap[controlType].defaultVal[name];
                });
            }
            toolboxItems.push(new toolbox_ToolboxItem(item));
        }
    });
    return toolboxItems.sort((item1, item2) => { return item1.index - item2.index; });
}
function _utils_blur(element) {
    try {
        element['blur'] && element['blur']();
    }
    catch (e) {
        document.body.blur();
    }
}
const convertToCssPixelUnits = (value) => `${value}px`;
const convertFromCssPixelUnits = (value) => parseFloat(value.replace('px', ''));

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/dragDrop/_dragDropHandler.js






class _dragDropHandler_DragDropHandler extends utils["a" /* Disposable */] {
    constructor(surface, selection, undoEngine, snapHelper, dragHelperContent) {
        super();
        this._snapDisabled = false;
        this._size = new size_Size(0, 0);
        this.alwaysAlt = false;
        this.surface = surface;
        this.selection = selection;
        this.snapHelper = snapHelper;
        this.dragHelperContent = dragHelperContent;
        this.stopDrag = (ui, draggable, event) => {
            undoEngine() && undoEngine().start();
            this.doStopDrag(ui, draggable, event);
            undoEngine() && undoEngine().end();
            snapHelper && snapHelper.deactivateSnapLines();
        };
    }
    dispose() {
        super.dispose();
        this.surface = null;
        this.selection = null;
        this.snapHelper = null;
        this.dragHelperContent = null;
    }
    getTarget(event) {
        return event['toElement'] || (external_ko_["dataFor"](event.relatedTarget) && event.relatedTarget) || (event && event.target) || null;
    }
    _getAbsoluteSurfacePosition(uiElement) {
        return { left: convertFromCssPixelUnits(uiElement.dataset.leftPosition) - uiElement['delta'].left, top: convertFromCssPixelUnits(uiElement.dataset.topPosition) - uiElement['delta'].top };
    }
    addControl(control, dropTargetSurface, size) {
        var targetWidth = (dropTargetSurface['width'] && dropTargetSurface['width']()) || (dropTargetSurface['_width'] && dropTargetSurface['_width']());
        var underCursor = dropTargetSurface.underCursor();
        if (underCursor.x < targetWidth) {
            dropTargetSurface.getControlModel().addChild(control);
            var controlSurface = findSurface(control);
            if (!controlSurface)
                return;
            var width = size.width(), height = size.height();
            var left = (underCursor.x + width > targetWidth) ? (targetWidth - width - 1) : underCursor.x;
            controlSurface.rect({ left: left, top: Math.max(underCursor.y, 0), width: width, height: height });
            this.selection.initialize(controlSurface);
        }
    }
    recalculateSize(size) {
        var surface = external_ko_["unwrap"](this.surface);
        this._size.width(unitsToPixel(external_ko_["unwrap"](size.width) * surface.dpi() / 100, surface.measureUnit(), surface.zoom()));
        this._size.height(unitsToPixel(external_ko_["unwrap"](size.height) * surface.dpi() / 100, surface.measureUnit(), surface.zoom()));
    }
    helper(draggable, event) {
        this.snapHelper && this.snapHelper.updateSnapLines(draggable || null);
    }
    canDrop(dropTarget, controlModel, metaData) {
        var locked = dropTarget.locked;
        if (metaData && metaData.canDrop) {
            locked = locked || !metaData.canDrop(dropTarget, controlModel);
        }
        return !locked;
    }
    startDrag(_) { }
    drag(event, uiElement, draggableModel) {
        var needToActivateSnapLines = !this._snapDisabled && event.altKey !== true;
        if (this.selection.dropTarget) {
            var dropTarget = this.selection.dropTarget.getControlModel().getMetaData().isContainer ? this.selection.dropTarget : (this.selection.dropTarget.parent || this.selection.dropTarget), controlModel = draggableModel.getControlModel && draggableModel.getControlModel(), metaData = controlModel && controlModel.getMetaData() || draggableModel.info;
            if (this.canDrop(dropTarget, controlModel, metaData)) {
                this.dragHelperContent && this.dragHelperContent.isLocked(false);
            }
            else {
                this.snapHelper && this.snapHelper.deactivateSnapLines();
                needToActivateSnapLines = false;
                this.dragHelperContent && this.dragHelperContent.isLocked(true);
            }
        }
        if (needToActivateSnapLines) {
            var position = this._getAbsoluteSurfacePosition(uiElement);
            var snapDelta = this.snapHelper && this.snapHelper.activateSnapLines({
                left: position.left,
                top: position.top,
                right: position.left + this._size.width(),
                bottom: position.top + this._size.height()
            });
            if (snapDelta && (snapDelta.left > 0 || snapDelta.top > 0)) {
                uiElement.dataset.leftPosition = convertToCssPixelUnits(convertFromCssPixelUnits(uiElement.dataset.leftPosition) - snapDelta.left);
                uiElement.dataset.topPosition = convertToCssPixelUnits(convertFromCssPixelUnits(uiElement.dataset.topPosition) - snapDelta.top);
                uiElement.ghostContainer.style.left = uiElement.dataset.leftPosition;
                uiElement.ghostContainer.style.top = uiElement.dataset.topPosition;
            }
        }
    }
    doStopDrag(uiElement, draggableModel, event) { }
}
_dragDropHandler_DragDropHandler.started = external_ko_["observable"](false);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/rectangle.js

class rectangle_Rectangle {
    constructor(left = 0, top = 0, width = 0, height = 0) {
        this.left = external_ko_["observable"](0);
        this.top = external_ko_["observable"](0);
        this.width = external_ko_["observable"](0);
        this.height = external_ko_["observable"](0);
        this.className = 'dxrd-drag-helper-item';
        this.left(left);
        this.top(top);
        this.width(width);
        this.height(height);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/dragDrop/_dragHelperContent.js


class _dragHelperContent_DragHelperControlRectangle extends rectangle_Rectangle {
    constructor(position, left, top, width, height) {
        super(left, top, width, height);
        this.position = position;
    }
}
class _dragHelperContent_DragHelperContent extends rectangle_Rectangle {
    constructor(selectionProvider) {
        super();
        this.controls = external_ko_["observableArray"]([]);
        this.customData = external_ko_["observable"]({});
        this.template = 'dxrd-drag-helper-source';
        this.isLocked = external_ko_["observable"](false);
        this._selectionProvider = selectionProvider;
    }
    get _isEmpty() {
        return this.controls().length === 0;
    }
    reset() {
        this.controls([]);
        this.customData({});
    }
    update(surface) {
        this.left(surface.absolutePosition.x());
        this.top(surface.absolutePosition.y());
        this.width(surface.rect().width);
        this.height(surface.rect().height);
        if (this._isEmpty) {
            var controls = [];
            this._selectionProvider.selectedItems.forEach((item, index) => {
                if (!item.locked && item.parent === surface.parent)
                    controls.push(new _dragHelperContent_DragHelperControlRectangle(index));
            });
            this.controls(controls);
        }
        this.controls().forEach((item) => {
            var surfaceElement = this._selectionProvider.selectedItems[item.position];
            item.left(surfaceElement.absolutePosition.x() - this.left());
            item.top(surfaceElement.absolutePosition.y() - this.top());
            item.width(surfaceElement.rect().width);
            item.height(surfaceElement.rect().height);
        });
    }
    setContent(area, customData = null) {
        if (this._isEmpty)
            this.controls([area]);
        this.left(area.left());
        this.top(area.top());
        this.width(area.width());
        this.height(area.height());
        this.customData(customData);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/dragDrop/_selectionDragDropHandler.js



class _selectionDragDropHandler_SelectionDragDropHandler extends _dragDropHandler_DragDropHandler {
    adjustDropTarget(dropTargetSurface) {
        var selectedItemInTree = dropTargetSurface;
        while (selectedItemInTree != null) {
            if (selectedItemInTree.selected && selectedItemInTree.selected()) {
                dropTargetSurface = selectedItemInTree.parent;
                break;
            }
            selectedItemInTree = selectedItemInTree.parent;
        }
        return dropTargetSurface;
    }
    constructor(surface, selection, undoEngine, snapHelper, dragHelperContent) {
        super(surface, selection, undoEngine, snapHelper, dragHelperContent);
        this.cursor = 'move';
        this.containment = '.dxrd-ghost-container';
        this['helper'] = (draggable) => {
            super.helper(draggable);
            if (this.selection.selectedItems.indexOf(draggable) === -1) {
                this.selection.updateSelection(draggable);
            }
            dragHelperContent.update(draggable);
            this._size.width(dragHelperContent.width());
            this._size.height(dragHelperContent.height());
        };
    }
    startDrag(control) {
        this.selection.swapFocusedItem(control);
        var focusedSurface = this.selection.focused();
        var baseOffsetX = focusedSurface.rect().left + focusedSurface.underCursor().x;
        var baseOffsetY = focusedSurface.rect().top + focusedSurface.underCursor().y;
        this.selection.selectedItems.filter((item) => { return !item.locked; }).forEach((item) => {
            if (item.parent === focusedSurface.parent) {
                item.underCursor().offsetX = item.rect().left - baseOffsetX;
                item.underCursor().offsetY = item.rect().top - baseOffsetY;
            }
        });
    }
    drag(event, uiElement, draggable) {
        uiElement.dataset.leftPosition = convertToCssPixelUnits(convertFromCssPixelUnits(uiElement.dataset.leftPosition) + uiElement['scroll'].left);
        uiElement.dataset.topPosition = convertToCssPixelUnits(convertFromCssPixelUnits(uiElement.dataset.topPosition) + uiElement['scroll'].top);
        super.drag(event, uiElement, draggable);
    }
    getLocation(adjustedTarget, item) {
        var left = adjustedTarget.underCursor().x + item.underCursor().offsetX, top = adjustedTarget.underCursor().y + item.underCursor().offsetY;
        return { left: left > 0 ? left : 0, top: top > 0 ? top : 0 };
    }
    ajustLocation(adjustedTarget, item) {
        item.rect(this.getLocation(adjustedTarget, item));
    }
    doStopDrag(uiElement, _) {
        this.dragHelperContent.reset();
        if (this.dragHelperContent.isLocked())
            return;
        if (this.selection.dropTarget) {
            var dropTarget = this.selection.dropTarget.getControlModel(), dropTargetSurface = dropTarget.getNearestParent(dropTarget)['surface'];
            var focusedSurface = this.selection.focused();
            var adjustedTarget = this.adjustDropTarget(dropTargetSurface), focusedModel = focusedSurface.getControlModel(), parent = focusedModel.getNearestParent(adjustedTarget.getControlModel()), adjustedTarget = parent && findSurface(parent), changeParent = adjustedTarget !== focusedSurface.parent;
            if (!adjustedTarget || !adjustedTarget.canDrop()) {
                return;
            }
            var position = this._getAbsoluteSurfacePosition(uiElement);
            adjustedTarget.underCursor().x = position.left - (adjustedTarget['absolutePosition'] && adjustedTarget['absolutePosition'].x() || 0) - focusedSurface.underCursor().offsetX;
            adjustedTarget.underCursor().y = position.top - (adjustedTarget['absolutePosition'] && adjustedTarget['absolutePosition'].y() || 0) - focusedSurface.underCursor().offsetY;
            var itemsToDrop = this.selection.selectedItems
                .filter((item) => { return !item.locked && item.parent === focusedSurface.parent; })
                .map((item) => {
                return item.getControlModel();
            })
                .filter((item) => {
                return item.getMetaData().canDrop(adjustedTarget, item);
            });
            if (changeParent) {
                for (var i = 0; i < itemsToDrop.length; i++) {
                    itemsToDrop[i].surface.rect({ top: 0, left: 0 });
                }
                focusedModel.parentModel().removeChilds(itemsToDrop);
                parent['addChilds'](itemsToDrop);
                for (var i = 0; i < itemsToDrop.length; i++) {
                    this.ajustLocation(adjustedTarget, itemsToDrop[i].surface);
                }
                this.selection.focused(focusedSurface);
                this.selection.selectItems(itemsToDrop.map((item) => { return item.surface; }));
            }
            else {
                for (var i = 0; i < itemsToDrop.length; i++) {
                    this.ajustLocation(adjustedTarget, itemsToDrop[i].surface);
                }
            }
            this.selection.expectClick = !changeParent;
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/dragDrop/_toolboxDragDropHandler.js





class _toolboxDragDropHandler_ToolboxDragDropHandler extends _dragDropHandler_DragDropHandler {
    constructor(surface, selection, undoEngine, snapHelper, dragHelperContent, controlsFactory) {
        super(surface, selection, undoEngine, snapHelper, dragHelperContent);
        this.cursor = 'arrow';
        this._controlsFactory = controlsFactory;
        this.containment = '.dxrd-designer';
        this['cursorAt'] = {
            top: 0,
            left: 0
        };
    }
    helper(draggable) {
        super.helper(draggable);
        var toolboxItem = draggable;
        var size = size_Size.fromString(toolboxItem.info['@SizeF'] || toolboxItem.info['size'] || '100,23');
        this.recalculateSize(size);
        this.dragHelperContent.setContent(new rectangle_Rectangle(0, 0, this._size.width(), this._size.height()));
    }
    doStopDrag(uiElement, draggableModel) {
        this.dragHelperContent.reset();
        if (this.dragHelperContent.isLocked())
            return;
        if (this.selection.dropTarget) {
            var toolboxItem = draggableModel, control = this._controlsFactory.createControl(Object(_utils["b" /* extend */])({}, toolboxItem.info), null), parent = control.getNearestParent(this.selection.dropTarget.getControlModel()), dropTargetSurface = findSurface(parent);
            if (!dropTargetSurface || !dropTargetSurface.canDrop()) {
                return;
            }
            var position = this._getAbsoluteSurfacePosition(uiElement);
            dropTargetSurface.underCursor().x = position.left - (dropTargetSurface['absolutePosition'] && dropTargetSurface['absolutePosition'].x() || 0);
            dropTargetSurface.underCursor().y = position.top - (dropTargetSurface['absolutePosition'] && dropTargetSurface['absolutePosition'].y() || 0);
            if (this.surface().isFit && this.surface().isFit(dropTargetSurface) || dropTargetSurface.underCursor().isOver) {
                this.addControl(control, dropTargetSurface, this._size);
            }
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/dragDrop/_wizardDragDropHandler.js





class _wizardDragDropHandler_WizardDragDropHandler extends _dragDropHandler_DragDropHandler {
    constructor(options) {
        super(null, null, external_ko_["observable"](null), null, options.dragHelperContent);
        this.parent = () => external_jQuery_["fn"].constructor(options.parent);
        this.containment = options.containment;
        this._target = options.target;
        this._addHandler = options.addHandler;
    }
    helper(draggable, event) {
        this._dropTarget = null;
        var item = draggable;
        var target = external_jQuery_["fn"].constructor(event.target).closest('.ui-draggable');
        var rect = new rectangle_Rectangle(6, 6, target.width(), target.height());
        rect.className = 'dxrd-image-ghost-report';
        this.dragHelperContent.reset();
        this.dragHelperContent.setContent(rect, {
            template: 'dxrd-drag-helper-source-reorder-treelist',
            data: {
                imageClassName: item.imageClassName,
                imageTemplateName: item.imageTemplateName,
                text: item.text
            }
        });
        var templateHtml = getTemplate(this.dragHelperContent.template);
        var $container = external_jQuery_["fn"].constructor(templateHtml).css({ 'display': 'block' });
        $container.prependTo(this.parent());
        external_ko_["applyBindingsToDescendants"](this.dragHelperContent, $container[0]);
        return $container;
    }
    doStopDrag(uiElement, _) {
        this.dragHelperContent.reset();
        if (this._dropTarget) {
            this._addHandler(this._dropTarget, external_ko_["dataFor"](uiElement), this._getAbsoluteSurfacePosition(uiElement));
        }
    }
    drag(event, ui) {
        var $target = external_jQuery_["fn"].constructor(this.getTarget(event));
        var page = $target.closest(this._target);
        this._dropTarget = null;
        if (page.length && (!this._target || $target.closest(this._target)[0])) {
            this._dropTarget = external_ko_["dataFor"](page.get(0));
        }
    }
}

// EXTERNAL MODULE: external "DevExpress.VERSION"
var external_DevExpress_VERSION_ = __webpack_require__(49);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-version.js
const version = '22.2.3';

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/dx-versions.js


var dxversions = {
    analytics: version,
    devextreme: external_DevExpress_VERSION_["version"]
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_ajaxSetup.js


class _ajaxSetup_AjaxSetup {
    constructor() {
        this.ajaxSettings = {};
    }
    sendRequest(settings) {
        return external_jQuery_["ajax"](Object(_utils["b" /* extend */])({}, this.ajaxSettings, settings));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_visitors.js

function objectsVisitor(target, visitor, visited = [], skip = ['surface', 'reportSource']) {
    if (visited.indexOf(target) !== -1) {
        return;
    }
    if (target && target !== undefined) {
        var properties = [];
        Object.keys(target).forEach(propertyName => {
            if (visited.indexOf(target[propertyName]) === -1 && propertyName.indexOf('_') !== 0 && skip.indexOf(propertyName) === -1) {
                properties.push(target[propertyName]);
            }
        });
        visitor(target);
        visited.push(target);
        for (var i = 0; i < properties.length; i++) {
            properties[i] = external_ko_["unwrap"](properties[i]);
            if (typeof properties[i] === 'object') {
                objectsVisitor(properties[i], visitor, visited, skip);
            }
        }
    }
}
function collectionsVisitor(target, visitor, collectionsToProcess = ['controls', 'bands', 'subBands', 'crossBandControls', 'rows', 'cells', 'fields'], visited = []) {
    if (target && target !== undefined) {
        visited.push(target);
        for (var i = 0, len = collectionsToProcess.length; i < len; i++) {
            if (target[collectionsToProcess[i]]) {
                visitor(target[collectionsToProcess[i]], target);
                (target[collectionsToProcess[i]]() || []).forEach((item) => collectionsVisitor(item, visitor, collectionsToProcess, visited));
            }
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_controlsHelper.js




class _controlsHelper_DesignControlsHelper extends utils["a" /* Disposable */] {
    constructor(target, handlers, collectionNames) {
        super();
        this.target = target;
        this.collectionNames = collectionNames;
        this._handlers = [];
        this._setText = false;
        this._visitedCollections = [];
        this._subscriptions = [];
        this.added = (value) => {
            this._setText = true;
            this._collectControls(value);
            this._setText = false;
        };
        this.deleted = (value) => {
            var allControls = this.allControls();
            var index = allControls.indexOf(value);
            allControls.splice(index, 1);
            collectionsVisitor(value, (collection) => {
                collection().forEach((item) => {
                    allControls.splice(allControls.indexOf(item), 1);
                });
            });
            this.allControls.valueHasMutated();
        };
        this.allControls = external_ko_["observableArray"]();
        var unwrappedTarget = target;
        if (external_ko_["isSubscribable"](target)) {
            this._disposables.push(target.subscribe((newTarget) => {
                this._visitedCollections = [];
                for (var i = 0, len = this._subscriptions.length; i < len; i++) {
                    this._subscriptions[i].dispose();
                }
                this._subscriptions = [];
                this.allControls([]);
                if (newTarget) {
                    this._collectControls(newTarget);
                }
            }));
            unwrappedTarget = target.peek();
        }
        this._disposables.push(this.allControls.subscribe((args) => {
            var addedItems = args.filter(x => x.status === 'added');
            for (var i = 0; i < addedItems.length; i++) {
                this._setName(addedItems[i].value);
            }
        }, null, 'arrayChange'));
        unwrappedTarget && this._collectControls(unwrappedTarget);
        this._handlers.push.apply(this._handlers, handlers);
    }
    getNameProperty(model) {
        return model.name;
    }
    getControlByName(name) {
        var control = null;
        this.allControls().some(x => {
            if (external_ko_["unwrap"](x.name) == name) {
                control = x;
                return true;
            }
            return false;
        });
        return control;
    }
    _setName(value) {
        var names = this.allControls().map((item) => { return external_ko_["unwrap"](this.getNameProperty(item)); });
        if (!this.getNameProperty(value)() || names.filter((x) => { return x === this.getNameProperty(value)(); }).length > 1) {
            var newName = getUniqueNameForNamedObjectsArray(this.allControls(), this._getNamePrefix(value), names);
            this.getNameProperty(value)(newName);
            this._setText && this._setDefaultText(value);
        }
    }
    _setDefaultText(value) {
        var initialText = value.getControlInfo && value.getControlInfo().defaultVal && value.getControlInfo().defaultVal['@Text'];
        if (this._setText && value['text'] && !value['text']() && (initialText === null || initialText === undefined)) {
            value['text'](this.getNameProperty(value)());
        }
    }
    _getNamePrefix(value) {
        var controlType = value.controlType || 'Unknown';
        return controlType.split('.').pop();
    }
    dispose() {
        super.dispose();
        this._subscriptions.forEach(subscription => subscription.dispose());
        this._subscriptions.splice(0);
        this._visitedCollections.splice(0);
        this._handlers.splice(0);
        this.target = null;
        this.allControls([]);
    }
    processCollection(collection) { }
    _collectControls(target) {
        var array = [target];
        collectionsVisitor(target, (collection, owner) => {
            if (this._visitedCollections.indexOf(collection) === -1) {
                this._visitedCollections.push(collection);
                var subscriptionsArray = this._subscriptions;
                if (owner instanceof utils["a" /* Disposable */]) {
                    subscriptionsArray = owner._disposables;
                }
                var subscription = collection.subscribe((args) => {
                    args.forEach((changeSet) => {
                        if (changeSet.moved != undefined)
                            return;
                        this[changeSet.status] && this[changeSet.status](changeSet.value);
                        this._handlers.forEach((handler) => {
                            handler[changeSet.status] && handler[changeSet.status](changeSet.value);
                        });
                    });
                }, null, 'arrayChange');
                subscriptionsArray.push({
                    dispose: () => {
                        subscription.dispose();
                        subscription = null;
                        this._visitedCollections.splice(this._visitedCollections.indexOf(collection), 1);
                    }
                });
            }
            this.processCollection(collection());
            array.push.apply(array, collection());
        }, this.collectionNames);
        this.allControls.push.apply(this.allControls, array);
    }
    getControls(target) {
        var controls = external_ko_["observableArray"]();
        collectionsVisitor(target, (collection) => {
            controls.push.apply(controls, collection());
        });
        return controls;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/paddingModelMetaData.js

var paddingModelMetaData_left = {
    propertyName: 'left', modelName: '@Left', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Left', displayName: 'Left', editor: editorTemplates.getEditor('numeric')
}, paddingModelMetaData_right = { propertyName: 'right', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Right', modelName: '@Right', displayName: 'Right', editor: editorTemplates.getEditor('numeric') }, paddingModelMetaData_top = { propertyName: 'top', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Top', modelName: '@Top', displayName: 'Top', editor: editorTemplates.getEditor('numeric') }, paddingModelMetaData_bottom = { propertyName: 'bottom', localizationId: 'AnalyticsCoreStringId.PaddingInfo.Bottom', modelName: '@Bottom', displayName: 'Bottom', editor: editorTemplates.getEditor('numeric') }, paddingModelMetaData_all = { propertyName: 'all', localizationId: 'AnalyticsCoreStringId.PaddingInfo.All', displayName: 'All', editor: editorTemplates.getEditor('numeric') };
var paddingSerializationsInfo = [paddingModelMetaData_all, paddingModelMetaData_left, paddingModelMetaData_right, paddingModelMetaData_top, paddingModelMetaData_bottom];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/paddingModel.js



class paddingModel_PaddingModel extends utils["a" /* Disposable */] {
    constructor(left = external_ko_["observable"](null), right = external_ko_["observable"](null), top = external_ko_["observable"](null), bottom = external_ko_["observable"](null), dpi = external_ko_["observable"](100)) {
        super();
        this.left = left;
        this.right = right;
        this.top = top;
        this.bottom = bottom;
        this.dpi = dpi;
        ['left', 'right', 'top', 'bottom'].forEach((propertyName) => {
            this['_' + propertyName] = external_ko_["observable"](this[propertyName]());
            this._disposables.push(this[propertyName] = external_ko_["computed"]({
                read: () => {
                    return this['_' + propertyName]() || 0;
                },
                write: (newVal) => {
                    this['_' + propertyName](newVal);
                }
            }));
        });
        var isUpdating = external_ko_["observable"](false);
        var oldValue = null;
        this._disposables.push(this.all = external_ko_["computed"]({
            read: () => {
                if (isUpdating())
                    return oldValue;
                if (['right', 'top', 'bottom'].every(propertyName => this[propertyName]() === this.left()))
                    oldValue = this.left();
                else
                    oldValue = null;
                return oldValue;
            },
            write: (newVal) => {
                isUpdating(true);
                ['left', 'right', 'top', 'bottom'].forEach((propertyName) => this[propertyName](newVal));
                isUpdating(false);
            }
        }));
    }
    getInfo() {
        return paddingSerializationsInfo;
    }
    resetValue() {
        ['left', 'right', 'top', 'bottom'].forEach(name => this['_' + name](null));
    }
    isEmpty() {
        return ['left', 'right', 'top', 'bottom'].map(x => external_ko_["unwrap"](this['_' + x])).every(x => x === null);
    }
    applyFromString(value) {
        if (value) {
            var components = (value || '').split(',');
            this.left(parseInt(components[0]) || 0);
            this.right(parseInt(components[1]) || 0);
            this.top(parseInt(components[2]) || 0);
            this.bottom(parseInt(components[3]) || 0);
        }
        return this;
    }
    static from(val) {
        return new paddingModel_PaddingModel().applyFromString(val);
    }
    toString() {
        if (this.isEmpty())
            return;
        return this._toString();
    }
    _toString(inner = false) {
        return ['left', 'right', 'top', 'bottom'].map(x => parseInt(external_ko_["unwrap"](this[x]))).concat(this.dpi()).join(', ');
    }
}
paddingModel_PaddingModel.defaultVal = '0, 0, 0, 0, 100';
paddingModel_PaddingModel.unitProperties = ['left', 'right', 'top', 'bottom'];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_cssCalculator.js




function patchPositionByRTL(position, rtl) {
    if (rtl) {
        if (position === 'Left')
            return 'Right';
        else if (position === 'Right')
            return 'Left';
    }
    return position;
}
class _cssCalculator_CssCalculator {
    constructor(control, _rtlLayout) {
        this._rtlLayout = _rtlLayout;
        this._control = control;
        this.borderCss = (zoom) => {
            var borderWidth = this._getBorderWidth(control, zoom);
            var borderDefault = control['borderDefault'] && control['borderDefault']();
            var borderColor = control['borderColor'] && control['borderColor']() || '';
            var borders = control['borders'] && control['borders']() || '';
            var borderStyle = control['borderDashStyle'] && control['borderDashStyle']() || '';
            return borderDefault ? this.createBorders(borderStyle, borderWidth, borderColor, borders, borderDefault) :
                this.createBorders(borderStyle, borderWidth, borderColor, borders);
        };
        this.backGroundCss = () => {
            return { backgroundColor: control['backColor'] && control['backColor']() || 'transparent' };
        };
        this.foreColorCss = () => {
            var color = (control['foreColor'] && control['foreColor']() || 'transparent') === 'transparent' ? 'black' : control['foreColor']();
            return { color: color };
        };
        this.fontCss = () => {
            return this.createFont(control['font'] && control['font']() || '');
        };
        this.wordWrapCss = () => {
            return this.createWordWrap(external_ko_["unwrap"](control['wordWrap']), external_ko_["unwrap"](control['multiline']));
        };
        this.paddingsCss = () => {
            var controlPaddings = external_ko_["unwrap"](control['paddingObj'] || control['padding']) || paddingModel_PaddingModel.from(paddingModel_PaddingModel.defaultVal);
            var paddings = {
                paddingLeft: this._getPixelValueFromUnit(controlPaddings.left(), control) + 'px',
                paddingTop: this._getPixelValueFromUnit(controlPaddings.top(), control) + 'px',
                paddingRight: this._getPixelValueFromUnit(controlPaddings.right(), control) + 'px',
                paddingBottom: this._getPixelValueFromUnit(controlPaddings.bottom(), control) + 'px'
            };
            return paddings;
        };
        this.textAlignmentCss = () => {
            var align = control['textAlignment'] && control['textAlignment']() || '';
            return Object(_utils["b" /* extend */])(this.createVerticalAlignment(align), this.createHorizontalAlignment(align));
        };
        this.stroke = () => {
            var color = (control['foreColor'] && control['foreColor']() || 'transparent') === 'transparent' ? 'black' : control['foreColor']();
            return { 'stroke': color };
        };
        this.strokeWidth = () => {
            var lineWidth = control['lineWidth'] && control['lineWidth']() || '';
            return { 'strokeWidth': lineWidth };
        };
        this.strokeWidthWithWidth = () => {
            var lineWidth = control['width'] && control['width']() || '';
            return { 'strokeWidth': lineWidth };
        };
        this.strokeDashArray = () => {
            var dashArray = this.createStrokeDashArray(control['lineStyle'] && control['lineStyle']() || '', control['lineWidth'] && control['lineWidth']() || '');
            return { 'strokeDasharray': dashArray };
        };
        this.strokeDashArrayWithWidth = () => {
            var dashArray = this.createStrokeDashArray(control['lineStyle'] && control['lineStyle']() || '', control['width'] && control['width']() || '');
            return { 'strokeDasharray': dashArray };
        };
        this.crossBandBorder = (position) => {
            return this.createBorder(control['borderDashStyleCrossband'] && control['borderDashStyleCrossband']() || 'solid', this._getBorderWidth(control), control['borderColor'] && control['borderColor']() || '', control['borders'] && control['borders']() || '', position);
        };
        this.angle = () => {
            return this.createAngle(control['angle'] && control['angle']() || 0);
        };
        this.cellBorder = (position, zoom) => {
            return this.createControlBorder(control['borderDashStyle'] && control['borderDashStyle']() || 'solid', this._getBorderWidth(control, zoom), control['borderColor'] && control['borderColor']() || '', control['borders'] && control['borders']() || '', position);
        };
        this.zipCodeFontCss = (fontSize) => {
            return this.createZipCodeFont(fontSize || control['size']['height']());
        };
        this.zipCodeAlignment = () => {
            var align = 'TopLeft';
            return Object(_utils["b" /* extend */])(this.createVerticalAlignment(align), this.createHorizontalAlignment(align));
        };
    }
    _getPixelValueFromUnit(value, control) {
        if (control['root'] && control['root'].measureUnit) {
            return unitsToPixel(value, control['root'].measureUnit());
        }
        return value;
    }
    _patchPosition(position) {
        return patchPositionByRTL(position, this._rtlLayout());
    }
    _getBorderWidth(control, zoom) {
        return control['borderWidth'] && typeof (control['borderWidth']()) == 'number' ? Math.floor(control['borderWidth']() * (zoom || 1)) : '';
    }
    createBorder(dashStyle, width, color, positions, position) {
        var line = {};
        positions = positions || 'All';
        line = { stroke: 'Silver', strokeWidth: 2 };
        var dash = this.createStrokeDashArray(dashStyle, width);
        if (positions.indexOf(position) !== -1 || positions.indexOf('All') !== -1) {
            line['stroke'] = color;
            line['strokeWidth'] = width;
            line['strokeDasharray'] = dash;
        }
        return line;
    }
    createControlBorder(borderStyle, width, color, positions, position, defaultColor = 'solid 1px Silver') {
        var border = {};
        positions = positions || '';
        if (borderStyle === 'Dash') {
            borderStyle = 'dashed';
        }
        else if (borderStyle === 'Dot') {
            borderStyle = 'dotted';
        }
        else if (borderStyle === 'Double') {
            borderStyle = 'double';
        }
        else {
            borderStyle = 'solid';
        }
        if (positions.indexOf(position) !== -1 || positions.indexOf('All') !== -1) {
            border['border' + this._patchPosition(position)] = borderStyle + ' ' + width + 'px ' + color;
        }
        else {
            border['border' + this._patchPosition(position)] = defaultColor;
        }
        return border;
    }
    createBorders(borderStyle, width, color, positions, defaultColor = _cssCalculator_CssCalculator.DEFAULT_BORDER) {
        var left = this.createControlBorder(borderStyle, width, color, positions, 'Left', defaultColor);
        var right = this.createControlBorder(borderStyle, width, color, positions, 'Right', defaultColor);
        var top = this.createControlBorder(borderStyle, width, color, positions, 'Top', defaultColor);
        var bottom = this.createControlBorder(borderStyle, width, color, positions, 'Bottom', defaultColor);
        var border = Object(_utils["b" /* extend */])({}, left, right, top, bottom);
        return border;
    }
    createZipCodeFont(height) {
        var fontStyles = {};
        fontStyles['fontFamily'] = 'Impact';
        fontStyles['fontSize'] = height + 'px';
        return fontStyles;
    }
    createFont(fontString) {
        var fontStyles = {};
        fontString = fontString || '';
        var components = fontString.split(',');
        fontStyles['fontFamily'] = components[0] ? '"' + components[0] + '"' : '';
        fontStyles['fontSize'] = components[1];
        if (components.length > 2) {
            for (var i = 2; i < components.length; i++) {
                if (components[i].indexOf('Bold') !== -1)
                    fontStyles['fontWeight'] = 'Bold';
                if (components[i].indexOf('Italic') !== -1)
                    fontStyles['fontStyle'] = 'Italic';
                if (components[i].indexOf('Underline') != -1)
                    fontStyles['textDecoration'] = 'Underline';
                if (components[i].indexOf('Strikeout') != -1)
                    fontStyles['textDecoration'] = (fontStyles['textDecoration'] ? fontStyles['textDecoration'] + ' ' : '') + 'Line-through';
            }
        }
        if (!fontStyles['fontWeight']) {
            fontStyles['fontWeight'] = '';
        }
        if (!fontStyles['fontStyle']) {
            fontStyles['fontStyle'] = '';
        }
        if (!fontStyles['textDecoration']) {
            fontStyles['textDecoration'] = '';
        }
        return fontStyles;
    }
    createVerticalAlignment(alignment) {
        var result = {};
        if (alignment.indexOf('Top') !== -1) {
            result['verticalAlign'] = 'top';
        }
        if (alignment.indexOf('Middle') !== -1) {
            result['verticalAlign'] = 'middle';
        }
        if (alignment.indexOf('Bottom') !== -1) {
            result['verticalAlign'] = 'bottom';
        }
        return result;
    }
    createHorizontalAlignment(alignment) {
        var result = {};
        if (alignment.indexOf('Left') !== -1) {
            result['textAlign'] = patchPositionByRTL('Left', this._control.rtl()).toLowerCase();
        }
        if (alignment.indexOf('Right') !== -1) {
            result['textAlign'] = patchPositionByRTL('Right', this._control.rtl()).toLowerCase();
        }
        if (alignment.indexOf('Center') !== -1) {
            result['textAlign'] = 'center';
        }
        if (alignment.indexOf('Justify') !== -1) {
            result['textAlign'] = 'justify';
        }
        return result;
    }
    createStrokeDashArray(style, width) {
        if (style === 'Solid') {
            return '';
        }
        else if (style === 'Dot') {
            return [width, width * 2].join('px, ') + 'px';
        }
        else if (style === 'Dash') {
            return [width * 4, width * 4].join('px, ') + 'px';
        }
        else if (style === 'DashDot') {
            return [width * 4, width * 2, width, width * 2].join('px, ') + 'px';
        }
        else if (style === 'DashDotDot') {
            return [width * 4, width * 2, width, width * 2, width, width * 2].join('px, ') + 'px';
        }
        else {
            return '';
        }
    }
    createWordWrap(wordwrap, multiline) {
        var result = {};
        if (wordwrap === false && multiline === false) {
            result['white-space'] = 'nowrap';
            result['word-wrap'] = 'normal';
        }
        else if (wordwrap === true && multiline === false) {
            result['word-wrap'] = 'break-word';
            result['white-space'] = '';
        }
        else if (wordwrap === false && multiline === true) {
            result['word-wrap'] = 'normal';
            result['white-space'] = 'pre';
        }
        else if (wordwrap === true && multiline === true) {
            result['white-space'] = 'pre-wrap';
            result['word-wrap'] = 'break-word';
        }
        return result;
    }
    createAngle(angle) {
        angle = -angle;
        return {
            '-webkit-transform': 'rotate(' + angle + 'deg)',
            '-moz-transform': 'rotate(' + angle + 'deg)',
            '-o-transform': 'rotate(' + angle + 'deg)',
            '-ms-transform': 'rotate(' + angle + 'deg)',
            'transform': 'rotate(' + angle + 'deg)'
        };
    }
    contentSizeCss(controlSurfaceWidth, controlSurfaceHeight, zoom, borders, paddings) {
        var result = { top: 1, left: 1, right: 1, bottom: 1, width: 1, height: 1 };
        borders = borders || this._control['borders'] && this._control['borders']() || '';
        var borderWidth = this._getBorderWidth(this._control, zoom);
        ['Left', 'Top', 'Right', 'Bottom'].forEach((item) => {
            var value = 0;
            if (borderWidth != '' && (borders.indexOf(item) !== -1 || borders.indexOf('All') !== -1)) {
                value += borderWidth;
            }
            if (paddings) {
                value += this._getPixelValueFromUnit(external_ko_["unwrap"](paddings[item.toLowerCase()]), this._control) * (zoom || 1);
            }
            if (value)
                result[this._patchPosition(item).toLowerCase()] = value;
        });
        result.width = controlSurfaceWidth - result.left - result.right;
        result.height = controlSurfaceHeight - result.top - result.bottom;
        return result;
    }
}
_cssCalculator_CssCalculator.DEFAULT_BORDER = 'none';

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_editorTypeMapper.js

const ExpressionType = 'DevExpress.DataAccess.Expression';
function IsDataAccessExpression(type) {
    return type === ExpressionType;
}
var editorTypeMapper = {
    'Enum': editorTemplates.getEditor('combobox'),
    'System.String': editorTemplates.getEditor('text'),
    'System.Guid': editorTemplates.getEditor('guid'),
    'System.SByte': editorTemplates.getEditor('sbyte'),
    'System.Decimal': editorTemplates.getEditor('decimal'),
    'System.Int64': editorTemplates.getEditor('int64'),
    'System.Int32': editorTemplates.getEditor('int32'),
    'System.Int16': editorTemplates.getEditor('int16'),
    'System.Single': editorTemplates.getEditor('single'),
    'System.Double': editorTemplates.getEditor('double'),
    'System.Byte': editorTemplates.getEditor('byte'),
    'System.UInt16': editorTemplates.getEditor('uint16'),
    'System.UInt32': editorTemplates.getEditor('uint32'),
    'System.UInt64': editorTemplates.getEditor('uint64'),
    'System.Boolean': editorTemplates.getEditor('boolSelect'),
    'System.DateTime': editorTemplates.getEditor('date'),
    'DevExpress.DataAccess.Expression': editorTemplates.getEditor('expressionEditor')
};
function getEditorType(typeString) {
    return editorTypeMapper[typeString] || editorTemplates.getEditor('text');
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/property-grid/localization/_localization.js
var _localization = __webpack_require__(9);

// EXTERNAL MODULE: external "DevExpress.localization"
var external_DevExpress_localization_ = __webpack_require__(27);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_globalize.js


function initGlobalize(settings) {
    var globalize = _localization["a" /* Globalize */];
    if (globalize && settings) {
        settings.cldrSupplemental && globalize.load(settings.cldrSupplemental);
        settings.cldrData && globalize.load(settings.cldrData);
        if (settings.currentCulture) {
            globalize.locale(settings.currentCulture);
            external_DevExpress_localization_["locale"] && external_DevExpress_localization_["locale"](settings.currentCulture);
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_hoverInfo.js
class HoverInfo {
    constructor() {
        this._x = 0;
        this._y = 0;
        this.isOver = false;
    }
    get x() {
        return this._x;
    }
    set x(newX) {
        this._x = newX;
    }
    get y() {
        return this._y;
    }
    set y(newY) {
        this._y = newY;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_inlineTextEdit.js




function processTextEditorHotKeys(event, delegates) {
    if (!event || !delegates)
        return;
    if (event.key === KeyboardEnum.Esc && !!delegates['esc']) {
        delegates['esc']();
    }
    if (event.key === KeyboardEnum.Enter && event.ctrlKey && !!delegates['ctrlEnter']) {
        delegates['ctrlEnter']();
    }
}
class _inlineTextEdit_InlineTextEdit extends utils["a" /* Disposable */] {
    constructor(selection) {
        super();
        this._showInline = external_ko_["observable"](false);
        this.text = external_ko_["observable"]();
        var _controlText;
        this._disposables.push(selection.focused.subscribe(() => {
            if (this._showInline() && _controlText) {
                _controlText(this.text());
                this._showInline(false);
            }
            var controlModel = selection.focused() && selection.focused().getControlModel();
            _controlText = controlModel && (controlModel.textEditableProperty || controlModel.text || controlModel.alias);
        }));
        this._disposables.push(this.visible = external_ko_["pureComputed"]({
            read: () => {
                return this._showInline();
            },
            write: (val) => {
                this._showInline(val);
            }
        }));
        this.show = (element) => {
            if (this._showInline()) {
                return;
            }
            var isSingleControlSelected = !!selection.selectedItems ? selection.selectedItems.length === 1 : !!selection.focused();
            if (isSingleControlSelected && _controlText && !selection.focused().locked) {
                this.text(_controlText());
                this._showInline(true);
                if (element) {
                    var textarea = external_jQuery_["fn"].constructor(element).find('textarea')[0];
                    textarea && textarea['select']();
                }
            }
            else {
                this._showInline(false);
            }
        };
        this.keypressAction = (args) => {
            processTextEditorHotKeys(args.event, {
                esc: () => { this._showInline(false); },
                ctrlEnter: () => {
                    _controlText(this.text());
                    this._showInline(false);
                }
            });
        };
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_objectStructureControllers.js


class _objectStructureControllers_ObjectStructureTreeListController extends utils["a" /* Disposable */] {
    constructor(propertyNames, listPropertyNames) {
        super();
        this.selectedItem = null;
        this.itemsFilter = (item, path) => {
            var realPropertyName = item.name.split('.')[0];
            return propertyNames ? propertyNames.indexOf(realPropertyName) !== -1 || external_jQuery_["isNumeric"](realPropertyName) : true;
        };
        this.hasItems = (item) => {
            var realPropertyName = item.name.split('.')[0];
            return item.isList || (listPropertyNames ? listPropertyNames.indexOf(realPropertyName) !== -1 : false);
        };
        this.getActions = (item) => {
            return item.data && item.data['innerActions'] || [];
        };
        this.select = (value) => {
            this.selectedItem && this.selectedItem.isSelected(false);
            this.selectedItem = value;
            value.isSelected(true);
        };
        this.showIconsForChildItems = () => true;
    }
    dispose() {
        this.selectedItem = null;
    }
    canSelect(value) {
        return true;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_objectStructureProviders.js




class _objectStructureProviders_ObjectStructureProviderBase extends utils["a" /* Disposable */] {
    constructor() {
        super(...arguments);
        this.selectedPath = external_ko_["observable"]('');
        this.selectedMember = external_ko_["observable"]();
    }
    getClassName(instance) {
        if (instance.className && instance.className()) {
            return instance.className();
        }
        var funcNameRegex = /function (.{1,})\(/;
        var results = (funcNameRegex).exec((instance).constructor.toString());
        return (results && results.length > 1) ? results[1] : '';
    }
    createItem(currentTarget, propertyName, propertyValue, result) {
        var targetInfo = currentTarget.getInfo && currentTarget.getInfo();
        var propertyInfo = targetInfo && targetInfo.filter(propertyInfo => { return propertyInfo.propertyName === propertyName; })[0], unwrapPropertyValue = external_ko_["unwrap"](propertyValue);
        if (propertyInfo && unwrapPropertyValue !== null && typeof unwrapPropertyValue === 'object') {
            result.push({
                name: propertyName,
                displayName: Object(localization_utils["c" /* getLocalization */])(propertyInfo.displayName, propertyInfo.localizationId),
                specifics: propertyName,
                innerActions: unwrapPropertyValue['innerActions'],
                isList: !!unwrapPropertyValue.push
            });
        }
    }
    getMemberByPath(target, path) {
        var pathComponents = path.split('.'), currentTarget = target;
        pathComponents.splice(0, 1);
        pathComponents.forEach((member) => {
            if (currentTarget && currentTarget[member]) {
                currentTarget = external_ko_["unwrap"](currentTarget[member]);
            }
        });
        return currentTarget;
    }
    getObjectPropertiesForPath(target, path, propertyName) {
        var currentTarget = this.getMemberByPath(target, path), result = [];
        if (currentTarget) {
            if (currentTarget.push) {
                this.createArrayItem(currentTarget, result, propertyName);
            }
            else {
                for (var name in currentTarget) {
                    this.createItem(currentTarget, name, currentTarget[name], result);
                }
            }
        }
        return result;
    }
    createArrayItem(currentTarget, result, propertyName) {
        for (var i = 0; i < currentTarget.length; i++) {
            var unwrapArrayValue = external_ko_["unwrap"](currentTarget[i]);
            result.push({
                name: propertyName ? propertyName + '.' + i.toString() : i.toString(),
                displayName: external_ko_["unwrap"](unwrapArrayValue['displayName'] || unwrapArrayValue['name']),
                specifics: this.getClassName(unwrapArrayValue),
                innerActions: unwrapArrayValue['innerActions'],
                isList: !!unwrapArrayValue.push
            });
        }
    }
}
class _objectStructureProviders_ObjectExplorerProvider extends _objectStructureProviders_ObjectStructureProviderBase {
    constructor(rootITems, listPropertyNames, member, getPathByMember) {
        super();
        this.path = external_ko_["observable"]('');
        this.getPathByMember = getPathByMember;
        this.listPropertyNames = listPropertyNames || [];
        this.getItems = (pathRequest) => {
            var result = external_jQuery_["Deferred"]();
            if (!pathRequest.fullPath) {
                result.resolve((rootITems || []).map((item) => {
                    return { name: item.name, displayName: Object(localization_utils["c" /* getLocalization */])(item.displayName) || item.name, isList: true, specifics: item.className, dragData: { noDragable: true }, data: external_ko_["unwrap"](item.data) };
                }));
            }
            else {
                var target = rootITems.filter((item) => { return item.name === pathRequest.fullPath.split('.')[0]; })[0];
                result.resolve(this.getObjectPropertiesForPath(external_ko_["unwrap"](target.model), pathRequest.fullPath, target.name));
            }
            return result.promise();
        };
        this._disposables.push(this.selectedPath = external_ko_["computed"]({
            read: () => {
                if (member()) {
                    if (this.path.peek()) {
                        return this.getPathByMember && this.getPathByMember(member()).substr(this.path.peek().length + 1);
                    }
                    else {
                        return this.getPathByMember && this.getPathByMember(member());
                    }
                }
                else {
                    return null;
                }
            },
            write: (newVal) => {
                if (!!newVal) {
                    var root = !!this.path() ? this.path().split('.')[0] : newVal.split('.')[0];
                    var rootItem = rootITems.filter(x => x.name === root)[0];
                    if (!!rootItem) {
                        member(this.getMemberByPath(external_ko_["unwrap"](rootItem.model), this.path() ? [this.path(), newVal].join('.') : newVal));
                    }
                }
                else {
                    member(null);
                }
            }
        }));
    }
    createArrayItem(currentTarget, result, propertyName) {
        for (var i = 0; i < currentTarget.length; i++) {
            var unwrapArrayValue = external_ko_["unwrap"](currentTarget[i]), isList = false;
            this.listPropertyNames.forEach((name) => {
                if (!isList && unwrapArrayValue[name] && external_ko_["unwrap"](unwrapArrayValue[name]).length > 0) {
                    isList = true;
                }
            });
            var specifics = this.getClassName(unwrapArrayValue);
            result.push({
                name: propertyName ? propertyName + '.' + i.toString() : i.toString(),
                displayName: external_ko_["unwrap"](unwrapArrayValue['displayName'] || unwrapArrayValue['name']),
                specifics: specifics,
                isList: isList,
                data: unwrapArrayValue,
                dragData: {
                    noDragable: !((propertyName === 'bands' && (specifics === 'groupheaderband' || specifics === 'groupfooterband' || specifics === 'detailreportband' || specifics === 'subband')) ||
                        propertyName === 'controls' ||
                        propertyName === 'rows' ||
                        (propertyName === 'cells' && specifics !== 'xrcrosstabcell') ||
                        propertyName === 'subBands' ||
                        propertyName === 'Styles' ||
                        propertyName === 'Formatting Rules')
                }
            });
        }
    }
    createItem(currentTarget, propertyName, propertyValue, result) {
        var isAvailableListProperty = this.listPropertyNames.length > 0 ? this.listPropertyNames.indexOf(propertyName) > -1 : true;
        if (isAvailableListProperty && propertyValue && propertyValue.push) {
            this.createArrayItem(external_ko_["unwrap"](propertyValue), result, propertyName);
        }
    }
}
class _objectStructureProviders_ObjectStructureProvider extends _objectStructureProviders_ObjectStructureProviderBase {
    constructor(target, displayName, localizationId) {
        super();
        this.getItems = (pathRequest) => {
            var result = external_jQuery_["Deferred"]();
            if (!pathRequest.fullPath) {
                result.resolve([{ name: displayName || external_ko_["unwrap"](target['name']), displayName: Object(localization_utils["c" /* getLocalization */])(displayName || external_ko_["unwrap"](target['name']), localizationId), isList: true, specifics: target.className && target.className(), dragData: { noDragable: true } }]);
            }
            else {
                result.resolve(this.getObjectPropertiesForPath(external_ko_["unwrap"](target), pathRequest.fullPath));
            }
            return result.promise();
        };
        this._disposables.push(this.selectedPath.subscribe((path) => {
            this.selectedMember(external_ko_["unwrap"](this.getMemberByPath(external_ko_["unwrap"](target), path)));
        }));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_papperKindMapper.js
var papperKindMapper = {
    A2: { width: 1654, height: 2339 },
    A3: { width: 1169, height: 1654 },
    A3Extra: { width: 1268, height: 1752 },
    A3ExtraTransverse: { width: 1268, height: 1752 },
    A3Rotated: { width: 1654, height: 1169 },
    A3Transverse: { width: 1169, height: 1654 },
    A4: { width: 827, height: 1169 },
    A4Extra: { width: 929, height: 1268 },
    A4Plus: { width: 827, height: 1299 },
    A4Rotated: { width: 1169, height: 827 },
    A4Small: { width: 827, height: 1169 },
    A4Transverse: { width: 827, height: 1169 },
    A5: { width: 583, height: 827 },
    A5Extra: { width: 685, height: 925 },
    A5Rotated: { width: 827, height: 583 },
    A5Transverse: { width: 583, height: 827 },
    A6: { width: 413, height: 583 },
    A6Rotated: { width: 583, height: 413 },
    APlus: { width: 894, height: 1402 },
    B4: { width: 984, height: 1390 },
    B4Envelope: { width: 984, height: 1390 },
    B4JisRotated: { width: 1433, height: 1012 },
    B5: { width: 693, height: 984 },
    B5Envelope: { width: 693, height: 984 },
    B5Extra: { width: 791, height: 1087 },
    B5JisRotated: { width: 1012, height: 717 },
    B5Transverse: { width: 717, height: 1012 },
    B6Envelope: { width: 693, height: 492 },
    B6Jis: { width: 504, height: 717 },
    B6JisRotated: { width: 717, height: 504 },
    BPlus: { width: 1201, height: 1917 },
    C3Envelope: { width: 1276, height: 1803 },
    C4Envelope: { width: 902, height: 1276 },
    C5Envelope: { width: 638, height: 902 },
    C65Envelope: { width: 449, height: 902 },
    C6Envelope: { width: 449, height: 638 },
    CSheet: { width: 1700, height: 2200 },
    DLEnvelope: { width: 433, height: 866 },
    DSheet: { width: 2200, height: 3400 },
    ESheet: { width: 3400, height: 4400 },
    Executive: { width: 725, height: 1050 },
    Folio: { width: 850, height: 1300 },
    GermanLegalFanfold: { width: 850, height: 1300 },
    GermanStandardFanfold: { width: 850, height: 1200 },
    InviteEnvelope: { width: 866, height: 866 },
    IsoB4: { width: 984, height: 1390 },
    ItalyEnvelope: { width: 433, height: 906 },
    JapaneseDoublePostcard: { width: 787, height: 583 },
    JapaneseDoublePostcardRotated: { width: 583, height: 787 },
    JapanesePostcard: { width: 394, height: 583 },
    Ledger: { width: 1700, height: 1100 },
    Legal: { width: 850, height: 1400 },
    LegalExtra: { width: 927, height: 1500 },
    Letter: { width: 850, height: 1100 },
    LetterExtra: { width: 927, height: 1200 },
    LetterExtraTransverse: { width: 927, height: 1200 },
    LetterPlus: { width: 850, height: 1269 },
    LetterRotated: { width: 1100, height: 850 },
    LetterSmall: { width: 850, height: 1100 },
    LetterTransverse: { width: 827, height: 1100 },
    MonarchEnvelope: { width: 388, height: 750 },
    Note: { width: 850, height: 1100 },
    Number10Envelope: { width: 412, height: 950 },
    Number11Envelope: { width: 450, height: 1038 },
    Number12Envelope: { width: 475, height: 1100 },
    Number14Envelope: { width: 500, height: 1150 },
    Number9Envelope: { width: 388, height: 888 },
    PersonalEnvelope: { width: 362, height: 650 },
    Prc16K: { width: 575, height: 846 },
    Prc16KRotated: { width: 575, height: 846 },
    Prc32K: { width: 382, height: 594 },
    Prc32KBig: { width: 382, height: 594 },
    Prc32KBigRotated: { width: 382, height: 594 },
    Prc32KRotated: { width: 382, height: 594 },
    PrcEnvelopeNumber1: { width: 402, height: 650 },
    PrcEnvelopeNumber10: { width: 1276, height: 1803 },
    PrcEnvelopeNumber10Rotated: { width: 1803, height: 1276 },
    PrcEnvelopeNumber1Rotated: { width: 650, height: 402 },
    PrcEnvelopeNumber2: { width: 402, height: 693 },
    PrcEnvelopeNumber2Rotated: { width: 693, height: 402 },
    PrcEnvelopeNumber3: { width: 492, height: 693 },
    PrcEnvelopeNumber3Rotated: { width: 693, height: 492 },
    PrcEnvelopeNumber4: { width: 433, height: 819 },
    PrcEnvelopeNumber4Rotated: { width: 819, height: 433 },
    PrcEnvelopeNumber5: { width: 433, height: 866 },
    PrcEnvelopeNumber5Rotated: { width: 866, height: 433 },
    PrcEnvelopeNumber6: { width: 472, height: 906 },
    PrcEnvelopeNumber6Rotated: { width: 906, height: 472 },
    PrcEnvelopeNumber7: { width: 630, height: 906 },
    PrcEnvelopeNumber7Rotated: { width: 906, height: 630 },
    PrcEnvelopeNumber8: { width: 472, height: 1217 },
    PrcEnvelopeNumber8Rotated: { width: 1217, height: 472 },
    PrcEnvelopeNumber9: { width: 902, height: 1276 },
    PrcEnvelopeNumber9Rotated: { width: 1276, height: 902 },
    Quarto: { width: 846, height: 1083 },
    Standard10x11: { width: 1000, height: 1100 },
    Standard10x14: { width: 1000, height: 1400 },
    Standard11x17: { width: 1100, height: 1700 },
    Standard12x11: { width: 1200, height: 1100 },
    Standard15x11: { width: 1500, height: 1100 },
    Standard9x11: { width: 900, height: 1100 },
    Statement: { width: 550, height: 850 },
    Tabloid: { width: 1100, height: 1700 },
    TabloidExtra: { width: 1169, height: 1800 },
    USStandardFanfold: { width: 1488, height: 1100 },
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_resizable.js




class _resizable_Resizable extends utils["a" /* Disposable */] {
    constructor(_element, _options) {
        super();
        this._element = _element;
        this._options = _options;
        this.handleClass = 'ui-resizable-handle';
        this.handleClassSelector = `.${this.handleClass}`;
        this.resizableElementClass = 'ui-resizable';
        this._defaultMinSize = 1;
        this._bodyEvents = {
            move: null,
            up: null
        };
        this._resizeDirection = null;
        this._resizeHandles = ['w', 'e', 's', 'n', 'se', 'sw', 'ne', 'nw'];
    }
    _initResize(event) {
        this._startResizeMousePosition = {
            left: event.pageX,
            top: event.pageY
        };
        this._resizeDirection = getResizeDirection(event.target.classList);
        this._addClassToElement('ui-resizable-resizing');
        var bounds = this._element.getBoundingClientRect();
        var $el = external_jQuery_["fn"].constructor(this._element);
        this._element.dataset.originalLeftPosition = $el.css('left');
        this._element.dataset.originalTopPosition = $el.css('top');
        this._element.dataset.originalWidth = convertToCssPixelUnits(bounds.width);
        this._element.dataset.originalHeight = convertToCssPixelUnits(bounds.height);
        this._element.dataset.originalLeftMousePosition = convertToCssPixelUnits(event.pageX);
        this._element.dataset.originalTopMousePosition = convertToCssPixelUnits(event.pageY);
        this._bodyEvents.move = event => this._mouseMove(event);
        this._bodyEvents.up = event => this._mouseUp(event);
        document.body.addEventListener('mousemove', this._bodyEvents.move);
        document.body.addEventListener('mouseup', this._bodyEvents.up);
    }
    _mouseMove(event) {
        const leftButtonPressed = event.which === 1;
        if (leftButtonPressed) {
            const boundsDiff = this._getBoundsDiff(event);
            this._options.resize(event, this._element, boundsDiff);
        }
    }
    _mouseUp(event) {
        this._bodyEvents.move && document.body.removeEventListener('mousemove', this._bodyEvents.move);
        this._bodyEvents.up && document.body.removeEventListener('mouseup', this._bodyEvents.up);
        this._options.stop();
        _resizable_Resizable.inProcess = false;
        this._removeClassFromElement('ui-resizable-resizing');
        this._startResizeMousePosition = null;
        this._resizeDirection = null;
    }
    _mouseDown(event) {
        _resizable_Resizable.inProcess = true;
        this._initResize(event);
        this._options.start(event, this._element);
    }
    _initResizeHandle(className, handleResizeEvent) {
        const handleDiv = document.createElement('div');
        handleDiv.classList.add(this.handleClass);
        handleDiv.style.zIndex = '95';
        handleDiv.classList.add(className);
        handleDiv.addEventListener('mousedown', handleResizeEvent);
        this._element.append(handleDiv);
    }
    _addClassToElement(className) {
        this._element.classList.add(className);
    }
    _removeClassFromElement(className) {
        this._element.classList.remove(className);
    }
    _getBoundsDiff(event) {
        let diffWidth = 0;
        let diffHeight = 0;
        let leftDiff = 0;
        let topDiff = 0;
        const originalHeight = convertFromCssPixelUnits(this._element.dataset.originalHeight);
        const originalWidth = convertFromCssPixelUnits(this._element.dataset.originalWidth);
        const updateHeightFunc = (resizeFromTop) => {
            const minHeight = this._element.style.minHeight ? convertFromCssPixelUnits(this._element.style.minHeight) : this._defaultMinSize;
            const resizeDistance = (this._startResizeMousePosition.top - event.pageY) * (resizeFromTop ? 1 : -1);
            const newHeightIsLessThanMinHeight = minHeight > originalHeight + resizeDistance;
            if (newHeightIsLessThanMinHeight) {
                var respectedDiff = originalHeight - minHeight;
                if (resizeFromTop)
                    topDiff = respectedDiff;
                diffHeight = -respectedDiff;
                return;
            }
            diffHeight = resizeDistance;
            if (resizeFromTop) {
                topDiff = -diffHeight;
            }
        };
        const updateWidthFunc = (resizeFromLeft) => {
            const minWidth = this._element.style.minWidth ? convertFromCssPixelUnits(this._element.style.minWidth) : this._defaultMinSize;
            const resizeDistance = (this._startResizeMousePosition.left - event.pageX) * (resizeFromLeft ? 1 : -1);
            const newWidthIsLessThanMinWidth = minWidth > originalWidth + resizeDistance;
            if (newWidthIsLessThanMinWidth) {
                var respectedDiff = originalWidth - minWidth;
                if (resizeFromLeft)
                    leftDiff = respectedDiff;
                diffWidth = -respectedDiff;
                return;
            }
            diffWidth = resizeDistance;
            if (resizeFromLeft) {
                leftDiff = -diffWidth;
            }
        };
        const updateHeight = this._resizeDirection && /sw|se|nw|ne|s|n/.test(this._resizeDirection);
        const updateWidth = this._resizeDirection && /sw|se|nw|ne|e|w/.test(this._resizeDirection);
        if (updateHeight)
            updateHeightFunc(/nw|ne|n/.test(this._resizeDirection));
        if (updateWidth)
            updateWidthFunc(/sw|nw|w/.test(this._resizeDirection));
        const boundsDiff = {
            width: diffWidth,
            height: diffHeight,
            left: leftDiff,
            top: topDiff
        };
        return boundsDiff;
    }
    initialize() {
        var mousedown = event => this._mouseDown(event);
        var addElementHandles = (handles) => {
            if (!handles)
                return;
            this._addClassToElement(this.resizableElementClass);
            external_jQuery_["fn"].constructor(this._element).children(this.handleClassSelector).remove();
            const elementResizeHandles = handles === 'all' ? this._resizeHandles : handles.split(',');
            elementResizeHandles.forEach(handle => {
                this._initResizeHandle(`ui-resizable-${handle}`, mousedown);
            });
        };
        addElementHandles(external_ko_["unwrap"](this._options.handles));
        if (external_ko_["isSubscribable"](this._options.handles)) {
            var subscribe = this._options.handles.subscribe((newHandles) => {
                this._removeClassFromElement(this.resizableElementClass);
                var oldElementHandles = this._element.querySelectorAll(this.handleClassSelector);
                oldElementHandles.forEach(handle => handle.removeEventListener('mousedown', mousedown));
                external_jQuery_["fn"].constructor(this._element).children(this.handleClassSelector).remove();
                addElementHandles(newHandles);
            });
            this._disposables.push(subscribe);
        }
        this._disposables.push({
            dispose: () => {
                addElementHandles = null;
                var elementHandles = this._element.querySelectorAll(this.handleClass);
                elementHandles.forEach(handle => handle.removeEventListener('mousedown', mousedown));
                this._element.removeEventListener('mousedown', mousedown);
                mousedown = null;
                this._element = null;
                this._options = null;
            }
        });
        return this;
    }
}
_resizable_Resizable.inProcess = false;
function getResizeDirection(currentClassList) {
    for (var i = 0; i < currentClassList.length; i++) {
        if (currentClassList[i] !== 'ui-resizable-handle' && currentClassList[i].indexOf('ui-resizable-') === 0)
            return currentClassList[i].slice('ui-resizable-'.length, currentClassList[i].length);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_draggable.js



class _draggable_Draggable extends utils["a" /* Disposable */] {
    constructor(_element, _options) {
        super();
        this._element = _element;
        this._options = _options;
        this._bodyEvents = { move: null, up: null };
        this._windowEvents = { up: null };
        this._originalDragStartCoordinates = null;
        this._originalElementPosition = null;
        this._dragInitialized = false;
        this._scrollableContainer = null;
        this._draggableElementClass = 'ui-draggable';
        this._minDragDistance = 1;
        var mousedown = event => this._mouseDown(event);
        this._addClassToElement(this._draggableElementClass);
        this._element.addEventListener('mousedown', mousedown);
        this._disposables.push({
            dispose: () => {
                this._element.removeEventListener('mousedown', mousedown);
                mousedown = null;
                this._element = null;
                this._options = null;
            }
        });
    }
    _initScrollContainer() {
        if (this._options.containment && this._options.containment[0].classList.contains('dxrd-ghost-container')) {
            this._scrollableContainer = this._element.closest('.dx-scrollable-container');
        }
    }
    _initDrag(event) {
        this._startRect = {
            left: event.pageX,
            top: event.pageY
        };
        this._bodyEvents.move = event => this._mouseMove(event);
        this._windowEvents.up = event => this._mouseUp(event);
        document.body.addEventListener('mousemove', this._bodyEvents.move);
        window.addEventListener('mouseup', this._windowEvents.up);
        this._initScrollContainer();
    }
    _addClassToElement(className) {
        this._element.classList.add(className);
    }
    _mouseMove(event) {
        var _a, _b;
        if (_resizable_Resizable.inProcess || !this._startRect)
            return;
        const leftButtonPressed = event.which === 1;
        if (!leftButtonPressed || !this.shouldStartDrag(event))
            return;
        if (!this._dragInitialized) {
            this._dragInitialized = true;
            this._options.helper && (this._ghostContainer = this._options.helper(event, this._element));
            if (this._ghostContainer)
                this._element.ghostContainer = this._ghostContainer[0];
            this._originalDragStartCoordinates = { left: this._element.dataset.startDragWithOffset ? event.pageX : this._startRect.left, top: this._element.dataset.startDragWithOffset ? event.pageY : this._startRect.top };
            this._originalElementPosition = { left: this._ghostContainer ? convertFromCssPixelUnits(this._ghostContainer[0].dataset.startLeftPosition) : event.pageX, top: this._ghostContainer ? convertFromCssPixelUnits(this._ghostContainer[0].dataset.startTopPosition) : event.pageY };
            this._element.dataset.leftPosition = convertToCssPixelUnits(this._originalElementPosition.left);
            this._element.dataset.topPosition = convertToCssPixelUnits(this._originalElementPosition.top);
            this._options.start(event, this._element);
        }
        var dragDeltaLeft = this._originalDragStartCoordinates.left - event.pageX;
        var dragDeltaTop = this._originalDragStartCoordinates.top - event.pageY;
        const position = { left: this._originalElementPosition.left - dragDeltaLeft - (((_a = this._scrollableContainer) === null || _a === void 0 ? void 0 : _a.scrollLeft) || 0), top: this._originalElementPosition.top - dragDeltaTop - (((_b = this._scrollableContainer) === null || _b === void 0 ? void 0 : _b.scrollTop) || 0) };
        this._element.dataset.leftPosition = convertToCssPixelUnits(position.left);
        this._element.dataset.topPosition = convertToCssPixelUnits(position.top);
        if (this._ghostContainer) {
            this._ghostContainer[0].style.left = this._element.dataset.leftPosition;
            this._ghostContainer[0].style.top = this._element.dataset.topPosition;
        }
        this._options.drag(event, this._element);
    }
    shouldStartDrag(event) {
        return Math.abs(this._startRect.left - event.pageX) >= this._minDragDistance || Math.abs(this._startRect.top - event.pageY) >= this._minDragDistance;
    }
    _mouseUp(event) {
        if (_resizable_Resizable.inProcess)
            return;
        _draggable_Draggable.inProcess = false;
        this._bodyEvents.move && document.body.removeEventListener('mousemove', this._bodyEvents.move);
        this._windowEvents.up && window.removeEventListener('mouseup', this._windowEvents.up);
        if (this._dragInitialized) {
            this._dragInitialized = false;
            this._ghostContainer && this._ghostContainer.remove();
            this._ghostContainer = null;
            this._scrollableContainer = null;
            this._options.stop(event, this._element);
        }
        this._startRect = null;
    }
    _mouseDown(event) {
        event.stopPropagation();
        if (_resizable_Resizable.inProcess)
            return;
        _draggable_Draggable.inProcess = true;
        this._initDrag(event);
    }
}
_draggable_Draggable.inProcess = false;

// EXTERNAL MODULE: external "DevExpress.ui.dxPopup"
var external_DevExpress_ui_dxPopup_ = __webpack_require__(32);
var external_DevExpress_ui_dxPopup_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxPopup_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/selectable.js






function rectIntersection(r1, r2) {
    return !(r2.left > r1.right ||
        r2.right < r1.left ||
        r2.top > r1.bottom ||
        r2.bottom < r1.top);
}
class selectable_SelectableElement extends utils["a" /* Disposable */] {
    constructor(_element, _options) {
        super();
        this._element = _element;
        this._options = _options;
        this.isSelected = false;
        this.bounds = _element.getBoundingClientRect();
        this._disposables.push({
            dispose: () => {
                this._element = null;
                this._options = null;
                this.bounds = null;
            }
        });
    }
    updateSelection(currentRect, event) {
        var isSelected = rectIntersection(this.bounds, currentRect);
        if (isSelected != this.isSelected) {
            isSelected ? this._options.selecting(event, this._element) : this._options.unselecting(event, this._element);
            this.isSelected = isSelected;
        }
    }
}
class selectable_Selectable extends utils["a" /* Disposable */] {
    constructor(_element, _options) {
        super();
        this._element = _element;
        this._options = _options;
        this._elements = [];
        this._bodyEvents = {
            move: null,
            up: null
        };
        this._minSelectDistance = 2;
        var mousemove = event => this._mouseMove(event);
        var mouseup = event => this._mouseUp(event);
        var mousedown = event => this._mouseDown(event);
        this._element.addEventListener('mousemove', mousemove);
        this._element.addEventListener('mouseup', mouseup);
        this._element.addEventListener('mousedown', mousedown);
        this._$window = external_jQuery_["fn"].constructor(window);
        this._disposables.push({
            dispose: () => {
                this._element.removeEventListener('mousemove', mousemove);
                this._element.removeEventListener('mouseup', mouseup);
                this._element.removeEventListener('mousedown', mousedown);
                mousemove = null;
                mouseup = null;
                mousedown = null;
                this._$window = null;
                this._element = null;
                this._options = null;
            }
        });
    }
    _clearElements() {
        this._elements.forEach(x => x.dispose());
        this._elements = [];
    }
    _collectElements() {
        this._clearElements();
        var elements = document.getElementsByClassName(this._options.filter.substr(1));
        for (var i = 0; i < elements.length; i++) {
            this._elements.push(new selectable_SelectableElement(elements[i], this._options));
        }
    }
    _updateSelectionContent(event) {
        if (this._startRect.left >= event.pageX) {
            this._$selectionContent.css('left', event.pageX);
            this._$selectionContent.css('right', this._startRect.right);
        }
        else {
            this._$selectionContent.css('left', this._startRect.left);
            this._$selectionContent.css('right', this._$window.width() - event.pageX);
        }
        if (this._startRect.top >= event.pageY) {
            this._$selectionContent.css('top', event.pageY);
            this._$selectionContent.css('bottom', this._startRect.bottom);
        }
        else {
            this._$selectionContent.css('top', this._startRect.top);
            this._$selectionContent.css('bottom', this._$window.height() - event.pageY);
        }
        const currentRect = this._$selectionContent[0].getBoundingClientRect();
        for (var i = 0; i < this._elements.length; i++) {
            this._elements[i].updateSelection(currentRect, event);
        }
    }
    _initStartRect(event) {
        this._startRect = {
            left: event.pageX,
            top: event.pageY,
            right: this._$window.width() - event.pageX,
            bottom: this._$window.height() - event.pageY
        };
    }
    _mouseMove(event) {
        setTimeout(() => {
            if (_dragDropHandler_DragDropHandler.started() || selectable_Selectable.disabled || _resizable_Resizable.inProcess || !this._startRect)
                return;
            var leftButtonPressed = event.which === 1;
            if (leftButtonPressed) {
                if (!this._$selectionContent) {
                    if (this.shouldStartSelect(event)) {
                        selectable_Selectable.inProcess = true;
                        this._$selectionContent = external_jQuery_["fn"].constructor('<div />').appendTo(document.body);
                        this._$selectionContent.addClass('dxrd-selection-content ui-selectable-helper');
                        if (external_DevExpress_ui_dxPopup_default.a.prototype['_zIndexInitValue'])
                            this._$selectionContent.css('z-index', external_DevExpress_ui_dxPopup_default.a.prototype['_zIndexInitValue']() + 100);
                        this._updateSelectionContent(event);
                        this._bodyEvents.move = event => this._mouseMove(event);
                        this._bodyEvents.up = event => this._mouseUp(event);
                        document.body.addEventListener('mousemove', this._bodyEvents.move);
                        document.body.addEventListener('mouseup', this._bodyEvents.up);
                    }
                }
                else {
                    this._updateSelectionContent(event);
                }
            }
        }, 1);
    }
    shouldStartSelect(event) {
        return Math.abs(this._startRect.left - event.pageX) >= this._minSelectDistance || Math.abs(this._startRect.top - event.pageY) >= this._minSelectDistance;
    }
    _mouseUp(event) {
        if (selectable_Selectable.disabled || _resizable_Resizable.inProcess || _draggable_Draggable.inProcess)
            return;
        this._options.stop();
        this._$selectionContent && this._$selectionContent.remove();
        this._$selectionContent = null;
        this._bodyEvents.move && document.body.removeEventListener('mousemove', this._bodyEvents.move);
        this._bodyEvents.up && document.body.removeEventListener('mouseup', this._bodyEvents.up);
        this._startRect = null;
        this._clearElements();
        selectable_Selectable.inProcess = false;
    }
    _mouseDown(event) {
        if (selectable_Selectable.disabled || _resizable_Resizable.inProcess || _draggable_Draggable.inProcess)
            return;
        this._initStartRect(event);
        this._collectElements();
        this._options.start(event);
    }
}
selectable_Selectable.inProcess = false;
selectable_Selectable.disabled = false;

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_resizableBinding.js








external_ko_["bindingHandlers"]['resizable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor();
        var $element = external_jQuery_["fn"].constructor(element), $parent = $element.closest('.dx-designer'), currentDirection = null, $selectedNodes = null, resizableDirections = { 'north': 'n', 'east': 'e', 'south': 's', 'west': 'w' }, calculateSizes = [], absolutePosition = null;
        var options = Object(_utils["b" /* extend */])({
            handles: external_ko_["isSubscribable"](values.handles) ? values.handles : (values.handles || 'all'),
            ghost: false,
            stop: function (event) {
                $selectedNodes.each((_, el) => {
                    var context = external_ko_["contextFor"](el), control = context.$data, surface = context.$root.surface(), $el = external_jQuery_["fn"].constructor(el);
                    var rect = control.rect();
                    var newRect = getControlRect($el, control, surface);
                    newRect = {
                        top: currentDirection.indexOf(resizableDirections.north) !== -1 ? newRect.top : rect.top,
                        left: currentDirection.indexOf(resizableDirections.west) !== -1 ? newRect.left : rect.left,
                        width: currentDirection.indexOf(resizableDirections.east) !== -1 || currentDirection.indexOf(resizableDirections.west) !== -1 ? newRect.width : rect.width,
                        height: currentDirection.indexOf(resizableDirections.south) !== -1 || currentDirection.indexOf(resizableDirections.north) !== -1 ? newRect.height : rect.height,
                    };
                    calculateSizes.push(() => {
                        if (control.canSetRect && !control.canSetRect(newRect)) {
                            if (el.dataset.originalLeftPosition && el.dataset.originalTopPosition) {
                                $el.css('top', el.dataset.originalTopPosition);
                                $el.css('left', el.dataset.originalLeftPosition);
                            }
                            if (el.dataset.originalWidth && el.dataset.originalHeight) {
                                $el.css('width', el.dataset.originalWidth);
                                $el.css('height', el.dataset.originalHeight);
                            }
                        }
                        else {
                            control.rect(newRect);
                            if (JSON.stringify(rect) === JSON.stringify(newRect)) {
                                $el.css({
                                    left: rect.left,
                                    top: rect.top,
                                    width: rect.width,
                                    height: rect.height
                                });
                            }
                        }
                        el.dataset.originalLeftPosition = void 0;
                        el.dataset.originalTopPosition = void 0;
                        el.dataset.originalWidth = void 0;
                        el.dataset.originalHeight = void 0;
                    });
                });
                calculateSizes.forEach(c => c());
                calculateSizes = [];
                currentDirection = null;
                values.stopped();
                values.started = false;
                if (values.snapHelper) {
                    values.snapHelper.deactivateSnapLines();
                }
            },
            start: (event) => {
                currentDirection = getResizeDirection(event.target.classList);
                values.started = true;
                values.starting(event);
                $selectedNodes = values.$selectedNodes || external_jQuery_["fn"].constructor('.dxrd-viewport .dxrd-selected').filter(':visible');
                $selectedNodes
                    .each((_, el) => {
                    var $el = external_jQuery_["fn"].constructor(el);
                    var bounds = el.getBoundingClientRect();
                    el.dataset.originalLeftPosition = $el.css('left');
                    el.dataset.originalTopPosition = $el.css('top');
                    el.dataset.originalWidth = convertToCssPixelUnits(bounds.width);
                    el.dataset.originalHeight = convertToCssPixelUnits(bounds.height);
                });
                var elementOffset = $element.offset();
                var ghostContainerOffset = $parent.find('.dxrd-ghost-container').offset();
                if (!ghostContainerOffset) {
                    absolutePosition = elementOffset;
                }
                else {
                    absolutePosition = {
                        top: elementOffset.top - ghostContainerOffset.top,
                        left: elementOffset.left - ghostContainerOffset.left
                    };
                }
                if (values.snapHelper) {
                    values.snapHelper.updateSnapLines(viewModel);
                }
            },
            resize: (event, element, boundsDiff) => {
                event.stopPropagation();
                const dw = boundsDiff.width;
                const dh = boundsDiff.height;
                const dx = boundsDiff.left;
                const dy = boundsDiff.top;
                if (values.forceResize) {
                    values.forceResize({ size: new size_Size(element.offsetWidth, element.offsetHeight), delta: { dx: dx, dy: dy, dw: dw, dh: dh }, element });
                    return;
                }
                if (!element.dataset.originalLeftPosition || !element.dataset.originalTopPosition || !element.dataset.originalWidth || !element.dataset.originalHeight)
                    return;
                const mainSelectionOriginalSize = getOriginalSizeNum(element);
                const mainSelectionOriginalPosition = getOriginalPositionNum(element);
                if (event.altKey) {
                    values.snapHelper && values.snapHelper.deactivateSnapLines();
                }
                else if (values.snapHelper && $selectedNodes.length === 1) {
                    const newWidth = mainSelectionOriginalSize.width + dw;
                    const newHeight = mainSelectionOriginalSize.height + dh;
                    const elementSizeInfo = {
                        originalSize: { width: mainSelectionOriginalSize.width, height: mainSelectionOriginalSize.height },
                        size: { width: newWidth, height: newHeight }
                    };
                    const newAbsolutePosition = getControlNewAbsolutePositionOnResize(values.snapHelper, absolutePosition, elementSizeInfo, { x: dx, y: dy, width: dw, height: dh });
                    values.snapHelper.activateSnapLines(newAbsolutePosition);
                    const resizedBounds = getResizedBounds(mainSelectionOriginalPosition, mainSelectionOriginalSize, boundsDiff);
                    const snapBounds = {
                        left: mainSelectionOriginalPosition.left + newAbsolutePosition.left - absolutePosition.left,
                        top: mainSelectionOriginalPosition.top + newAbsolutePosition.top - absolutePosition.top,
                        width: newAbsolutePosition.right - newAbsolutePosition.left,
                        height: newAbsolutePosition.bottom - newAbsolutePosition.top
                    };
                    if (!boundsAreEqual(snapBounds, resizedBounds)) {
                        $element.css(snapBounds);
                        return;
                    }
                }
                $selectedNodes.each(function (key, el) {
                    if (el === event.target)
                        return;
                    var resizedBounds = getResizedBounds(getOriginalPositionNum(el), getOriginalSizeNum(el), boundsDiff);
                    el.style.left = convertToCssPixelUnits(resizedBounds.left);
                    el.style.top = convertToCssPixelUnits(resizedBounds.top);
                    el.style.width = convertToCssPixelUnits(resizedBounds.width);
                    el.style.height = convertToCssPixelUnits(resizedBounds.height);
                });
            }
        }, external_ko_["unwrap"](values));
        var subscription = null;
        if (!values.disabled) {
        }
        var resizableElement = new _resizable_Resizable(element, options).initialize();
        Object(_internal["c" /* addDisposeCallback */])(element, () => {
            resizableElement.dispose();
            element = null;
            subscription && subscription.dispose();
        });
    },
    update: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        const minWidthOption = external_ko_["unwrap"](valueAccessor().minimumWidth);
        if (minWidthOption) {
            element.style.minWidth = convertToCssPixelUnits(minWidthOption);
        }
        const minHeightOption = external_ko_["unwrap"](valueAccessor().minimumHeight);
        if (minHeightOption) {
            element.style.minHeight = convertToCssPixelUnits(minHeightOption);
        }
        const getElementHandles = (element) => Array.from(element.children).filter(function (child) {
            return child.classList.contains('ui-resizable-handle');
        });
        const maxWidth = external_ko_["unwrap"](valueAccessor().maximumWidth);
        if (maxWidth) {
            element.style.maxWidth = convertToCssPixelUnits(maxWidth);
        }
        const handleClassName = valueAccessor().handleClassName;
        handleClassName && getElementHandles(element).forEach((handle) => handle.classList.add(handleClassName));
        const disabled = !!(external_ko_["unwrap"](valueAccessor().disabled) || external_ko_["unwrap"](viewModel.locked));
        getElementHandles(element).forEach((handle) => handle.style.display = disabled ? 'none' : 'block');
    }
};
external_ko_["bindingHandlers"]['resizableReportMargins'] = {
    init: function (element, valueAccessor) {
        valueAccessor();
    }
};
function getOriginalPositionNum(element) {
    return {
        left: convertFromCssPixelUnits(element.dataset.originalLeftPosition),
        top: convertFromCssPixelUnits(element.dataset.originalTopPosition)
    };
}
function getOriginalSizeNum(element) {
    return {
        width: convertFromCssPixelUnits(element.dataset.originalWidth),
        height: convertFromCssPixelUnits(element.dataset.originalHeight)
    };
}
function getResizedBounds(originalPosition, originalSize, boundsDiff) {
    return {
        left: originalPosition.left + boundsDiff.left,
        top: originalPosition.top + boundsDiff.top,
        width: originalSize.width + boundsDiff.width,
        height: originalSize.height + boundsDiff.height
    };
}
function boundsAreEqual(bounds1, bounds2) {
    return bounds1.left === bounds2.left
        && bounds1.top === bounds2.top
        && bounds1.width === bounds2.width
        && bounds1.height === bounds2.height;
}

// EXTERNAL MODULE: external "DevExpress.ui.dxScrollView"
var external_DevExpress_ui_dxScrollView_ = __webpack_require__(21);
var external_DevExpress_ui_dxScrollView_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxScrollView_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_scrollProcessor.js


class _scrollProcessor_dxScrollProcessor extends utils["a" /* Disposable */] {
    constructor(_container, _updateTime = 10) {
        super();
        this._container = _container;
        this._updateTime = _updateTime;
        this._currentOffsetY = 0;
        this._currentOffsetX = 0;
        this._scroll = null;
        this._updateInterval = null;
        this._scroll = external_DevExpress_ui_dxScrollView_default.a.getInstance(this._container);
    }
    dispose() {
        this._scroll = null;
        this._container = null;
        this._updateInterval && clearTimeout(this._updateInterval);
        this._updateInterval = null;
    }
    _startUpdateScrollPosition() {
        this._updateInterval && clearInterval(this._updateInterval);
        this._updateInterval = setInterval(() => this._scroll.scrollTo({
            top: this._scroll.scrollTop() + this._currentOffsetY,
            left: this._scroll.scrollLeft() + this._currentOffsetX
        }), this._updateTime);
    }
    _calculateOffset(screenPosition, containerRect, offsetProperty) {
        var sizeProperty = offsetProperty === 'y' ? 'height' : 'width';
        if (screenPosition[offsetProperty] > (containerRect[offsetProperty] + containerRect[sizeProperty] - 50)) {
            return 5;
        }
        else if (screenPosition[offsetProperty] < (containerRect[offsetProperty] + 50)) {
            return -5;
        }
        return 0;
    }
    getScrollOffset() {
        return this._scroll.scrollOffset();
    }
    processOffset(screenPosition) {
        var containerRect = this._container.getBoundingClientRect();
        this._currentOffsetY = this._calculateOffset(screenPosition, containerRect, 'y');
        this._currentOffsetX = this._calculateOffset(screenPosition, containerRect, 'x');
        if (!this._currentOffsetX && !this._currentOffsetY) {
            this._updateInterval && clearInterval(this._updateInterval);
            this._updateInterval = null;
        }
        else if (!this._updateInterval) {
            this._startUpdateScrollPosition();
        }
    }
}

// EXTERNAL MODULE: external "DevExpress.data.ArrayStore"
var external_DevExpress_data_ArrayStore_ = __webpack_require__(50);
var external_DevExpress_data_ArrayStore_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_ArrayStore_);

// EXTERNAL MODULE: external "DevExpress.data.CustomStore"
var external_DevExpress_data_CustomStore_ = __webpack_require__(51);
var external_DevExpress_data_CustomStore_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_CustomStore_);

// EXTERNAL MODULE: external "DevExpress.data.DataSource"
var external_DevExpress_data_DataSource_ = __webpack_require__(34);
var external_DevExpress_data_DataSource_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_DataSource_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_stores.js






class _stores_CustomSortedArrayStore extends external_DevExpress_data_CustomStore_default.a {
    static _sortItems(items, sortPropertyName) {
        return items.sort((a, b) => {
            var propA = external_ko_["unwrap"](a[sortPropertyName]), propB = external_ko_["unwrap"](b[sortPropertyName]);
            if (propA && propB) {
                var diff = propA - propB;
                if (!isNaN(diff))
                    return diff;
                propA = propA.toLowerCase ? propA.toLowerCase() : propA;
                propB = propB.toLowerCase ? propB.toLowerCase() : propB;
                return (propA < propB) ? -1 : (propA > propB) ? 1 : 0;
            }
        });
    }
    static _createOptions(items, sortPropertyName) {
        items = this._sortItems(items, sortPropertyName);
        return {
            load: (options) => {
                var result = [].concat(items);
                if (options.take)
                    result = result.splice(options.skip, options.take);
                return external_jQuery_["Deferred"]().resolve(result).promise();
            },
            byKey: (key) => {
                if (items.some(x => x === key))
                    return key;
            }
        };
    }
    constructor(items, sortPropertyName = 'name') {
        super(_stores_CustomSortedArrayStore._createOptions(items, sortPropertyName));
    }
}
class _stores_SortedArrayStore extends external_DevExpress_data_ArrayStore_default.a {
    constructor(options, sortPropertyName = 'name') {
        if (options instanceof Array) {
            _stores_CustomSortedArrayStore._sortItems(options, sortPropertyName);
        }
        super(options);
    }
}
class _stores_ControlsStore extends utils["a" /* Disposable */] {
    constructor(allControls) {
        super();
        this._filter = external_ko_["observable"](null);
        var dataSource = null;
        this._disposables.push(this.dataSource = external_ko_["computed"](() => {
            dataSource && dataSource.dispose();
            var items = this._filter() ? allControls().filter(this._filter()) : allControls();
            dataSource = new external_DevExpress_data_DataSource_default.a({
                store: new _stores_CustomSortedArrayStore(items),
                paginate: true,
                pageSize: 100
            });
            return dataSource;
        }));
        this._disposables.push(this.visible = external_ko_["computed"](() => {
            return allControls().length > 0;
        }));
    }
    getFilter() {
        return this._filter();
    }
    setFilter(filter) {
        this._filter(filter);
    }
    resetFilter() {
        this._filter(null);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/_validation.js

const restrictedNames = ['Name', 'Version'];
function validateName(nameCandidate) {
    if (!nameCandidate)
        return false;
    var letter = '\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376-\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E-\\u066F\\u0671-\\u06D3\\u06D5\\u06E5-\\u06E6\\u06EE-\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4-\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F-\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC-\\u09DD\\u09DF-\\u09E1\\u09F0-\\u09F1\\u0A05-\\u0A0A\\u0A0F-\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32-\\u0A33\\u0A35-\\u0A36\\u0A38-\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2-\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0-\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F-\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32-\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C-\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99-\\u0B9A\\u0B9C\\u0B9E-\\u0B9F\\u0BA3-\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60-\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0-\\u0CE1\\u0CF1-\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32-\\u0E33\\u0E40-\\u0E46\\u0E81-\\u0E82\\u0E84\\u0E87-\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA-\\u0EAB\\u0EAD-\\u0EB0\\u0EB2-\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065-\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16F1-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE-\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5-\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183-\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005-\\u3006\\u3031-\\u3035\\u303B-\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A-\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5-\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40-\\uFB41\\uFB43-\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC';
    var pattern = new RegExp('^[' + letter + '_][' + letter + '_\\d]*$');
    return pattern.test(nameCandidate) && restrictedNames.every(name => nameCandidate != name);
}
function replaceInvalidSymbols(text) {
    return text.replace(/[\W_]+/g, '_');
}
var nameValidationRules = [
    {
        type: 'custom',
        validationCallback: (options) => { return validateName(options.value); },
        get message() {
            return Object(localization_utils["c" /* getLocalization */])('Name is required and should be a valid identifier.', 'AnalyticsCoreStringId.NameIsRequired_Error');
        }
    }
];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/selection/_combinedObj.js



class _combinedObj_CombinedObject {
    static getInfo(controls) {
        var infos = controls.map((item) => { return item['getInfo'](); });
        return () => {
            var info = [];
            for (var i = 0; i < infos[0].length; i++) {
                if (infos.filter((info) => { return info.filter((x) => { return x.propertyName === infos[0][i].propertyName; }).length > 0; }).length === infos.length) {
                    info.push(infos[0][i]);
                }
            }
            return info;
        };
    }
    static isPropertyDisabled(controls) {
        return (name) => {
            for (var i = 0; i < controls.length; i++) {
                if (controls[i]['isPropertyDisabled'](name)) {
                    return true;
                }
            }
            return false;
        };
    }
    static getPath(controls) {
        return (name) => {
            var result = '';
            for (var i = 0; i < controls.length; i++) {
                var currentPath = controls[i].getPath(name);
                if (i === 0) {
                    result = currentPath;
                }
                else if (result !== currentPath) {
                    result = '';
                    break;
                }
            }
            return result;
        };
    }
    static isPropertyVisible(controls) {
        return (name) => {
            for (var i = 0; i < controls.length; i++) {
                if (!controls[i]['isPropertyVisible'](name)) {
                    return false;
                }
            }
            return true;
        };
    }
    static mergeProperty(controls, propertyName, undoEngine, customMerge) {
        var property = controls[0][propertyName];
        var combinedObj = null;
        var subscriptions = null;
        if (controls.filter(x => !!x[propertyName]).length === controls.length) {
            combinedObj = customMerge && customMerge(propertyName, controls, undoEngine);
            if (!combinedObj) {
                if (external_ko_["isObservable"](property) && !property['push']) {
                    if (!controls.every(control => external_ko_["isObservable"](control[propertyName])))
                        return combinedObj;
                    var combinedObservable = external_ko_["observable"](controls.every((control) => { return controls[0][propertyName].peek() === control[propertyName].peek(); }) ? controls[0][propertyName].peek() : null);
                    combinedObj = {
                        result: combinedObservable,
                        subscriptions: [combinedObservable.subscribe((newVal) => {
                                undoEngine && undoEngine().start();
                                controls.forEach(control => { control[propertyName](newVal); });
                                undoEngine && undoEngine().end();
                            })]
                    };
                }
                else if (typeof property === 'object' && !external_jQuery_["isArray"](property)) {
                    combinedObj = this._merge(controls.map(x => x[propertyName]), undoEngine, customMerge);
                }
            }
        }
        return combinedObj;
    }
    static _createProperty(result, propertyName, propertyValue) {
        if (propertyValue) {
            if (typeof propertyValue === 'object' && Object(_utils["c" /* isEmptyObject */])(propertyValue))
                return;
            result[propertyName] = propertyValue;
        }
    }
    static _merge(controls, undoEngine, customMerge, ignoreProperties) {
        var result = {};
        var subscriptions = [];
        ['getInfo', 'isPropertyVisible', 'isPropertyDisabled', 'getPath'].forEach((propertyName) => {
            if (controls[0][propertyName])
                this._createProperty(result, propertyName, this[propertyName](controls));
        });
        if (ignoreProperties) {
            var oldPropertyDisabled = result['isPropertyDisabled'];
            result['isPropertyDisabled'] = (name) => {
                return (oldPropertyDisabled && oldPropertyDisabled(name)) || ignoreProperties.indexOf(name) !== -1;
            };
        }
        if (result && result['getInfo']) {
            result['getInfo']().map(x => x.propertyName).forEach((propertyName) => {
                var combinedObj = this.mergeProperty(controls, propertyName, undoEngine, customMerge);
                if (combinedObj) {
                    subscriptions = [].concat.apply(subscriptions, combinedObj.subscriptions);
                    this._createProperty(result, propertyName, combinedObj.result);
                }
            });
        }
        else {
            Object.keys(controls[0]).forEach((propertyName) => {
                var combinedObj = this.mergeProperty(controls, propertyName, undoEngine, customMerge);
                if (combinedObj) {
                    subscriptions = [].concat.apply(subscriptions, combinedObj.subscriptions);
                    this._createProperty(result, propertyName, combinedObj.result);
                }
            });
        }
        return { result, subscriptions };
    }
    static mergeControls(controls, undoEngine, customMerge, ignoreProperties) {
        var combinedObj = this._merge(controls, undoEngine, customMerge, ignoreProperties);
        return {
            result: Object(_utils["b" /* extend */])(combinedObj.result, { controlType: 'multiselect', displayName: external_ko_["observable"]('') }),
            subscriptions: combinedObj.subscriptions
        };
    }
    static getEditableObject(selectionProvider, undoEngine, customMerge) {
        var editableObject = external_ko_["observable"](null);
        var subscriptions = [];
        var subscription = selectionProvider.focused.subscribe((newVal) => {
            editableObject(newVal && newVal.getControlModel());
        });
        if (selectionProvider._disposables) {
            selectionProvider._disposables.push(subscription);
            selectionProvider._disposables.push({
                dispose: () => {
                    subscriptions.forEach(x => x.dispose());
                    subscriptions.splice(0);
                }
            });
        }
        return external_ko_["pureComputed"]({
            read: () => {
                subscriptions.forEach(x => x.dispose());
                subscriptions = [];
                if (selectionProvider.selectedItems.length > 1) {
                    var combinedObj = this.mergeControls(selectionProvider.selectedItems.map((item) => { return item.getControlModel(); }), undoEngine, customMerge, selectionProvider.ignoreMultiSelectProperties);
                    subscriptions = combinedObj.subscriptions;
                    return combinedObj.result;
                }
                else {
                    return editableObject();
                }
            },
            write: (val) => {
                if (val && val.surface) {
                    selectionProvider.focused(val.surface);
                }
                else {
                    selectionProvider.updateSelection(null);
                    editableObject(val);
                }
            }
        }).extend({ deferred: true });
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/selection/_selection.js




class _selection_SurfaceSelection extends utils["a" /* Disposable */] {
    constructor(ignoreMultiSelectProperties = ['name']) {
        super();
        this.ignoreMultiSelectProperties = ignoreMultiSelectProperties;
        this._focused = external_ko_["observable"](null);
        this._selectedControls = external_ko_["observableArray"]();
        this._selectedControlsInner = [];
        this.focused = external_ko_["pureComputed"]({
            read: () => {
                return this._focused();
            },
            write: (val) => {
                if (val !== this._focused()) {
                    if (!!val) {
                        this._firstSelected = val;
                    }
                    this.updateSelection(this._firstSelected);
                }
            }
        });
        this.dropTarget = null;
        this.expectClick = false;
        this.disabled = external_ko_["observable"](false);
        this._disposables.push(this.focused);
    }
    dispose() {
        this.reset();
        super.dispose();
    }
    _removeFromSelection(control) {
        control.focused(false);
        control.selected(false);
        if (this._selectedControlsInner.indexOf(control) !== -1) {
            this._selectedControlsInner.splice(this._selectedControlsInner.indexOf(control), 1);
        }
    }
    _setFocused(control) {
        if (this._focused()) {
            this._removeFromSelection(this._focused());
        }
        this._focused(control);
        if (control) {
            control.focused(true);
            if (this._selectedControlsInner.indexOf(control) === -1) {
                this._selectedControlsInner.push(control);
            }
            control.selected(true);
        }
    }
    _resetTabPanelFocus() {
        var isTabPanelFocused = document.activeElement && external_jQuery_["fn"].constructor(document.activeElement).closest('.dxrd-surface').length === 0;
        if (isTabPanelFocused) {
            _utils_blur(document.activeElement);
        }
    }
    get selectedItems() {
        return this._selectedControls();
    }
    clear() {
        this.focused(null);
        this._selectedControls([]);
    }
    reset() {
        this._focused(null);
        this._selectedControlsInner.splice(0);
        this._firstSelected = null;
        this._selectedControls([]);
    }
    applySelection() {
        this._selectedControls(this._selectedControlsInner);
    }
    selectItems(items) {
        this._selectedControlsInner = items;
        this._selectedControlsInner.forEach((selectedControl) => {
            if (!selectedControl.focused()) {
                selectedControl.selected(true);
            }
        });
        this.applySelection();
    }
    updateSelection(control) {
        this._selectedControlsInner.forEach((selectedControl) => {
            selectedControl.focused(false);
            selectedControl.selected(false);
        });
        this._selectedControlsInner = [];
        this._setFocused(control);
        this.applySelection();
    }
    swapFocusedItem(control) {
        if (this._focused() !== control) {
            this._focused().focused(false);
            this._focused(control);
            this._focused().focused(true);
        }
    }
    initialize(control) {
        control = control || this.dropTarget;
        this._firstSelected = !!(control && control['focused']) ? control : null;
        this.updateSelection(this._firstSelected);
    }
    clickHandler(control, event = { ctrlKey: false, metaKey: false }) {
        if (this.expectClick) {
            this.expectClick = false;
            return;
        }
        control = control || this.dropTarget;
        if (!event.ctrlKey && !event.metaKey) {
            if (this._selectedControlsInner.length > 1 && this._selectedControlsInner.indexOf(control) !== -1) {
                this.swapFocusedItem(control);
            }
            else {
                if (this._focused() !== control) {
                    this.initialize(control);
                }
            }
        }
        else {
            this.selectionWithCtrl(control);
            this.applySelection();
        }
        this._resetTabPanelFocus();
    }
    selecting(event) {
        if (!this._focused()) {
            this._setFocused(event.control);
        }
        else {
            event.cancel = !event.control.checkParent(this._firstSelected);
            if (!event.cancel) {
                if (this._firstSelected && this._firstSelected.focused()) {
                    this._setFocused(event.control);
                }
                else if (this._selectedControlsInner.indexOf(event.control) === -1) {
                    event.control.selected(true);
                    this._selectedControlsInner.push(event.control);
                }
            }
        }
    }
    unselecting(control) {
        if (this._focused() === control) {
            this._setFocused(null);
            if (this._selectedControlsInner.length === 0) {
                this._setFocused(this._firstSelected);
            }
            else {
                this._setFocused(this._selectedControlsInner[0]);
            }
        }
        else {
            this._removeFromSelection(control);
        }
    }
    selectionWithCtrl(control) {
        if (control && control.allowMultiselect) {
            var selectedControls = this._selectedControlsInner;
            if (selectedControls.length === 0 || (selectedControls.length === 1 && (!selectedControls[0].allowMultiselect))) {
                this.initialize(control);
            }
            else {
                if (this._selectedControlsInner.indexOf(control) === -1) {
                    control.selected(true);
                    this._selectedControlsInner.push(control);
                }
                else {
                    if (this._selectedControlsInner.length > 1) {
                        this.unselecting(control);
                    }
                }
            }
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/undo-engine/_utils.js

function propertiesVisitor(target, visitor, visited = [], skip = ['surface']) {
    if (target && target !== undefined) {
        var properties = [];
        Object.keys(target).forEach((propertyName) => {
            if (propertyName.indexOf('_') !== 0 && skip.indexOf(propertyName) === -1) {
                var realPropertyName = propertyName;
                if (external_ko_["isComputed"](target[propertyName]) && external_ko_["isWritableObservable"](target['_' + propertyName])) {
                    realPropertyName = '_' + realPropertyName;
                }
                if (visited.indexOf(target[realPropertyName]) === -1 && !external_ko_["isComputed"](target[realPropertyName])) {
                    properties.push(target[realPropertyName]);
                }
            }
        });
        visitor(properties);
        visited.push.apply(visited, properties);
        properties.forEach((property) => {
            property = external_ko_["unwrap"](property);
            if (typeof property === 'object') {
                propertiesVisitor(property, visitor, visited, skip);
            }
        });
    }
}
function checkModelReady(model) {
    return model.isModelReady ? model.isModelReady() : true;
}
function _utils_guid() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/undo-engine/undoengine.js



class _LatestChangeSet {
    constructor(changes, position) {
        this.changes = changes;
        this.position = position;
    }
    static Empty() {
        return new _LatestChangeSet(null, null);
    }
    equal(changeSet) {
        return this.changes === changeSet.changes && this.position === changeSet.position;
    }
}
var activeEngines = [];
class undoengine_UndoEngine extends utils["a" /* Disposable */] {
    constructor(target, _ignoredProperties = ['surface'], _getInfoMethodName, _alwaysSubscribeProperties = []) {
        super();
        this._ignoredProperties = _ignoredProperties;
        this._getInfoMethodName = _getInfoMethodName;
        this._alwaysSubscribeProperties = _alwaysSubscribeProperties;
        this._groupObservers = [];
        this._groupPosition = -1;
        this._observers = [];
        this._subscriptions = [];
        this._visited = [];
        this._position = external_ko_["observable"](-1);
        this._lockedPosition = external_ko_["observable"](-1);
        this._inUndoRedo = false;
        this._currentEngineName = undoengine_UndoEngine._disposeUndoEngineSubscriptionsName + _utils_guid();
        this.redoEnabled = external_ko_["observable"](false);
        this.undoEnabled = external_ko_["observable"](false);
        this.isIngroup = -1;
        this.isDirty = external_ko_["computed"]({
            read: () => { return this._position() !== this._lockedPosition(); },
            write: (value) => { value ? this._lockedPosition('forcibly marked as dirty') : this._lockedPosition(this._position()); }
        });
        activeEngines.push(this._currentEngineName);
        this._model = external_ko_["unwrap"](target);
        if (this._getInfoMethodName) {
            if (external_ko_["isSubscribable"](target)) {
                this._targetSubscription = this.subscribeProperty(target, true);
            }
            else {
                this._createDisposeFunction(target);
            }
        }
        else {
            var innerSubscriptions = this.subscribe(this._model);
            if (external_ko_["isSubscribable"](target)) {
                var prevVal = target();
                this._targetSubscription = target.subscribe((newTargetValue) => {
                    this._removePropertiesSubscriptions();
                    if (!this._inUndoRedo) {
                        this.properyChanged({
                            observable: target,
                            propertyChanged: { oldVal: prevVal, val: newTargetValue }
                        });
                        prevVal = newTargetValue;
                    }
                    this._cleanSubscribtions(innerSubscriptions);
                    this._model = newTargetValue;
                    innerSubscriptions = this.subscribe(this._model);
                });
            }
        }
        this._disposables.push(this.isDirty);
    }
    static tryGetUndoEngine(object) {
        var undo = null;
        activeEngines.some(x => {
            undo = object[x] && object[x].instance;
            return !!undo;
        });
        return undo;
    }
    get _modelReady() {
        return checkModelReady(this._model);
    }
    _disposeObserver(record) {
        if (record.propertyChanged) {
            var value = record.propertyChanged.val;
            if (value && !value[this._currentEngineName]) {
                value.dispose && value.dispose();
            }
        }
        else if (record.arrayChanges) {
            record.arrayChanges.forEach(change => {
                if (change.status === 'added') {
                    var value = change.value;
                    if (value && !value[this._currentEngineName])
                        value.dispose && value.dispose();
                }
            });
        }
    }
    properyChanged(undoRecord) {
        if (this._inUndoRedo) {
            return;
        }
        var currentPosition = this._position() + 1;
        if (currentPosition < this._observers.length) {
            var removedItems = this._observers.splice(currentPosition, this._observers.length);
            removedItems.forEach((changeSet) => {
                if (Array.isArray(changeSet)) {
                    changeSet.reverse().forEach(item => this._disposeObserver(item));
                }
                else {
                    this._disposeObserver(changeSet);
                }
            });
        }
        this._observers.push(undoRecord);
        this._position(currentPosition);
        this.undoEnabled(true);
        this.redoEnabled(false);
    }
    visitProperties(target, info) {
        var subscribtions = [];
        if (target && info) {
            for (var i = 0; i < info.length; i++) {
                var alwaysSubscribeProperty = this._alwaysSubscribeProperties.some(x => x === info[i].propertyName);
                if (info[i].modelName || info[i].editor || info[i].info || alwaysSubscribeProperty) {
                    var realPropertyName = alwaysSubscribeProperty ? info[i].propertyName : this.validatePropertyName(target, info[i].propertyName);
                    if (realPropertyName) {
                        if (!external_ko_["isComputed"](target[realPropertyName])) {
                            if (!external_ko_["isObservable"](target[realPropertyName])) {
                                subscribtions.push.apply([], this._createDisposeFunction(target[realPropertyName], info[i].info));
                            }
                            else {
                                subscribtions.push(this.subscribeProperty(target[realPropertyName], !info[i].link));
                            }
                        }
                    }
                }
            }
        }
        return subscribtions;
    }
    undoChangeSet(changeSet) {
        if (changeSet.propertyChanged) {
            changeSet.observable(changeSet.propertyChanged.oldVal);
        }
        else {
            var array = changeSet.observable();
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'added') {
                    array.splice(array.indexOf(changeSet.arrayChanges[i].value), 1);
                }
            }
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'deleted') {
                    array.splice(changeSet.arrayChanges[i].index, 0, changeSet.arrayChanges[i].value);
                }
            }
            if (external_ko_["isObservable"](changeSet.observable)) {
                changeSet.observable.valueHasMutated();
            }
        }
    }
    redoChangeSet(changeSet) {
        if (changeSet.propertyChanged) {
            changeSet.observable(changeSet.propertyChanged.val);
        }
        else {
            var array = changeSet.observable();
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'deleted') {
                    array.splice(array.indexOf(changeSet.arrayChanges[i].value), 1);
                }
            }
            for (var i = 0; i < changeSet.arrayChanges.length; i++) {
                if (changeSet.arrayChanges[i].status === 'added') {
                    array.splice(changeSet.arrayChanges[i].index, 0, changeSet.arrayChanges[i].value);
                }
            }
            if (external_ko_["isObservable"](changeSet.observable)) {
                changeSet.observable.valueHasMutated();
            }
        }
    }
    _disposeChilds(target, info) {
        if (target && info) {
            for (var i = 0; i < info.length; i++) {
                if (info[i].modelName || info[i].editor || info[i].info) {
                    var propertyName = info[i].propertyName;
                    if (propertyName.indexOf('_') !== 0) {
                        var realPropertyName = propertyName;
                        if (external_ko_["isWritableObservable"](target['_' + propertyName])) {
                            realPropertyName = '_' + realPropertyName;
                        }
                        if (!external_ko_["isComputed"](target[realPropertyName])) {
                            var val = external_ko_["unwrap"](target[realPropertyName]);
                            if (!!val && typeof val === 'object') {
                                if (!info[i].link) {
                                    this._callDisposeFunction(val);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    _createDisposeFunction(val, info) {
        var subscriptions = [];
        if (val && typeof val === 'object') {
            var objectInfo = info || (val[this._getInfoMethodName] && val[this._getInfoMethodName]());
            if (!!objectInfo) {
                if (val[this._currentEngineName]) {
                    val[this._currentEngineName].inc++;
                }
                else {
                    val[this._currentEngineName] = { inc: 1, instance: this };
                    subscriptions = this.subscribe(val, objectInfo);
                    val[this._currentEngineName]['func'] = () => {
                        val[this._currentEngineName].inc--;
                        this._disposeChilds(val, objectInfo);
                        if (val[this._currentEngineName].inc === 0) {
                            this._cleanSubscribtions(subscriptions);
                            delete val[this._currentEngineName];
                        }
                    };
                }
            }
        }
        return subscriptions;
    }
    _callDisposeFunction(val) {
        if (val) {
            if (Array.isArray(val)) {
                for (var i = 0; i < val.length; i++) {
                    val[i][this._currentEngineName] && val[i][this._currentEngineName].func();
                }
            }
            else {
                val[this._currentEngineName] && val[this._currentEngineName].func();
            }
        }
    }
    _cleanSubscribtions(subscribtionArray) {
        if (subscribtionArray) {
            if (subscribtionArray.length) {
                for (var i = 0; i < subscribtionArray.length; i++) {
                    this._cleanSubscribtions(subscribtionArray[i]);
                }
            }
            else {
                subscribtionArray.dispose && subscribtionArray.dispose();
            }
        }
    }
    validatePropertyName(target, propertyName) {
        if ((!this._ignoredProperties || (this._ignoredProperties && this._ignoredProperties.every(x => x !== propertyName))) && propertyName[0] !== '_') {
            if (external_ko_["isWritableObservable"](target['_' + propertyName])) {
                return '_' + propertyName;
            }
            return propertyName;
        }
        return null;
    }
    subscribeProperty(property, subscribeChilds) {
        if (external_ko_["isObservable"](property)) {
            var prevVal = property();
            if (Array.isArray(prevVal)) {
                for (var i = 0; i < property().length; i++) {
                    this._createDisposeFunction(property()[i]);
                }
                return property.subscribe((args) => {
                    if (this._modelReady) {
                        var addedItems = args.filter(x => x.status === 'added');
                        var removedItems = args.filter(x => x.status === 'deleted');
                        for (var i = 0; i < removedItems.length; i++) {
                            this._callDisposeFunction(removedItems[i].value);
                        }
                        for (var i = 0; i < addedItems.length; i++) {
                            this._createDisposeFunction(addedItems[i].value);
                        }
                        this.properyChanged({ observable: property, arrayChanges: args });
                    }
                }, null, 'arrayChange');
            }
            else {
                if (external_ko_["isWritableObservable"](property)) {
                    if (subscribeChilds) {
                        this._createDisposeFunction(property());
                    }
                    return property.subscribe((val) => {
                        if (this._modelReady) {
                            if (subscribeChilds) {
                                this._callDisposeFunction(prevVal);
                            }
                            this.properyChanged({
                                observable: property, propertyChanged: { oldVal: prevVal, val: val }
                            });
                            prevVal = val;
                            if (subscribeChilds) {
                                this._createDisposeFunction(val);
                            }
                        }
                    });
                }
            }
        }
    }
    subscribeProperties(properties) {
        properties.forEach((property) => {
            if (external_ko_["isObservable"](property)) {
                var prevVal = property();
                if (property['push']) {
                    this._subscriptions.push(property.subscribe((args) => {
                        if (this._modelReady) {
                            if (!this._inUndoRedo) {
                                this.properyChanged({ observable: property, arrayChanges: args });
                                this.subscribe(args.map((item) => { return item.value; }));
                            }
                        }
                    }, null, 'arrayChange'));
                }
                else {
                    if (external_ko_["isWritableObservable"](property)) {
                        this._subscriptions.push(property.subscribe((val) => {
                            if (this._modelReady) {
                                this.properyChanged({
                                    observable: property, propertyChanged: { oldVal: prevVal, val: val }
                                });
                                prevVal = property();
                            }
                        }));
                    }
                }
            }
        });
    }
    subscribe(target, info) {
        if (this._getInfoMethodName) {
            return this.visitProperties(target, info || (target && target[this._getInfoMethodName] && target[this._getInfoMethodName]()));
        }
        else {
            propertiesVisitor(target, (properties) => { this.subscribeProperties(properties); }, this._visited, this._ignoredProperties);
        }
    }
    getCurrentChangeSet() {
        return new _LatestChangeSet(this._observers[this._position()], this._position());
    }
    _removePropertiesSubscriptions() {
        this._subscriptions.forEach(subscription => subscription.dispose());
        this._subscriptions = [];
        this._visited = [];
    }
    dispose() {
        super.dispose();
        this.removeTargetSubscription();
        var position = 0;
        activeEngines.some((x, index) => {
            if (x === this._currentEngineName) {
                position = index;
                return true;
            }
            return false;
        });
        activeEngines.splice(position, 1);
    }
    removeTargetSubscription() {
        this._targetSubscription && this._targetSubscription.dispose();
        this.reset();
    }
    undoAll() {
        if (this.undoEnabled()) {
            this.undo();
            this.undoAll();
        }
    }
    reset() {
        this._removePropertiesSubscriptions();
        this.clearHistory();
    }
    clearHistory() {
        this._groupObservers = [];
        this._observers = [];
        this.redoEnabled(false);
        this.undoEnabled(false);
        this._inUndoRedo = false;
        this._groupPosition = -1;
        this._position(-1);
        this._lockedPosition(this._position());
    }
    undo(removeNode = false) {
        try {
            this._inUndoRedo = true;
            if (this.undoEnabled()) {
                var changeSet = this._observers[this._position()];
                if (changeSet) {
                    if (Array.isArray(changeSet)) {
                        changeSet.reverse().forEach(item => this.undoChangeSet(item));
                    }
                    else {
                        this.undoChangeSet(changeSet);
                    }
                    if (removeNode) {
                        this._observers.splice(this._position(), 1);
                    }
                    this._position(this._position() - 1);
                    this.undoEnabled(this._observers.length !== 0 && this._position() >= 0);
                    this.redoEnabled(this._position() < this._observers.length - 1);
                }
            }
        }
        finally {
            this._inUndoRedo = false;
        }
    }
    redo() {
        try {
            this._inUndoRedo = true;
            if (this.redoEnabled()) {
                var changeSet = this._observers[this._position() + 1];
                if (changeSet) {
                    if (Array.isArray(changeSet)) {
                        changeSet.reverse().forEach(item => this.redoChangeSet(item));
                    }
                    else {
                        this.redoChangeSet(changeSet);
                    }
                    this._position(this._position() + 1);
                    this.undoEnabled(this._observers.length !== 0 && this._position() >= 0);
                    this.redoEnabled(this._position() + 1 < this._observers.length);
                }
            }
        }
        finally {
            this._inUndoRedo = false;
        }
    }
    _hasSessionChanges() {
        return this.isIngroup === 0 && this._observers.length > 0;
    }
    start() {
        this.isIngroup++;
        if (this.isIngroup !== 0)
            return;
        this._groupObservers = this._observers;
        this._observers = [];
        this._groupPosition = this._position();
        this._position(-1);
        this._lockedPosition(this._position());
    }
    end() {
        this.isIngroup--;
        if (this.isIngroup !== -1) {
            return;
        }
        if (this._observers.length > 0) {
            this._position(this._groupPosition + 1);
            var removedItems = this._groupObservers.splice(this._position(), this._groupObservers.length - this._position(), this._observers);
            removedItems.forEach((changeSet) => {
                if (Array.isArray(changeSet)) {
                    changeSet.reverse().forEach(item => this._disposeObserver(item));
                }
                else {
                    this._disposeObserver(changeSet);
                }
            });
        }
        else {
            this._position(this._groupPosition);
        }
        this._observers = this._groupObservers;
    }
}
undoengine_UndoEngine._disposeUndoEngineSubscriptionsName = '___dispose___UndoEngine___Subscriptions___';

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/selection/_selectionHelpers.js

function deleteSelection(selection) {
    var focused = selection.focused();
    selection.selectedItems.forEach((item) => {
        var itemModel = item.getControlModel(), parent = itemModel.parentModel();
        if (!item.getControlModel().getMetaData().isDeleteDeny && parent && item !== focused) {
            parent.removeChild(itemModel);
        }
    });
    var model = focused.getControlModel();
    var undo = undoengine_UndoEngine.tryGetUndoEngine(model.parentModel());
    undo && undo.start();
    model.parentModel().removeChild(model);
    undo && undo.end();
    selection.focused(focused.findNextSelection());
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/snapLines/_snapLinesCollector.js

class _snapLinesCollector_SnapLinesCollector {
    constructor() {
        this._verticalSnapLines = [];
        this._horizontalSnapLines = [];
        this._snapTargetToIgnore = null;
    }
    _appendSnapLine(position, limitInf, limitSup, snapLines) {
        var line = {
            position: position,
            limitInf: limitInf,
            limSup: limitSup
        };
        var index = binaryIndexOf(snapLines, line, (a, b) => a.position - b.position);
        if (index > -1) {
            snapLines[index].limitInf = Math.min(snapLines[index].limitInf, limitInf);
            snapLines[index].limSup = Math.max(snapLines[index].limSup, limitSup);
        }
        else {
            snapLines.splice(~index, 0, line);
        }
    }
    _collectSnaplines(parent, parentAbsoluteProsition) {
        this._enumerateCollection(parent, parentAbsoluteProsition, (item, itemAbsoluteRect) => {
            if (item !== this._snapTargetToIgnore) {
                this._appendSnapLine(itemAbsoluteRect.left, itemAbsoluteRect.top, itemAbsoluteRect.bottom, this._verticalSnapLines);
                this._appendSnapLine(itemAbsoluteRect.right, itemAbsoluteRect.top, itemAbsoluteRect.bottom, this._verticalSnapLines);
                this._appendSnapLine(itemAbsoluteRect.top, itemAbsoluteRect.left, itemAbsoluteRect.right, this._horizontalSnapLines);
                this._appendSnapLine(itemAbsoluteRect.bottom, itemAbsoluteRect.left, itemAbsoluteRect.right, this._horizontalSnapLines);
                this._collectSnaplines(item, itemAbsoluteRect);
            }
        });
    }
    _getCollection(parent) {
        return parent['controls'] && parent['controls']();
    }
    _enumerateCollection(parent, parentAbsoluteProsition, callback) {
        var collection = this._getCollection(parent);
        if (!collection)
            return;
        for (var i = 0; i < collection.length; i++) {
            var itemRect = collection[i].rect && collection[i].rect();
            if (itemRect) {
                callback(collection[i], {
                    top: itemRect.top + parentAbsoluteProsition.top,
                    bottom: itemRect.bottom + parentAbsoluteProsition.top,
                    left: itemRect.left + parentAbsoluteProsition.left,
                    right: itemRect.right + parentAbsoluteProsition.left
                });
            }
        }
    }
    collectSnaplines(root, snapTargetToIgnore) {
        this._snapTargetToIgnore = snapTargetToIgnore;
        this._verticalSnapLines.splice(0);
        this._horizontalSnapLines.splice(0);
        this._collectSnaplines(root, { top: 0, left: 0 });
        return {
            vertical: this._verticalSnapLines,
            horizontal: this._horizontalSnapLines
        };
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/snapLines/_snapLineSurface.js

class _snapLineSurface_SnapLineSurface {
    constructor() {
        this._position = external_ko_["observable"](_snapLineSurface_SnapLineSurface._blankPosition);
    }
    transform() {
        var position = this._position();
        return 'matrix(' + position.width + ', 0, 0, ' + position.height + ', ' + position.left + ', ' + position.top + ')';
    }
    updatePosition(position) {
        this._position(position);
    }
    reset() {
        this.updatePosition(_snapLineSurface_SnapLineSurface._blankPosition);
    }
}
_snapLineSurface_SnapLineSurface._blankPosition = { top: 0, left: 0, width: 0, height: 0, };

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/snapLines/_snapLinesHelper.js



class _snapLinesHelper_SnapLinesHelper {
    constructor(surface = null, snapTolerance = _snapLinesHelper_SnapLinesHelper.snapTolerance, snapLinesCollector = new _snapLinesCollector_SnapLinesCollector()) {
        this.snapLineSurfaces = [new _snapLineSurface_SnapLineSurface(), new _snapLineSurface_SnapLineSurface(), new _snapLineSurface_SnapLineSurface(), new _snapLineSurface_SnapLineSurface()];
        this.verticalSnapLines = [];
        this.horizontalSnapLines = [];
        this._surfaceContext = surface;
        this._snapTolerance = snapTolerance;
        this._snapLinesCollector = snapLinesCollector;
    }
    _findClosestSnapLine(position, snapLines) {
        var line = {
            position: position,
            limitInf: 0,
            limSup: 0
        };
        var index = binaryIndexOf(snapLines, line, (a, b) => a.position - b.position);
        var snapLineCandidate;
        if (index > -1) {
            snapLineCandidate = {
                snapLine: snapLines[index],
                distance: position - snapLines[index].position
            };
        }
        else {
            index = ~index;
            var delta1 = snapLines[index] ? (position - snapLines[index].position) : Number.MAX_VALUE;
            var delta2 = snapLines[index - 1] ? (position - snapLines[index - 1].position) : Number.MAX_VALUE;
            snapLineCandidate = Math.abs(delta1) > Math.abs(delta2) ?
                { snapLine: snapLines[index - 1], distance: delta2 } :
                { snapLine: snapLines[index], distance: delta1 };
        }
        return snapLineCandidate;
    }
    _getActiveSnapLines(position1, position2, snapLines) {
        var line1 = this._findClosestSnapLine(position1, snapLines);
        var line2 = this._findClosestSnapLine(position2, snapLines);
        var result = {
            lines: [],
            distance: 0
        };
        if (Math.abs(line1.distance - line2.distance) >= 1) {
            var line = Math.abs(line1.distance) < Math.abs(line2.distance) ? line1 : line2;
            if (Math.abs(line.distance) <= this._snapTolerance) {
                result.lines = [line];
                result.distance = line.distance;
            }
        }
        else if (Math.abs(line1.distance) <= this._snapTolerance) {
            result.lines = [line1, line2];
            result.distance = line1.distance;
        }
        return result;
    }
    updateSnapLines(snapTargetToIgnore = null) {
        this.verticalSnapLines.splice(0);
        this.horizontalSnapLines.splice(0);
        var result = this._snapLinesCollector.collectSnaplines(this._surfaceContext(), snapTargetToIgnore);
        this.verticalSnapLines.push.apply(this.verticalSnapLines, result.vertical);
        this.horizontalSnapLines.push.apply(this.horizontalSnapLines, result.horizontal);
    }
    deactivateSnapLines() {
        this.snapLineSurfaces[0].reset();
        this.snapLineSurfaces[1].reset();
        this.snapLineSurfaces[2].reset();
        this.snapLineSurfaces[3].reset();
    }
    activateSnapLines(position) {
        var vertical = this._getActiveSnapLines(position.left, position.right, this.verticalSnapLines);
        var horizontal = this._getActiveSnapLines(position.top, position.bottom, this.horizontalSnapLines);
        for (var i = 0; i < 2; i++) {
            var line = vertical.lines[i];
            if (!line) {
                this.snapLineSurfaces[i].reset();
            }
            else {
                var top = Math.min(line.snapLine.limitInf, position.top);
                var bottom = Math.max(line.snapLine.limSup, position.bottom);
                if (position.top < line.snapLine.limitInf) {
                    top -= horizontal.distance;
                }
                if (position.bottom > line.snapLine.limSup) {
                    bottom -= horizontal.distance;
                }
                this.snapLineSurfaces[i].updatePosition({
                    top: top,
                    left: line.snapLine.position,
                    height: bottom - top,
                    width: 1
                });
            }
        }
        for (var i = 0; i < 2; i++) {
            var line = horizontal.lines[i];
            if (!line) {
                this.snapLineSurfaces[i + 2].reset();
            }
            else {
                var left = Math.min(line.snapLine.limitInf, position.left);
                var right = Math.max(line.snapLine.limSup, position.right);
                if (position.left < line.snapLine.limitInf) {
                    left -= vertical.distance;
                }
                if (position.right > line.snapLine.limSup) {
                    right -= vertical.distance;
                }
                this.snapLineSurfaces[i + 2].updatePosition({
                    top: line.snapLine.position,
                    left: left,
                    width: right - left,
                    height: 1
                });
            }
        }
        return {
            left: vertical.distance,
            top: horizontal.distance
        };
    }
    snapPosition(position, horizontal) {
        var line = this._findClosestSnapLine(position, horizontal ? this.horizontalSnapLines : this.verticalSnapLines);
        return (line && Math.abs(line.distance) <= this._snapTolerance) ? line.snapLine.position : position;
    }
}
_snapLinesHelper_SnapLinesHelper.snapTolerance = 10;

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/point.js


class point_Point {
    constructor(x, y) {
        this.x = external_ko_["observable"](x).extend({ 'dxdnum': {} });
        this.y = external_ko_["observable"](y).extend({ 'dxdnum': {} });
    }
    getInfo() {
        return locationFake;
    }
    static fromString(value = '0, 0') {
        var components = value.split(',');
        return new point_Point(parseFloat(components[0]), parseFloat(components[1]));
    }
    toString() {
        return this.x() + ', ' + this.y();
    }
}
point_Point.unitProperties = ['x', 'y'];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/serializer/serializer.js



class serializer_ModelSerializer {
    constructor(options) {
        this._refTable = {};
        this._linkTable = {};
        this._options = Object(_utils["b" /* extend */])({
            useRefs: true,
            serializeDate: utils["d" /* serializeDate */]
        }, options);
    }
    linkObjects() {
        Object.keys(this._linkTable).forEach((index) => {
            var val = this._refTable[index];
            if (val) {
                this._linkTable[index].splice(0).forEach(property => property(val));
            }
        });
    }
    _getModel(model, propertyPath) {
        var currentModel = model;
        propertyPath.forEach((name) => {
            currentModel = currentModel[name];
        });
        return currentModel;
    }
    _collectLinks(model, internalModel, propertyPath, propertyName) {
        var refVal = model[propertyName].slice('#Ref-'.length);
        var value = external_ko_["observable"]();
        this._linkTable[refVal] = this._linkTable[refVal] || [];
        this._linkTable[refVal].push(value);
        if (!internalModel._restoreLinks)
            internalModel._restoreLinks = [];
        internalModel._restoreLinks.push((model) => {
            var currentModel = this._getModel(model, propertyPath);
            return {
                setRef: (ref) => {
                    if (ref === -1)
                        delete currentModel[propertyName];
                    else
                        currentModel[propertyName] = '#Ref-' + ref;
                },
                obj: value()
            };
        });
    }
    _enumRefs(internalModel, propertyPath, propertyName) {
        if (!internalModel._refs)
            internalModel._refs = [];
        internalModel._refs.push((model, ref) => {
            this._getModel(model, propertyPath)[propertyName] = ref;
        });
    }
    _collectLinksAndEnumRefs(model, internalModel = null, propertyPath = []) {
        var start = internalModel === null;
        internalModel = internalModel || model;
        Object.keys(model).forEach((propertyName) => {
            if (model[propertyName] instanceof Object) {
                this._collectLinksAndEnumRefs(model[propertyName], internalModel, [].concat(propertyPath, [propertyName]));
            }
            else if (model[propertyName].indexOf && model[propertyName].indexOf('#Ref-') === 0) {
                this._collectLinks(model, internalModel, propertyPath, propertyName);
            }
            else if (!start && propertyName === '@Ref') {
                this._enumRefs(internalModel, propertyPath, propertyName);
            }
        });
        if (start)
            this.linkObjects();
    }
    setLinks(refs) {
        refs.linkObjTable.forEach(item => {
            var refValue = refs.objects.indexOf(item.obj);
            item.setRef(refValue);
        });
    }
    deserializeProperty(modelPropertyInfo, model) {
        var propName = modelPropertyInfo.modelName;
        if (!propName) {
            return;
        }
        var modelValue = model[propName] !== undefined ? model[propName] : modelPropertyInfo.defaultVal;
        return this.deserializePropertyValue(modelPropertyInfo, modelValue);
    }
    deserializeDefaultValue(modelPropertyInfo) {
        var value = this.deserializePropertyValue(modelPropertyInfo, modelPropertyInfo.defaultVal, false);
        return value || modelPropertyInfo.defaultVal;
    }
    deserializePropertyValue(modelPropertyInfo, modelValue, strict = true) {
        if (typeof modelPropertyInfo === 'string') {
            return external_ko_["observable"](modelValue);
        }
        else if (modelPropertyInfo.link) {
            var value = external_ko_["observable"](null);
            if (modelValue) {
                var refVal = modelValue && modelValue.slice('#Ref-'.length);
                this._linkTable[refVal] = this._linkTable[refVal] || [];
                this._linkTable[refVal].push(value);
            }
            return value;
        }
        else if (modelPropertyInfo.array) {
            if (modelPropertyInfo.from) {
                return modelPropertyInfo.from(modelValue, this);
            }
            else if (modelPropertyInfo.info) {
                var result = Object.keys(modelValue || {}).map(propertyName => {
                    var object = { getInfo: () => { return modelPropertyInfo.info; } };
                    this.deserialize(object, modelValue[propertyName] || {});
                    return object;
                });
                return external_ko_["observableArray"](result);
            }
            return;
        }
        else if (modelPropertyInfo.from) {
            return modelPropertyInfo.from(modelValue, this);
        }
        else if (modelPropertyInfo.type) {
            var ctorResult = new modelPropertyInfo.type(modelValue, this, modelPropertyInfo.info);
            if (!ctorResult._model) {
                this.deserialize(ctorResult, modelValue || {}, modelPropertyInfo.info);
            }
            return ctorResult;
        }
        else if (modelPropertyInfo.info) {
            var object = { getInfo: () => { return modelPropertyInfo.info; } };
            this.deserialize(object, modelValue || {});
            return object;
        }
        else if (modelPropertyInfo.modelName) {
            return external_ko_["observable"](modelValue);
        }
        if (strict) {
            throw new Error("Invalid info '" + JSON.stringify(modelPropertyInfo) + "'");
        }
        return;
    }
    deserialize(viewModel, model, serializationsInfo = null) {
        if (!model) {
            return;
        }
        viewModel._model = Object(_utils["b" /* extend */])({}, model);
        var serializationsInfo = viewModel.getInfo ? viewModel.getInfo() : serializationsInfo;
        var refValue = model['@Ref'];
        var proto = Object.getPrototypeOf(viewModel);
        serializationsInfo.forEach((modelPropertyInfo) => {
            var propertyName = modelPropertyInfo.propertyName, propName = modelPropertyInfo.modelName;
            if (model[propName] !== undefined) {
                delete viewModel._model[propName];
            }
            var property = this.deserializeProperty(modelPropertyInfo, model);
            var descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);
            if (property !== undefined && (!descriptor || !!descriptor.set))
                viewModel[propertyName] = property;
            if (!(propertyName in viewModel) && property === undefined && modelPropertyInfo.array) {
                var currentArray = external_ko_["observable"](undefined);
                Object.defineProperty(viewModel, propertyName, {
                    get: () => {
                        return currentArray();
                    },
                    set: (val) => {
                        currentArray(val);
                    },
                    enumerable: true
                });
            }
        });
        if (refValue) {
            this._refTable[refValue] = viewModel;
        }
        this.linkObjects();
    }
    serialize(viewModel, serializationsInfo, refs = null) {
        if (!serializationsInfo && !refs) {
            return this._serialize(viewModel, null, null);
        }
        return this._serialize(viewModel, serializationsInfo, refs);
    }
    _isSerializableValue(resultValue) {
        return (Object(_utils["d" /* isPlainObject */])(resultValue) && !Object(_utils["c" /* isEmptyObject */])(resultValue)) || (Array.isArray(resultValue) && resultValue['length'] > 0) || (!Array.isArray(resultValue) && !Object(_utils["d" /* isPlainObject */])(resultValue));
    }
    serializeProperty(modelPropertyInfo, viewModel, serializationsInfo, refs, result) {
        var propertyName = modelPropertyInfo.propertyName, value = external_ko_["unwrap"](viewModel['_' + propertyName] || viewModel[propertyName]), defaultVal = modelPropertyInfo.defaultVal;
        if (modelPropertyInfo.beforeSerialize)
            value = modelPropertyInfo.beforeSerialize(value);
        if (!!modelPropertyInfo.from) {
            defaultVal = external_ko_["unwrap"](modelPropertyInfo.from(defaultVal, this));
        }
        var resultValue = {};
        if (!modelPropertyInfo.modelName) {
            return;
        }
        if (modelPropertyInfo.alwaysSerialize || ((value !== undefined && value !== null) && ((Object(_utils["d" /* isPlainObject */])(value) || !Object(_utils["c" /* isEmptyObject */])(value)) || (Array.isArray(value) && value.length > 0) || (!Array.isArray(value) && !Object(_utils["d" /* isPlainObject */])(value))) && (value !== defaultVal))) {
            if (modelPropertyInfo.link) {
                refs.linkObjTable.push({
                    obj: value,
                    setRef: (index) => {
                        if (index < 0) {
                            delete result[modelPropertyInfo.modelName];
                        }
                        else {
                            result[modelPropertyInfo.modelName] = '#Ref-' + index;
                        }
                    }
                });
                resultValue = undefined;
            }
            else if (modelPropertyInfo.array) {
                resultValue = {};
                var index = 1;
                value.forEach(item => {
                    var info = modelPropertyInfo.info || null;
                    var item_ = this._serialize(item, info, refs);
                    if (this._isSerializableValue(item_) || modelPropertyInfo.alwaysSerialize) {
                        resultValue['Item' + index] = item_;
                        if (this._options.useRefs) {
                            item_['@Ref'] = (refs.objects.push(item) - 1).toString();
                        }
                        index++;
                    }
                });
            }
            else if (modelPropertyInfo.from) {
                if (value['isEmpty'] && value['isEmpty']()) {
                    resultValue = {};
                }
                else {
                    resultValue = modelPropertyInfo.toJsonObject ? modelPropertyInfo.toJsonObject(value, this, refs) : value.toString();
                }
            }
            else if (modelPropertyInfo.info || value['getInfo']) {
                resultValue = this._serialize(value, modelPropertyInfo.info, refs);
            }
            else if (modelPropertyInfo.modelName) {
                if (value instanceof Date) {
                    resultValue = this._options.serializeDate(value);
                }
                else {
                    resultValue = value;
                }
            }
            else {
                throw new Error("Invalid info '" + serializationsInfo.stringify() + "'");
            }
            if (modelPropertyInfo.alwaysSerialize || this._isSerializableValue(resultValue)) {
                if (modelPropertyInfo.asRef) {
                    resultValue['@Ref'] = (refs.objects.push(value) - 1).toString();
                }
                result[modelPropertyInfo.modelName] = resultValue;
            }
        }
    }
    _serialize(viewModel, serializationsInfo, refs) {
        var result = Object(_utils["b" /* extend */])(true, {}, viewModel._model), isInitial = refs === null;
        refs = refs || { linkObjTable: [], objects: [] };
        if (result._restoreLinks) {
            refs.linkObjTable.push.apply(refs.linkObjTable, result._restoreLinks.map(x => x(result)));
            delete result._restoreLinks;
        }
        if (result._refs) {
            result._refs.forEach(x => x(result, (refs.objects.push('0') - 1).toString()));
            delete result._refs;
        }
        serializationsInfo = viewModel.getInfo ? viewModel.getInfo() : serializationsInfo;
        delete result['@Ref'];
        if (viewModel['isEmpty'] && viewModel['isEmpty']())
            return {};
        serializationsInfo.forEach((modelPropertyInfo) => {
            this.serializeProperty(modelPropertyInfo, viewModel, serializationsInfo, refs, result);
        });
        if (isInitial)
            this.setLinks(refs);
        return result;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/_copyPaste.js





var _copyPaste_copyPasteStrategy = {
    createChild: (pasteTarget, info) => {
        return pasteTarget.createChild(info);
    },
    calculateDelta: (selection, pasteTargetSurface, minPoint) => {
        return {
            x: selection.rect().left - minPoint.x(),
            y: selection.rect().top - minPoint.y()
        };
    },
    canPaste: (pasteTarget, info) => true
};
class _copyPaste_CopyPasteHandler {
    constructor(selectionProvider, _copyPasteStrategy = _copyPaste_copyPasteStrategy) {
        this._copyPasteStrategy = _copyPasteStrategy;
        this._copyInfo = external_ko_["observable"](null);
        this.hasPasteInfo = external_ko_["pureComputed"](() => { return this._copyInfo() !== null; });
        this._selectionProvider = selectionProvider;
    }
    canCopy() {
        return this._selectionProvider.focused() !== null && !this._selectionProvider.focused().getControlModel().getMetaData().isCopyDeny;
    }
    canPaste() {
        var pasteTargetSurface = this._selectionProvider.focused();
        return pasteTargetSurface !== null
            && this.hasPasteInfo()
            && pasteTargetSurface.canDrop()
            && (!this._copyPasteStrategy.canPaste || this._copyPasteStrategy.canPaste(pasteTargetSurface.getControlModel(), this._copyInfo()))
            && !pasteTargetSurface.getControlModel().getMetaData().isPasteDeny;
    }
    copy() {
        if (this.canCopy()) {
            var serializer = new serializer_ModelSerializer(), copyInfo = {
                focused: this._selectionProvider.focused(),
                objects: external_jQuery_["map"](this._selectionProvider.selectedItems, (item) => {
                    return serializer.serialize(item.getControlModel());
                })
            };
            this._copyInfo(copyInfo);
        }
    }
    cut() {
        var serializer = new serializer_ModelSerializer(), focused = this._selectionProvider.focused(), objects = [];
        this._selectionProvider.selectedItems.forEach(item => {
            var control = item.getControlModel();
            control.parentModel().removeChild(control);
            objects.push(serializer.serialize(control));
            if (this._copyPasteStrategy.createSelfRestoringItems)
                objects.push(...this._copyPasteStrategy.createSelfRestoringItems(control, serializer));
        });
        var cutInfo = {
            focused: focused,
            objects: objects
        };
        this._copyInfo(cutInfo);
    }
    paste() {
        if (this.canPaste()) {
            var pasteTargetSurface = this._selectionProvider.focused(), pasteTarget = pasteTargetSurface.getControlModel(), newSelection = [];
            if (pasteTargetSurface === this._copyInfo().focused) {
                pasteTargetSurface = pasteTargetSurface.parent;
                pasteTarget = pasteTargetSurface.getControlModel();
            }
            if (!pasteTarget.getMetaData().isContainer) {
                pasteTargetSurface = pasteTargetSurface.parent;
                pasteTarget = pasteTargetSurface.getControlModel();
            }
            var minPoint = new point_Point(Number.MAX_VALUE, Number.MAX_VALUE), maxPoint = new point_Point(-1, -1);
            for (var i = 0; i < this._copyInfo().objects.length; i++) {
                var newControl = this._copyPasteStrategy.createChild(pasteTarget, this._copyInfo().objects[i]);
                var newControlSurface = findSurface(newControl);
                if (!newControlSurface)
                    continue;
                var posMin = new point_Point(newControlSurface.rect().left, newControlSurface.rect().top);
                var posMax = new point_Point(newControlSurface.rect().left + newControlSurface.rect().width, newControlSurface.rect().top + newControlSurface.rect().height);
                if (minPoint.x() >= posMin.x())
                    minPoint.x(posMin.x());
                if (maxPoint.x() <= posMax.x())
                    maxPoint.x(posMax.x());
                if (minPoint.y() >= posMin.y())
                    minPoint.y(posMin.y());
                if (maxPoint.y() <= posMax.y())
                    maxPoint.y(posMax.y());
                newSelection.push(newControlSurface);
            }
            var newOriginPoint = new point_Point(((pasteTargetSurface.rect().width - pasteTargetSurface['_context'].margins.right()) / 2) - ((maxPoint.x() - minPoint.x()) / 2) + (pasteTargetSurface['rtlLayout']() ? pasteTargetSurface['_context'].margins.right() : 0), (pasteTargetSurface.rect().height / 2) - ((maxPoint.y() - minPoint.y()) / 2));
            for (var i = 0; i < newSelection.length; i++) {
                var delta = this._copyPasteStrategy.calculateDelta(newSelection[i], pasteTargetSurface, minPoint);
                newSelection[i].rect({ left: newOriginPoint.x() + delta.x, top: newOriginPoint.y() + delta.y });
            }
            this._selectionProvider.initialize();
            newSelection.forEach(newControlSurface => {
                this._selectionProvider.selecting({ control: newControlSurface, cancel: false });
            });
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/actionId.js
var ActionId = {
    Cut: 'dxd-cut',
    Copy: 'dxd-copy',
    Paste: 'dxd-paste',
    Delete: 'dxd-delete',
    Undo: 'dxd-undo',
    Redo: 'dxd-redo',
    ZoomOut: 'dxd-zoom-out',
    ZoomSelector: 'dxd-zoom-selector',
    ZoomIn: 'dxd-zoom-in',
};

// EXTERNAL MODULE: external "DevExpress.ui.themes"
var external_DevExpress_ui_themes_ = __webpack_require__(52);
var external_DevExpress_ui_themes_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_themes_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/common/pathRequest.js
class PathRequest {
    constructor(fullPath, pathParts = []) {
        this.pathParts = pathParts;
        this.path = '';
        this.fullPath = fullPath;
        if (fullPath) {
            if (fullPath.indexOf('.') !== -1) {
                var pathComponents = fullPath.split('.');
                this.id = this.ref = pathComponents[0];
                pathComponents.splice(0, 1);
                this.path = pathComponents.join('.');
            }
            else {
                this.id = this.ref = fullPath;
            }
        }
    }
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/parameter.js
var parameter = __webpack_require__(20);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/property.js
var operators_property = __webpack_require__(13);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/aggregate.js
var operators_aggregate = __webpack_require__(14);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/criteriaEnumeration.js

function criteriaForEach(operator, callback, path = '') {
    callback(operator, path);
    if (operator instanceof operators_aggregate["a" /* AggregateOperand */]) {
        operator.leftPart && criteriaForEach(operator.leftPart, callback, path);
        if (operator.leftPart && operator.leftPart['propertyName']) {
            path = path ? [path, operator.leftPart['propertyName']].join('.') : operator.leftPart['propertyName'];
        }
    }
    operator.children().forEach(item => criteriaForEach(item, callback, path));
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/parser/criteriaparser.js
var criteriaparser = __webpack_require__(29);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/criteriaOperatorStateMachine.js


class MachineState {
    constructor(tokenName, alphabet, startTerm, endTerm) {
        this.tokenName = tokenName;
        this.alphabet = alphabet;
        this.startTerm = startTerm;
        this.endTerm = endTerm;
        this.tokenLength = 0;
        this.isActiveState = false;
        this.tokens = [];
    }
    _isSubline(pos, term) {
        var result = (pos + term.length - 1 < this.alphabet.length);
        for (var i = pos; i < (pos + term.length) && result; i++)
            result = this.alphabet[i] == term[i - pos];
        return result;
    }
    _getToken(pos) {
        var token = {
            type: this.tokenName, start: pos - this.tokenLength + 1, end: pos + this.endTerm.length
        };
        token.val = this.alphabet.substring(token.start, token.end);
        return token;
    }
    processTransitionFunction(pos) {
        if (this.isActiveState) {
            this.tokenLength++;
        }
        if (this._isSubline(pos, this.startTerm) && !this.isActiveState) {
            this.isActiveState = true;
            this.tokenLength += this.startTerm.length;
            return this.startTerm.length - 1;
        }
        else if (this.isActiveState && this._isSubline(pos, this.endTerm)) {
            this.isActiveState = false;
            this.tokens.push(this._getToken(pos));
            this.tokenLength = 0;
            return this.endTerm.length - 1;
        }
        return 0;
    }
}
class criteriaOperatorStateMachine_CriteriaOperatorStateMachine {
    constructor(stringCriteria) {
        this.stringCriteria = stringCriteria;
        this.machineStates = [];
        this.machineStates.push(new MachineState('field', stringCriteria, '[', ']'));
        this.machineStates.push(new MachineState('value', stringCriteria, "'", "'"));
        this.machineStates.push(new MachineState('comment', stringCriteria, '/*', '*/'));
        this._inputStringCriteria = stringCriteria;
    }
    static parse(stringCriteria, saveOriginalStringLength = false) {
        if (stringCriteria && stringCriteria !== '') {
            if (saveOriginalStringLength)
                return new criteriaOperatorStateMachine_CriteriaOperatorStateMachine(stringCriteria).replaceCommentsToChar(' ').getCriteria();
            return new criteriaOperatorStateMachine_CriteriaOperatorStateMachine(stringCriteria).replaceCommentsToChar().getCriteria();
        }
        return null;
    }
    _tokenize() {
        for (var i = 0; i < this.stringCriteria.length; i++) {
            var step = 0;
            this.machineStates.forEach(state => {
                if (step)
                    return;
                var anotherMachines = this.machineStates.filter(a => a != state && a.isActiveState);
                if (!anotherMachines.length)
                    step = state.processTransitionFunction(i);
            });
            i += step;
        }
        var resultTokens = [];
        this.machineStates.forEach((state) => {
            resultTokens = resultTokens.concat(state.tokens);
            state.tokens = [];
        });
        return resultTokens;
    }
    _replaceTokenToAnotherToken(tokens, newTokenChar, tokenName) {
        var tempCriteria = this.stringCriteria;
        tokens = tokens.filter(a => a.type == tokenName).sort(a => a.start).reverse();
        tokens.forEach(token => {
            var lines = token.val.split('\n');
            var start = token.start;
            var end = token.end;
            lines.forEach(line => {
                if (line.length + start !== token.end) {
                    end = start + line.length;
                }
                else {
                    end = token.end;
                }
                tempCriteria = stringReplace(tempCriteria, start, end - start, newTokenChar);
                start = (line.length * newTokenChar.length) + 1;
            });
        });
        return tempCriteria;
    }
    replaceCommentsToChar(char = '') {
        this._inputStringCriteria = this._replaceTokenToAnotherToken(this._tokenize(), char, 'comment');
        return this;
    }
    getCriteria() {
        return Object(criteriaparser["parse"])(this._inputStringCriteria);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/internal/_valueEditorHelper.js


class _valueEditorHelper_ValueEditorHelper {
    static _getCharFromKeyCode(e) {
        if (e.ctrlKey === false && e.key.length === 1)
            return e.key;
        return null;
    }
    static _getCaretPosition(el) {
        var start = -1, end = -1, normalizedValue, range, textInputRange, len, endRange;
        try {
            if (typeof el.selectionStart == 'number' && typeof el.selectionEnd == 'number') {
                start = el.selectionStart;
                end = el.selectionEnd;
            }
            else if (document['selection']) {
                range = document['selection'].createRange();
                if (range && range.parentElement() == el) {
                    len = el.value.length;
                    normalizedValue = el.value.replace(/\r\n/g, '\n');
                    textInputRange = el.createTextRange();
                    textInputRange.moveToBookmark(range.getBookmark());
                    endRange = el.createTextRange();
                    endRange.collapse(false);
                    if (textInputRange.compareEndPoints('StartToEnd', endRange) > -1) {
                        start = end = len;
                    }
                    else {
                        start = -textInputRange.moveStart('character', -len);
                        start += normalizedValue.slice(0, start).split('\n').length - 1;
                        if (textInputRange.compareEndPoints('EndToEnd', endRange) > -1) {
                            end = len;
                        }
                        else {
                            end = -textInputRange.moveEnd('character', -len);
                            end += normalizedValue.slice(0, end).split('\n').length - 1;
                        }
                    }
                }
            }
        }
        catch (e) {
        }
        return {
            start: start,
            end: end
        };
    }
    static _validate(value, minValue, maxValue) {
        if (!/^(0|(-?(([1-9]\d*)|(0\.\d+)|([1-9]\d*\.\d+)|(\d*\.\d+[eE][+\-]?\d+))))$/.test(value))
            return false;
        if (!maxValue)
            return true;
        var negative = value[0] === '-';
        var valModulo = negative ? value.substring(1) : value;
        if (negative && !minValue)
            return false;
        var boundModulo = negative ? minValue.substring(1) : maxValue;
        var valMantissa, valExp, boundMantissa, boundExp;
        [valMantissa, valExp] = valModulo.toLowerCase().split('e');
        [boundMantissa, boundExp] = boundModulo.toLowerCase().split('e');
        var valIntPart, valFracPart, boundIntPart, boundFracPart;
        [valIntPart, valFracPart] = valMantissa.split('.');
        [boundIntPart, boundFracPart] = boundMantissa.split('.');
        valIntPart = (valIntPart || '').replace(/^0+/, '');
        boundIntPart = (boundIntPart || '').replace(/^0+/, '');
        var valOrder = valIntPart.length;
        if (valExp)
            valOrder += parseInt(valExp);
        var boundOrder = boundIntPart.length;
        if (boundExp)
            boundOrder += parseInt(boundExp);
        if (valOrder < boundOrder)
            return true;
        if (valOrder > boundOrder)
            return false;
        valFracPart = valFracPart || '0';
        boundFracPart = boundFracPart || '0';
        if (valIntPart + valFracPart > boundIntPart + boundFracPart)
            return false;
        return true;
    }
    static validateWidgetValue(e, validate, defaultVal) {
        var currentValue = e.component.option('value');
        if (!validate(currentValue)) {
            e.component.option('value', defaultVal);
        }
    }
    static getNumberEditorOptions(id, specifics, extendOptions = {}) {
        var editorOptions = _valueEditorHelper_ValueEditorHelper.editors[id] || _valueEditorHelper_ValueEditorHelper.editors[specifics];
        return editorOptions ? _valueEditorHelper_ValueEditorHelper.getValueEditorOptions(editorOptions.regExpEditing, (value) => {
            return _valueEditorHelper_ValueEditorHelper._validate(value, editorOptions.minValue, editorOptions.maxValue);
        }, '', extendOptions) : extendOptions;
    }
    static getValueEditorOptions(regExpEditing, validate, defaultVal, extendOptions = {}) {
        var options = {
            onFocusIn: e => {
                _valueEditorHelper_ValueEditorHelper.validateWidgetValue(e, validate, defaultVal);
                _valueEditorHelper_ValueEditorHelper._invokeStandardHandler(extendOptions, 'onFocusIn', e);
            },
            onKeyDown: e => {
                var char = _valueEditorHelper_ValueEditorHelper._getCharFromKeyCode(e.event);
                if (!char)
                    return;
                var $input = external_jQuery_["fn"].constructor(e.element).find('input').eq(0);
                var caretPosition = _valueEditorHelper_ValueEditorHelper._getCaretPosition($input.get(0));
                var currentValue = $input.val();
                if (caretPosition.start < 0) {
                    caretPosition = currentValue ? currentValue.length : 0;
                }
                var result = [currentValue.slice(0, caretPosition.start), char, currentValue.slice(caretPosition.end)].join('');
                if (!regExpEditing.test(result))
                    e.event.preventDefault();
                $input = null;
                _valueEditorHelper_ValueEditorHelper._invokeStandardHandler(extendOptions, 'onKeyDown', e);
            },
            onPaste: e => {
                var clipboardData = e.event.originalEvent.clipboardData || window['clipboardData'] || {};
                var pastedData = clipboardData.getData && clipboardData.getData('Text');
                if (typeof pastedData !== 'string')
                    return;
                var $input = external_jQuery_["fn"].constructor(e.element).find('input').eq(0);
                var caretPosition = _valueEditorHelper_ValueEditorHelper._getCaretPosition($input.get(0));
                var currentValue = $input.val();
                if (caretPosition.start < 0) {
                    caretPosition.end = caretPosition.start = currentValue ? currentValue.length : 0;
                }
                var result = [
                    currentValue.slice(0, caretPosition.start), pastedData, currentValue.slice(caretPosition.end)
                ].join('');
                if (!regExpEditing.test(result))
                    e.event.preventDefault();
                $input = null;
                _valueEditorHelper_ValueEditorHelper._invokeStandardHandler(extendOptions, 'onPaste', e);
            },
            onValueChanged: e => {
                if (e.value !== defaultVal)
                    this.validateWidgetValue(e, validate, e.previousValue);
                _valueEditorHelper_ValueEditorHelper._invokeStandardHandler(extendOptions, 'onValueChanged', e);
            }
        };
        return Object(_utils["b" /* extend */])({}, extendOptions, options);
    }
    static isValid(id, specifics, value) {
        var editorOptions = _valueEditorHelper_ValueEditorHelper.editors[id] || _valueEditorHelper_ValueEditorHelper.editors[specifics];
        return editorOptions.regExpEditing.test(value) && _valueEditorHelper_ValueEditorHelper._validate(value, editorOptions.minValue, editorOptions.maxValue);
    }
    static _invokeStandardHandler(extendOptions, name, e) {
        if (external_jQuery_["isFunction"](extendOptions[name]))
            extendOptions[name](e);
    }
}
_valueEditorHelper_ValueEditorHelper.editors = {
    'integer': {
        regExpEditing: /^-?\d*$/
    },
    'float': {
        regExpEditing: /^-?(\d+\.?\d*)?([eE][+\-]?\d+)?$/
    },
    'System.Byte': {
        regExpEditing: /^\d*$/,
        minValue: null,
        maxValue: '255'
    },
    'System.SByte': {
        regExpEditing: /^-?\d*$/,
        minValue: '-128',
        maxValue: '127'
    },
    'System.Int16': {
        regExpEditing: /^-?\d*$/,
        minValue: '-32768',
        maxValue: '32767'
    },
    'System.UInt16': {
        regExpEditing: /^\d*$/,
        minValue: null,
        maxValue: '65535'
    },
    'System.Int32': {
        regExpEditing: /^-?\d*$/,
        minValue: '-2147483648',
        maxValue: '2147483647'
    },
    'System.UInt32': {
        regExpEditing: /^\d*$/,
        minValue: null,
        maxValue: '4294967295'
    },
    'System.Int64': {
        regExpEditing: /^-?\d*$/,
        minValue: '-9223372036854775808',
        maxValue: '9223372036854775807'
    },
    'System.UInt64': {
        regExpEditing: /^\d*$/,
        minValue: null,
        maxValue: '18446744073709551615'
    },
    'System.Single': {
        regExpEditing: /^-?(\d+\.?\d*)?([eE][+\-]?\d*)?$/,
        minValue: '-3.40282347e+38',
        maxValue: '3.40282347e+38'
    },
    'System.Double': {
        regExpEditing: /^-?(\d+\.?\d*)?([eE][+\-]?\d*)?$/,
        minValue: '-1.7976931348623157e+308',
        maxValue: '1.7976931348623157e+308'
    },
    'System.Decimal': {
        regExpEditing: /^-?(\d+\.?\d*)?([eE][+\-]?\d*)?$/,
        minValue: '-79228162514264337593543950335',
        maxValue: '79228162514264337593543950335'
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/_utils.js










function integerValueConverter(val, defaultValue, type) {
    var stringValue = '' + val;
    return _valueEditorHelper_ValueEditorHelper.isValid(type, 'integer', stringValue) ? stringValue : defaultValue;
}
function enumValueConverter(val, defaultValue, valuesList) {
    if (valuesList.filter((enumValue) => val === enumValue.value)[0])
        return val;
    var existingValue = valuesList.filter((enumValue) => val === enumValue.displayName || val === enumValue.name)[0];
    if (existingValue)
        return existingValue.value;
    return defaultValue;
}
function validateExpression(options) {
    var deferred = external_jQuery_["Deferred"]();
    try {
        var requests = [];
        var _pushRequest = (path, propertyName, isParameter = false) => {
            var message = formatUnicorn(Object(localization_utils["c" /* getLocalization */])('{0} is not found', 'AnalyticsCoreStringId.WarningMessage_FieldNotFound'), isParameter ? ('?' + propertyName) : ('[' + propertyName + ']'));
            var propertyDeferred = external_jQuery_["Deferred"]();
            options.fieldListProvider.getItemByPath(new PathRequest(path))
                .done(_ => propertyDeferred.resolve({ success: true }))
                .fail(_ => {
                path === propertyName
                    ? propertyDeferred.resolve({ success: false, message })
                    : options.fieldListProvider.getItemByPath(new PathRequest([path.split('.')[0], propertyName].join('.')))
                        .done(_ => propertyDeferred.resolve({ success: true }))
                        .fail(_ => propertyDeferred.resolve({ success: false, message }));
            });
            requests.push(propertyDeferred);
        };
        var expression = criteriaOperatorStateMachine_CriteriaOperatorStateMachine.parse(options.expression);
        criteriaForEach(expression, (operator, innerPath) => {
            if (operator instanceof operators_property["a" /* OperandProperty */]) {
                var propertyName = operator.propertyName.indexOf('^.') === 0 ? operator.propertyName.substring(2) : operator.propertyName;
                var path = propertyName;
                if ((options.rootItems || []).indexOf(propertyName.split('.')[0]) === -1 && innerPath) {
                    path = propertyName ? [innerPath, propertyName].join('.') : innerPath;
                }
                _pushRequest(path, propertyName);
            }
            else if (operator instanceof parameter["a" /* OperandParameter */]) {
                var parameterName = operator.parameterName;
                var parameterPath = 'Parameters.' + parameterName;
                _pushRequest(parameterPath, parameterName, true);
            }
        }, options.path);
        external_jQuery_["when"].apply(external_jQuery_, requests).done((...responses) => deferred.resolve(responses.reduce((result, value) => {
            if (!value.success)
                result = result ? [result, value.message].join('\n') : value.message;
            return result;
        }, '')));
    }
    catch (e) {
        deferred.reject();
    }
    return deferred.promise();
}
function floatValueConverter(val, defaultValue, type) {
    var stringValue = '' + val;
    return _valueEditorHelper_ValueEditorHelper.isValid(type, 'float', stringValue) ? stringValue : defaultValue;
}
var _lightThemes = ['generic.light', 'generic.carmine', 'generic.greenmist', 'generic.softblue', 'generic.light.compact', 'generic.carmine.compact', 'generic.greenmist.compact', 'generic.softblue.compact'];
var _darkThemes = ['generic.dark', 'generic.contrast', 'generic.dark.compact', 'generic.darkmoon', 'generic.darkviolet', 'generic.contras.compact', 'generic.darkmoon.compact', 'generic.darkviolet.compact'];
function getCurrentTheme() {
    return external_DevExpress_ui_themes_default.a.current();
}
var isDarkTheme = (theme) => {
    theme = theme || getCurrentTheme();
    if (external_jQuery_["inArray"](theme, _darkThemes) !== -1)
        return true;
    if (external_jQuery_["inArray"](theme, _lightThemes) !== -1)
        return false;
    return false;
};
function _setIsDarkTheme(callback) {
    isDarkTheme = callback;
}
function setCursorInFunctionParameter(paramCount, editor, insertValue) {
    if (!paramCount || paramCount <= 0)
        return;
    var cursorPosition = editor.getCursorPosition(), lastIndexOpeningBracket = insertValue.lastIndexOf('(');
    if (insertValue.charAt(lastIndexOpeningBracket + 1) === "'")
        lastIndexOpeningBracket++;
    editor.gotoLine(cursorPosition.row + 1, cursorPosition.column - (insertValue.length - 1 - lastIndexOpeningBracket));
}
function _utils_isList(data) {
    return data.isList === true || data.specifics === 'List' || data.specifics === 'ListSource';
}
function getParentContainer(el, container = '.dx-designer-viewport') {
    return external_jQuery_["fn"].constructor(el).closest(container);
}
function isNullOrEmptyString(str) {
    return str == null || str === '';
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/internal/ajaxSetup.js

var ajaxSetup = new _ajaxSetup_AjaxSetup();

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_utils.js















function copyObservables(from, to) {
    Object.keys(from || {}).forEach((name) => {
        if (external_ko_["isObservable"](from[name])) {
            to[name](from[name]());
        }
        else if (!external_jQuery_["isFunction"](from[name])) {
            copyObservables(from[name], to[name]);
        }
    });
}
function _wrapModelInObservable(model) {
    return external_ko_["isWritableObservable"](model) ? model : external_ko_["observable"](null);
}
function collectGroupsFromFlatList(list, getGroupId) {
    var temp = {};
    return list.reduce((res, val) => {
        var groupId = getGroupId(val);
        if (groupId) {
            if (temp[groupId])
                temp[groupId].push(val);
            else {
                var group = { group: groupId, items: [val] };
                res.push(group);
                temp[groupId] = group.items;
            }
        }
        return res;
    }, []);
}
function compareObjects(a, b) {
    var result = a && b && !(a instanceof Array) && !(b instanceof Array);
    result = result && (Object.getOwnPropertyNames(a).length === Object.getOwnPropertyNames(b).length);
    if (result) {
        Object.keys(a || {}).some((name) => {
            if (name.indexOf('_') !== 0 && (typeof a[name] !== 'function' || external_ko_["isObservable"](a[name]))) {
                if (external_ko_["isObservable"](a[name])) {
                    result = external_ko_["unwrap"](a[name]) === external_ko_["unwrap"](b[name]);
                }
                else if (a[name] instanceof Array) {
                    if ((b[name] instanceof Array) && a[name].length === b[name].length) {
                        for (var i = 0; i < a[name].length; i++) {
                            result = compareObjects(a[name][i], b[name][i]);
                            if (result === false)
                                break;
                        }
                    }
                    else {
                        result = false;
                    }
                }
                else if (a[name] instanceof Object) {
                    result = compareObjects(a[name], b[name]);
                }
                else {
                    result = a[name] === b[name];
                }
                return !result;
            }
        });
    }
    return result;
}
var cssTransform = ['-webkit-transform', '-moz-transform', '-ms-transform', '-o-transform', 'transform'];
function getFullPath(path, dataMember) {
    return path + (dataMember ? '.' + dataMember : '');
}
function loadTemplates() {
    var promises = external_jQuery_["fn"].constructor("script[type='text/html']").map(function (_, script) {
        if (script.src) {
            var deffered = external_jQuery_["Deferred"]();
            external_jQuery_["get"](script.src)
                .done(function (tmpl) {
                script.text = tmpl;
                if (tmpl.indexOf('type="text/html"') !== -1 || tmpl.indexOf("type='text/html'") !== -1) {
                    external_jQuery_["fn"].constructor(document.body).append(tmpl);
                }
                deffered.resolve();
            })
                .fail(function (jqXHR, textStatus, errorThrown) {
                deffered.reject();
            });
            return deffered.promise();
        }
    });
    return external_jQuery_["when"].apply(external_jQuery_["when"], promises);
}
function getSizeFactor(width) {
    if (width < 768) {
        return 'xs';
    }
    else if (width < 992) {
        return 'sm';
    }
    else if (width < 1200) {
        return 'md';
    }
    else if (width < 1380) {
        return 'lg';
    }
    else {
        return 'xl';
    }
}
var staticContext = {
    _static: {
        searchPlaceholder: () => Object(_localization["n" /* searchPlaceholder */])(),
        selectPlaceholder: () => Object(_localization["o" /* selectPlaceholder */])(),
        noDataText: () => Object(_localization["j" /* noDataText */])(),
        ajaxSetup: ajaxSetup
    }
};
var _defaultStaticContext = Object(_internal["d" /* createGlobalModuleVariableFunc */])({});
function appendStaticContextToRootViewModel(root, dx = staticContext, className) {
    if (dx)
        root.dx = Object.assign(Object.assign({}, dx), _defaultStaticContext());
    root.getLocalization = function () {
        return localization_utils["c" /* getLocalization */].apply(root, arguments);
    };
    root.getPopupContainer = getParentContainer;
    root.calculateWithZoomFactor = calculateWithZoomFactor;
    root.surfaceClass = (el) => 'dx-designer-viewport dx-designer-viewport-' + getSizeFactor(el.clientWidth) +
        ' ' + (!getParentContainer(el, '.dx-theme-generic').length ? ' dx-theme-generic' : '') +
        (className ? ' ' + className : '');
}
function _ajax(uri, action, arg, processErrorCallback, ignoreError, customOptions, isError = (data) => !data.success, getErrorMessage = _infoMessageHelpers_getErrorMessage) {
    var deferred = external_jQuery_["Deferred"]();
    var requestData;
    if (action !== undefined && arg !== undefined) {
        requestData = {
            actionKey: action,
            arg: arg,
            dxversions: JSON.stringify(dxversions)
        };
    }
    ajaxSetup.sendRequest(Object(_utils["b" /* extend */])({}, {
        type: 'POST',
        data: requestData,
        url: uri
    }, customOptions)).fail((jqXHR, textStatus, errorThrown) => {
        if (ignoreError && ignoreError()) {
            deferred.reject();
            return;
        }
        _errorProcessor.call({ jqXHR: jqXHR, textStatus: textStatus, errorThrown: errorThrown, getRequestDetails: () => requestData || uri });
        _processError(errorThrown, deferred, jqXHR, textStatus, processErrorCallback);
    })
        .done((data, textStatus, jqXHR) => {
        if (!data) {
            deferred.reject();
            return;
        }
        if (!isError(data)) {
            deferred.resolve(data.result);
        }
        else {
            if (ignoreError && ignoreError()) {
                deferred.reject();
                return;
            }
            _errorProcessor.call({ jqXHR: jqXHR, textStatus: textStatus, data: data, errorThrown: getErrorMessage(jqXHR), getRequestDetails: () => requestData || uri });
            _processError('Internal Server Error', deferred, jqXHR, textStatus, processErrorCallback);
        }
    });
    return deferred.promise();
}
function _ajaxWithOptions(options) {
    return _ajax(options.uri, options.action, options.arg, options.processErrorCallback, options.ignoreError, options.customOptions, options.isError, options.getErrorMessage);
}
var ajax = (...params) => {
    if (params.length > 1) {
        return _ajax.apply(undefined, params);
    }
    else {
        return _ajaxWithOptions(params[0]);
    }
};
function setAjax(newFunc) {
    ajax = newFunc;
}
function cutRefs(model) {
    objectsVisitor(model, (target) => {
        delete target['@Ref'];
    });
    return model;
}
var DesignerBaseElements = {
    MenuButton: 'dxrd-menubutton-template-base',
    Toolbar: 'dxrd-toolbar-template-base',
    Toolbox: 'dxrd-toolbox-template-base',
    GroupedToolbox: 'dxrd-grouped-toolbox-template-base',
    Surface: 'dxrd-surface-template-base',
    RightPanel: 'dxrd-right-panel-template-base'
};
function generateDefaultParts(model) {
    return [
        { id: DesignerBaseElements.MenuButton, templateName: DesignerBaseElements.MenuButton, model: model },
        { id: DesignerBaseElements.Toolbar, templateName: DesignerBaseElements.Toolbar, model: model },
        { id: DesignerBaseElements.Toolbox, templateName: DesignerBaseElements.Toolbox, model: model },
        { id: DesignerBaseElements.Surface, templateName: DesignerBaseElements.Surface, model: model },
        { id: DesignerBaseElements.RightPanel, templateName: DesignerBaseElements.RightPanel, model: model }
    ];
}
function createActionWrappingFunction(wrapperName, func) {
    return (actions) => {
        actions.forEach(action => {
            if (!action['wrappedWith'] || action['wrappedWith'].indexOf(wrapperName) === -1) {
                var oldClickHandler = action.clickAction;
                action.clickAction = (model) => {
                    return func(model, oldClickHandler);
                };
                action['wrappedWith'] = action['wrappedWith'] || [];
                action['wrappedWith'].push(wrapperName);
            }
        });
    };
}
function localizeNoneString(noneValue) {
    var value = external_ko_["unwrap"](noneValue);
    if (value === 'none') {
        return Object(localization_utils["c" /* getLocalization */])('none', 'DataAccessStringId.ParameterListEmpty');
    }
    else if (value === '(none)') {
        return (Object(localization_utils["c" /* getLocalization */])('(none)', 'DxDesignerStringId.None') !== '(none)') ? Object(localization_utils["c" /* getLocalization */])('(none)', 'DxDesignerStringId.None') : ('(' + Object(localization_utils["c" /* getLocalization */])('none', 'DataAccessStringId.ParameterListEmpty') + ')');
    }
    return value;
}
function parseZoom(val) {
    var _value = Math.round(parseInt(val.replace('%', ''))) / 100;
    if (!_value)
        return 1;
    if (_value >= 5)
        return 5;
    if (_value <= 0.1)
        return 0.1;
    return _value;
}
function getResizableOptions($element, panelOffset, minWidth, position, startPosition, width, disabled) {
    const disabledOption = external_ko_["unwrap"](disabled);
    const minWidthOption = external_ko_["unwrap"](minWidth);
    return {
        starting: function (e) {
            external_jQuery_["fn"].constructor($element).css(position === startPosition ? 'right' : 'left', '');
        },
        handles: external_ko_["observable"](position === startPosition ? 'e' : 'w'),
        stopped: external_jQuery_["noop"],
        stop: external_jQuery_["noop"],
        resize: function (event, element) {
            const startResizePosition = convertFromCssPixelUnits(element.dataset.originalLeftMousePosition);
            const originalWidth = convertFromCssPixelUnits(element.dataset.originalWidth);
            const sizeDiff = event.x - startResizePosition;
            external_jQuery_["fn"].constructor($element).css({ left: position === startPosition ? panelOffset + 'px' : '', right: position === startPosition ? '' : panelOffset + 'px' });
            const newWidth = Math.min(Math.max(minWidthOption, position === startPosition ? originalWidth + sizeDiff : originalWidth - sizeDiff), 1000);
            width && external_ko_["isObservable"](width) && width(newWidth);
        },
        disabled: disabled || false,
        zoom: 1,
        minimumWidth: external_ko_["observable"](disabledOption ? 0 : minWidthOption),
        maximumWidth: 1000,
        $element: $element
    };
}
function createPasswordSerializationInfo(info, isNew = true) {
    info.editor = editorTemplates.getEditor('text');
    info.editorOptions = { mode: 'password' };
    if (isNew)
        info.editorOptions.inputAttr = { autocomplete: 'new-password' };
    return info;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/_actionList.js









class _actionList_ActionListsBase extends utils["a" /* Disposable */] {
    constructor(enabled) {
        super();
        this.toolbarItems = [];
        this.enabled = enabled || external_ko_["observable"](true);
    }
    processShortcut(actions, e) {
        for (var i = 0; i < actions.length; i++) {
            if (actions[i].hotKey && (actions[i].disabled && !actions[i].disabled() || !actions[i].disabled) && (external_jQuery_["isFunction"](actions[i].visible) ? actions[i].visible() : actions[i].visible)) {
                if (actions[i].hotKey.ctrlKey === e.ctrlKey && actions[i].hotKey.keyCode === e.keyCode) {
                    actions[i].clickAction();
                    e.preventDefault();
                }
            }
        }
    }
    shouldIgnoreProcessing(e) {
        if (e.altKey || !this.enabled.peek())
            return true;
        var activeElement = external_jQuery_["fn"].constructor(document.activeElement);
        if (activeElement.is('textarea') || activeElement.is(':input') && (['password', 'text', 'number'].indexOf(activeElement.attr('type')) != -1)) {
            return true;
        }
        return false;
    }
}
class _actionList_ActionLists extends _actionList_ActionListsBase {
    constructor(surfaceContext, selection, undoEngine, customizeActions, enabled, copyPasteStrategy, zoomStep = external_ko_["observable"](0.01), isLocked = (item) => false) {
        super(enabled);
        this.menuItems = [];
        var copyPasteHandler = new _copyPaste_CopyPasteHandler(selection, copyPasteStrategy), actions = [];
        if (selection) {
            var selectionControlsLocked = external_ko_["computed"](() => {
                return selection.selectedItems.some(item => item.locked || isLocked(item));
            });
            this._disposables.push(selectionControlsLocked);
            this._keyboardHelper = new KeyboardHelper(selection, undoEngine);
            actions.push({
                id: ActionId.Cut,
                text: 'Cut',
                displayText: () => Object(localization_utils["c" /* getLocalization */])('Cut', 'AnalyticsCoreStringId.EditCut'),
                imageClassName: 'dxrd-image-cut',
                imageTemplateName: 'dxrd-svg-toolbar-cut',
                disabled: external_ko_["pureComputed"](() => {
                    return !surfaceContext() || !copyPasteHandler.canCopy() || selectionControlsLocked();
                }),
                visible: true,
                clickAction: () => {
                    undoEngine().start();
                    copyPasteHandler.cut();
                    undoEngine().end();
                },
                hotKey: { ctrlKey: true, keyCode: 'X'.charCodeAt(0) }
            });
            actions.push({
                id: ActionId.Copy,
                text: 'Copy',
                displayText: () => Object(localization_utils["c" /* getLocalization */])('Copy', 'AnalyticsCoreStringId.Cmd_Copy'),
                imageClassName: 'dxrd-image-copy',
                imageTemplateName: 'dxrd-svg-toolbar-copy',
                disabled: external_ko_["pureComputed"](() => {
                    return !surfaceContext() || !copyPasteHandler.canCopy() || selectionControlsLocked();
                }),
                visible: true,
                clickAction: () => {
                    copyPasteHandler.copy();
                },
                hotKey: { ctrlKey: true, keyCode: 'C'.charCodeAt(0) }
            });
            actions.push({
                id: ActionId.Paste,
                text: 'Paste',
                displayText: () => Object(localization_utils["c" /* getLocalization */])('Paste', 'AnalyticsCoreStringId.Cmd_Paste'),
                imageClassName: 'dxrd-image-paste',
                imageTemplateName: 'dxrd-svg-toolbar-paste',
                disabled: external_ko_["pureComputed"](() => {
                    return !surfaceContext() || !copyPasteHandler.canPaste() || selectionControlsLocked();
                }),
                visible: true,
                clickAction: () => {
                    undoEngine().start();
                    copyPasteHandler.paste();
                    undoEngine().end();
                },
                hotKey: { ctrlKey: true, keyCode: 'V'.charCodeAt(0) }
            });
            actions.push({
                id: ActionId.Delete,
                text: 'Delete',
                displayText: () => Object(localization_utils["c" /* getLocalization */])('Delete', 'AnalyticsCoreStringId.Cmd_Delete'),
                imageClassName: 'dxrd-image-delete',
                imageTemplateName: 'dxrd-svg-toolbar-delete',
                disabled: external_ko_["pureComputed"](() => {
                    if (selection.focused()) {
                        return selection.focused().getControlModel().getMetaData().isDeleteDeny || selectionControlsLocked();
                    }
                    else {
                        return true;
                    }
                }),
                visible: true,
                hotKey: { ctrlKey: false, keyCode: 46 },
                clickAction: () => {
                    undoEngine().start();
                    deleteSelection(selection);
                    undoEngine().end();
                }
            });
        }
        actions.push({
            id: ActionId.Undo,
            text: 'Undo',
            displayText: () => Object(localization_utils["c" /* getLocalization */])('Undo', 'AnalyticsCoreStringId.Undo'),
            imageClassName: 'dxrd-image-undo',
            imageTemplateName: 'dxrd-svg-toolbar-undo',
            disabled: external_ko_["pureComputed"](() => { return !surfaceContext() || !undoEngine() || (undoEngine() && !undoEngine().undoEnabled()); }),
            visible: true,
            clickAction: () => {
                undoEngine().undo();
            },
            hotKey: { ctrlKey: true, keyCode: 'Z'.charCodeAt(0) },
            hasSeparator: true
        });
        actions.push({
            id: ActionId.Redo,
            text: 'Redo',
            displayText: () => Object(localization_utils["c" /* getLocalization */])('Redo', 'AnalyticsCoreStringId.Redo'),
            imageClassName: 'dxrd-image-redo',
            imageTemplateName: 'dxrd-svg-toolbar-redo',
            disabled: external_ko_["pureComputed"](() => { return !surfaceContext() || !undoEngine() || (undoEngine() && !undoEngine().redoEnabled()); }),
            visible: true,
            clickAction: () => {
                undoEngine().redo();
            },
            hotKey: { ctrlKey: true, keyCode: 'Y'.charCodeAt(0) }
        });
        actions.push({
            id: ActionId.ZoomOut,
            text: 'Zoom Out',
            displayText: () => Object(localization_utils["c" /* getLocalization */])('Zoom Out', 'AnalyticsCoreStringId.ZoomOut'),
            imageClassName: 'dxrd-image-zoomout',
            imageTemplateName: 'dxrd-svg-toolbar-zoomout',
            disabled: external_ko_["pureComputed"](() => {
                return !surfaceContext();
            }),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 109 },
            zoomStep: zoomStep,
            clickAction: () => {
                surfaceContext().zoom(Math.max(surfaceContext().zoom() - zoomStep(), 0.01));
            },
            hasSeparator: true
        });
        actions.push({
            id: ActionId.ZoomSelector,
            text: 'Zoom 100%',
            displayText: () => Object(localization_utils["c" /* getLocalization */])('Zoom 100%'),
            imageClassName: 'dxrd-image-zoom',
            disabled: external_ko_["pureComputed"](() => {
                return !surfaceContext();
            }),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 187 },
            clickAction: () => {
                surfaceContext().zoom(1);
            },
            templateName: 'dxrd-zoom-select-template',
            zoomLevels: external_ko_["observableArray"]([5, 2, 1.5, 1, 0.75, 0.5, 0.25]),
            zoom: external_ko_["pureComputed"]({
                read: () => { return surfaceContext() && surfaceContext().zoom(); },
                write: (val) => { surfaceContext().zoom(val); }
            }),
            onCustomItemCreating: (e) => {
                e.customItem = parseZoom(e.text);
            }
        });
        actions.push({
            id: ActionId.ZoomIn,
            text: 'Zoom In',
            displayText: () => Object(localization_utils["c" /* getLocalization */])('Zoom In', 'AnalyticsCoreStringId.ZoomIn'),
            imageClassName: 'dxrd-image-zoomin',
            imageTemplateName: 'dxrd-svg-toolbar-zoomin',
            disabled: external_ko_["pureComputed"](() => {
                return !surfaceContext();
            }),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 107 },
            zoomStep: zoomStep,
            clickAction: () => {
                surfaceContext().zoom(surfaceContext().zoom() + zoomStep());
            }
        });
        if (customizeActions) {
            customizeActions(actions);
        }
        actions.forEach((action) => {
            Object.keys(action).forEach((name) => {
                if (external_ko_["isComputed"](action[name])) {
                    this._disposables.push(action[name]);
                }
            });
            this._registerAction(action['container'] === 'menu' ? this.menuItems : external_ko_["unwrap"](this.toolbarItems), action);
        });
    }
    _registerAction(container, action) {
        if (action['index']) {
            container.splice(action['index'], 0, action);
        }
        else {
            container.push(action);
        }
    }
    processShortcut(actions, e) {
        if (this.shouldIgnoreProcessing(e)) {
            return;
        }
        if (!this._keyboardHelper.processShortcut(e)) {
            super.processShortcut(actions, e);
        }
        else {
            e.preventDefault();
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/_propertiesAccessibilityProvider.js

class _propertiesAccessibilityProvider_PropertiesAccessibilityProvider {
    isPropertyVisible(editor) {
        if (!editor._model())
            return false;
        var model = editor._model();
        var visible = model.isPropertyVisible ? model.isPropertyVisible(editor.name) : true;
        if (visible) {
            visible = this._calculateAccessibilityByPropertyInfo(model, editor.info().visible, true);
        }
        return visible;
    }
    isPropertyDisabled(editor) {
        if (!editor._model())
            return true;
        var model = editor._model();
        return model.isPropertyDisabled && model.isPropertyDisabled(editor.name) || this._calculateAccessibilityByPropertyInfo(model, editor.info().disabled, false);
    }
    _calculateAccessibilityByPropertyInfo(model, propertyInfo, defaultValue) {
        var result;
        if (external_ko_["isObservable"](propertyInfo)) {
            result = propertyInfo();
        }
        else if (typeof propertyInfo === 'function') {
            result = propertyInfo(model);
        }
        else {
            result = propertyInfo !== undefined ? propertyInfo : defaultValue;
        }
        return result;
    }
}
var defaultAccessibilityProvider = new _propertiesAccessibilityProvider_PropertiesAccessibilityProvider();

// EXTERNAL MODULE: external "DevExpress.validationEngine"
var external_DevExpress_validationEngine_ = __webpack_require__(53);
var external_DevExpress_validationEngine_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_validationEngine_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/editorValidator.js



class editorValidator_EditorValidator extends utils["a" /* Disposable */] {
    constructor(_editor) {
        super();
        this._editor = _editor;
        this._lastValidatorOptions = null;
        this._lastModelOverridableRules = null;
        this._onValidatedHandler = undefined;
    }
    dispose() {
        this.onValidatedHandler = null;
        this.validatorInstance && this.validatorInstance.dispose();
        this.validatorInstance = null;
        super.dispose();
    }
    _isValid(validationRules, newValue) {
        this.onValidatedHandler = undefined;
        if (this.validatorInstance) {
            (validationRules || []).forEach(rule => rule && (rule.validator = this.validatorInstance));
            return this.validatorInstance.validate();
        }
        else {
            return external_DevExpress_validationEngine_default.a['validate'](newValue, validationRules, this._editor.displayName());
        }
    }
    get validatorInstance() {
        return this._validatorInstance;
    }
    set validatorInstance(newValue) {
        if (this._validatorInstance && this.onValidatedHandler) {
            this._validatorInstance.off('validated', this._onValidatedHandler);
        }
        this._validatorInstance = newValue;
    }
    get onValidatedHandler() {
        return this._onValidatedHandler;
    }
    set onValidatedHandler(newValue) {
        if (this._onValidatedHandler && this.validatorInstance) {
            this.validatorInstance.off('validated', this._onValidatedHandler);
            this._onValidatedHandler = newValue;
            if (newValue) {
                this.validatorInstance.on('validated', this._onValidatedHandler);
            }
        }
    }
    getValidationRules() {
        var options = this.getValidatorOptions();
        var resultRules = (options || {}).validationRules;
        return resultRules || (resultRules === null ? null : []);
    }
    getValidatorOptions(templateValidatorOptions = {}) {
        var info = this._editor.info.peek();
        if (!info)
            return;
        var options = this._lastValidatorOptions;
        var modelOverridableRules = this._editor._getEditorValidationRules();
        if (options && !this.areRulesChanged(modelOverridableRules)) {
            return options;
        }
        this._lastModelOverridableRules = modelOverridableRules;
        var extendedValidationRules = this._concatValidationRules(info.validatorOptions, modelOverridableRules);
        var extendedValidatorOptions = info.editor.extendedOptions && info.editor.extendedOptions.validatorOptions;
        var options = Object(_utils["b" /* extend */])({}, templateValidatorOptions, info.validatorOptions, { validationRules: extendedValidationRules }, extendedValidatorOptions);
        this._wrapValidatorEvents(options);
        this._lastValidatorOptions = options;
        return options;
    }
    areRulesChanged(overridableRuleSet) {
        if (!(this._lastModelOverridableRules && this._lastModelOverridableRules.length)) {
            return overridableRuleSet && overridableRuleSet.length;
        }
        else if (!overridableRuleSet || !overridableRuleSet.length) {
            return true;
        }
        else {
            return !overridableRuleSet.every(newRule => {
                return this._lastModelOverridableRules.some(rule => {
                    return newRule.message === rule.message && newRule.validationCallback === rule.validationCallback && newRule.type === rule.type;
                });
            });
        }
    }
    wrapOnValidatorInitialized(options) {
        var onInitializedHandler = options.onInitialized;
        var _this = this;
        options.onInitialized = function (e) {
            _this._onValidatorInitialized(e);
            onInitializedHandler && onInitializedHandler.apply(this, arguments);
        };
    }
    _onValidatorInitialized(e) {
        this.validatorInstance = e && e.component;
    }
    _concatValidationRules(validatorOptions, validationRules) {
        if ((!validatorOptions || !validatorOptions.validationRules) && !validationRules) {
            return null;
        }
        return ((validatorOptions || {}).validationRules || []).concat(validationRules || []);
    }
    _wrapValidatorEvents(validatorOptions) {
        if (!validatorOptions || !validatorOptions.validationRules || !validatorOptions.validationRules.length) {
            return;
        }
        this.wrapOnValidatorInitialized(validatorOptions);
        return validatorOptions;
    }
    assignWithValidation(newValue, assignValueFunc) {
        var validationRules = this.getValidationRules();
        var assignValueFirst = !validationRules || validationRules.some(x => x.assignValueFirst);
        if (assignValueFirst) {
            assignValueFunc();
        }
        var validationResult = this._isValid(validationRules, newValue);
        if (!validationResult.isValid) {
            if (validationResult.brokenRule && validationResult.brokenRule['isDeferred']) {
                this.onValidatedHandler = (result) => {
                    this.onValidatedHandler = undefined;
                    if (!result.isValid)
                        return;
                    assignValueFunc();
                };
            }
            return;
        }
        if (!assignValueFirst) {
            assignValueFunc();
        }
    }
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/internal/_internal.js
var internal_internal = __webpack_require__(15);

// EXTERNAL MODULE: external "DevExpress.config"
var external_DevExpress_config_ = __webpack_require__(26);
var external_DevExpress_config_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_config_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/editor.js













class editor_Editor extends utils["a" /* Disposable */] {
    constructor(modelPropertyInfo, level, parentDisabled = external_ko_["observable"](false), textToSearch = undefined) {
        super();
        this._model = external_ko_["observable"]();
        this._parent = external_ko_["observable"](null);
        this.isSearchedProperty = external_ko_["observable"](true);
        this.isParentSearched = external_ko_["observable"](false);
        this.rtl = external_DevExpress_config_default()().rtlEnabled;
        this._accessibilityProvider = external_ko_["observable"](defaultAccessibilityProvider);
        this._validator = new editorValidator_EditorValidator(this);
        this._cachedValue = undefined;
        this.isEditorSelected = external_ko_["observable"](false);
        this.isRequired = false;
        this.isRendered = external_ko_["observable"](false);
        this.collapsed = external_ko_["observable"](true);
        this.info = external_ko_["observable"](modelPropertyInfo);
        this._disposables.push(this.displayName = external_ko_["computed"](() => {
            var info = this.info();
            return info && Object(localization_utils["c" /* getLocalization */])(info.displayName, info['localizationId']);
        }));
        if (textToSearch) {
            this.textToSearch = textToSearch;
            this._disposables.push(this.isSearchedProperty = external_ko_["computed"](() => {
                return this.isParentSearched() || !!findMatchesInString(this.displayName(), textToSearch());
            }));
        }
        this.padding = this._setPadding(this.rtl ? 'right' : 'left', level * Object(internal_internal["d" /* propertiesGridEditorsPaddingLeft */])());
        var defaultValue = external_ko_["observable"](null), propertyName = modelPropertyInfo.propertyName;
        this.editorOptions = modelPropertyInfo.editorOptions;
        this.validatorOptions = modelPropertyInfo.validatorOptions;
        this.isRequired = modelPropertyInfo.isRequired;
        if (modelPropertyInfo.defaultVal !== undefined) {
            defaultValue = external_ko_["observable"](modelPropertyInfo.defaultVal);
        }
        if (modelPropertyInfo.from) {
            defaultValue = modelPropertyInfo.from(modelPropertyInfo.defaultVal);
        }
        if (modelPropertyInfo.array) {
            defaultValue = external_ko_["observableArray"]();
        }
        this._disposables.push(this.values = external_ko_["computed"](() => {
            var _values = this.info().valueStore || this.info().valuesArray;
            if (_values) {
                return _values;
            }
            _values = external_ko_["unwrap"](this.info().values);
            if (_values) {
                return external_jQuery_["map"](_values, (displayValue, value) => {
                    return { value: value, displayValue: displayValue };
                });
            }
        }));
        this.level = level;
        this._init(modelPropertyInfo.editor, defaultValue, propertyName);
        this._disposables.push(this.disabled = external_ko_["computed"](() => {
            return parentDisabled() || this._accessibilityProvider() && this._accessibilityProvider().isPropertyDisabled(this);
        }));
        this._disposables.push(this.visible = external_ko_["computed"](() => {
            return this.isSearchedProperty() && this._accessibilityProvider() && this._accessibilityProvider().isPropertyVisible(this);
        }));
        this._disposables.push(this.isPropertyModified = external_ko_["computed"](() => {
            return !!(this._model() && this._model().isPropertyModified && this._model().isPropertyModified(this.name));
        }));
        this._disposables.push(this.isPropertyHighlighted = external_ko_["pureComputed"](() => {
            if (this._shouldSkipHighlighting(this.name))
                return false;
            var controlModel = this._model();
            return !!(controlModel && controlModel.isPropertyHighlighted && controlModel.isPropertyHighlighted(this.name));
        }));
    }
    _setPadding(position, value) {
        var obj = {};
        obj['padding-' + position] = value;
        return obj;
    }
    dispose() {
        this._validator && this._validator.dispose();
        this._validator = null;
        super.dispose();
        this._cachedValue = null;
        this._model(null);
    }
    _shouldSkipHighlighting(propertyName) {
        return this.isComplexEditor;
    }
    _assignValue(modelValue, model, newValue, name) {
        if (external_ko_["isObservable"](modelValue)) {
            modelValue(newValue);
        }
        else {
            model[name] = newValue;
        }
    }
    _roundTwoDesemialsForUnitProperties(value, model, propertyName) {
        var properties = model && model['constructor'] && model['constructor'].unitProperties;
        if (!properties || properties.indexOf(propertyName) === -1)
            return value;
        return roundingXDecimals(value);
    }
    _init(editorTemplate, value, name) {
        editorTemplate = editorTemplate || editorTemplates.getEditor('text');
        this.templateName = editorTemplate.header;
        this.contentTemplateName = editorTemplate.content;
        this._cachedValue = undefined;
        this._disposables.push(this.value = external_ko_["computed"]({
            read: () => {
                var model = this._model();
                if (!model && this._cachedValue) {
                    return this._cachedValue;
                }
                var modelValue = model && model[name] !== undefined ? model[name] : value;
                if (external_ko_["isObservable"](modelValue) && !modelValue['push']) {
                    var hasValueInModel = modelValue() !== undefined && modelValue() !== null;
                    this._cachedValue = hasValueInModel ? this._roundTwoDesemialsForUnitProperties(modelValue(), model, name) : this.defaultValue;
                    return this._cachedValue;
                }
                else {
                    this._cachedValue = modelValue;
                    return this._cachedValue;
                }
            },
            write: (newValue) => {
                var model = this._model();
                if (!model) {
                    return;
                }
                var modelValue = model[name];
                this._validator.assignWithValidation(newValue, () => {
                    this._assignValue(modelValue, model, newValue, name);
                });
            }
        }));
        this.name = name;
        this.editorTemplate = editorTemplate && editorTemplate.custom || 'dx-property-editor';
    }
    _getInfoFromModel(viewModel) {
        if (!viewModel)
            return null;
        var modelInfo = viewModel['getInfo'] && viewModel['getInfo']();
        if (modelInfo) {
            return modelInfo.filter(property => property.propertyName === this.name)[0];
        }
        return null;
    }
    update(viewModel) {
        if (!!viewModel) {
            var propertyInfo = this._getInfoFromModel(viewModel);
            var isSameEditorType = propertyInfo && compareEditorInfo(propertyInfo.editor, this.info().editor);
            if (isSameEditorType && this.info() !== propertyInfo) {
                this.info(propertyInfo);
            }
            this._model(this.name in viewModel && (isSameEditorType || !propertyInfo) ? viewModel : null);
        }
        else {
            this._model(null);
        }
    }
    getOptions(templateOptions) {
        var extendedOptions = this.info.peek().editor.extendedOptions;
        return Object(_utils["b" /* extend */])(true, {}, templateOptions, this.editorOptions, extendedOptions);
    }
    getValidatorOptions(templateValidatorOptions) {
        return this._validator && this._validator.getValidatorOptions(templateValidatorOptions);
    }
    registerAccessibilityProvider(accessibilityProvider) {
        if (this._accessibilityProvider() != accessibilityProvider)
            this._accessibilityProvider(accessibilityProvider);
    }
    assingParent(parent) {
        if (this._parent() != parent)
            this._parent(parent);
    }
    _getEditorValidationRules() {
        var info = external_ko_["unwrap"](this.info);
        if (!info)
            return;
        var validationRules = info.validationRules;
        return validationRules || (validationRules === null ? null : []);
    }
    getValidationRules() {
        return this._validator && this._validator.getValidationRules();
    }
    get validationRules() {
        return this.getValidationRules();
    }
    getIdByDisplayName(preffix) {
        return preffix + '-' + replaceInvalidSymbols(this.displayName());
    }
    getPopupServiceActions() {
        if (!this._model()) {
            return;
        }
        var actions = (this._model().actions || []).concat();
        (this._model().actionProviders || [])
            .forEach((provider) => {
            var additionalActions = provider && provider.getActions(this.name) || [];
            additionalActions.forEach((action) => actions.push(action));
        });
        return actions;
    }
    get isComplexEditor() { return !!this.contentTemplateName; }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/internal/_addon.js


class _addon_EditorAddOn extends utils["a" /* Disposable */] {
    constructor(editor, popupService) {
        super();
        this.templateName = null;
        this._editor = editor;
        this._popupService = popupService;
        this._disposables.push(this._actions = external_ko_["pureComputed"](() => {
            return (editor.getPopupServiceActions() || []).filter(x => this.actionFilter(x));
        }));
        this._disposables.push(this.visible = external_ko_["pureComputed"](() => {
            return this._actions().length > 0;
        }));
        this._disposables.push(this.hint = external_ko_["pureComputed"](() => {
            var acc = [];
            this._actions().forEach(x => this._getTitles(x, [], acc));
            return acc.join('\n');
        }));
        this._disposables.push(this.editorMenuButtonCss = external_ko_["pureComputed"](() => {
            var editorModel = editor._model();
            return editorModel && editorModel['getActionClassName'] && editorModel['getActionClassName'](editor.name) || '';
        }));
        this._disposables.push(this.imageTemplateName = external_ko_["pureComputed"](() => {
            var editorModel = editor._model();
            return editorModel && editorModel['getMenuBoxTemplate'] && editorModel['getMenuBoxTemplate'](editor.name) || '';
        }));
    }
    _updateActions(actions) {
        this._popupService.actions([]);
        if (!actions || !actions.length)
            return;
        actions
            .sort((x, y) => (x.title < y.title ? -1 : x.title > y.title ? 1 : 0))
            .sort((x, y) => (x.weight || 0) - (y.weight || 0));
        this._wrapVisibleItems(actions, this._editor.name).forEach(visibleItem => {
            this._popupService.actions.push(visibleItem);
        });
    }
    _getTitles(item, currentItemPath = [], acc = []) {
        var title = external_ko_["unwrap"](item.title);
        (item.items || []).forEach(x => {
            var nextPath = title ? currentItemPath.concat([title]) : currentItemPath;
            this._getTitles(x, nextPath, acc);
        });
        var hint = external_ko_["unwrap"](item.hint);
        if (!hint || !title)
            return;
        var resultTitle = currentItemPath.concat([title]).join('. ');
        acc.push(resultTitle + ':\n' + hint + '\n');
        return acc;
    }
    _wrapVisibleItems(actions, editorName) {
        if (!actions)
            return undefined;
        return actions.map(modelAction => this._wrapActionClick(modelAction, editorName)).filter(x => !!x);
    }
    _wrapActionClick(modelAction, editorName) {
        if (this.actionFilter(modelAction)) {
            return {
                id: modelAction.id,
                items: this._wrapVisibleItems(modelAction.items, editorName),
                innerTemplate: modelAction.innerTemplate,
                itemTemplate: modelAction.itemTemplate,
                action: () => {
                    modelAction.action(editorName);
                    this._popupService.visible(false);
                },
                title: modelAction.title,
                hint: modelAction.hint,
                visible: () => { return true; }
            };
        }
        else {
            return null;
        }
    }
    showPopup(_, element) {
        this._popupService.title(this._editor.displayName());
        this._updateActions(this._editor.getPopupServiceActions());
        this._popupService.target(element);
        this._popupService.visible(true);
    }
    actionFilter(action) {
        return action.visible(this._editor.name);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/propertygrid.js








class propertygrid_ObjectProperties extends utils["a" /* Disposable */] {
    constructor(viewModel, editorsInfo, level = 0, parentDisabled = external_ko_["observable"](false), recreateEditors = false, textToSearch, popupService) {
        super();
        this._viewModelSubscription = null;
        this._infoSubscription = null;
        this._getInfoComputed = null;
        this._accessibilityProvider = defaultAccessibilityProvider;
        this.level = 0;
        this.rtl = external_DevExpress_config_default()()['rtlEnabled'];
        if (popupService) {
            this.createEditorAddOn = (editor) => {
                var editorAddOn = new _addon_EditorAddOn(editor, this.popupService);
                editor._disposables.push(editorAddOn);
                return {
                    templateName: 'dx-editor-addons',
                    data: [editorAddOn]
                };
            };
            this.popupService = popupService;
        }
        this._editors = external_ko_["observableArray"]([]).extend({ deferred: true });
        this.level = level;
        this._parentDisabled = parentDisabled;
        this._textToSearch = textToSearch;
        this._disposables.push(this.visible = external_ko_["computed"](() => {
            return this._editors().some(editor => editor.visible());
        }));
        this._viewModelSubscription = viewModel.subscribe((newVal) => {
            this._infoSubscription && this._infoSubscription.dispose();
            this._getInfoComputed && this._getInfoComputed.dispose();
            this._update(newVal, editorsInfo, recreateEditors);
        });
        this._update(viewModel(), editorsInfo, recreateEditors);
    }
    update(viewModel) {
        if (viewModel) {
            this._editors().forEach((editor) => {
                editor.update(viewModel);
            });
        }
    }
    _cleanEditorsSubscriptions() {
        this._editors().forEach((editor) => {
            editor.dispose();
            Object.keys(editor).forEach(name => {
                if (external_ko_["isComputed"](editor[name])) {
                    editor[name].dispose();
                }
            });
        });
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this._editors);
        this.resetObservableArray(this._editors);
        this.cleanSubscriptions();
    }
    cleanSubscriptions() {
        this._infoSubscription && this._infoSubscription.dispose();
        this._getInfoComputed && this._getInfoComputed.dispose();
        this._viewModelSubscription && this._viewModelSubscription.dispose();
        this._cleanEditorsSubscriptions();
    }
    cleanEditors() {
        this._cleanEditorsSubscriptions();
        this.resetObservableArray(this._editors);
    }
    findEditorByInfo(serializationInfo) {
        return this._editors().filter(editor => editor.name === serializationInfo.propertyName && compareEditorInfo(editor.info().editor, serializationInfo.editor))[0];
    }
    createEditor(modelPropertyInfo) {
        var editorType = modelPropertyInfo.editor && modelPropertyInfo.editor.editorType || editor_Editor;
        var editor = new editorType(modelPropertyInfo, this.level, this._parentDisabled, this._textToSearch, this.popupService);
        editor.assingParent(this._parent);
        editor.registerAccessibilityProvider(this._accessibilityProvider);
        return editor;
    }
    createEditors(serializationInfo) {
        var self = this;
        return (serializationInfo || [])
            .filter(info => { return !!info.editor && !this.findEditorByInfo(info); })
            .map(info => { return this.createEditor(info); });
    }
    registerAccessibilityProvider(accessibilityProvider) {
        this._accessibilityProvider = accessibilityProvider;
        this._editors().forEach((editor) => {
            editor.registerAccessibilityProvider(accessibilityProvider);
        });
    }
    assignParent(parent) {
        this._parent = parent;
        this._editors().forEach((editor) => {
            editor.assingParent(parent);
        });
    }
    _createEditors(serializationInfo) {
        if (!serializationInfo || serializationInfo.length === 0)
            return false;
        var newEditors = this.createEditors(serializationInfo);
        if (!newEditors.length)
            return;
        var currentEditors = this._editors();
        if (currentEditors.length === 0) {
            currentEditors = newEditors;
        }
        else {
            newEditors.forEach((editor) => {
                var existEditorIndex = currentEditors.map(_editor => _editor.name).indexOf(editor.name);
                if (existEditorIndex !== -1)
                    currentEditors.splice(existEditorIndex, 0, editor);
                else
                    currentEditors.push(editor);
            });
        }
        this._editors(currentEditors);
    }
    _update(viewModel, editorsInfo, recreateEditors) {
        if (recreateEditors) {
            this.cleanEditors();
        }
        this._getInfoComputed = external_ko_["computed"](() => {
            return (editorsInfo && editorsInfo.editors && external_ko_["unwrap"](editorsInfo.editors))
                || (viewModel && viewModel['getInfo'] && viewModel['getInfo']());
        });
        this._infoSubscription = this._getInfoComputed.subscribe((newInfo) => {
            if (recreateEditors) {
                this.cleanEditors();
            }
            this._recreateEditors(viewModel, newInfo);
        });
        this._recreateEditors(viewModel, this._getInfoComputed());
    }
    _recreateEditors(viewModel, serializationInfo) {
        this._createEditors(serializationInfo);
        this.update(viewModel);
    }
    getEditors() {
        return this._editors();
    }
}
class propertygrid_PropertyGridEditor extends editor_Editor {
    constructor(info, level, parentDisabled, textToSearch, _popupService) {
        super(info, level, parentDisabled, textToSearch);
        this._popupService = _popupService;
        this.editorCreated = external_ko_["observable"](false);
        this.viewmodel = this.createObjectProperties();
        if (!Object(_utils["c" /* isEmptyObject */])(this.viewmodel)) {
            this.viewmodel.assignParent(this);
        }
        this._disposables.push(this.viewmodel);
        var subscription = this.collapsed.subscribe((newVal) => {
            if (!newVal) {
                subscription.dispose();
                this.editorCreated(true);
            }
        });
        this._disposables.push(subscription);
        if (textToSearch) {
            this._disposables.push(this.visibleByName = external_ko_["computed"](() => {
                var visible = !!findMatchesInString(this.displayName(), textToSearch());
                if (!Object(_utils["c" /* isEmptyObject */])(this.viewmodel)) {
                    this.viewmodel._editors().forEach((editor) => editor.isParentSearched(visible));
                }
                return visible;
            }));
            this.isSearchedProperty['dispose'] && this.isSearchedProperty['dispose']();
            this._disposables.push(this.isSearchedProperty = external_ko_["computed"](() => {
                if (this.visibleByName())
                    return true;
                var visibleByEditors = this.viewmodel.visible();
                visibleByEditors && this.collapsed(false);
                return visibleByEditors;
            }));
        }
    }
    createObjectProperties() {
        return new propertygrid_ObjectProperties(this.value, { editors: external_ko_["computed"](() => { var _a, _b; return ((_a = this.value()) === null || _a === void 0 ? void 0 : _a.getInfo) && ((_b = this.value()) === null || _b === void 0 ? void 0 : _b.getInfo()) || this.info().info; }) }, this.level + 1, this.disabled, undefined, this.textToSearch, this._popupService);
    }
    registerAccessibilityProvider(accessibilityProvider) {
        super.registerAccessibilityProvider(accessibilityProvider);
        this.viewmodel.registerAccessibilityProvider(accessibilityProvider);
    }
}
class PropertyGridEditorFlat extends propertygrid_PropertyGridEditor {
    createObjectProperties() {
        this.collapsed(false);
        this.editorCreated(true);
        this.level = -1;
        return super.createObjectProperties();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/tabPanel.js








class tabPanel_TabPanel extends utils["a" /* Disposable */] {
    constructor(options) {
        super();
        this.tabs = [];
        this.collapsed = external_ko_["observable"](false);
        this.position = external_ko_["observable"](tabPanel_TabPanel.Position.Right);
        this.toggleCollapsedText = external_ko_["pureComputed"](() => {
            var actionString = this.collapsed() ? 'Open' : 'Collapse';
            return Object(localization_utils["c" /* getLocalization */])(actionString, 'ASPxReportsStringId.SidePanel_' + actionString);
        });
        this.cssClasses = (extendOptions) => {
            return Object(_utils["b" /* extend */])({
                'dxrd-tab-panel-left': this.position() === tabPanel_TabPanel.Position.Left,
                'dxrd-tab-panel-right': this.position() === tabPanel_TabPanel.Position.Right,
                'dxrd-tab-panel-empty': this.isEmpty()
            }, extendOptions);
        };
        var tabs = options.tabs;
        var autoSelectTab = options.autoSelectTab;
        if (options.rtl)
            this.position(tabPanel_TabPanel.Position.Left);
        var zoomFactor = accessibilityFontSizeZoomFactor();
        var _self = this;
        this.tabs = tabs;
        if (tabs && tabs.length) {
            this._disposables.push(this.isEmpty = external_ko_["computed"](() => this.tabs.every(tab => !tab.visible())));
            this.tabs.forEach(tab => {
                tab.collapsed = this.collapsed;
            });
        }
        else
            this.isEmpty = external_ko_["observable"](true);
        this._disposables.push(external_ko_["computed"](() => {
            var visibleTabs = tabs.filter((tab) => { return tab.visible(); });
            if (visibleTabs.length !== 0) {
                if (visibleTabs.filter((tab) => { return tab.active.peek(); }).length === 0) {
                    visibleTabs[0].active(true);
                    if (autoSelectTab) {
                        this.collapsed(true);
                    }
                }
            }
            else {
                this.collapsed(true);
            }
        }));
        this._disposables.push(external_ko_["computed"](() => {
            var disabledTabs = tabs.filter((tab) => { return tab.disabled(); });
            if (disabledTabs.length !== 0) {
                if (disabledTabs.filter((tab) => { return tab.active.peek(); }).length !== 0) {
                    disabledTabs.forEach(t => t.active(false));
                    var nextSelectedTab = tabs.filter((tab) => { return !tab.disabled.peek() && tab.visible.peek(); })[0];
                    if (nextSelectedTab) {
                        this.selectTab({ model: nextSelectedTab });
                    }
                }
            }
        }));
        if (autoSelectTab) {
            this.tabs.forEach((tab) => {
                this._disposables.push(tab.active.subscribe((newVal) => {
                    if (newVal) {
                        this.selectTab({ model: tab });
                    }
                }));
            });
        }
        this.toggleTabVisibility = (e) => {
            var selectedTab = e.model;
            var activeTab = this.tabs.filter((tab) => tab.active())[0];
            if (selectedTab === activeTab) {
                this.collapsed(!this.collapsed());
            }
            else {
                this.selectTab(e);
            }
        };
        this.selectTab = (e) => {
            var selectedTab = e.model;
            if (!selectedTab.disabled()) {
                this.tabs.forEach(function (tab) {
                    tab.active(tab === selectedTab);
                });
                this.collapsed(false);
            }
        };
        var _width = external_ko_["observable"]((options.width || 370) * zoomFactor);
        this._disposables.push(this.width = external_ko_["pureComputed"]({
            read: () => { return this.collapsed() ? 0 : _width(); },
            write: (newWidth) => { _width(newWidth); }
        }));
        this._disposables.push(this.headerWidth = external_ko_["pureComputed"](() => { return this.isEmpty() ? 0 : (50 * zoomFactor + (this.collapsed() ? 0 : this.width())); }));
        this.getResizableOptions = ($element, panelOffset, minWidth) => {
            if (!this._resizableOptions || this._resizableOptions.$element !== $element) {
                this._resizableOptions = getResizableOptions($element, zoomFactor * panelOffset, minWidth, _self.position(), tabPanel_TabPanel.Position.Left, _self.width, _self.collapsed);
                _self._disposables.push(_self.position.subscribe((newVal) => {
                    this._resizableOptions.handles(newVal === tabPanel_TabPanel.Position.Left ? 'e' : 'w');
                }));
                _self._disposables.push(_self.collapsed.subscribe((isCollapsed) => {
                    this._resizableOptions.minimumWidth(isCollapsed ? 0 : minWidth);
                }));
            }
            return this._resizableOptions;
        };
        this._disposables.push({
            dispose: () => {
                this._resizableOptions = null;
                this.getResizableOptions = null;
            }
        });
        this._disposables.push(this.toggleCollapsedImage = external_ko_["pureComputed"](() => {
            var postfix = this.collapsed() ? '-expand' : '-collapse';
            return { class: 'dxrd-image-propertygrid' + postfix, template: 'dxrd-svg-tabs' + postfix };
        }));
        this.keyboardHelper = new _rightPanelKeyboardHelper_RightPanelKeyboardHelper(this);
        this._disposables.push(this.toggleCollapsedText, this.keyboardHelper);
    }
    dispose() {
        super.dispose();
        this.disposeArray(this.tabs);
    }
}
tabPanel_TabPanel.Position = {
    Left: 'Left',
    Right: 'Right'
};
class tabPanel_TabInfo extends utils["a" /* Disposable */] {
    constructor(options) {
        super();
        this.active = external_ko_["observable"](false);
        this.visible = external_ko_["observable"]();
        this.disabled = external_ko_["observable"]();
        var imageBaseName = options.imageClassName || options.text.toLowerCase();
        this._text = options.text;
        this._localizationId = options.localizationId;
        this._disposables.push(this.imageClassName = external_ko_["pureComputed"](() => {
            return 'dxrd-image-' + imageBaseName;
        }));
        this.imageTemplateName = options.imageTemplateName || _svgTemplateEngine_SvgTemplatesEngine.getExistingTemplate('dxrd-svg-tabs-' + options.text.toLowerCase());
        this.template = options.template;
        this._disposables.push(options.model, options.keyboardHelper);
        var computedVisible = options.visible;
        var computedDisabled = options.disabled;
        this._disposables.push(this.visible = external_ko_["pureComputed"](() => { return computedVisible !== undefined ? computedVisible() : true; }));
        this._disposables.push(this.disabled = external_ko_["pureComputed"](() => { return computedDisabled !== undefined ? computedDisabled() : false; }));
        this._disposables.push(this.visible.subscribe((visibility) => {
            if (!visibility) {
                this.active(false);
            }
        }));
        computedVisible && this._disposables.push(computedVisible);
        computedDisabled && this._disposables.push(computedDisabled);
        this.model = options.model;
        this.keyboardHelper = options.keyboardHelper;
        if (this.keyboardHelper)
            this._disposables.push(external_ko_["computed"](() => {
                if (this.active() && this.collapsed && !this.collapsed())
                    this.focus();
            }).extend({ rateLimit: 0 }));
    }
    focus() {
        this.keyboardHelper && this.keyboardHelper.focus(document.getElementsByClassName('dxrd-tab-item dxd-state-active')[0]);
    }
    get text() {
        return Object(localization_utils["c" /* getLocalization */])(this._text, this._localizationId);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/propertygrid/_group.js



class _group_Group extends utils["a" /* Disposable */] {
    constructor(name, serializationsInfo, createEditors, collapsed = true, displayName) {
        super();
        this.editors = external_ko_["observableArray"]([]).extend({ deferred: true });
        this.editorsCreated = external_ko_["observable"](false);
        this.editorsRendered = external_ko_["observable"](false);
        this._displayName = name;
        this.displayName = displayName || (() => Object(localization_utils["c" /* getLocalization */])(name));
        this._serializationsInfo = serializationsInfo;
        this.collapsed = external_ko_["observable"](collapsed);
        if (collapsed) {
            var subscription = this.collapsed.subscribe((newVal) => {
                subscription.dispose();
                this.editorsRendered(true);
            });
            this._disposables.push(subscription);
        }
        this.recreate = () => {
            this.editors(createEditors(serializationsInfo));
            if (this._accessibilityProvider) {
                this.editors().forEach((editor) => {
                    editor.registerAccessibilityProvider(this._accessibilityProvider);
                });
            }
        };
        this.editors(createEditors(serializationsInfo));
        this.visible = external_ko_["computed"](() => {
            return this.editors().some(editor => editor.visible());
        });
        this._disposables.push(this.visible);
    }
    resetEditors() {
        this.disposeObservableArray(this.editors);
        this.resetObservableArray(this.editors);
    }
    dispose() {
        super.dispose();
        this.disposeObservableArray(this.editors);
        this.resetObservableArray(this.editors);
    }
    update(viewModel) {
        this._viewModel = viewModel;
        this.editors().forEach((editor) => {
            editor.update(this._viewModel);
        });
    }
    registerAccessibilityProvider(accessibilityProvider) {
        this._accessibilityProvider = accessibilityProvider;
        this.editors().forEach((editor) => {
            editor.registerAccessibilityProvider(accessibilityProvider);
        });
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/internal/_popupService.js

class _popupService_PopupService {
    constructor() {
        this.data = external_ko_["observable"]();
        this.title = external_ko_["observable"]();
        this.visible = external_ko_["observable"](false);
        this.disabled = external_ko_["observable"](false);
        this.actions = external_ko_["observableArray"]([]);
        this.target = external_ko_["observable"]();
    }
}

// EXTERNAL MODULE: external "DevExpress.ui.dxTextBox"
var external_DevExpress_ui_dxTextBox_ = __webpack_require__(31);
var external_DevExpress_ui_dxTextBox_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxTextBox_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/propertygrid/_controlProperties.js







class _controlProperties_ControlProperties extends propertygrid_ObjectProperties {
    constructor(target, editorsInfo, level = 0, useAddons = true) {
        super(target, editorsInfo, level, undefined, undefined, external_ko_["observable"](''), useAddons && new _popupService_PopupService());
        this.focusedItem = external_ko_["observable"]();
        this.editorsRendered = external_ko_["observable"](false);
        this.isSortingByGroups = external_ko_["observable"](true);
        this.isSearching = external_ko_["observable"](false);
        this.allEditorsCreated = external_ko_["observable"](false);
        this.textToSearch = external_ko_["observable"]('');
        this._searchBox = null;
        this.searchPlaceholder = () => Object(_localization["n" /* searchPlaceholder */])();
        this.switchSearchBox = () => {
            if (this.isSearching()) {
                this.isSearching(false);
                this.textToSearch('');
            }
            else {
                this.isSearching(true);
                this._searchBox && this._searchBox.focus();
            }
        };
        this.createGroups(editorsInfo.groups);
        this.update(target());
        this._disposables.push(this.focusedImageClassName = external_ko_["pureComputed"](() => {
            return getImageClassName(target() && target().controlType);
        }));
        var subscription = this.isSortingByGroups.subscribe((newVal) => {
            if (!newVal) {
                this.editorsRendered(true);
                subscription.dispose();
            }
        });
        this._disposables.push(subscription);
        this.focusedItem = target;
        this._disposables.push(target.subscribe((newValue) => {
            if (this.isSearching() && !this.textToSearch())
                this.switchSearchBox();
        }));
        this.displayExpr = (value) => getControlFullName(value);
        var timeout = null;
        this._disposables.push(this.textToSearch.subscribe((newValue) => {
            timeout && clearTimeout(timeout);
            timeout = setTimeout(() => {
                this._textToSearch(newValue);
                newValue && this.groups.forEach(group => group.collapsed() && group.editors().some(editor => editor.isSearchedProperty()) && group.collapsed(false));
            }, 200);
        }));
    }
    getEditors() {
        var editors = super.getEditors();
        var editorNames = editors.map((editor) => { return editor.displayName(); }).sort();
        editors.sort((a, b) => {
            return editorNames.indexOf(a.displayName()) - editorNames.indexOf(b.displayName());
        });
        return editors;
    }
    _update(target, editorsInfo, recreateEditors) {
        this.groups && this.groups.forEach((group) => {
            if (group.editors().length === 0)
                group.recreate();
        });
        return super._update(target, editorsInfo, recreateEditors);
    }
    cleanEditors() {
        super.cleanEditors();
        this.groups.forEach(x => x.resetEditors());
    }
    dispose() {
        super.dispose();
        this.disposeArray(this.groups);
        this.disposeObservableArray(this._editors);
        this.resetObservableArray(this._editors);
        this.cleanSubscriptions();
        this._searchBox = null;
        this.focusedItem = null;
    }
    createGroups(groups) {
        this.groups = Object.keys(groups).map((name) => {
            return new _group_Group(name, groups[name].info, (serializationInfo) => {
                return serializationInfo
                    .filter(info => !!info.editor)
                    .map(info => {
                    var editor = this.findEditorByInfo(info);
                    if (editor)
                        return editor;
                    editor = this.createEditor(info);
                    this._editors.push(editor);
                    return editor;
                });
            }, true, groups[name].displayName);
        });
        this._disposables.push.apply(this._disposables, this.groups);
    }
    registerAccessibilityProvider(accessibilityProvider) {
        super.registerAccessibilityProvider(accessibilityProvider);
        this.groups.forEach((group) => {
            group.registerAccessibilityProvider(accessibilityProvider);
        });
    }
    searchBox($element) {
        this._searchBox = external_DevExpress_ui_dxTextBox_default.a.getInstance($element.get(0));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_designerCreator.js











class _designerCreator_DesignerContextGeneratorInternal {
    constructor(_context, _rtl) {
        this._context = _context;
        this._rtl = _rtl;
    }
    addElement(propertyName, model) {
        this._context[propertyName] = model;
        return this;
    }
    addUndoEngine(undoEngine = external_ko_["observable"](new undoengine_UndoEngine(this._context.model))) {
        this._context.undoEngine = undoEngine;
        return this;
    }
    addSurface(surface) {
        this._context.surface = surface;
        return this;
    }
    getContext() {
        return this._context;
    }
}
class DesignerContextGenerator {
    constructor(_rtl) {
        this._rtl = _rtl;
    }
    addModel(model) {
        return new _designerCreator_DesignerContextGeneratorInternal({ model: model }, this._rtl);
    }
}
class _designerCreator_ResizeSettings extends utils["a" /* Disposable */] {
    get handler() { return this._handler; }
    set handler(newVal) {
        this._disposables.push(newVal);
        this._handler = newVal;
    }
    generate() {
        var result = {};
        if (this.handler)
            result['resizeHandler'] = this.handler;
        return result;
    }
}
class _designerCreator_ContextActionsSettings extends utils["a" /* Disposable */] {
    _actionUndoEngineWrappingFunction(contextActions, undoEngine) {
        return createActionWrappingFunction('WrapWithUndoEngine', (model, handler) => {
            undoEngine().start();
            handler(model);
            undoEngine().end();
        })(contextActions);
    }
    _collectActions(editableObj, undoEngine) {
        var editable = editableObj(), contextActions = [];
        this.actionProviders.forEach(actionProvider => {
            contextActions.push.apply(contextActions, actionProvider.getActions(editable));
        });
        this._actionUndoEngineWrappingFunction(contextActions, undoEngine);
        return contextActions;
    }
    get actionProviders() {
        return this._actionProviders;
    }
    set actionProviders(val) {
        this._disposables.push.apply(this._disposables, val);
        this._actionProviders = val;
    }
    get actions() {
        return this._actions;
    }
    set actions(val) {
        this._disposables.push(val);
        this._actions = val;
    }
    get groupActions() {
        return this._groupActions;
    }
    set groupActions(val) {
        this._disposables.push(val);
        this._groupActions = val;
    }
    createDefaultActions(editableObj, undoEngine) {
        this.actions = external_ko_["computed"](() => {
            return this._collectActions(editableObj, undoEngine);
        });
    }
    createDefaultGroupAction(editableObj, undoEngine) {
        this.groupActions = external_ko_["computed"](() => {
            return collectGroupsFromFlatList(this._collectActions(editableObj, undoEngine), (x) => x.group && x.group());
        });
    }
    generate() {
        var result = {};
        if (this.actionProviders)
            result['contextActionProviders'] = this.actionProviders;
        if (this.actions)
            result['contextActions'] = this.actions;
        if (this.groupActions)
            result['contextGroupActions'] = this.groupActions;
        return result;
    }
}
class _designerCreator_DragDropSettings extends utils["a" /* Disposable */] {
    constructor() {
        super(...arguments);
        this._model = {};
    }
    get dragHelperContent() {
        return this._dragHelperContent;
    }
    set dragHelperContent(val) {
        this._disposables.push(val);
        this._dragHelperContent = val;
    }
    get dragDropStarted() {
        return this._dragDropStarted;
    }
    set dragDropStarted(val) {
        this._disposables.push(val);
        this._dragDropStarted = val;
    }
    addDragDropHandler(propertyName, handler) {
        this._disposables.push(handler);
        this._model[propertyName] = handler;
    }
    generate() {
        var result = this._model;
        if (this.dragHelperContent)
            result['dragHelperContent'] = this.dragHelperContent;
        if (this.dragDropStarted)
            result['dragDropStarted'] = this.dragDropStarted;
        return result;
    }
}
class _designerCreator_ControlsHelperSettings extends utils["a" /* Disposable */] {
    constructor(_selection, _context) {
        super();
        this._selection = _selection;
        this._context = _context;
        this._model = {};
    }
    generate() {
        var result = this._model;
        if (this.controlsHelper)
            result['controlsHelper'] = this.controlsHelper;
        return result;
    }
    addControlsHelper(helper) {
        this.controlsHelper = helper || new _controlsHelper_DesignControlsHelper(this._context.model, [{
                added: (control) => { },
                deleted: (control) => { control.surface === this._selection.focused() && this._selection.focused(control.surface.findNextSelection()); }
            }]);
        this._disposables.push(this.controlsHelper);
        return this;
    }
    addControlsStore(store) {
        store = store || new _stores_ControlsStore(this.controlsHelper.allControls);
        this._disposables.push(store);
        this._model['controlsStore'] = store;
        return this;
    }
}
class _designerCreator_MenuSettings extends utils["a" /* Disposable */] {
    constructor() {
        super(...arguments);
        this.stopPropagation = false;
    }
    generate() {
        var result = {};
        if (this.appMenuVisible)
            result['appMenuVisible'] = this.appMenuVisible;
        if (this.toggleAppMenu)
            result['toggleAppMenu'] = this.toggleAppMenu;
        if (this.getMenuPopupContainer)
            result['getMenuPopupContainer'] = this.getMenuPopupContainer;
        if (this.getMenuPopupTarget)
            result['getMenuPopupTarget'] = this.getMenuPopupTarget;
        result['stopPropagation'] = this.stopPropagation;
        return result;
    }
    get appMenuVisible() {
        return this._appMenuVisible;
    }
    set appMenuVisible(val) {
        this._disposables.push(val);
        this._appMenuVisible = val;
    }
}
class _designerCreator_SelectionSettings extends utils["a" /* Disposable */] {
    constructor() {
        super(...arguments);
        this._dragDropSettings = new _designerCreator_DragDropSettings();
        this._resizeSettings = new _designerCreator_ResizeSettings();
    }
    dispose() {
        this._editableObject(null);
        super.dispose();
        this.removeProperties();
    }
    get selection() {
        return this._selection;
    }
    set selection(val) {
        this._disposables.push(val);
        this._selection = val;
    }
    get snapHelper() {
        return this._snapHelper;
    }
    set snapHelper(val) {
        this._disposables.push(val);
        this._snapHelper = val;
    }
    get editableObject() {
        return this._editableObject;
    }
    set editableObject(val) {
        this._disposables.push(val);
        this._editableObject = val;
    }
    addDragDrop(func) {
        func(this._dragDropSettings);
        this._disposables.push(this._dragDropSettings);
    }
    addResize(func) {
        func(this._resizeSettings);
        this._disposables.push(this._resizeSettings);
    }
    generate() {
        var result = {};
        if (this.selection)
            result['selection'] = this.selection;
        if (this.snapHelper)
            result['snapHelper'] = this.snapHelper;
        if (this.editableObject)
            result['editableObject'] = this.editableObject;
        return Object(_utils["b" /* extend */])(result, this._dragDropSettings.generate(), this._resizeSettings.generate());
    }
}
class _designerCreator_CommonDesignerGenerator extends utils["a" /* Disposable */] {
    constructor(_context, _rtl) {
        super();
        this._context = _context;
        this._rtl = _rtl;
        this._model = {};
        this._selectionSettings = new _designerCreator_SelectionSettings();
        this._model.rtl = this._rtl;
        this._model.dispose = () => {
            this.dispose();
        };
    }
    _createPopularProperties(info, popularProperties) {
        var properties = [];
        popularProperties.forEach((name) => {
            var property = info.filter((propertyInfo) => { return propertyInfo.propertyName === name; })[0];
            if (property) {
                properties.push(property);
            }
        });
        return properties;
    }
    _resetModel() {
        Object.keys(this._model).forEach((propertyName) => {
            if (propertyName !== 'dispose')
                delete this._model[propertyName];
        });
    }
    get rtl() {
        return this._rtl;
    }
    set rtl(newVal) {
        this._rtl = newVal;
        this._model.rtl = newVal;
    }
    dispose() {
        super.dispose();
        this._resetModel();
    }
    initializeContext(context) {
        this._context = context;
        return this;
    }
    getPropertyByName(propertyName) {
        return this._model[propertyName];
    }
    addElement(propertyName, elementFunc) {
        this._model[propertyName] = elementFunc();
        this._disposables.push(this._model[propertyName]);
        return this;
    }
    mapOnContext() {
        this._model.model = this._context.model;
        this._model.surface = this._context.surface;
        this._model.undoEngine = this._context.undoEngine;
        return this;
    }
    addSelection(func) {
        func(this._selectionSettings);
        this._disposables.push(this._selectionSettings);
        Object(_utils["b" /* extend */])(this._model, this._selectionSettings.generate());
        return this;
    }
    addPropertyGrid(propertyGrid, propertyName = 'propertyGrid') {
        this._model[propertyName] = propertyGrid && propertyGrid();
        this._disposables.push(this._model[propertyName]);
        return this;
    }
    addDisposableContainer() {
        this._model.disposableContainer = new utils["a" /* Disposable */]();
        this._model.addDisposables = (...elem) => this._model.disposableContainer._disposables.push(...elem);
        return this;
    }
    addControlProperties(editors, groups, accessibilityProvider) {
        return this.addPropertyGrid(() => this.createControlProperties(editors, groups, accessibilityProvider));
    }
    createControlProperties(editors, groups, accessibilityProvider) {
        var properties = new _controlProperties_ControlProperties(this._model.editableObject, { groups: groups, editors: editors }, null);
        if (accessibilityProvider)
            properties.registerAccessibilityProvider(accessibilityProvider);
        return properties;
    }
    addPopularProperties(controlsFactory, accessibilityProvider) {
        return this.addPropertyGrid(() => {
            var properties = new propertygrid_ObjectProperties(external_ko_["pureComputed"](() => {
                var popularPropertiesObject = { getInfo: () => { return []; } }, editable = this._model.editableObject();
                if (editable) {
                    var controlInfo = controlsFactory.controlsMap[editable.controlType], propertiesInfo = this._createPopularProperties(controlInfo && controlInfo.info || [], controlInfo && controlInfo.popularProperties || []);
                    (propertiesInfo).forEach(item => {
                        if (item.propertyName in editable)
                            popularPropertiesObject[item.propertyName] = editable[item.propertyName];
                    });
                    popularPropertiesObject.getInfo = () => {
                        return propertiesInfo;
                    };
                    popularPropertiesObject['root'] = editable.root;
                    popularPropertiesObject['actions'] = editable.actions;
                    popularPropertiesObject['actionProviders'] = editable.actionProviders;
                    popularPropertiesObject['getPath'] = (propertyName) => { return editable.getPath && editable.getPath(propertyName) || ''; };
                    popularPropertiesObject['getModel'] = () => editable;
                    popularPropertiesObject['isPropertyModified'] = (name) => {
                        return editable.isPropertyModified ? editable.isPropertyModified(name) : false;
                    };
                    popularPropertiesObject['getActionClassName'] = (name) => {
                        return editable['getActionClassName'] ? editable['getActionClassName'](name) : '';
                    };
                    popularPropertiesObject['getMenuBoxTemplate'] = (name) => {
                        return editable['getMenuBoxTemplate'] ? editable['getMenuBoxTemplate'](name) : '';
                    };
                    popularPropertiesObject['isPropertyVisible'] = (propertyName) => {
                        return editable['isPropertyVisible'] ? editable['isPropertyVisible'](propertyName, true) : true;
                    };
                    popularPropertiesObject['isPropertyHighlighted'] = (propertyName) => {
                        return editable['isPropertyHighlighted'] ? editable['isPropertyHighlighted'](propertyName) : false;
                    };
                    popularPropertiesObject['isPropertyDisabled'] = (name) => {
                        return editable.isPropertyDisabled ? editable.isPropertyDisabled(name) : false;
                    };
                    popularPropertiesObject['isSame'] = x => x === editable;
                    ['name', 'displayName'].forEach((propertyName) => {
                        if (propertyName in editable) {
                            popularPropertiesObject[propertyName] = editable[propertyName];
                        }
                    });
                }
                return popularPropertiesObject;
            }), undefined, undefined, undefined);
            if (accessibilityProvider)
                properties.registerAccessibilityProvider(accessibilityProvider);
            return properties;
        }, 'popularProperties');
    }
    addToolboxItems(items) {
        this._model.toolboxItems = items && items();
        return this;
    }
    addGroupedToolboxItems() {
        this._model.groupedToolboxItems = collectGroupsFromFlatList(this._model.toolboxItems, (item) => item.info.group);
        return this;
    }
    addTabPanel(panel, addTabInfo = () => []) {
        var panelModel = panel && panel() || new tabPanel_TabPanel({ tabs: addTabInfo(), rtl: this._rtl, width: 375 });
        this._model.tabPanel = panelModel;
        this._disposables.push(panelModel);
        return this;
    }
    addIsLoading(isLoadingFunc = () => external_ko_["observable"](true)) {
        this._model.isLoading = isLoadingFunc();
        this._disposables.push(this._model.isLoading);
        return this;
    }
    addControlsHelper(func) {
        var settings = new _designerCreator_ControlsHelperSettings(this._selectionSettings.selection, this._context);
        func(settings);
        this._disposables.push(settings);
        Object(_utils["b" /* extend */])(this._model, settings.generate());
        return this;
    }
    addMenu(func) {
        var settings = new _designerCreator_MenuSettings();
        func(settings);
        this._disposables.push(settings);
        Object(_utils["b" /* extend */])(this._model, settings.generate());
        return this;
    }
    addContextActions(func) {
        var settings = new _designerCreator_ContextActionsSettings();
        func(settings);
        this._disposables.push(settings);
        Object(_utils["b" /* extend */])(this._model, settings.generate());
        return this;
    }
    addParts(func = (parts) => parts, useDefaults = true) {
        var parts = [];
        if (useDefaults)
            parts = generateDefaultParts(this._model);
        this._model.parts = func(parts);
        return this;
    }
    getModel() {
        return this._model;
    }
    addActionList(actionListsFunc) {
        var actionLists = actionListsFunc && actionListsFunc() || new _actionList_ActionLists(this._context.surface, this._selectionSettings.selection, this._context.undoEngine, () => { });
        this._disposables.push(actionLists);
        this._model.actionLists = actionLists;
        return this;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/fonteditor/_fonts.js

var availableFonts = external_ko_["observable"]({});

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_designerInitializer.js















function createDesigner(model, surface, controlsFactory, groups = {}, editors = [], parts, rtl, selection, designControlsHelper, undoEngine, customMerge, snapLinesCollector, groupLocalizationIDs) {
    var context = new DesignerContextGenerator(rtl)
        .addModel(model)
        .addSurface(surface)
        .addUndoEngine(undoEngine)
        .getContext();
    var designerGenerator = new _designerCreator_CommonDesignerGenerator(context, rtl);
    return designerGenerator
        .addDisposableContainer()
        .mapOnContext()
        .addSelection((settings) => {
        settings.selection = selection || new _selection_SurfaceSelection();
        settings.snapHelper = new _snapLinesHelper_SnapLinesHelper(surface, _snapLinesHelper_SnapLinesHelper.snapTolerance, snapLinesCollector || new _snapLinesCollector_SnapLinesCollector());
        settings.editableObject = _combinedObj_CombinedObject.getEditableObject(settings.selection, context.undoEngine, customMerge).extend({ throttle: 1 });
        settings.addDragDrop((dragDropSettings) => {
            dragDropSettings.dragHelperContent = new _dragHelperContent_DragHelperContent(settings.selection);
            dragDropSettings.dragDropStarted = _dragDropHandler_DragDropHandler.started;
            dragDropSettings.addDragDropHandler('dragHandler', new _selectionDragDropHandler_SelectionDragDropHandler(context.surface, settings.selection, context.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent));
            dragDropSettings.addDragDropHandler('toolboxDragHandler', new _toolboxDragDropHandler_ToolboxDragDropHandler(context.surface, settings.selection, context.undoEngine, settings.snapHelper, dragDropSettings.dragHelperContent, controlsFactory));
        });
        settings.addResize((resizeSettings) => {
            resizeSettings.handler = {
                starting: () => {
                    selection.expectClick = true;
                    context.undoEngine().start();
                },
                stopped: () => {
                    context.undoEngine().end();
                    setTimeout(() => { selection.expectClick = false; }, 100);
                },
                disabled: _dragDropHandler_DragDropHandler.started,
                snapHelper: settings.snapHelper
            };
        });
    })
        .addToolboxItems(() => getToolboxItems(controlsFactory.controlsMap))
        .addIsLoading()
        .addControlProperties(editors, groups)
        .addPopularProperties(controlsFactory)
        .addControlsHelper((settings) => {
        settings
            .addControlsHelper(designControlsHelper)
            .addControlsStore();
    })
        .addTabPanel(undefined, () => {
        return [
            new tabPanel_TabInfo({
                text: 'Properties',
                template: 'dxrd-propertiestab',
                model: designerGenerator.getModel().propertyGrid,
                localizationId: 'AnalyticsCoreStringId.Cmd_Properties',
                visible: external_ko_["pureComputed"](() => { return !!model(); }),
                disabled: external_ko_["pureComputed"](() => { return designerGenerator.getModel().propertyGrid.focusedItem() instanceof Array; }).extend({ throttle: 100 })
            })
        ];
    })
        .addContextActions((settings) => {
        settings.actionProviders = [];
        settings.createDefaultActions(designerGenerator.getModel().editableObject, designerGenerator.getModel().undoEngine);
    })
        .addMenu((settings) => {
        settings.appMenuVisible = external_ko_["observable"](false);
        settings.toggleAppMenu = function () {
            settings.appMenuVisible(!settings.appMenuVisible());
        };
        settings.getMenuPopupContainer = (el) => $.fn.constructor(el).closest('.dxrd-menu-button').prev('.dxrd-menu-container');
        settings.getMenuPopupTarget = (el) => $.fn.constructor(el).closest('.dxrd-menu-button').find('.dxrd-menu-place');
    })
        .addElement('inlineTextEdit', () => new _inlineTextEdit_InlineTextEdit(designerGenerator.getModel().selection))
        .addElement('actionsGroupTitle', () => () => Object(localization_utils["c" /* getLocalization */])('Actions', 'AnalyticsCoreStringId.Actions'))
        .addElement('updateFont', () => (values) => {
        availableFonts(Object.assign(Object.assign({}, availableFonts()), values));
    })
        .addElement('sortFont', () => () => {
        var sortedObj = {};
        var fonts = availableFonts.peek();
        Object.keys(fonts).sort((a, b) => { return a.localeCompare(b); }).forEach(key => sortedObj[key] = fonts[key]);
        availableFonts(sortedObj);
    })
        .addElement('surfaceSize', () => external_ko_["observable"](0))
        .addElement('popularVisible', () => external_ko_["pureComputed"](() => {
        return designerGenerator.getModel().popularProperties._editors().some((x) => { return x.visible(); }) ||
            designerGenerator.getModel().contextActions && designerGenerator.getModel().contextActions().length > 0;
    }))
        .addActionList()
        .addParts()
        .getModel();
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/_fieldListProvider.js

class _fieldListProvider_FieldListProvider {
    constructor(fieldListCallback, rootItems, extenders, rootItemsNoDragable = false) {
        this.deferreds = [];
        this._extenders = extenders;
        this.getItems = (pathRequest) => {
            var result = external_jQuery_["Deferred"]();
            var items = [];
            if (this._beforeFieldListCallback(pathRequest, items)) {
                result.resolve(items);
            }
            else if (rootItems && !pathRequest.fullPath) {
                items.push.apply(items, external_jQuery_["map"](rootItems(), (item) => {
                    var _el = { name: item.id || item.ref, displayName: item.name, isList: true, specifics: item.specifics || 'ListSource', dragData: { noDragable: false } };
                    if (rootItemsNoDragable)
                        delete _el.dragData;
                    return _el;
                }));
                this._afterFieldListCallBack(pathRequest, items);
                result.resolve(items);
            }
            else {
                this._patchRequest(pathRequest, rootItems);
                this.deferreds.push(result);
                fieldListCallback(pathRequest).done((fields) => {
                    items.push.apply(items, fields);
                    this._afterFieldListCallBack(pathRequest, items);
                    result.resolve(items);
                })
                    .fail((error) => result.reject(error))
                    .always(() => this.deferreds.splice(this.deferreds.indexOf(result), 1));
            }
            return result.promise();
        };
        this.dispose = () => {
            this.getItems = null;
            fieldListCallback = null;
            this.deferreds.forEach(result => result.reject());
        };
    }
    _patchRequest(request, dataSources) {
        if (!dataSources) {
            return;
        }
        var dss = dataSources.peek();
        for (var i = 0; i < dss.length; i++) {
            if (dss[i].id === request.id && !!request.id) {
                request.ref = undefined;
                return;
            }
            if (dss[i].ref === request.ref && !!request.ref) {
                request.id = undefined;
                return;
            }
        }
    }
    _beforeFieldListCallback(request, items) {
        return !!this._extenders && this._extenders.some((extender) => { return extender.beforeItemsFilled(request, items); });
    }
    _afterFieldListCallBack(request, items) {
        this._extenders && this._extenders.forEach((extender) => { extender.afterItemsFilled && extender.afterItemsFilled(request, items); });
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/bordereditor/_bordereditor.js


class _bordereditor_BordersModel extends utils["a" /* Disposable */] {
    constructor(object) {
        super();
        this.left = external_ko_["observable"](false);
        this.right = external_ko_["observable"](false);
        this.top = external_ko_["observable"](false);
        this.bottom = external_ko_["observable"](false);
        this.disabled = object.disabled || external_ko_["observable"](false);
        this.value = object.value;
        this.updateModel(object.value());
        this._disposables.push(object.value.subscribe((newVal) => {
            this.updateModel(newVal);
        }));
    }
    _setAllValues(value) {
        this.left(value), this.bottom(value), this.right(value), this.top(value);
    }
    setValue(name) {
        if (this.disabled())
            return;
        this[name](!this[name]());
        this.updateValue();
    }
    setAll() {
        if (this.disabled())
            return;
        this._setAllValues(true);
        this.updateValue();
    }
    setNone() {
        if (this.disabled())
            return;
        this._setAllValues(false);
        this.updateValue();
    }
    updateModel(value) {
        var val = value || 'None';
        if (val.indexOf('All') !== -1) {
            this._setAllValues(true);
        }
        else if (val.indexOf('None') !== -1) {
            this._setAllValues(false);
        }
        else {
            this.left(val.indexOf('Left') !== -1);
            this.top(val.indexOf('Top') !== -1);
            this.right(val.indexOf('Right') !== -1);
            this.bottom(val.indexOf('Bottom') !== -1);
        }
    }
    updateValue() {
        var result = [];
        if (this.left() && this.right() && this.top() && this.bottom()) {
            result.push('All');
        }
        else if (!this.left() && !this.right() && !this.top() && !this.bottom()) {
            result.push('None');
        }
        else {
            this.left() ? result.push('Left') : null;
            this.right() ? result.push('Right') : null;
            this.top() ? result.push('Top') : null;
            this.bottom() ? result.push('Bottom') : null;
        }
        this.value(result.join(','));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/bordereditor/_binding.js





external_ko_["bindingHandlers"]['dxBorderEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        external_jQuery_["fn"].constructor(element).children().remove();
        var templateHtml = getTemplate('dxrd-bordereditor'), $element = external_jQuery_["fn"].constructor(element).append(templateHtml);
        var model = new _bordereditor_BordersModel(valueAccessor());
        external_ko_["applyBindings"]({ value: model }, $element.children()[0]);
        Object(_internal["c" /* addDisposeCallback */])(element, () => model.dispose());
        return { controlsDescendantBindings: true };
    }
};

// EXTERNAL MODULE: external "DevExpress.registerComponent"
var external_DevExpress_registerComponent_ = __webpack_require__(22);
var external_DevExpress_registerComponent_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_registerComponent_);

// EXTERNAL MODULE: external "DevExpress.ui.dxButton"
var external_DevExpress_ui_dxButton_ = __webpack_require__(43);
var external_DevExpress_ui_dxButton_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxButton_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/_buttonInlineEditor.js





var editor_template = {
    render: function (options) {
        var $icon = external_jQuery_["fn"].constructor('<i />').addClass('dx-icon');
        if (!!options.model.iconClass) {
            $icon.addClass(options.model.iconClass);
            $icon.addClass('dx-icon-' + options.model.iconClass);
            $icon.addClass('dx-icon-dxrd');
        }
        else if (!!options.model.icon) {
            $icon.addClass(options.model.icon);
        }
        if (options.model.icon) {
            $icon.attr('data-bind', "template: '" + options.model.icon + "'");
        }
        var icon = $icon.get(0);
        external_jQuery_["fn"].constructor(options.container).append(icon);
        if (options.model.text) {
            var $span = external_jQuery_["fn"].constructor('<span />').addClass('dx-button-text');
            $span.text(options.model.text);
            external_jQuery_["fn"].constructor(options.container).append($span);
        }
        setTimeout(() => {
            if (!external_ko_["dataFor"](icon))
                external_ko_["applyBindings"](options.model, icon);
        }, 1);
    }
};
class _buttonInlineEditor_dxButtonWithTemplate extends external_DevExpress_ui_dxButton_default.a {
    constructor(element, options) {
        options['template'] = editor_template;
        super(element, options);
    }
    _patchOptionValues(options) {
        var patchedOptions = super['_patchOptionValues'].call(this, options);
        var optionsToExtend = { iconClass: options['iconClass'] };
        external_ko_["utils"].extend(patchedOptions.templateData, optionsToExtend);
        return patchedOptions;
    }
}
external_DevExpress_registerComponent_default()('dxButtonWithTemplate', _buttonInlineEditor_dxButtonWithTemplate);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/_actionProvider.js

class _actionProvider_BaseActionsProvider {
    initActions(actions) {
        this.actions = actions;
        this.actions.forEach((action) => {
            if (!action.disabled)
                action.disabled = external_ko_["observable"](false);
        });
    }
    getActions(context) {
        if (this.condition(context)) {
            this.setDisabled && this.setDisabled(context);
            return this.actions;
        }
        return [];
    }
    condition(context) {
        return true;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/_bindings.js












external_ko_["bindingHandlers"]['cssArray'] = {
    'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = external_ko_["utils"].unwrapObservable(valueAccessor());
        for (var i = 0; i < value.length; i++) {
            external_ko_["bindingHandlers"]['css'].update(element, () => { return value[i]; });
        }
    }
};
external_ko_["bindingHandlers"]['selectable'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor();
        var selection = external_ko_["unwrap"](values.selection), options = Object(_utils["b" /* extend */])({ filter: '.dxd-selectable', distance: 1 }, external_ko_["unwrap"](values), {
            selecting: function (event, selectionElement) {
                var _event = { control: external_ko_["dataFor"](selectionElement), cancel: false, ctrlKey: event.ctrlKey };
                selection.selecting(_event);
                if (_event.cancel) {
                    external_jQuery_["fn"].constructor(selectionElement).removeClass('ui-selecting');
                }
            },
            start: (event, element) => {
                selection.clickHandler(null, event);
                selection.expectClick = true;
                selection.started = true;
            },
            stop: () => {
                selection.started = false;
                setTimeout(() => { selection.expectClick = false; }, 100);
                selection.applySelection();
            },
            unselecting: function (event, selectionElement) {
                selection.unselecting(external_ko_["dataFor"](selectionElement));
            }
        });
        const selectable = new selectable_Selectable(element, options);
        var subscriptions = [];
        if (selection.disabled && external_ko_["isSubscribable"](selection.disabled)) {
            subscriptions.push(selection.disabled.subscribe((newVal) => {
                return selectable_Selectable.disabled = newVal;
            }));
        }
        Object(_internal["c" /* addDisposeCallback */])(element, () => {
            selectable.dispose();
            element = null;
            subscriptions.forEach(x => x.dispose());
        });
    }
};
external_ko_["bindingHandlers"]['updateTop'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = valueAccessor();
        var $element = external_jQuery_["fn"].constructor(element);
        var updateTop = (value) => {
            var scaleY = element.getBoundingClientRect().height / element.offsetHeight;
            var top = (value === 0 || !!value) ? value : ($element.prev().position().top / scaleY) + $element.prev().outerHeight();
            $element.css('top', top + 'px');
        };
        var subscription = value.subscribe((newVal) => {
            updateTop(newVal);
        });
        updateTop(value());
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            subscription.dispose();
        });
    }
};
function _getElementOffset(element, containment) {
    if (!element)
        return { top: 0, left: 0 };
    const containmentElement = element.find(containment);
    return {
        top: containmentElement.offset().top,
        left: containmentElement.offset().left
    };
}
external_ko_["bindingHandlers"]['draggable'] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var values = valueAccessor();
        if (!values)
            return;
        var $element = external_jQuery_["fn"].constructor(element), $parent = values.parent && values.parent() || $element.closest('.dx-designer-viewport'), containment = values.containment || '.dxrd-ghost-container', $viewport, $ghostContainerOffset, $containmentOffset, initialScroll = { left: 0, top: 0 }, attachDelta = (ui) => {
            ui['delta'] = {
                left: (($ghostContainerOffset && $ghostContainerOffset.left || 0) - $containmentOffset.left),
                top: ($ghostContainerOffset && $ghostContainerOffset.top || 0) - $containmentOffset.top
            };
            ui['scroll'] = {
                left: $viewport.scrollLeft() - initialScroll.left,
                top: $viewport.scrollTop() - initialScroll.top
            };
        }, options = Object(_utils["b" /* extend */])({}, external_ko_["unwrap"](values), {
            start: function (event, uiElement) {
                _dragDropHandler_DragDropHandler.started(true);
                $viewport = $parent.find('.dxrd-viewport');
                $ghostContainerOffset = $parent.find('.dxrd-ghost-container').offset();
                $containmentOffset = $parent.find(containment).offset();
                initialScroll.left = $viewport.scrollLeft();
                initialScroll.top = $viewport.scrollTop();
                values.startDrag && values.startDrag(external_ko_["dataFor"](uiElement));
            },
            stop: function (event, uiElement) {
                attachDelta(uiElement);
                values.stopDrag(uiElement, external_ko_["dataFor"](uiElement), event);
                _dragDropHandler_DragDropHandler.started(false);
            },
            drag: function (event, uiElement) {
                attachDelta(uiElement);
                values.drag && values.drag(event, uiElement, external_ko_["dataFor"](uiElement));
            },
            helper: function (event, uiElement) {
                let $container;
                var parentOffset = _getElementOffset($parent, options.containment);
                if (values.helper) {
                    $container = values.helper(external_ko_["dataFor"](uiElement), event);
                    if ($container) {
                        $container.css({ 'position': 'absolute' });
                        $container[0].dataset.startLeftPosition = convertToCssPixelUnits(event.pageX - parentOffset.left);
                        $container[0].dataset.startTopPosition = convertToCssPixelUnits(event.pageY - parentOffset.top);
                        return $container;
                    }
                }
                var templateHtml = getTemplate(bindingContext.$root.dragHelperContent.template);
                var draggableModel = external_ko_["dataFor"](uiElement);
                $container = external_jQuery_["fn"].constructor(templateHtml).css({ 'display': values.helper ? 'block' : 'none', 'position': 'absolute' });
                $container[0].dataset.startLeftPosition = convertToCssPixelUnits(draggableModel.absolutePosition ? draggableModel.absolutePosition.x() : event.pageX - parentOffset.left);
                $container[0].dataset.startTopPosition = convertToCssPixelUnits(draggableModel.absolutePosition ? draggableModel.absolutePosition.y() : event.pageY - parentOffset.top);
                $container.prependTo($parent.find(options.containment));
                external_ko_["applyBindingsToDescendants"](bindingContext.$root.dragHelperContent, $container[0]);
                return $container;
            }
        });
        options.containment = $parent.find(options.containment);
        setDragOffsetMode(element);
        var draggable = new _draggable_Draggable(element, options);
        Object(_internal["c" /* addDisposeCallback */])(element, () => {
            draggable.dispose();
            element = null;
        });
    }
};
var trackCursorData = 'dxd-track-cursor-data';
var trackCursorClass = 'dxd-track-cursor';
var trackCursorSelector = '.' + trackCursorClass;
var dragHelperLineClass = 'dxrd-drag-helper-item';
external_ko_["bindingHandlers"]['trackCursor'] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var $element = external_jQuery_["fn"].constructor(element);
        $element.addClass(trackCursorClass);
        var value = valueAccessor();
        var recalculateBounds = false;
        if (value['recalculateBounds']) {
            recalculateBounds = value['recalculateBounds'];
            value = value['underCursor'];
        }
        var bounds = element.getBoundingClientRect(), body = document.body, docElem = document.documentElement, overHandler = (event) => {
            if (!(bindingContext.$root.selection.started && bindingContext.$root.resizeHandler.started)) {
                if (!value().isNotDropTarget) {
                    bindingContext.$root.selection.dropTarget = bindingContext.$data;
                    event.stopPropagation();
                }
            }
        }, enterHandler = (event) => {
            value(Object(_utils["b" /* extend */])(value(), { isOver: true }));
            if (!(bindingContext.$root.selection.started && bindingContext.$root.resizeHandler.started)) {
                bounds = element.getBoundingClientRect();
            }
        }, leaveHandler = (event) => {
            value(Object(_utils["b" /* extend */])(value(), { isOver: false }));
        }, handler = (event) => {
            if (recalculateBounds)
                bounds = element.getBoundingClientRect();
            if (!(bindingContext.$root.selection.started && bindingContext.$root.resizeHandler.started)) {
                var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop, scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft, clientTop = docElem.clientTop || body.clientTop || 0, clientLeft = docElem.clientLeft || body.clientLeft || 0, y = event.pageY - (bounds.top + scrollTop - clientTop), x = event.pageX - (bounds.left + scrollLeft - clientLeft);
                value(Object(_utils["b" /* extend */])(value(), { x: x, y: y }));
            }
        };
        element.addEventListener('mousemove', handler);
        !recalculateBounds && element.addEventListener('mouseenter', enterHandler);
        element.addEventListener('mouseover', overHandler);
        element.addEventListener('mouseleave', leaveHandler);
        element.addEventListener('dragover', handler);
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            element.removeEventListener('dragover', handler);
            element.removeEventListener('mousemove', handler);
            element.removeEventListener('mouseover', overHandler);
            element.removeEventListener('mouseleave', leaveHandler);
            !recalculateBounds && element.removeEventListener('mouseenter', enterHandler);
            $element.removeClass(trackCursorClass);
        });
    }
};
external_ko_["bindingHandlers"]['templates'] = {
    init: function (element, valueAccessor) {
        var templateHtml = external_jQuery_["fn"].constructor(valueAccessor()).text(), $templateHtml = external_jQuery_["fn"].constructor(templateHtml);
        external_jQuery_["fn"].constructor(element).append($templateHtml);
        return { controlsDescendantBindings: true };
    }
};
external_ko_["bindingHandlers"]['zoom'] = {
    update: function (element, valueAccessor) {
        var value = external_ko_["unwrap"](valueAccessor() || {});
        for (var i = 0; i < cssTransform.length; i++) {
            element.style[cssTransform[i]] = 'scale(' + (value) + ')';
        }
        external_jQuery_["fn"].constructor(element).addClass('dxrd-transform-origin-left-top');
    }
};
external_ko_["bindingHandlers"]['keyDownActions'] = (() => {
    var handlersManager = new _keyboardHelper_KeyDownHandlersManager(window);
    return {
        init: function (element, valueAccessor) {
            var actionLists = valueAccessor(), handler = (e) => { actionLists.processShortcut(external_ko_["unwrap"](actionLists.toolbarItems), e); };
            if (external_ko_["isSubscribable"](actionLists.enabled)) {
                var subscribe = actionLists.enabled.subscribe((newVal) => {
                    if (newVal)
                        handlersManager.bindHandler(element, handler);
                });
                Object(_internal["c" /* addDisposeCallback */])(element, () => subscribe.dispose());
            }
            if (external_ko_["unwrap"](actionLists.enabled))
                handlersManager.bindHandler(element, handler);
        }
    };
})();
external_ko_["bindingHandlers"]['accessibilityKeyboardHelper'] = (() => {
    return {
        init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
            var handlersManager = valueAccessor();
            if (handlersManager && (bindingContext.$root.accessibilityCompliant || handlersManager.accessibilityCompliantEnabled)) {
                var subscription = external_ko_["bindingEvent"].subscribe(element, 'childrenComplete', function () {
                    handlersManager.bindHandler(element);
                });
                Object(_internal["c" /* addDisposeCallback */])(element, function () {
                    subscription.dispose();
                });
            }
        }
    };
})();
external_ko_["bindingHandlers"]['dxAction'] = (() => {
    return {
        init: (element, valueAccessor) => {
            var values = valueAccessor();
            var clickHandler = function (e) {
                values.action.call(values.model, values.model, e);
            };
            var keyPressHandler = function (e) {
                if (e.key == KeyboardEnum.Enter || e.key == KeyboardEnum.Space) {
                    values.action.call(values.model, values.model, e);
                }
            };
            element.addEventListener('click', clickHandler);
            element.addEventListener('keydown', keyPressHandler);
            Object(_internal["c" /* addDisposeCallback */])(element, function () {
                element.removeEventListener('click', clickHandler);
                element.removeEventListener('keydown', keyPressHandler);
            });
        }
    };
})();
external_ko_["extenders"].dxdnum = function (target, value) {
    target.subscribe((newValue) => {
        newValue = newValue || 0;
        if (!isNaN(value.max)) {
            target(Math.min(newValue, value.max));
        }
        else if (!isNaN(value.min)) {
            target(Math.max(newValue, value.min));
        }
        else {
            target(newValue);
        }
    });
    return target;
};
function setDragOffsetMode(element) {
    const startDragWithOffset = element.parentElement.classList.contains('dxrd-toolbox-item');
    if (startDragWithOffset) {
        element.dataset.startDragWithOffset = 'true';
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/_legacy.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/internal/_codeResolver.js


class _codeResolver_CodeResolver {
    constructor() {
        this._queue = [];
        this._queueObj = {};
        this._done = [];
        this._doneOnce = [];
    }
    clear() {
        this._queue = [];
        this._queueObj = {};
    }
    done(callback) {
        this._done.push(callback);
    }
    doneOnce(callback) {
        this._doneOnce.push(callback);
    }
    _executeNext(id = this._queue[0]) {
        delete this._queueObj[id];
        while (this._queue.length > 0 && !this._queueObj[this._queue[0]]) {
            this._queue.splice(0, 1);
        }
        if (this._queue.length !== 0) {
            this._queueObj[this._queue[0]]();
        }
        else {
            for (var i = 0; i < this._done.length; i++) {
                this._done[i]();
            }
            do {
                var doOnceCallback = this._doneOnce.pop();
                doOnceCallback && doOnceCallback();
            } while (this._doneOnce.length);
        }
    }
    execute(func, time = 0) {
        var id = _utils_guid();
        var $deferred = external_jQuery_["Deferred"]();
        if (time) {
            this._queue.push(id);
            this._queueObj[id] = () => {
                if (!this._queueObj[id])
                    return this._executeNext(id);
                setTimeout(() => {
                    this._queueObj[id] && $deferred.resolve(func());
                    this._executeNext(id);
                }, time);
            };
            if (this._queue.length === 1) {
                this._queueObj[this._queue[0]]();
            }
        }
        else {
            $deferred.resolve(func());
        }
        return {
            dispose: () => (delete this._queueObj[id], $deferred.reject()),
            force: () => (delete this._queueObj[id], $deferred.resolve(func())),
            doNext: () => (this._queue.splice(0, 0, id)),
            $promise: $deferred.promise()
        };
    }
}
var globalResolver = new _codeResolver_CodeResolver();

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/localization/_localizationStringIds.js
var StringId = {
    MasterDetailRelationsEditor: 'DataAccessUIStringId.MasterDetailEditorForm_Title',
    DataAccessBtnOK: 'DataAccessUIStringId.Button_OK',
    DataAccessBtnCancel: 'DataAccessUIStringId.Button_Cancel',
    DataSourceWizardTitle: 'DataAccessUIStringId.WizardTitleDatasource',
    WizardPageConfigureQuery: 'DataAccessUIStringId.WizardPageConfigureQuery'
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/_legacy.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/serializer/_legacy.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/undo-engine/_legacy.js


// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/group.js
var group = __webpack_require__(16);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/tools/_functions.js


var defaultFunctionDisplay = [
    {
        display: 'Aggregate',
        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Aggregate',
        category: 'Aggregate',
        items: {
            Avg: [{ paramCount: 1, text: '[].Avg()', displayName: 'Avg()', descriptionStringId: 'ExpressionEditorStringId.Function_AvgAggregate' }],
            Count: [{ paramCount: 1, text: '[].Count()', displayName: 'Count()', descriptionStringId: 'ExpressionEditorStringId.Function_CountAggregate' }],
            Exists: [{ paramCount: 1, text: '[].Exists()', displayName: 'Exists()', descriptionStringId: 'ExpressionEditorStringId.Function_ExistsAggregate' }],
            Max: [{ paramCount: 1, text: '[].Max()', displayName: 'Max()', descriptionStringId: 'ExpressionEditorStringId.Function_MaxAggregate' }],
            Min: [{ paramCount: 1, text: '[].Min()', displayName: 'Min()', descriptionStringId: 'ExpressionEditorStringId.Function_MinAggregate' }],
            Single: [{ paramCount: 1, text: '[].Single()', displayName: 'Single()', descriptionStringId: 'ExpressionEditorStringId.Function_SingleAggregate' }],
            Sum: [{ paramCount: 1, text: '[].Sum()', displayName: 'Sum()', descriptionStringId: 'ExpressionEditorStringId.Function_SumAggregate' }],
        }
    }, {
        display: 'Date-Time',
        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_DateTime',
        items: {
            LocalDateTimeThisYear: [{ paramCount: 0, text: 'LocalDateTimeThisYear()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisYear' }],
            LocalDateTimeThisMonth: [{ paramCount: 0, text: 'LocalDateTimeThisMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisMonth' }],
            LocalDateTimeLastMonth: [{ paramCount: 0, text: 'LocalDateTimeLastMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastMonth' }],
            LocalDateTimeLastWeek: [{ paramCount: 0, text: 'LocalDateTimeLastWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastWeek' }],
            LocalDateTimeLastYear: [{ paramCount: 0, text: 'LocalDateTimeLastYear()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeLastYear' }],
            LocalDateTimeThisWeek: [{ paramCount: 0, text: 'LocalDateTimeThisWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeThisWeek' }],
            LocalDateTimeYesterday: [{ paramCount: 0, text: 'LocalDateTimeYesterday()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeYesterday' }],
            LocalDateTimeToday: [{ paramCount: 0, text: 'LocalDateTimeToday()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeToday' }],
            LocalDateTimeNow: [{ paramCount: 0, text: 'LocalDateTimeNow()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNow' }],
            LocalDateTimeTomorrow: [{ paramCount: 0, text: 'LocalDateTimeTomorrow()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTomorrow' }],
            LocalDateTimeDayAfterTomorrow: [{ paramCount: 0, text: 'LocalDateTimeDayAfterTomorrow()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeDayAfterTomorrow' }],
            LocalDateTimeNextWeek: [{ paramCount: 0, text: 'LocalDateTimeNextWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextWeek' }],
            LocalDateTimeTwoMonthsAway: [{ paramCount: 0, text: 'LocalDateTimeTwoMonthsAway()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoMonthsAway' }],
            LocalDateTimeTwoYearsAway: [{ paramCount: 0, text: 'LocalDateTimeTwoYearsAway()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoYearsAway' }],
            LocalDateTimeTwoWeeksAway: [{ paramCount: 0, text: 'LocalDateTimeTwoWeeksAway()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeTwoWeeksAway' }],
            LocalDateTimeNextMonth: [{ paramCount: 0, text: 'LocalDateTimeNextMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextMonth' }],
            LocalDateTimeNextYear: [{ paramCount: 0, text: 'LocalDateTimeNextYear()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeNextYear' }],
            LocalDateTimeYearBeforeToday: [{ paramCount: 0, text: 'LocalDateTimeYearBeforeToday()', descriptionStringId: 'ExpressionEditorStringId.Function_LocalDateTimeYearBeforeToday' }],
            InDateRange: [{ paramCount: 3, text: 'InDateRange(, , )', descriptionStringId: 'ExpressionEditorStringId.Function_InDateRange' }],
            IsOutlookIntervalBeyondThisYear: null,
            IsOutlookIntervalNextWeek: null,
            IsOutlookIntervalTomorrow: null,
            IsOutlookIntervalToday: null,
            IsOutlookIntervalYesterday: null,
            IsOutlookIntervalLastWeek: null,
            IsOutlookIntervalPriorThisYear: null,
            IsLastMonth: [{ paramCount: 1, text: 'IsLastMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_IsLastMonth' }],
            IsLastYear: [{ paramCount: 1, text: 'IsLastYear()', descriptionStringId: 'ExpressionEditorStringId.Function_IsLastYear' }],
            IsNextMonth: [{ paramCount: 1, text: 'IsNextMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNextMonth' }],
            IsNextYear: [{ paramCount: 1, text: 'IsNextYear()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNextYear' }],
            IsThisWeek: [{ paramCount: 1, text: 'IsThisWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_IsThisWeek' }],
            IsThisMonth: [{ paramCount: 1, text: 'IsThisMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_IsThisMonth' }],
            IsThisYear: [{ paramCount: 1, text: 'IsThisYear()', descriptionStringId: 'ExpressionEditorStringId.Function_IsThisYear' }],
            IsJanuary: [{ paramCount: 1, text: 'IsJanuary()', descriptionStringId: 'ExpressionEditorStringId.Function_IsJanuary' }],
            IsFebruary: [{ paramCount: 1, text: 'IsFebruary()', descriptionStringId: 'ExpressionEditorStringId.Function_IsFebruary' }],
            IsMarch: [{ paramCount: 1, text: 'IsMarch()', descriptionStringId: 'ExpressionEditorStringId.Function_IsMarch' }],
            IsApril: [{ paramCount: 1, text: 'IsApril()', descriptionStringId: 'ExpressionEditorStringId.Function_IsApril' }],
            IsMay: [{ paramCount: 1, text: 'IsMay()', descriptionStringId: 'ExpressionEditorStringId.Function_IsMay' }],
            IsJune: [{ paramCount: 1, text: 'IsJune()', descriptionStringId: 'ExpressionEditorStringId.Function_IsJune' }],
            IsJuly: [{ paramCount: 1, text: 'IsJuly()', descriptionStringId: 'ExpressionEditorStringId.Function_IsJuly' }],
            IsAugust: [{ paramCount: 1, text: 'IsAugust()', descriptionStringId: 'ExpressionEditorStringId.Function_IsAugust' }],
            IsSeptember: [{ paramCount: 1, text: 'IsSeptember()', descriptionStringId: 'ExpressionEditorStringId.Function_IsSeptember' }],
            IsOctober: [{ paramCount: 1, text: 'IsOctober()', descriptionStringId: 'ExpressionEditorStringId.Function_IsOctober' }],
            IsNovember: [{ paramCount: 1, text: 'IsNovember()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNovember' }],
            IsDecember: [{ paramCount: 1, text: 'IsDecember()', descriptionStringId: 'ExpressionEditorStringId.Function_IsDecember' }],
            IsSameDay: [{ paramCount: 2, text: 'IsSameDay(, )', descriptionStringId: 'ExpressionEditorStringId.Function_IsSameDay' }],
            IsYearToDate: [{ paramCount: 1, text: 'IsYearToDate()', descriptionStringId: 'ExpressionEditorStringId.Function_IsYearToDate' }],
            DateDiffTick: [{ paramCount: 2, text: 'DateDiffTick(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffTick' }],
            DateDiffSecond: [{ paramCount: 2, text: 'DateDiffSecond(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffSecond' }],
            DateDiffMilliSecond: [{ paramCount: 2, text: 'DateDiffMilliSecond(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMilliSecond' }],
            DateDiffMinute: [{ paramCount: 2, text: 'DateDiffMinute(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMinute' }],
            DateDiffHour: [{ paramCount: 2, text: 'DateDiffHour(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffHour' }],
            DateDiffDay: [{ paramCount: 2, text: 'DateDiffDay(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffDay' }],
            DateDiffMonth: [{ paramCount: 2, text: 'DateDiffMonth(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffMonth' }],
            DateDiffYear: [{ paramCount: 2, text: 'DateDiffYear(, )', descriptionStringId: 'ExpressionEditorStringId.Function_DateDiffYear' }],
            GetDate: [{ paramCount: 1, text: 'GetDate()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDate' }],
            GetMilliSecond: [{ paramCount: 1, text: 'GetMilliSecond()', descriptionStringId: 'ExpressionEditorStringId.Function_GetMilliSecond' }],
            GetSecond: [{ paramCount: 1, text: 'GetSecond()', descriptionStringId: 'ExpressionEditorStringId.Function_GetSecond' }],
            GetMinute: [{ paramCount: 1, text: 'GetMinute()', descriptionStringId: 'ExpressionEditorStringId.Function_GetMinute' }],
            GetHour: [{ paramCount: 1, text: 'GetHour()', descriptionStringId: 'ExpressionEditorStringId.Function_GetHour' }],
            GetDay: [{ paramCount: 1, text: 'GetDay()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDay' }],
            GetMonth: [{ paramCount: 1, text: 'GetMonth()', descriptionStringId: 'ExpressionEditorStringId.Function_GetMonth' }],
            GetYear: [{ paramCount: 1, text: 'GetYear()', descriptionStringId: 'ExpressionEditorStringId.Function_GetYear' }],
            GetDayOfWeek: [{ paramCount: 1, text: 'GetDayOfWeek()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDayOfWeek' }],
            GetDayOfYear: [{ paramCount: 1, text: 'GetDayOfYear()', descriptionStringId: 'ExpressionEditorStringId.Function_GetDayOfYear' }],
            GetTimeOfDay: [{ paramCount: 1, text: 'GetTimeOfDay()', descriptionStringId: 'ExpressionEditorStringId.Function_GetTimeOfDay' }],
            Now: [{ paramCount: 0, text: 'Now()', descriptionStringId: 'ExpressionEditorStringId.Function_Now' }],
            UtcNow: [{ paramCount: 0, text: 'UtcNow()', descriptionStringId: 'ExpressionEditorStringId.Function_UtcNow' }],
            Today: [{ paramCount: 0, text: 'Today()', descriptionStringId: 'ExpressionEditorStringId.Function_Today' }],
            AddTimeSpan: [{ paramCount: 2, text: 'AddTimeSpan(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddTimeSpan' }],
            AddTicks: [{ paramCount: 2, text: 'AddTicks(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddTicks' }],
            AddMilliSeconds: [{ paramCount: 2, text: 'AddMilliSeconds(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddMilliSeconds' }],
            AddSeconds: [{ paramCount: 2, text: 'AddSeconds(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddSeconds' }],
            AddMinutes: [{ paramCount: 2, text: 'AddMinutes(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddMinutes' }],
            AddHours: [{ paramCount: 2, text: 'AddHours(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddHours' }],
            AddDays: [{ paramCount: 2, text: 'AddDays(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddDays' }],
            AddMonths: [{ paramCount: 2, text: 'AddMonths(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddMonths' }],
            AddYears: [{ paramCount: 2, text: 'AddYears(, )', descriptionStringId: 'ExpressionEditorStringId.Function_AddYears' }],
        },
    }, {
        display: 'Logical',
        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Logical',
        items: {
            Iif: [{ paramCount: 3, text: 'Iif(, , )', descriptionStringId: 'ExpressionEditorStringId.Function_Iif' }],
            InRange: [{ paramCount: 3, text: 'InRange(, , )', descriptionStringId: 'ExpressionEditorStringId.Function_InRange' }],
            IsNull: [{ paramCount: 1, text: 'IsNull()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNull' }],
            IsNullOrEmpty: [{ paramCount: 1, text: 'IsNullOrEmpty()', descriptionStringId: 'ExpressionEditorStringId.Function_IsNullOrEmpty' }],
        }
    }, {
        display: 'Math',
        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Math',
        items: {
            Abs: [{ paramCount: 1, text: 'Abs()', descriptionStringId: 'ExpressionEditorStringId.Function_Abs' }],
            Sqr: [{ paramCount: 1, text: 'Sqr()', descriptionStringId: 'ExpressionEditorStringId.Function_Sqr' }],
            Cos: [{ paramCount: 1, text: 'Cos()', descriptionStringId: 'ExpressionEditorStringId.Function_Cos' }],
            Sin: [{ paramCount: 1, text: 'Sin()', descriptionStringId: 'ExpressionEditorStringId.Function_Sin' }],
            Atn: [{ paramCount: 1, text: 'Atn()', descriptionStringId: 'ExpressionEditorStringId.Function_Atn' }],
            Exp: [{ paramCount: 1, text: 'Exp()', descriptionStringId: 'ExpressionEditorStringId.Function_Exp' }],
            Log: [
                { paramCount: 1, text: 'Log()', descriptionStringId: 'ExpressionEditorStringId.Function_Log' },
                { paramCount: 2, text: 'Log(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Log_2' },
            ],
            Rnd: [{ paramCount: 0, text: 'Rnd()', descriptionStringId: 'ExpressionEditorStringId.Function_Rnd' }],
            Tan: [{ paramCount: 1, text: 'Tan()', descriptionStringId: 'ExpressionEditorStringId.Function_Tan' }],
            Power: [{ paramCount: 2, text: 'Power(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Power' }],
            Sign: [{ paramCount: 1, text: 'Sign()', descriptionStringId: 'ExpressionEditorStringId.Function_Sign' }],
            Round: [
                { paramCount: 1, text: 'Round()', descriptionStringId: 'ExpressionEditorStringId.Function_Round' },
                { paramCount: 2, text: 'Round(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Round_2' },
            ],
            Ceiling: [{ paramCount: 1, text: 'Ceiling()', descriptionStringId: 'ExpressionEditorStringId.Function_Ceiling' }],
            Floor: [{ paramCount: 1, text: 'Floor()', descriptionStringId: 'ExpressionEditorStringId.Function_Floor' }],
            Max: [{ paramCount: 2, text: 'Max(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Max' }],
            Min: [{ paramCount: 2, text: 'Min(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Min' }],
            Acos: [{ paramCount: 1, text: 'Acos()', descriptionStringId: 'ExpressionEditorStringId.Function_Acos' }],
            Asin: [{ paramCount: 1, text: 'Asin()', descriptionStringId: 'ExpressionEditorStringId.Function_Asin' }],
            Atn2: [{ paramCount: 2, text: 'Atn2(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Atn2' }],
            BigMul: [{ paramCount: 2, text: 'BigMul(, )', descriptionStringId: 'ExpressionEditorStringId.Function_BigMul' }],
            Cosh: [{ paramCount: 1, text: 'Cosh()', descriptionStringId: 'ExpressionEditorStringId.Function_Cosh' }],
            Log10: [{ paramCount: 1, text: 'Log10()', descriptionStringId: 'ExpressionEditorStringId.Function_Log10' }],
            Sinh: [{ paramCount: 1, text: 'Sinh()', descriptionStringId: 'ExpressionEditorStringId.Function_Sinh' }],
            Tanh: [{ paramCount: 1, text: 'Tanh()', descriptionStringId: 'ExpressionEditorStringId.Function_Tanh' }],
            ToInt: [{ paramCount: 1, text: 'ToInt()', descriptionStringId: 'ExpressionEditorStringId.Function_ToInt' }],
            ToLong: [{ paramCount: 1, text: 'ToLong()', descriptionStringId: 'ExpressionEditorStringId.Function_ToLong' }],
            ToFloat: [{ paramCount: 1, text: 'ToFloat()', descriptionStringId: 'ExpressionEditorStringId.Function_ToFloat' }],
            ToDouble: [{ paramCount: 1, text: 'ToDouble()', descriptionStringId: 'ExpressionEditorStringId.Function_ToDouble' }],
            ToDecimal: [{ paramCount: 1, text: 'ToDecimal()', descriptionStringId: 'ExpressionEditorStringId.Function_ToDecimal' }],
        }
    }, {
        display: 'String',
        localizationId: 'DataAccessStringId.ExpressionEditor_FunctionCategory_Text',
        items: {
            Trim: [{ paramCount: 1, text: 'Trim()', descriptionStringId: 'ExpressionEditorStringId.Function_Trim' }],
            Len: [{ paramCount: 1, text: 'Len()', descriptionStringId: 'ExpressionEditorStringId.Function_Len' }],
            Substring: [
                { paramCount: 3, text: "Substring('', , )", descriptionStringId: 'ExpressionEditorStringId.Function_Substring_3' },
                { paramCount: 2, text: "Substring('', )", descriptionStringId: 'ExpressionEditorStringId.Function_Substring' }
            ],
            Upper: [{ paramCount: 1, text: 'Upper()', descriptionStringId: 'ExpressionEditorStringId.Function_Upper' }],
            Lower: [{ paramCount: 1, text: 'Lower()', descriptionStringId: 'ExpressionEditorStringId.Function_Lower' }],
            Concat: [{ paramCount: Infinity, text: 'Concat(, )', descriptionStringId: 'ExpressionEditorStringId.Function_Concat' }],
            Ascii: [{ paramCount: 1, text: "Ascii('')", descriptionStringId: 'ExpressionEditorStringId.Function_Ascii' }],
            Char: [{ paramCount: 1, text: 'Char()', descriptionStringId: 'ExpressionEditorStringId.Function_Char' }],
            ToStr: [{ paramCount: 1, text: 'ToStr()', descriptionStringId: 'ExpressionEditorStringId.Function_ToStr' }],
            Replace: [{ paramCount: 3, text: "Replace('','', '')", descriptionStringId: 'ExpressionEditorStringId.Function_Replace' }],
            Reverse: [{ paramCount: 1, text: "Reverse('')", descriptionStringId: 'ExpressionEditorStringId.Function_Reverse' }],
            Insert: [{ paramCount: 3, text: "Insert('', , '')", descriptionStringId: 'ExpressionEditorStringId.Function_Insert' }],
            CharIndex: [
                { paramCount: 2, text: "CharIndex('','')", descriptionStringId: 'ExpressionEditorStringId.Function_CharIndex' },
                { paramCount: 3, text: "CharIndex('','', )", descriptionStringId: 'ExpressionEditorStringId.Function_CharIndex_3' }
            ],
            Remove: [
                { paramCount: 2, text: "Remove('', )", descriptionStringId: 'ExpressionEditorStringId.Function_Remove' },
                { paramCount: 3, text: "Remove('', , )", descriptionStringId: 'ExpressionEditorStringId.Function_Remove_3' }
            ],
            PadLeft: [
                { paramCount: 2, text: 'PadLeft(, )', descriptionStringId: 'ExpressionEditorStringId.Function_PadLeft' },
                { paramCount: 3, text: "PadLeft(, , '')", descriptionStringId: 'ExpressionEditorStringId.Function_PadLeft_3' }
            ],
            PadRight: [
                { paramCount: 2, text: 'PadRight(, )', descriptionStringId: 'ExpressionEditorStringId.Function_PadRight' },
                { paramCount: 3, text: "PadRight(, , '')", descriptionStringId: 'ExpressionEditorStringId.Function_PadRight_3' }
            ],
            StartsWith: [{ paramCount: 2, text: "StartsWith('', '')", descriptionStringId: 'ExpressionEditorStringId.Function_StartsWith' }],
            EndsWith: [{ paramCount: 2, text: "EndsWith('', '')", descriptionStringId: 'ExpressionEditorStringId.Function_EndsWith' }],
            Contains: [{ paramCount: 0, text: "Contains('', '')", descriptionStringId: 'ExpressionEditorStringId.Function_Contains' }],
            Join: [
                { paramCount: 1, text: 'Join()', descriptionStringId: 'ExpressionEditorStringId.Function_Join' },
                { paramCount: 2, text: "Join(, '')", descriptionStringId: 'ExpressionEditorStringId.Function_Join_2' }
            ],
        }
    }
];
var functionDisplay = Object(_internal["d" /* createGlobalModuleVariableFunc */])(defaultFunctionDisplay);
var resetFunctionDisplay = () => functionDisplay(defaultFunctionDisplay);
function insertInFunctionDisplay(addins) {
    var functions = [];
    if (Array.isArray(addins)) {
        functions = [...functionDisplay()];
        addins.forEach(addin => {
            var func = functions.filter(x => x.display === addin.display)[0];
            if (!!func) {
                func.items = Object.assign(Object.assign({}, func.items), addin.items);
            }
            else {
                functions.push(addin);
            }
        });
    }
    else {
        functionDisplay().forEach(cat => {
            var ext = addins[cat.display];
            var items = Object(_utils["b" /* extend */])({}, cat.items, ext);
            if (!Object.keys(items).length)
                return;
            functions.push(ext ? {
                display: cat.display, category: cat.category, localizationId: cat.localizationId,
                items: items
            } : cat);
        });
    }
    return functions;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/_expressioneditor.js


var RangeSpecific = 'range';
function createExpressionEditorCollectionToolOptions(collectionItems, toolName, displayToolName, showDescription) {
    return {
        displayName: Object(localization_utils["c" /* getLocalization */])(toolName, displayToolName),
        content: {
            showDescription: showDescription,
            isSelected: external_ko_["observable"](false),
            data: {
                items: collectionItems,
                selectedItem: external_ko_["observable"](null)
            },
            name: 'dx-expressioneditor-collection'
        },
        dispose: () => void 0
    };
}
function wrapExpressionValue(path, value, converter, subscriptions) {
    if (!(converter && path))
        return value;
    var _displayValue = external_ko_["observable"](value());
    converter.toDisplayExpression(path(), value()).done((result) => {
        _displayValue(result);
    }).fail(() => {
        _displayValue(value());
    });
    var valueSubscription = value.subscribe((newValue) => {
        converter.toDisplayExpression(path(), newValue).done((result) => {
            _displayValue(result);
        }).fail(() => {
            _displayValue(newValue);
        });
    });
    var pathSubscription = path.subscribe(newPath => {
        converter.toDisplayExpression(newPath, value())
            .done(result => { _displayValue(result); })
            .fail(_ => { _displayValue(value()); });
    });
    var displayValue = external_ko_["pureComputed"]({
        read: () => _displayValue(),
        write: (newValue) => {
            _displayValue(newValue);
            converter.toRealExpression(path(), newValue).done((result) => {
                value(result);
            }).fail(() => {
                value(newValue);
            });
        }
    });
    if (subscriptions)
        [displayValue, valueSubscription, pathSubscription].forEach(x => subscriptions.push(x));
    return displayValue;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/tools/_operatorNames.js
var operatorNames = [
    { text: '+', image: 'addition', descriptionStringId: 'ExpressionEditorStringId.Operator_Plus' },
    { text: '-', image: 'subtraction', descriptionStringId: 'ExpressionEditorStringId.Operator_Minus' },
    { text: '*', image: 'multiplication', descriptionStringId: 'ExpressionEditorStringId.Operator_Multiply' },
    { text: '/', image: 'division', descriptionStringId: 'ExpressionEditorStringId.Operator_Divide' },
    { text: '%', image: 'modulus', hasSeparator: true, descriptionStringId: 'ExpressionEditorStringId.Operator_Modulo' },
    { text: '()', image: 'parenthesis', hasSeparator: true },
    { text: '|', descriptionStringId: 'ExpressionEditorStringId.Operator_BitwiseOr' },
    { text: '&', descriptionStringId: 'ExpressionEditorStringId.Operator_BitwiseAnd' },
    { text: '^', descriptionStringId: 'ExpressionEditorStringId.Operator_BitwiseXor' },
    { text: '==', image: 'equal', descriptionStringId: 'ExpressionEditorStringId.Operator_Equal' },
    { text: '!=', image: 'not_equal', descriptionStringId: 'ExpressionEditorStringId.Operator_NotEqual' },
    { text: '<', image: 'less', descriptionStringId: 'ExpressionEditorStringId.Operator_Less' },
    { text: '<=', image: 'less_or_equal', descriptionStringId: 'ExpressionEditorStringId.Operator_LessOrEqual' },
    { text: '>=', image: 'greater_or_equal', descriptionStringId: 'ExpressionEditorStringId.Operator_GreaterOrEqual' },
    { text: '>', hasSeparator: true, image: 'greater', descriptionStringId: 'ExpressionEditorStringId.Operator_Greater' },
    { text: 'In', descriptionStringId: 'ExpressionEditorStringId.Operator_In' },
    { text: 'Like', descriptionStringId: 'ExpressionEditorStringId.Operator_Like' },
    { text: 'Between', descriptionStringId: 'ExpressionEditorStringId.Operator_Between' },
    { text: 'And', image: 'and', descriptionStringId: 'ExpressionEditorStringId.Operator_And' },
    { text: 'Or', image: 'or', descriptionStringId: 'ExpressionEditorStringId.Operator_Or' },
    { text: 'Not', image: 'not', descriptionStringId: 'ExpressionEditorStringId.Operator_Not' }
];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/common/_codeCompletor.js










class _codeCompletor_CodeCompletor extends utils["a" /* Disposable */] {
    constructor(_options) {
        super();
        this._options = _options;
        this._contextPath = null;
        this._isInContext = () => this._contextPath !== null;
        this._getPath = () => this._contextPath ? this._path() + '.' + this._contextPath : this._path();
        this.identifierRegexps = [/\./, /\[/];
        this._fieldListProvider = _options.fieldListProvider;
        this._path = _options.path;
        this._editor = _options.editor;
        this._functions = external_ko_["computed"](() => { return external_ko_["unwrap"](_options.functions) || functionDisplay(); });
        this._rootItems = _options.rootItems || [{ name: 'Parameters', needPrefix: true }];
        this._disposables.push(this._functions);
    }
    _previousSymbol() {
        var cursorPosition = this._editor.getCursorPosition();
        return this._editor.session.getLine(cursorPosition.row)[cursorPosition.column - 1];
    }
    beforeInsertMatch(editor, token, parentPrefix) {
        var cursorPosition = editor.getCursorPosition();
        if (parentPrefix === 'Parameters.') {
            token = token || !this['_isInContext']() && editor.session.getTokenAt(cursorPosition.row, cursorPosition.column);
            if (token) {
                if ((token.type === 'support.variable.other' || token.type === 'support.function')) {
                    editor.session.remove({
                        start: { column: token.start - 1 || 0, row: cursorPosition.row },
                        end: { column: Math.max(token.start + token.value.length || 0, cursorPosition.column), row: cursorPosition.row }
                    });
                }
                else if (token.type === 'support.variable.parameter') {
                    editor.session.remove({
                        start: { column: token.start || 0, row: cursorPosition.row },
                        end: { column: Math.max(token.start + token.value.length + 1 || 0, cursorPosition.column), row: cursorPosition.row }
                    });
                }
                else if (token.type === 'text' && token.value[token.value.length - 1] === '?') {
                    editor.session.remove({
                        start: { column: token.start + token.value.length - 1 || 0, row: cursorPosition.row },
                        end: { column: token.start + token.value.length || 0, row: cursorPosition.row },
                    });
                }
            }
        }
        else {
            token = token || editor.session.getTokenAt(cursorPosition.row, cursorPosition.column);
            if (!token)
                return;
            var endColumn = null;
            if (token.type === 'support.variable.other' || token.type === 'support.function') {
                endColumn = Math.max(token.start + token.value.length || 0, cursorPosition.column);
            }
            else if (token.type === 'support.context.start' && cursorPosition.column < token.start + token.value.length) {
                endColumn = token.start + token.value.length - 1 || 0;
            }
            if (endColumn !== null)
                editor.session.remove({
                    start: { column: token.start || 0, row: cursorPosition.row },
                    end: { column: endColumn, row: cursorPosition.row }
                });
        }
    }
    insertMatch(editor, parentPrefix, fieldName) {
        if (parentPrefix === 'Parameters.') {
            editor.insert('?' + fieldName);
        }
        else {
            editor.insert('[' + (parentPrefix || '') + fieldName + ']');
        }
    }
    generateFieldDisplayName(parentPrefix, displayName) {
        if (parentPrefix === 'Parameters.') {
            return '?' + displayName;
        }
        return '[' + displayName + ']';
    }
    _convertDataMemberInfoToCompletions(fields, token, parentPrefix = '') {
        return (fields || []).map(field => {
            var displayName = this.generateFieldDisplayName(parentPrefix, field.displayName);
            return {
                caption: field.displayName || field.name,
                snippet: displayName,
                meta: _utils_isList(field) && Object(localization_utils["c" /* getLocalization */])('list', 'DxDesignerStringId.CodeCompletion_List') || Object(localization_utils["c" /* getLocalization */])('field', 'DxDesignerStringId.CodeCompletion_Field'),
                score: _utils_isList(field) && 200 || 100,
                completer: {
                    insertMatch: (editor, data) => {
                        this.beforeInsertMatch(editor, token, parentPrefix);
                        this.insertMatch(editor, parentPrefix, this._options.getRealExpression ? (field.displayName || field.name) : field.name);
                    }
                }
            };
        });
    }
    _combinePath(parentPrefix) {
        var path = this._getPath();
        if (parentPrefix) {
            var rootItem = this._rootItems.filter(item => parentPrefix.indexOf(item.name) === 0)[0];
            if (rootItem && rootItem.rootPath)
                path = [rootItem.rootPath, parentPrefix].join('.');
            else
                path = [path, parentPrefix].join('.');
        }
        return path;
    }
    _getParentPrefix(token) {
        var position = this._editor.getCursorPosition().column - token.start - 1;
        var dotIndex = token.value.lastIndexOf('.', position);
        var closeIndex = token.value.lastIndexOf(']', position);
        dotIndex = Math.max(closeIndex, dotIndex);
        var startIndex = token.type === 'support.variable.other' || token.type === 'support.context.start' ? 1 : 0;
        var parentPrefix = token.value.substring(startIndex, dotIndex);
        if (parentPrefix[0] === '[')
            parentPrefix = parentPrefix.substr(1);
        if (parentPrefix[parentPrefix.length - 1] === ']')
            parentPrefix = parentPrefix.substring(0, parentPrefix.length - 1);
        return parentPrefix;
    }
    _getRealPath(path) {
        var pathArray = path.split('.');
        var $deferred = external_jQuery_["Deferred"]();
        if (this._options.getRealExpression) {
            this._options.getRealExpression(pathArray[0], this.generateFieldDisplayName(null, pathArray.splice(1).join('.'))).done(result => {
                result = result.slice(1, result.length - 1);
                $deferred.resolve(result && [pathArray[0], result].join('.') || pathArray[0]);
            }).fail(() => { $deferred.resolve(path); });
        }
        else {
            $deferred.resolve(path);
        }
        return $deferred.promise();
    }
    _getFields(token = null, completions = [], ignorePrefix = false) {
        var $deferred = external_jQuery_["Deferred"]();
        var parentPrefix = undefined;
        if (token && (token.type === 'support.variable.other' || token.type === 'support.function' || token.type === 'support.context.start')) {
            parentPrefix = this._getParentPrefix(token);
        }
        this._getRealPath(this._combinePath(parentPrefix)).done((path) => {
            var $fields = external_ko_["unwrap"](this._fieldListProvider).getItems(new PathRequest(path))
                .done((fields) => {
                completions.push.apply(completions, this._convertDataMemberInfoToCompletions(_codeCompletor_CodeCompletor._cleanupFields(fields), token, ignorePrefix ? null : parentPrefix && parentPrefix + '.'));
            });
            var $deferreds = [$fields];
            var rootPathRequests = [];
            if (!parentPrefix) {
                this._rootItems.forEach(item => {
                    var path = item.rootPath || item.name;
                    if (rootPathRequests.indexOf(path) === -1) {
                        rootPathRequests.push(path);
                        $deferreds.push(external_ko_["unwrap"](this._fieldListProvider).getItems(new PathRequest(path))
                            .done((fields) => {
                            this._processFields($deferreds, fields, completions, path, token, item.needPrefix ? item.name + '.' : '', true);
                        }));
                    }
                });
            }
            external_jQuery_["when"]($deferreds).always(() => { $deferred.resolve(completions); });
        });
        return $deferred.promise();
    }
    static _cleanupFields(fields = []) {
        return fields.filter(x => x.specifics !== 'parameters' && x.specifics !== 'none');
    }
    _processFields($deferreds, fields, completions, path, token, parentPrefix = '', needCleanup = false) {
        var pushToCompletions = (fields) => {
            completions.push.apply(completions, this._convertDataMemberInfoToCompletions(needCleanup ? _codeCompletor_CodeCompletor._cleanupFields(fields) : fields, token, parentPrefix));
        };
        fields.forEach(item => {
            if (item.specifics === RangeSpecific && _utils_isList(item)) {
                $deferreds.push(external_ko_["unwrap"](this._fieldListProvider).getItems(new PathRequest(path + '.' + item.name))
                    .done((subFields) => {
                    pushToCompletions(subFields);
                })
                    .fail(() => {
                    pushToCompletions([item]);
                }));
            }
            else {
                pushToCompletions([item]);
            }
        });
    }
    getFunctionsCompletions() {
        var functions = [];
        var functionsWithoutAggregates = external_ko_["unwrap"](this._functions).filter(fnDisplay => fnDisplay.category !== 'Aggregate');
        functionsWithoutAggregates.forEach(fnDisplay => {
            Object.keys(fnDisplay.items).forEach(fnKey => {
                if (fnDisplay.items[fnKey]) {
                    functions.push(createFunctionCompletion(fnDisplay.items[fnKey][0], fnKey));
                }
            });
        });
        return functions;
    }
    getAggregateCompletions() {
        var functions = [];
        var aggregates = external_ko_["unwrap"](this._functions).filter(fnDisplay => fnDisplay.category === 'Aggregate')[0];
        if (aggregates)
            Object.keys(aggregates.items).forEach(fnKey => {
                if (aggregates.items[fnKey]) {
                    functions.push(createFunctionCompletion(aggregates.items[fnKey][0], fnKey, fnKey + '()'));
                }
            });
        return functions;
    }
    getOperatorCompletions(prefix) {
        return operatorNames.map(operator => {
            return { caption: operator.text, snippet: prefix + operator.text, meta: Object(localization_utils["c" /* getLocalization */])('operator', 'DxDesignerStringId.CodeCompletion_Operator') };
        });
    }
    _addFunctions(completions) {
        completions.push.apply(completions, this.getFunctionsCompletions());
    }
    _addAggregates(completions) {
        completions.push.apply(completions, this.getAggregateCompletions());
    }
    _addOperators(completions, text) {
        var prefix = /\s/.test(text[text.length - 1]) ? '' : ' ';
        completions.push.apply(completions, this.getOperatorCompletions(prefix));
    }
    _addParameterOperators(completions, token) {
        var $deferred = external_jQuery_["Deferred"]();
        var $parametersPromises = [];
        var paramPath = 'Parameters';
        $parametersPromises.push(external_ko_["unwrap"](this['_fieldListProvider']).getItems(new PathRequest(paramPath))
            .done((fields) => {
            this._processFields($parametersPromises, fields, completions, paramPath, token, paramPath + '.');
        }));
        external_jQuery_["when"]($parametersPromises).always(() => { $deferred.resolve(completions); });
        return $deferred.promise();
    }
    _getOperands(token = null) {
        var result = [];
        this._addFunctions(result);
        return this._getFields(token, result);
    }
    _getOperandsOrOperators(token, text, completions) {
        var exceptionInfo;
        try {
            criteriaOperatorStateMachine_CriteriaOperatorStateMachine.parse(text);
        }
        catch (exception) {
            exceptionInfo = exception.hash;
        }
        var trimmedText = text.trim();
        var lastNonSpaceSymbol = trimmedText[trimmedText.length - 1];
        if (lastNonSpaceSymbol === '?' && text[text.length - 1] !== ' ') {
            this._addParameterOperators(completions, token);
        }
        else if (!exceptionInfo && trimmedText || (lastNonSpaceSymbol === ']' || lastNonSpaceSymbol === ')')) {
            this._addOperators(completions, text);
        }
        else {
            return this._getOperands();
        }
    }
    _findStartContextTokenPosition(tokens, index) {
        var blocks = 0;
        var path = [];
        for (var i = index; i > -1; i--) {
            if (tokens[i].type === 'support.context.end') {
                blocks++;
            }
            else if (tokens[i].type === 'support.context.start') {
                if (blocks > 0)
                    blocks--;
                else
                    return i;
            }
        }
    }
    _findOpenedStartContext(tokens, index) {
        var openedContextIndexes = [];
        var contextItems = tokens.filter((token, tokenIndex) => (token.type === 'support.context.start' || token.type === 'support.context.end') && tokenIndex < index);
        for (var i = 0; i < contextItems.length; i++) {
            if (contextItems[i].type === 'support.context.start') {
                openedContextIndexes.push(tokens.indexOf(contextItems[i]));
            }
            else {
                openedContextIndexes.pop();
            }
        }
        return openedContextIndexes;
    }
    _findOpenedAggregates(tokens, index) {
        var openedAggregatesIndexes = [];
        var aggregates = tokens.filter((token, tokenIndex) => token.type === 'support.other.aggregate' && tokenIndex < index);
        if (aggregates.length > 0) {
            var currentToken = tokens[index];
            var currentCursorPosition = this._editor.getCursorPosition().column - (currentToken && currentToken.start || 0);
            for (var i = aggregates.length - 1; i > -1; i--) {
                var aggregateIndex = tokens.indexOf(aggregates[i]);
                var openBrace = 0;
                var closeBrace = 0;
                var isClosedAggregate = false;
                if (aggregateIndex + 1 === index && tokens[aggregateIndex + 1].value.substr(0, currentCursorPosition).indexOf('()') !== -1 ||
                    aggregateIndex + 1 < index && tokens[aggregateIndex + 1].value.indexOf('()') !== -1) {
                    isClosedAggregate = true;
                    index = aggregateIndex;
                    continue;
                }
                for (var j = aggregateIndex; j < index; j++) {
                    if (tokens[j].value.trim() === '(') {
                        openBrace++;
                    }
                    else if (tokens[j].value.trim() === ')') {
                        closeBrace++;
                    }
                    if (openBrace === closeBrace && openBrace !== 0) {
                        isClosedAggregate = true;
                        break;
                    }
                }
                if (!isClosedAggregate)
                    openedAggregatesIndexes.splice(0, 0, aggregateIndex);
                index = aggregateIndex;
            }
        }
        return openedAggregatesIndexes;
    }
    _getContextPath(tokens, currentPosition) {
        var path = [];
        var openedAggregatePositions = this._findOpenedAggregates(tokens, currentPosition);
        var openedContextPositions = this._findOpenedStartContext(tokens, currentPosition);
        var contextPath = openedContextPositions.concat(...openedAggregatePositions).sort((a, b) => { return a - b; });
        if (contextPath.length > 0) {
            for (var i = 0; i < contextPath.length; i++) {
                if (tokens[contextPath[i]].type === 'support.other.aggregate') {
                    if (tokens[contextPath[i] - 1].type === 'support.context.end') {
                        var startContextToken = this._findStartContextTokenPosition(tokens, contextPath[i] - 2);
                        var member = trimBrackets(tokens[startContextToken].value.match(/^\[(?:[^\]\)])*\]/)[0]);
                        path.push(member);
                    }
                    else if (tokens[contextPath[i] - 1].type === 'support.variable.other') {
                        path.push(trimBrackets(tokens[contextPath[i] - 1].value));
                    }
                }
                else {
                    var member = trimBrackets(tokens[contextPath[i]].value.match(/^\[(?:[^\]\)])*\]/)[0]);
                    path.push(member);
                }
            }
        }
        return path.filter(x => !!x).join('.');
    }
    _getCompletions(editor, session, pos, prefix) {
        var $deferred;
        var completions = [];
        var currentToken = session.getTokenAt(pos.row, pos.column);
        var text = editor.session.getLine(pos.row).substring(0, pos.column);
        var tokens = session.getTokens(pos.row);
        var currentTokenIndex = currentToken ? currentToken.index : -1;
        this._contextPath = this._getContextPath(tokens, currentTokenIndex);
        if (!currentToken) {
            $deferred = this._getOperands();
        }
        else if (currentToken.type === 'support.context.start') {
            var ignorePrefix = this._editor.getCursorPosition().column - currentToken.start === currentToken.value.length;
            if (ignorePrefix) {
                var functions = [];
                this._addFunctions(functions);
            }
            $deferred = this._getFields(currentToken, functions, ignorePrefix);
        }
        else if (currentToken.type === 'string.quoted.single') {
        }
        else if (currentToken.type.indexOf('support.variable') === 0) {
            $deferred = this._getFields(currentToken);
        }
        else if (currentToken.type === 'support.function') {
            $deferred = this.defaultProcess(currentToken, text.substring(0, currentToken.start), completions);
        }
        else if (currentToken.type === 'support.other.aggregate') {
            var previousToken = tokens[currentTokenIndex - 1];
            this._addAggregates(completions);
            if (previousToken && trimBrackets(previousToken.value).trim()) {
                $deferred = this._getFields({
                    start: (currentToken.start - (previousToken.value || '').length) || 0,
                    value: previousToken.value + currentToken.value,
                    type: 'support.function'
                }, completions);
            }
        }
        else {
            if (!(currentToken.type.indexOf('comment') === 0)) {
                $deferred = this.defaultProcess(currentToken, text, completions);
            }
        }
        return $deferred ? $deferred.promise() : external_jQuery_["Deferred"]().resolve(completions).promise();
    }
    defaultProcess(token, text, completions) {
        return this._getOperandsOrOperators(token, text, completions);
    }
    getCompletions(aceEditor, session, pos, prefix, callback) {
        this._getCompletions(aceEditor, session, pos, prefix).done(completions => {
            callback(null, completions);
        });
    }
    getDocTooltip(item) {
        if (item.tooltip && !item.docHTML) {
            item.docHTML = [
                item.tooltip
            ].join('');
        }
    }
}
function createFunctionCompletion(fnInfo, name, insertValue = null) {
    var insertValue = insertValue || fnInfo.text;
    return {
        caption: name,
        snippet: insertValue,
        meta: Object(localization_utils["c" /* getLocalization */])('function', 'DxDesignerStringId.CodeCompletion_Function'),
        tooltip: fnInfo.description || Object(localization_utils["c" /* getLocalization */])(fnInfo.text, fnInfo.descriptionStringId) || null,
        score: 10,
        completer: {
            insertMatch: (editor, data) => {
                var completions = editor.completer.completions;
                if (completions.filterText) {
                    var ranges = editor.selection.getAllRanges();
                    for (var i = 0, range; range = ranges[i]; i++) {
                        range.start.column -= completions.filterText.length;
                        editor.session.remove(range);
                    }
                }
                if (insertValue.substr(0, 3) === '[].') {
                    var ranges = editor.selection.getAllRanges();
                    for (var i = 0, range; range = ranges[i]; i++) {
                        range.start.column -= 2;
                        if (editor.session.getTextRange(range) === '].')
                            insertValue = insertValue.substr(3);
                    }
                }
                editor.insert(insertValue);
                setCursorInFunctionParameter(fnInfo.paramCount, editor, insertValue);
            }
        }
    };
}
function trimBrackets(value) {
    return value.substring(value[0] === '[' ? 1 : 0, value[value.length - 1] === ']' ? value.length - 1 : value.length);
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/value.js
var operators_value = __webpack_require__(18);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/between.js
var between = __webpack_require__(24);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/in.js
var operators_in = __webpack_require__(19);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/binary.js
var binary = __webpack_require__(30);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/unary.js
var unary = __webpack_require__(17);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/function.js
var operators_function = __webpack_require__(28);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/operatorTokens.js
var utils_operatorTokens = __webpack_require__(23);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/constant.js
var constant = __webpack_require__(25);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/options/binary.js
var options_binary = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/options/unary.js
var options_unary = __webpack_require__(10);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/options/group.js
var options_group = __webpack_require__(11);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/_serializer.js




















class _serializer_FilterEditorSerializer {
    constructor(operatorTokens = utils_operatorTokens["a" /* operatorTokens */], custom) {
        this.operatorTokens = operatorTokens;
        this.custom = custom;
    }
    serializeGroupOperand(groupOperator, reverse) {
        var result = groupOperator.operands.map((operand) => {
            if (operand instanceof group["GroupOperator"]) {
                return '(' + this.serialize(operand) + ')';
            }
            else {
                return this.serialize(operand);
            }
        }).filter((serialize) => { return serialize !== '' && serialize !== '()'; }).join(' ' + (this.operatorTokens[groupOperator.displayType] || groupOperator.displayType) + ' ');
        return reverse && result ? 'Not(' + result + ')' : result;
    }
    serializeAggregateOperand(aggregateOperand, reverse) {
        var operatorTypeSuffix = aggregateOperand.operatorType === 'Exists' ? '' : '.' + aggregateOperand.operatorType;
        var condition = aggregateOperand.condition ? this.serialize(aggregateOperand.condition) : '';
        var propertyResult = this.serialize(aggregateOperand.property);
        var conditionResult = '[' + condition + ']';
        var aggregateSuffix = aggregateOperand.operatorType !== 'Exists' ?
            '(' + (aggregateOperand.aggregatedExpression && this.serialize(aggregateOperand.aggregatedExpression) || '') + ')' : '';
        var result = propertyResult;
        if (!condition && !aggregateSuffix || condition) {
            result += conditionResult;
        }
        return result + operatorTypeSuffix + aggregateSuffix;
    }
    serializeOperandProperty(operandProperty) {
        if (!operandProperty.propertyName) {
            return operandProperty.circumflex ? '^' : '[]';
        }
        var value = operandProperty.displayType;
        if (value.length - trimBrackets(value).length === 2) {
            value = '[' + trimBrackets(value).replace(/\\/g, '\\\\').replace(/\]/g, '\\]') + ']';
        }
        return operandProperty.circumflex ? '^.' + value : value;
    }
    serializeOperandValue(operandValue) {
        var result = operandValue.value;
        if (result !== null && result !== undefined && (external_jQuery_["isNumeric"](result) || String(result).toLowerCase() === 'true' || String(result).toLowerCase() === 'false')) {
            if (operandValue.specifics === 'string')
                return "'" + result + "'";
            if (operandValue.specifics === 'guid' && Object(internal_internal["f" /* validateGuid */])(result))
                return '{' + result + '}';
            return result;
        }
        else if (result && operandValue.value instanceof Date) {
            return '#' + Object(utils["d" /* serializeDate */])(result) + '#';
        }
        else if (operandValue.specifics === 'integer' || operandValue.specifics === 'integer') {
            return result || '?';
        }
        else if (operandValue.specifics === 'guid' && Object(internal_internal["f" /* validateGuid */])(result)) {
            return '{' + result + '}';
        }
        if (result.indexOf("'") !== -1) {
            result = result.replace("'", "''");
        }
        return result ? "'" + result + "'" : '?';
    }
    serializeOperandParameter(operandParameter) {
        return operandParameter.displayType;
    }
    serializeBetweenOperator(betweenOperator, reverse) {
        var result = this.serialize(betweenOperator.property) + ' ' + betweenOperator.displayType +
            '(' + this.serialize(betweenOperator.begin) + ', ' + this.serialize(betweenOperator.end) + ')';
        return reverse ? 'Not ' + result : result;
    }
    serializeInOperator(inOperator, reverse) {
        var result = this.serialize(inOperator.criteriaOperator) + ' ' + inOperator.displayType + '(' +
            inOperator.operands.map((operand) => { return this.serialize(operand); }).join(', ') + ')';
        return reverse ? 'Not ' + result : result;
    }
    serializeBinaryOperator(binaryOperator, reverse) {
        if (binaryOperator.operatorType === options_binary["BinaryOperatorType"].Like) {
            var separator = reverse ? ' Not ' : ' ';
            return this.serialize(binaryOperator.leftOperand) + separator + (this.operatorTokens[binaryOperator.displayType] || binaryOperator.displayType) + ' ' + this.serialize(binaryOperator.rightOperand);
        }
        return (reverse ? 'Not ' : '') + this.serialize(binaryOperator.leftOperand) + ' ' + (this.operatorTokens[binaryOperator.displayType] || binaryOperator.displayType) + ' ' + this.serialize(binaryOperator.rightOperand);
    }
    serializeUnaryOperator(unaryOperator, reverse) {
        if (unaryOperator.operatorType === options_unary["UnaryOperatorType"].IsNull) {
            var separator = reverse ? ' Not ' : ' ';
            return this.serialize(unaryOperator.operand) + ' Is' + separator + 'Null';
        }
        else if (unaryOperator.operatorType === options_unary["UnaryOperatorType"].Not) {
            return this.serialize(unaryOperator.operand, true);
        }
        var result = (this.operatorTokens[unaryOperator.displayType] || unaryOperator.displayType) + this.serialize(unaryOperator.operand);
        return reverse ? 'Not ' + result : result;
    }
    serializeFunctionOperator(functionOperator, reverse) {
        var result = (this.operatorTokens[functionOperator.displayType] || functionOperator.displayType) + '(' + functionOperator.operands.map((operand) => {
            return this.serialize(operand);
        }).join(', ') + ')';
        return reverse ? 'Not ' + result : result;
    }
    serialize(criteriaOperator, reverse = false) {
        if (criteriaOperator instanceof operators_aggregate["a" /* AggregateOperand */]) {
            return this.serializeAggregateOperand(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof between["a" /* BetweenOperator */]) {
            return this.serializeBetweenOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof binary["a" /* BinaryOperator */]) {
            return this.serializeBinaryOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof constant["a" /* ConstantValue */]) {
            return this.serializeOperandValue(criteriaOperator);
        }
        if (criteriaOperator instanceof operators_function["a" /* FunctionOperator */]) {
            return this.serializeFunctionOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof group["GroupOperator"]) {
            return this.serializeGroupOperand(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof operators_in["a" /* InOperator */]) {
            return this.serializeInOperator(criteriaOperator, reverse);
        }
        if (criteriaOperator instanceof parameter["a" /* OperandParameter */]) {
            return this.serializeOperandParameter(criteriaOperator);
        }
        if (criteriaOperator instanceof operators_property["a" /* OperandProperty */]) {
            return this.serializeOperandProperty(criteriaOperator);
        }
        if (criteriaOperator instanceof operators_value["a" /* OperandValue */]) {
            return this.serializeOperandValue(criteriaOperator);
        }
        if (criteriaOperator instanceof unary["a" /* UnaryOperator */]) {
            return this.serializeUnaryOperator(criteriaOperator, reverse);
        }
        if (this.custom) {
            return this.custom(criteriaOperator, reverse);
        }
        throw Error('Undefined type criteria operator');
    }
    deserialize(stringCriteria) {
        return this.deserializeOperand(criteriaOperatorStateMachine_CriteriaOperatorStateMachine.parse(stringCriteria));
    }
    deserializeOperand(operand) {
        if (operand instanceof group["GroupOperator"]) {
            return operand;
        }
        else if (operand instanceof unary["a" /* UnaryOperator */] && operand.operatorType === options_unary["UnaryOperatorType"].Not) {
            var child = operand['operand'];
            if (child instanceof group["GroupOperator"] || child instanceof operators_function["a" /* FunctionOperator */]) {
                return operand;
            }
            else if (child instanceof unary["a" /* UnaryOperator */] && operand.operatorType === options_unary["UnaryOperatorType"].Not
                && !(child.operand instanceof operators_property["a" /* OperandProperty */])) {
                return this.deserializeOperand(child.operand);
            }
            return new unary["a" /* UnaryOperator */](options_unary["UnaryOperatorType"].Not, new group["GroupOperator"](options_group["GroupOperatorType"].And, child ? [child] : []));
        }
        return new group["GroupOperator"](options_group["GroupOperatorType"].And, operand ? [operand] : []);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/common/_displayNameProvider.js





class _displayNameProvider_DisplayExpressionConverter {
    constructor(displayNameProvider) {
        this.displayNameProvider = displayNameProvider;
    }
    _replaceNames(path, expression, getDisplayExpression) {
        var def = external_jQuery_["Deferred"]();
        if (!expression)
            return def.resolve('').promise();
        try {
            var expressionCriteria = criteriaOperatorStateMachine_CriteriaOperatorStateMachine.parse(expression, true);
        }
        catch (e) {
            return def.reject().promise();
        }
        var requests = [];
        var result = [];
        var serializer = new _serializer_FilterEditorSerializer();
        criteriaForEach(expressionCriteria, (operator, innerPath) => {
            if (operator instanceof operators_property["a" /* OperandProperty */]) {
                var isContainsParentRelationshipTraversalOperator = operator.propertyName.indexOf('^.') === 0;
                var propertyName = isContainsParentRelationshipTraversalOperator ? operator.propertyName.substring(2) : operator.propertyName;
                propertyName = innerPath ? [innerPath, propertyName].join('.') : propertyName;
                var request = getDisplayExpression ? this.displayNameProvider.getDisplayNameByPath(path, propertyName) :
                    this.displayNameProvider.getRealName(path, propertyName);
                requests.push(request.done(data => {
                    var convertedName = isContainsParentRelationshipTraversalOperator ? '^.' + data : data;
                    convertedName = innerPath ? convertedName.split('.').slice(innerPath.split('.').length).join('.') : convertedName;
                    result.push({
                        operand: operator,
                        convertedName
                    });
                }));
            }
        });
        if (requests.length === 0) {
            def.resolve(expression);
        }
        else {
            var processedRequestsCount = 0;
            var onAlways = () => {
                if (++processedRequestsCount < requests.length)
                    return;
                var lines = expression.split('\n');
                for (var i = 0; i < lines.length; i++) {
                    var operands = result.filter((value) => value.operand.startPosition.line === i).sort((a, b) => {
                        return a.operand.startPosition.column - b.operand.startPosition.column;
                    });
                    for (var j = 0, delta = 0; j < operands.length; j++) {
                        var column = operands[j].operand.startPosition.column;
                        var propertyName = operands[j].operand.propertyName;
                        var deltaName = 0;
                        if (operands[j].operand.originalPropertyLength !== propertyName.length) {
                            deltaName = Math.max(0, operands[j].operand.originalPropertyLength - serializer.serialize(operands[j].operand, false).length);
                        }
                        var convertedName = operands[j].convertedName;
                        if (!propertyName || column < 0)
                            continue;
                        lines[i] = lines[i].substring(0, column + delta) + convertedName + lines[i].substring(column + propertyName.length + deltaName + delta);
                        delta += convertedName.length - propertyName.length - deltaName;
                    }
                }
                def.resolve(lines.join('\n'));
            };
            requests.forEach(r => r.always(onAlways));
        }
        return def.promise();
    }
    toDisplayExpression(path, expression) {
        return this._replaceNames(path, expression, true);
    }
    toRealExpression(path, expression) {
        return this._replaceNames(path, expression, false);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/_legacy.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/_searchHighlighting.js





function cloneHtmlBinding(data, element, valueAccessor, allBindings, viewModel, bindingContext) {
    Object(_internal["c" /* addDisposeCallback */])(element, function () {
        data.dispose();
    });
    setTimeout(() => {
        var isInitialized = false;
        external_ko_["computed"]({
            read: () => {
                if (!isInitialized && external_ko_["bindingHandlers"]['html'].init) {
                    external_ko_["bindingHandlers"]['html'].init(element, () => { return data.content; }, allBindings, viewModel, bindingContext);
                    isInitialized = true;
                }
                if (external_ko_["bindingHandlers"]['html'].update) {
                    external_ko_["bindingHandlers"]['html'].update(element, () => {
                        data.update(valueAccessor());
                        return data.content;
                    }, allBindings, viewModel, bindingContext);
                }
            },
            disposeWhenNodeIsRemoved: element
        });
    }, 1);
}
class _searchHighlighting_HighlightEngine extends utils["a" /* Disposable */] {
    constructor(options) {
        super();
        this._$spanProtect = external_jQuery_["fn"].constructor('<span>');
        this._$spanSearch = external_jQuery_["fn"].constructor('<span>').addClass('dx-datagrid-search-text');
        this.content = external_ko_["observable"]('');
        this._options = options;
        if (external_ko_["isSubscribable"](this._options.text)) {
            this._disposables.push(this._options.text.subscribe(newText => {
                this._update();
            }));
        }
        this._disposables.push(this._options.textToSearch.subscribe(newFind => {
            this._update();
        }));
        this._update();
    }
    _update() {
        this.content(this._getHighlightContent(external_ko_["unwrap"](this._options.text), external_ko_["unwrap"](this._options.textToSearch), external_ko_["unwrap"](this._options.searchOptions)));
    }
    update(options) {
        this._options = options;
        this._update();
    }
    _getHighlightContent(text, textToSearch, options) {
        var searchPattern = textToSearch;
        var result = text;
        if (searchPattern) {
            var match = findMatchesInString(result, searchPattern, options);
            if (match) {
                var newResult = '', curIndex = 0, subString = result;
                match.forEach((item, index) => {
                    var itemIndex = subString.indexOf(item);
                    var textBeforeMath = result.substr(curIndex, itemIndex);
                    subString = subString.substr(itemIndex + item.length);
                    if (textBeforeMath) {
                        this._$spanProtect.text(textBeforeMath);
                        newResult += this._$spanProtect[0].outerHTML;
                    }
                    this._$spanSearch.text(item);
                    newResult += this._$spanSearch[0].outerHTML;
                    curIndex = result.length - subString.length;
                    if (index === match.length - 1) {
                        if (subString) {
                            this._$spanProtect.text(subString);
                            newResult += this._$spanProtect[0].outerHTML;
                        }
                    }
                });
                return newResult;
            }
        }
        this._$spanProtect.text(result);
        result = this._$spanProtect[0].outerHTML;
        return result;
    }
}
external_ko_["bindingHandlers"]['searchHighlighting'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        cloneHtmlBinding(new _searchHighlighting_HighlightEngine(valueAccessor()), element, valueAccessor, allBindings, viewModel, bindingContext);
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-internal.js









































































































































































// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/tools/_tabInfoWithPropertyGrid.js



class _tabInfoWithPropertyGrid_TabInfoWithPropertyGrid extends tabPanel_TabInfo {
    constructor(options) {
        super(options);
        this.propertyGrid = new propertygrid_ObjectProperties(external_ko_["observable"](options.model), undefined, undefined, undefined, true);
        this._disposables.push(external_ko_["computed"](() => {
            var someRendered = this.propertyGrid.getEditors().some(editor => editor.visible && editor.isRendered());
            if (someRendered) {
                this.keyboardHelper && this.keyboardHelper.initialize();
                this.focus();
            }
        }));
        this._disposables.push(this.propertyGrid);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/elementViewModel.js





class elementViewModel_ElementViewModel extends utils["a" /* Disposable */] {
    constructor(model, parent, serializer) {
        super();
        this.actions = [];
        this.actionProviders = [];
        this.update = external_ko_["observable"](false);
        this.controlType = this.controlType || this.getControlFactory().getControlType(model);
        this.preInitProperties(model, parent, serializer);
        this.parentModel = external_ko_["observable"](parent);
        serializer = serializer || new serializer_ModelSerializer();
        serializer.deserialize(this, model);
        this._disposables.push(this['displayName'] = external_ko_["pureComputed"](() => {
            var result = this.name && this.name();
            if (!result) {
                result = 'unnamed ' + this.controlType;
            }
            return result;
        }));
        this.resetValue = (propertyName) => {
            this._resetProperty(propertyName);
        };
        this.actions.push({
            action: this.resetValue,
            id: 'dxd-reset',
            title: Object(localization_utils["c" /* getLocalization */])('Reset', 'AnalyticsCoreStringId.PropertyGrid_PopupMenu_Reset'), visible: this.isResettableProperty,
            weight: 1000
        });
    }
    _resetProperty(propertyName) {
        if (this[propertyName].resetValue) {
            this[propertyName].resetValue();
        }
        else {
            var defaultValue = this.getPropertyDefaultValue(propertyName);
            if (external_ko_["isObservable"](this[propertyName])) {
                this[propertyName](defaultValue);
            }
            else {
                copyObservables(defaultValue, this[propertyName]);
            }
        }
    }
    getPropertyDefaultValue(propertyName) {
        var info = this.getPropertyInfo(propertyName);
        return external_ko_["unwrap"](info && new serializer_ModelSerializer().deserializeDefaultValue(info));
    }
    getPropertyInfo(propertyName) {
        return this.getInfo().filter((info) => { return info.propertyName === propertyName; })[0];
    }
    getInfo() {
        return this.getControlFactory().controlsMap[this.controlType].info;
    }
    createControl(model, serializer) {
        return this.getControlFactory().createControl(model, this, serializer);
    }
    dispose() {
        super.dispose();
        this.surface && this.surface.dispose();
    }
    preInitProperties(model, parent, serializer) { }
    getNearestParent(target) {
        return target.getMetaData().isContainer ? target : target.getNearestParent(target.parentModel());
    }
    getControlInfo() {
        return this.getControlFactory().controlsMap[this.controlType || 'Unknown'];
    }
    getMetaData() {
        var controlType = this.controlType ? this.controlType : 'Unknown', data = this.getControlFactory().controlsMap[controlType];
        return {
            isContainer: data.isContainer || false,
            isCopyDeny: data.isCopyDeny || false,
            isDeleteDeny: data.isDeleteDeny || false,
            canDrop: data.canDrop || (() => true),
            isPasteDeny: data.isPasteDeny || !data.isContainer
        };
    }
    _hasModifiedValue(name) {
        return this['_' + name] && this['_' + name]() && this.isPropertyModified(name);
    }
    createChild(info) {
        var newControl = this.getControlFactory().createControl(info, this);
        this.addChild(newControl);
        return newControl;
    }
    removeChilds(controls) {
        if (this['controls']) {
            var childs = this['controls']();
            for (var i = 0; i < controls.length; i++) {
                childs.splice(childs.indexOf(controls[i]), 1);
            }
            this['controls'].valueHasMutated();
        }
    }
    addChilds(controls) {
        if (this['controls']) {
            var childs = this['controls']();
            for (var i = 0; i < controls.length; i++) {
                childs.splice(0, 0, controls[i]);
            }
            this['controls'].valueHasMutated();
        }
    }
    removeChild(control) {
        if (this['controls']) {
            this['controls'].splice(this['controls']().indexOf(control), 1);
            control.onDelete();
        }
    }
    addChild(control) {
        if (this['controls'] && this['controls']().indexOf(control) === -1) {
            control.parentModel(this);
            this['controls'].splice(0, 0, control);
        }
    }
    isPropertyVisible(name) {
        return true;
    }
    isPropertyDisabled(name) {
        return false;
    }
    isPropertyModified(name) {
        var needName = this['_' + name] ? '_' + name : name;
        if (this[needName].isPropertyModified) {
            return this[needName].isPropertyModified();
        }
        else if (this[needName].isEmpty) {
            return !this[needName].isEmpty();
        }
        else {
            var defaultValue = this.getPropertyDefaultValue(name), propertyValue = external_ko_["unwrap"](this[needName]);
            if (defaultValue instanceof Object) {
                return !compareObjects(defaultValue, propertyValue);
            }
            else {
                return defaultValue !== propertyValue;
            }
        }
    }
    getControlFactory() {
        throw Error('Virtual method getControlFactory');
    }
    isResettableProperty(propertyName) {
        return ['name', 'size', 'location'].indexOf(propertyName) === -1;
    }
    _getRoot() {
        var root = this;
        while (root && root.parentModel()) {
            root = root.parentModel();
        }
        return root;
    }
    get root() {
        return this._getRoot();
    }
    rtl() {
        return false;
    }
    onDelete() { }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/controlsFactory.js





class controlsFactory_ControlsFactory {
    constructor() {
        this.controlsMap = {};
    }
    getControlInfo(controlType) {
        var info = this.controlsMap[controlType] || null;
        return info;
    }
    getControlType(model) {
        var controlType = getTypeNameFromFullName(model['@ControlType'] || '');
        return this.controlsMap[controlType] ? controlType : 'Unknown';
    }
    createControl(model, parent, serializer) {
        var controlType = this.getControlType(model);
        return new (this.controlsMap[controlType] && this.controlsMap[controlType].type || elementViewModel_ElementViewModel)(model, parent, serializer);
    }
    registerControl(typeName, metadata) {
        if (metadata.isToolboxItem !== undefined) {
            metadata.nonToolboxItem = !metadata.isToolboxItem;
        }
        Object.defineProperty(metadata, 'isToolboxItem', {
            get: () => {
                return !metadata.nonToolboxItem;
            },
            set: (newVal) => {
                metadata.nonToolboxItem = !newVal;
            },
            enumerable: true,
            configurable: true
        });
        this.controlsMap[typeName] = metadata;
        this.controlsMap[typeName].info = Object(_utils["b" /* extend */])(true, [], metadata.info);
    }
    _getPropertyInfoByDisplayName(info, path, position) {
        return info.filter((x) => Object(_localization["d" /* getLocalization */])(x.displayName, x.localizationId) === path[position])[0];
    }
    _getPropertyInfoByName(info, path, position) {
        return info.filter((x) => x.propertyName === path[position] || x.modelName === '@' + path[position] || x.modelName === path[position])[0];
    }
    _getPropertyInfo(info, path, position) {
        var propertyInfo = this._getPropertyInfoByDisplayName(info, path, position) || this._getPropertyInfoByName(info, path, position);
        if (position === path.length - 1) {
            return propertyInfo || null;
        }
        else {
            if (propertyInfo.info) {
                return this._getPropertyInfo(propertyInfo.info, path, position + 1);
            }
            else if (propertyInfo.from) {
                var object = null;
                try {
                    object = propertyInfo.from({});
                }
                catch (e) {
                    return null;
                }
                var newInfo = object.getInfo && object.getInfo();
                if (newInfo) {
                    return this._getPropertyInfo(newInfo, path, position + 1);
                }
            }
        }
        return null;
    }
    getPropertyInfo(controlType, path) {
        var properties = path;
        if (!external_jQuery_["isArray"](path)) {
            properties = path.split('.');
        }
        return this._getPropertyInfo(this.controlsMap[controlType].info, properties, 0);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/utils/parsers.js


function floatFromModel(val) {
    return external_ko_["observable"](val === undefined || val === null ? null : parseFloat(val));
}
function fromEnum(value) {
    var shotEnumValueKey = getShortTypeName(value);
    var valuesArrayItem = this.valuesArray && this.valuesArray.filter(item => item.value == shotEnumValueKey)[0];
    return external_ko_["observable"]((this.values && this.values[shotEnumValueKey] !== undefined || valuesArrayItem) ? shotEnumValueKey : value);
}
function parseBool(val) {
    return external_ko_["observable"](val !== void 0 ? String(val).toLowerCase() === 'true' : val);
}
function colorFromString(val) {
    var color = (val || '').split(',');
    var result = external_ko_["observable"](val);
    if (color.length === 3) {
        result = external_ko_["observable"]('rgb(' + color.join(', ') + ')');
    }
    else if (color.length === 4) {
        var alpha = Math.round(parseFloat(color[0]) / 255 * 100) / 100;
        color.shift();
        color.push(alpha.toString());
        result = external_ko_["observable"]('rgba(' + color.join(', ') + ')');
    }
    return result;
}
function saveAsInt(val) {
    return Math.round(val).toString();
}
function colorToInt(color) {
    var colorAsString = colorToString(color).split(',');
    return (parseInt(colorAsString[0]) << 24) + (parseInt(colorAsString[1]) << 16) + (parseInt(colorAsString[2]) << 8) + (parseInt(colorAsString[3]));
}
function intToColor(color, hasAlpha = true) {
    var r = Math.round((color >> 16) & 0xff);
    var g = Math.round((color >> 8) & 0xff);
    var b = Math.round((color) & 0xff);
    if (hasAlpha) {
        var a = Math.round((color >> 24) & 0xff);
        return colorFromString([a, r, g, b].join(', '))();
    }
    else {
        return colorFromString([r, g, b].join(', '))();
    }
}
function colorToString(val) {
    var color = (val || '').split(', ');
    var result = val;
    if (color.length === 3) {
        color[0] = color[0].split('(')[1];
        color[2] = color[2].split(')')[0];
        result = color.join(',');
    }
    else if (color.length === 4) {
        var alpha = Math.round(parseFloat(color[3]) * 255);
        color.pop();
        color[0] = color[0].split('(')[1];
        result = alpha.toString() + ',' + color.join(',');
    }
    return result;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/internal/_bindingsCache.js


var cache = {};
function createBaseFunction(controlName, optionsName) {
    return function ($context, $index) {
        var obj = {};
        obj[controlName] = function () {
            if (optionsName === '$data')
                return $context.$data;
            return optionsName === undefined ? undefined : $context.$data[optionsName];
        };
        return obj;
    };
}
function registerBaseBinding(bindingName, optionsName) {
    addToBindingsCache(!optionsName ? bindingName : `${bindingName}: ${optionsName}`, createBaseFunction(bindingName, optionsName));
}
function addToBindingsCache(key, value) {
    cache[key] = value;
}
function getFromCache(key) {
    return cache[key];
}
registerBaseBinding('svgAttrs');
registerBaseBinding('dxButtonWithTemplate', 'options');
registerBaseBinding('dxButton', 'options');
registerBaseBinding('dxCheckBox', 'options');
registerBaseBinding('dxToolbarBase', 'options');
registerBaseBinding('dxToolbar', 'options');
registerBaseBinding('treelist', 'options');
var currentParseBindingsString = external_ko_["bindingProvider"].prototype.parseBindingsString;
external_ko_["utils"].extend(external_ko_["bindingProvider"].prototype, {
    'parseBindingsString': function (bindingsString, bindingContext, node, options) {
        try {
            var func = getFromCache(bindingsString.trim());
            if (func)
                return func(bindingContext, node);
            return currentParseBindingsString.call(external_ko_["bindingProvider"].instance, bindingsString, bindingContext, node, options);
        }
        catch (ex) {
            ex.message = 'Unable to parse bindings.\nBindings value: ' + bindingsString + '\nMessage: ' + ex.message;
            throw ex;
        }
    }
});
var optionsParser = external_DevExpress_config_default()()['optionsParser'];
external_DevExpress_config_default()({
    optionsParser: function (optionsString) {
        var func = getFromCache(optionsString.trim());
        if (func)
            return func();
        return optionsParser(optionsString);
    }
});

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/bindingsCacheUtils.js

function bindingsCacheUtils_registerBaseBinding(bindingName, optionsName) {
    registerBaseBinding(bindingName, optionsName);
}
function bindingsCacheUtils_addToBindingsCache(bindingText, value) {
    addToBindingsCache(bindingText, value);
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/serializer/eventManager.js

class eventManager_EventManager extends utils["a" /* Disposable */] {
    constructor() {
        super(...arguments);
        this._handlers = [];
    }
    dispose() {
        this._handlers = [];
    }
    call(type, args) {
        this._handlers.filter(x => x.type === type).forEach(x => x.value(args));
    }
    addHandler(type, listener) {
        this._handlers.push({
            type: type,
            value: listener
        });
    }
    removeHandler(type, listener) {
        var item = this._handlers.filter(handler => handler.type === type && handler.value === listener)[0];
        var index = this._handlers.indexOf(item);
        if (index !== -1) {
            this._handlers.splice(index, 1);
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/serializer/serializationInfo.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/common/displayNameProvider.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/utils.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-utils.js



































// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/textAlignmentEditor/_textAlignmentEditor.js



class _textAlignmentEditor_TextAlignmentModel extends utils["a" /* Disposable */] {
    constructor(object) {
        super();
        this.top = external_ko_["observable"](false);
        this.middle = external_ko_["observable"](false);
        this.bottom = external_ko_["observable"](false);
        this.left = external_ko_["observable"](false);
        this.right = external_ko_["observable"](false);
        this.center = external_ko_["observable"](false);
        this.justify = external_ko_["observable"](false);
        this.horizontalString = external_ko_["observable"](Object(_localization["d" /* getLocalization */])('Horizontal', 'ASPxReportsStringId.ReportDesigner_TextAlignment_Horizontal'));
        this.verticalString = external_ko_["observable"](Object(_localization["d" /* getLocalization */])('Vertical', 'ASPxReportsStringId.ReportDesigner_TextAlignment_Vertical'));
        this.disabled = object.disabled || external_ko_["observable"](false);
        this.value = object.value;
        this.updateModel(object.value());
        this._disposables.push(object.value.subscribe((newVal) => {
            this.updateModel(newVal);
        }));
    }
    _resetHorizontalValues() {
        this.left(false), this.right(false), this.center(false), this.justify(false);
    }
    _resetVerticalValues() {
        this.top(false), this.middle(false), this.bottom(false);
    }
    setValue(name, type) {
        if (this.disabled() || this[name]())
            return;
        if (type == 'Horizontal')
            this._resetHorizontalValues();
        else
            this._resetVerticalValues();
        this[name](true);
        this.updateValue();
    }
    updateModel(value) {
        var val = value || 'TopLeft';
        this.top(val.indexOf('Top') !== -1);
        this.middle(val.indexOf('Middle') !== -1);
        this.bottom(val.indexOf('Bottom') !== -1);
        this.left(val.indexOf('Left') !== -1);
        this.right(val.indexOf('Right') !== -1);
        this.center(val.indexOf('Center') !== -1);
        this.justify(val.indexOf('Justify') !== -1);
    }
    updateValue() {
        var result = [];
        this.top() ? result.push('Top') : null;
        this.middle() ? result.push('Middle') : null;
        this.bottom() ? result.push('Bottom') : null;
        this.left() ? result.push('Left') : null;
        this.right() ? result.push('Right') : null;
        this.center() ? result.push('Center') : null;
        this.justify() ? result.push('Justify') : null;
        this.value(result.join(''));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/textAlignmentEditor/_binding.js





external_ko_["bindingHandlers"]['dxTextAlignmentEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        external_jQuery_["fn"].constructor(element).children().remove();
        var templateHtml = getTemplate('dxrd-textalignment-editor'), $element = external_jQuery_["fn"].constructor(element).append(templateHtml);
        var model = new _textAlignmentEditor_TextAlignmentModel(valueAccessor());
        external_ko_["applyBindings"]({ value: model }, $element.children()[0]);
        Object(_internal["c" /* addDisposeCallback */])(element, () => model.dispose());
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/_dataMemberEditor.js
class DataMemberTreeListController {
    constructor() {
        this.selectedItem = null;
        this.suppressActions = true;
    }
    dispose() {
        this.selectedItem = null;
    }
    itemsFilter(item) {
        return item.specifics !== 'parameters' && (item.specifics === 'List' || item.specifics === 'ListSource' || item.isList === true || item.specifics === 'none');
    }
    hasItems(item) {
        return item.specifics !== 'none';
    }
    canSelect(value) {
        return (this.hasItems(value.data) && !!value.path && (value.data.specifics === 'List' || value.data.specifics === 'ListSource')) || value.data.specifics === 'none';
    }
    select(value) {
        if (this.canSelect(value)) {
            this.selectedItem && this.selectedItem.isSelected(false);
            this.selectedItem = value;
            value.isSelected(true);
        }
    }
    isDraggable(item) {
        return false;
    }
}

// EXTERNAL MODULE: external "DevExpress.ui.dxDropDownBox"
var external_DevExpress_ui_dxDropDownBox_ = __webpack_require__(44);
var external_DevExpress_ui_dxDropDownBox_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxDropDownBox_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/_fieldlistpicker.js






class _fieldlistpicker_dxFieldListPicker extends external_DevExpress_ui_dxDropDownBox_default.a {
    constructor($element, options) {
        var _a, _b;
        super($element, Object(_utils["b" /* extend */])(options, { showClearButton: true }));
        this._path = external_ko_["observable"]('');
        this._value = external_ko_["observable"]('');
        this._parentViewport = null;
        this._itemsProvider = external_ko_["observable"](null);
        this._hasDisplayNameOption = false;
        this._defaultPosition = null;
        var _$element = external_jQuery_["fn"].constructor($element);
        _$element.addClass('dx-fieldlistpicker');
        this.option('path') && this._path((_a = this.option('path')) === null || _a === void 0 ? void 0 : _a.toString());
        this.option('value') && this._value(this.option('value'));
        this.option('itemsProvider') && this._itemsProvider(this.option('itemsProvider'));
        this.option('valueChangeEvent', 'change');
        this.option('openOnFieldClick', this.option('acceptCustomValue') === false);
        this._parentViewport = _$element.parents('.dx-designer-viewport');
        if ('displayValue' in options) {
            this._hasDisplayNameOption = true;
            this.option('displayValue', options.displayValue);
            this._setTitle((_b = this.option('displayValue')) === null || _b === void 0 ? void 0 : _b.toString());
        }
    }
    updateOptions(options) {
        options.showClearButton = true;
    }
    _showDropDown() {
        if (this['_popup']) {
            var $element = external_jQuery_["fn"].constructor(this.element());
            this['_popup'].option('width', $element.width());
            var popupPosition = Object(_utils["b" /* extend */])(true, {}, this._defaultPosition, { boundary: this._parentViewport[0], boundaryOffset: '0 20', collision: 'none flip' });
            this['_popup'].option('position', popupPosition);
            this['_popup'].option('height', 'auto');
            this['_popup'].option('maxHeight', this._getMaxHeight());
            this['_popup'].repaint();
            external_jQuery_["fn"].constructor(this['_popup'].content())[0].style.height = 'auto';
            this['_popup']._renderPosition();
        }
    }
    _getMaxHeight() {
        var $element = external_jQuery_["fn"].constructor(this.element()), offset = $element.offset(), windowHeight = external_jQuery_["fn"].constructor(window).height(), maxHeight = Math.max(offset.top, windowHeight - offset.top - $element.outerHeight());
        return Math.min(.5 * windowHeight, maxHeight);
    }
    _closeOutsideDropDownHandler(e, ignoreContainerClicks) { super['_closeOutsideDropDownHandler'].apply(this, [e, true]); }
    _hideOnBlur() { return false; }
    _popupConfig() {
        var dxPolymorphWidget = this.option('integrationOptions')['templates']['dx-polymorph-widget'];
        var popuConfig = super['_popupConfig'].apply(this);
        this._defaultPosition = popuConfig.position;
        return Object(_utils["b" /* extend */])(popuConfig, {
            container: this._parentViewport,
            contentTemplate: dxPolymorphWidget && dxPolymorphWidget._template,
            hideOnOutsideClick: true
        });
    }
    _setTitle(text) {
        if (this.option('openOnFieldClick')) {
            external_jQuery_["fn"].constructor(this.element()).attr('title', text);
        }
    }
    _renderDisplayText(newValue) { super['_renderDisplayText'].apply(this, [newValue]); }
    _optionChanged(args) {
        var name = args.name, newValue = args.value;
        switch (name) {
            case 'value':
                this._value(newValue);
                if (!this._hasDisplayNameOption)
                    this._renderDisplayText(newValue);
                setTimeout(external_jQuery_["proxy"](() => {
                    this.option('opened', false);
                }, this), 50);
                break;
            case 'path':
                this._path(newValue);
                break;
            case 'itemsProvider':
                this._itemsProvider(newValue);
                break;
            case 'displayValue':
                this._renderDisplayText(newValue);
                this._setTitle(newValue);
                break;
            default:
                super['_optionChanged'].apply(this, arguments);
                if (name === 'opened' && newValue) {
                    this['_showDropDown']();
                }
        }
    }
    _clearValueHandler() {
        external_jQuery_["fn"].constructor(this['_input']()).val(null);
        super['_clearValueHandler'].apply(this, arguments);
    }
    _renderPopupContent() {
        super['_renderPopupContent'].apply(this, arguments);
        var selectedPath = external_ko_["pureComputed"]({
            read: () => {
                return this._path() ? this._path() + '.' + this._value() : this._value();
            },
            write: (newVal) => {
                if (this._path() && this._path().length > 0) {
                    this._value(newVal.substr(this._path().length + 1));
                    this.option('value', this._value());
                }
                else {
                    this._value(newVal);
                    this.option('value', this._value());
                }
            }
        });
        var element = external_jQuery_["fn"].constructor('<div>').addClass('dx-treelist-wrapper').get(0);
        var scroll = this['_createComponent'](element, 'dxScrollView', { scrollByThumb: true });
        var self = this;
        var $scrollContent = external_jQuery_["fn"].constructor(scroll['content']());
        var $element = external_jQuery_["fn"].constructor(this.element());
        $scrollContent.append(external_jQuery_["fn"].constructor('<div data-bind="treelist: options"></div>')[0]);
        var context = external_ko_["contextFor"]($element.get(0));
        var treeListController = this.option('treeListController');
        var options = external_ko_["computed"](() => {
            return {
                itemsProvider: this._itemsProvider(), onItemsVisibilityChanged: () => {
                    if (self['_popup']) {
                        self['_popup']._renderPosition();
                    }
                }, selectedPath: selectedPath, treeListController: treeListController, path: this._path
            };
        });
        var childContext = context.createChildContext({ options });
        external_ko_["applyBindingsToDescendants"](childContext, $scrollContent.get(0));
        external_jQuery_["fn"].constructor(this['_popup'].content()).append(element);
    }
}
external_DevExpress_registerComponent_default()('dxFieldListPicker', _fieldlistpicker_dxFieldListPicker);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/_popupEditorBase.js




class _popupEditorBase_PopupEditorBase extends utils["a" /* Disposable */] {
    constructor() {
        super();
        this.popupVisible = external_ko_["observable"](false);
        this.buttonItems = [];
        this._createMainPopupButtons();
    }
    _createMainPopupButtons() {
        var self = this;
        this._disposables.push(this._disableSaveButton = external_ko_["pureComputed"](() => !self.canSave()));
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: this.saveLocalization, type: 'default', stylingMode: 'contained', onClick: function (sender) { self.save(sender); }, disabled: this._disableSaveButton } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: this.cancelLocalization, type: 'normal', stylingMode: 'contained', onClick: function () { self.close(); } } }
        ];
        this._disposables.push(this._disableSaveButton);
    }
    canSave() {
        return true;
    }
    save(sender) {
        this.popupVisible(false);
    }
    close() {
        this.popupVisible(false);
    }
    get cancelLocalization() {
        return Object(_localization["d" /* getLocalization */])('Cancel', StringId.DataAccessBtnCancel);
    }
    get saveLocalization() {
        return Object(_localization["d" /* getLocalization */])('OK', StringId.DataAccessBtnOK);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/_requiredNullableEditor.js




class _requiredNullableEditor_RequiredNullableEditor extends editor_Editor {
    _getEditorValidationRules() {
        return (super._getEditorValidationRules() || []).concat(this.editorOptions && this.editorOptions.showClearButton && external_ko_["unwrap"](this.editorOptions.showClearButton) ? [] : internal_internal["e" /* requiredValidationRules */]);
    }
}
function createNumericEditor(dotNetTypeFullName, specifics) {
    class DynamicNumberEditor extends _requiredNullableEditor_RequiredNullableEditor {
        constructor(info, level, parentDisabled, textToSearch) {
            super(info, level, parentDisabled, textToSearch);
        }
        getOptions(templateOptions) {
            var options = super.getOptions(templateOptions);
            return _valueEditorHelper_ValueEditorHelper.getNumberEditorOptions(dotNetTypeFullName, specifics, options);
        }
    }
    return {
        header: 'dx-number-editor',
        editorType: DynamicNumberEditor
    };
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/dx-analytics-core-bindings.js

addToBindingsCache('template: \'dxrd-svg-properties-borders-none\', css: { \'dxd-state-active\': (!bottom() && !left() && !top() && !right()), \'dxrd-disabled-button\': disabled }, click: function() { setNone() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-none'; }, 'css': function () { return { 'dxd-state-active': (!$context.$data.bottom() && !$context.$data.left() && !$context.$data.top() && !$context.$data.right()), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setNone(); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-all\', css: { \'dxd-state-active\': (bottom() && left() && top() && right()), \'dxrd-disabled-button\': disabled  }, click: function() { setAll() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-all'; }, 'css': function () { return { 'dxd-state-active': ($context.$data.bottom() && $context.$data.left() && $context.$data.top() && $context.$data.right()), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setAll(); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-left'; }, 'css': function () { return { 'dxd-state-active': $context.$data.left(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('left'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-top'; }, 'css': function () { return { 'dxd-state-active': $context.$data.top(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('top'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-right'; }, 'css': function () { return { 'dxd-state-active': $context.$data.right(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('right'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-bottom'; }, 'css': function () { return { 'dxd-state-active': $context.$data.bottom(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('bottom'); }; } }; });
addToBindingsCache('with: value', function ($context, $element) { return { 'with': function () { return $context.$data.value; } }; });
addToBindingsCache('dxBorderEditor: { value: value, disabled: disabled }', function ($context, $element) { return { 'dxBorderEditor': function () { return { 'value': $context.$data.value, 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxColorBox: { value: displayValue, placeholder: $root.getLocalization(\'(Not set)\', \'ReportStringId.UD_PropertyGrid_NotSetText\'), editAlphaChannel: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flipfit\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } }, inputAttr: { \'aria-label\': displayName } }', function ($context, $element) { return { 'dxColorBox': function () { return { 'value': $context.$data.displayValue, 'placeholder': $context.$root.getLocalization('(Not set)', 'ReportStringId.UD_PropertyGrid_NotSetText'), 'editAlphaChannel': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flipfit', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } }, 'inputAttr': { 'aria-label': $context.$data.displayName } }; } }; });
addToBindingsCache('dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.dataBindingsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() })', function ($context, $element) { return { 'dxExpressionEditor': function () { return $context.$data.getOptions({ 'options': $context.$data.value, 'fieldListProvider': $context.$root.dataBindingsProvider, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }); } }; });
addToBindingsCache('if: $data.value()', function ($context, $element) { return { 'if': function () { return $context.$data.value(); } }; });
addToBindingsCache('dxFieldListPicker: { path: path, acceptCustomValue: true, value: value, displayValue: $displayName, itemsProvider: $root.dataBindingsProvider, treeListController: treeListController, disabled: disabled }', function ($context, $element) { return { 'dxFieldListPicker': function () { return { 'path': $context.$data.path, 'acceptCustomValue': true, 'value': $context.$data.value, 'displayValue': $context.$data.$displayName, 'itemsProvider': $context.$root.dataBindingsProvider, 'treeListController': $context.$data.treeListController, 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('displayNameExtender: { path: path, dataMember: value }', function ($context, $element) { return { 'displayNameExtender': function () { return { 'path': $context.$data.path, 'dataMember': $context.$data.value }; } }; });
addToBindingsCache('if: visible', function ($context, $element) { return { 'if': function () { return $context.$data.visible; } }; });
addToBindingsCache('dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$root.dataBindingsProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }; } }; });
addToBindingsCache('dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsGroupProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }', function ($context, $element) { return { 'dxFilterEditor': function () { return { 'options': $context.$data.value, 'fieldListProvider': $context.$root.dataBindingsGroupProvider, 'getDisplayNameByPath': $context.$root.getDisplayNameByPath, 'displayNameProvider': $context.$root.displayNameProvider && $context.$root.displayNameProvider() }; } }; });
addToBindingsCache('dxFormatEditor: { value: value, disabled: disabled, actions: $data.actions, customPatterns: $data.customPatterns }', function ($context, $element) { return { 'dxFormatEditor': function () { return { 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'actions': $context.$data.actions, 'customPatterns': $context.$data.customPatterns }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: (validationRules || []) }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return { 'validationRules': ($context.$data.validationRules || []) }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: viewmodel }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.viewmodel }; } }; });
addToBindingsCache('dxPropertyGrid: { target: ko.observable($data), level: $parent.level, textToSearch: $parent.textToSearch }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.ko.observable($context.$data), 'level': $context.$parent.level, 'textToSearch': $context.$parent.textToSearch }; } }; });
addToBindingsCache('dxPropertyGrid: { target: value, level: editor.level + 1, parentDisabled: editor.disabled }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$data.value, 'level': $context.$data.editor.level + 1, 'parentDisabled': $context.$data.editor.disabled }; } }; });
addToBindingsCache('if: $data.visible() && $data.editorCreated()', function ($context, $element) { return { 'if': function () { return $context.$data.visible() && $context.$data.editorCreated(); } }; });
addToBindingsCache('dxTextAlignmentEditor: { value: value, disabled: disabled }', function ($context, $element) { return { 'dxTextAlignmentEditor': function () { return { 'value': $context.$data.value, 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('treelist: options', function ($context, $element) { return { 'treelist': function () { return $context.$data.options; } }; });
addToBindingsCache('if: options', function ($context, $element) { return { 'if': function () { return $context.$data.options; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[0].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[0].transform() }; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[1].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[1].transform() }; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[2].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[2].transform() }; } }; });
addToBindingsCache('style: { transform: snapLineSurfaces[3].transform() }', function ($context, $element) { return { 'style': function () { return { 'transform': $context.$data.snapLineSurfaces[3].transform() }; } }; });
addToBindingsCache('template: templateName, click: function(_, e) { !$root.selection.disabled() && $root.selection.clickHandler($data, e); e.stopPropagation(); }', function ($context, $element) { return { 'template': function () { return $context.$data.templateName; }, 'click': function () { return function (_, e) { !$context.$root.selection.disabled() && $context.$root.selection.clickHandler($context.$data, e); e.stopPropagation(); }; } }; });
addToBindingsCache('cssArray: [surfaceClass($element), { \'dx-accessibility\': $data.accessibilityCompliant } ]', function ($context, $element) { return { 'cssArray': function () { return [$context.$data.surfaceClass($element), { 'dx-accessibility': $context.$data.accessibilityCompliant }]; } }; });
addToBindingsCache('visible: (!$data.designMode || designMode()), cssArray: [$data.rootStyle, { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl }]', function ($context, $element) { return { 'visible': function () { return (!$context.$data.designMode || $context.$data.designMode()); }, 'cssArray': function () { return [$context.$data.rootStyle, { 'dx-rtl': $context.$data.rtl, 'dx-ltr': !$context.$data.rtl }]; } }; });
addToBindingsCache('ifnot: isLoading', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isLoading; } }; });
addToBindingsCache('with: surface', function ($context, $element) { return { 'with': function () { return $context.$data.surface; } }; });
addToBindingsCache('if: isLoading', function ($context, $element) { return { 'if': function () { return $context.$data.isLoading; } }; });
addToBindingsCache('foreach: parts', function ($context, $element) { return { 'foreach': function () { return $context.$data.parts; } }; });
addToBindingsCache('template: { name: templateName, data: model }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data.model }; } }; });
addToBindingsCache('if: ($data.addOns)', function ($context, $element) { return { 'if': function () { return ($context.$data.addOns); } }; });
addToBindingsCache('foreach: addOns', function ($context, $element) { return { 'foreach': function () { return $context.$data.addOns; } }; });
addToBindingsCache('text: verticalString', function ($context, $element) { return { 'text': function () { return $context.$data.verticalString; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\', \'Vertical\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-top'; }, 'css': function () { return { 'dxd-state-active': $context.$data.top(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('top', 'Vertical'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-middle\', css: { \'dxd-state-active\': middle(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'middle\', \'Vertical\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-middle'; }, 'css': function () { return { 'dxd-state-active': $context.$data.middle(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('middle', 'Vertical'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\', \'Vertical\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-bottom'; }, 'css': function () { return { 'dxd-state-active': $context.$data.bottom(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('bottom', 'Vertical'); }; } }; });
addToBindingsCache('text: horizontalString', function ($context, $element) { return { 'text': function () { return $context.$data.horizontalString; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-left'; }, 'css': function () { return { 'dxd-state-active': $context.$data.left(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('left', 'Horizontal'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-center\', css: { \'dxd-state-active\': center(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'center\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-center'; }, 'css': function () { return { 'dxd-state-active': $context.$data.center(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('center', 'Horizontal'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-right'; }, 'css': function () { return { 'dxd-state-active': $context.$data.right(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('right', 'Horizontal'); }; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-justify\', css: { \'dxd-state-active\': justify(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'justify\', \'Horizontal\') }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-justify'; }, 'css': function () { return { 'dxd-state-active': $context.$data.justify(), 'dxrd-disabled-button': $context.$data.disabled }; }, 'click': function () { return function () { $context.$data.setValue('justify', 'Horizontal'); }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: togglePopoverVisible, disabled: disabled, icon: ko.unwrap($data.imageTemplateName), iconClass: ko.unwrap($data.imageClassName) }, attr: { id: id, title: text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.togglePopoverVisible, 'disabled': $context.$data.disabled, 'icon': $context.ko.unwrap($context.$data.imageTemplateName), 'iconClass': $context.ko.unwrap($context.$data.imageClassName) }; }, 'attr': function () { return { 'id': $context.$data.id, 'title': $context.$data.text }; } }; });
addToBindingsCache('dxPopup: { width: 235, height: \'auto\', position: { my: $root.rtl ? \'left top\': \'right top\', at: \'bottom\', of: (\'#\' + id) }, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, container: ($data.getContainer || function(_e, selector) { return selector; })($element, \'.dxrd-action-items-container\'), shading: false, visible: popoverVisible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 235, 'height': 'auto', 'position': { 'my': $context.$root.rtl ? 'left top' : 'right top', 'at': 'bottom', 'of': ('#' + $context.$data.id) }, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'container': ($context.$data.getContainer || function (_e, selector) { return selector; })($element, '.dxrd-action-items-container'), 'shading': false, 'visible': $context.$data.popoverVisible }; } }; });
addToBindingsCache('dxclick: clickAction, css: { \'dxrd-disabled-button\': disabled }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.clickAction; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled }; } }; });
addToBindingsCache('css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }', function ($context, $element) { return { 'css': function () { return $context.ko.unwrap($context.$data.imageClassName); }, 'template': function () { return { 'name': $context.ko.unwrap($context.$data.imageTemplateName), 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('if: $data.contentTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.contentTemplate; } }; });
addToBindingsCache('template: contentTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.contentTemplate; } }; });
addToBindingsCache('if: !$data.contentTemplate', function ($context, $element) { return { 'if': function () { return !$context.$data.contentTemplate; } }; });
addToBindingsCache('foreach: actions', function ($context, $element) { return { 'foreach': function () { return $context.$data.actions; } }; });
addToBindingsCache('styleunit: { top: $data.top, left: $data.left, width: $data.width, height: $data.height }, css: { \'dxrd-locked\': $data.isLocked }', function ($context, $element) { return { 'styleunit': function () { return { 'top': $context.$data.top, 'left': $context.$data.left, 'width': $context.$data.width, 'height': $context.$data.height }; }, 'css': function () { return { 'dxrd-locked': $context.$data.isLocked }; } }; });
addToBindingsCache('styleunit: { left: $data.left, top: $data.top, width: $data.width, height: $data.height }, css: $data.className', function ($context, $element) { return { 'styleunit': function () { return { 'left': $context.$data.left, 'top': $context.$data.top, 'width': $context.$data.width, 'height': $context.$data.height }; }, 'css': function () { return $context.$data.className; } }; });
addToBindingsCache('template: { name: $data.template, data: $data.data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data.data }; } }; });
addToBindingsCache('css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
addToBindingsCache('text: text, attr: { title: text }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('foreach: $data.controls()', function ($context, $element) { return { 'foreach': function () { return $context.$data.controls(); } }; });
addToBindingsCache('with: $parent.customData()', function ($context, $element) { return { 'with': function () { return $context.$parent.customData(); } }; });
addToBindingsCache('dxclick: function(e) { if(stopPropagation) { stopPropagation = false; } else { toggleAppMenu() } }, template: \'dxrd-svg-menu-menu\', css: {\'dxd-state-active\': appMenuVisible }', function ($context, $element) { return { 'dxclick': function () { return function (e) { if ($context.$data.stopPropagation) {
        $context.$data.stopPropagation = false;
    }
    else {
        $context.$data.toggleAppMenu();
    } }; }, 'template': function () { return 'dxrd-svg-menu-menu'; }, 'css': function () { return { 'dxd-state-active': $context.$data.appMenuVisible }; } }; });
addToBindingsCache('dxPopup: { width: 250, wrapperAttr: { class: \'dxd-menu-back-color dxd-back-primary2\' }, height: \'100%\' , position: $data.rtl ? { my: \'right top\' , at: \'left top\' , offset: \'-10 0\' } : { my: \'left top\' , at: \'right top\' , offset: \'10 0\' }, showTitle: false, showCloseButton: false, container: getMenuPopupContainer($element), target: getMenuPopupTarget($element), animation: {}, hideOnOutsideClick: function(e) { var buttonClassName = \'dxrd-menu-button-image\'; var parentClassList = e.target.parentNode && e.target.parentNode.parentNode && e.target.parentNode.parentNode.classList; stopPropagation = (e.target.classList && e.target.classList.contains(buttonClassName)) || (parentClassList && parentClassList.contains(buttonClassName)); return true; }, shading: false, focusStateEnabled: false, visible: appMenuVisible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 250, 'wrapperAttr': { 'class': 'dxd-menu-back-color dxd-back-primary2' }, 'height': '100%', 'position': $context.$data.rtl ? { 'my': 'right top', 'at': 'left top', 'offset': '-10 0' } : { 'my': 'left top', 'at': 'right top', 'offset': '10 0' }, 'showTitle': false, 'showCloseButton': false, 'container': $context.$data.getMenuPopupContainer($element), 'target': $context.$data.getMenuPopupTarget($element), 'animation': {}, 'hideOnOutsideClick': function (e) { var buttonClassName = 'dxrd-menu-button-image'; var parentClassList = e.target.parentNode && e.target.parentNode.parentNode && e.target.parentNode.parentNode.classList; $context.$data.stopPropagation = (e.target.classList && e.target.classList.contains(buttonClassName)) || (parentClassList && parentClassList.contains(buttonClassName)); return true; }, 'shading': false, 'focusStateEnabled': false, 'visible': $context.$data.appMenuVisible }; } }; });
addToBindingsCache('dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled }, visible: visible', function ($context, $element) { return { 'dxclick': function () { return function (e) { if ($context.$data.disabled && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$root.toggleAppMenu();
        $context.$data.clickAction($context.$root.model(), e);
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('text: $data.displayText && $data.displayText() || text, attr: { title: $data.displayText && $data.displayText() || text}', function ($context, $element) { return { 'text': function () { return $context.$data.displayText && $context.$data.displayText() || $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('visible: $data.hasSeparator', function ($context, $element) { return { 'visible': function () { return $context.$data.hasSeparator; } }; });
addToBindingsCache('foreach: actionLists.menuItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.actionLists.menuItems; } }; });
addToBindingsCache('dxdAccordion: { collapsed: collapsed }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed }; } }; });
addToBindingsCache('css: { \'dxrd-group-header-collapsed\': collapsed() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-group-header-collapsed': $context.$data.collapsed() }; } }; });
addToBindingsCache('template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; }, 'css': function () { return { 'dx-image-expanded': !$context.$data.collapsed() }; } }; });
addToBindingsCache('text: $root.actionsGroupTitle()', function ($context, $element) { return { 'text': function () { return $context.$root.actionsGroupTitle(); } }; });
addToBindingsCache('dxclick: function() { if($data.disabled && !$data.disabled() || !$data.disabled) { clickAction($root.editableObject()); } }, css: { \'dxrd-disabled-button\': $data.disabled && $data.disabled() }, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible)', function ($context, $element) { return { 'dxclick': function () { return function () { if ($context.$data.disabled && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$data.clickAction($context.$root.editableObject());
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled && $context.$data.disabled() }; }, 'visible': function () { return ($context.ko.unwrap($context.$data.visible) == undefined) || $context.ko.unwrap($context.$data.visible); } }; });
addToBindingsCache('css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('template: { name: \'dx-propertieseditor\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data }; } }; });
addToBindingsCache('visible: items.some(x => !x.visible || ko.unwrap(x.visible))', function ($context, $element) { return { 'visible': function () { return $context.$data.items.some(x => !x.visible || $context.ko.unwrap(x.visible)); } }; });
addToBindingsCache('text: group', function ($context, $element) { return { 'text': function () { return $context.$data.group; } }; });
addToBindingsCache('if: popularVisible', function ($context, $element) { return { 'if': function () { return $context.$data.popularVisible; } }; });
addToBindingsCache('foreach: (contextActions || [])', function ($context, $element) { return { 'foreach': function () { return ($context.$data.contextActions || []); } }; });
addToBindingsCache('if: $data.templateName', function ($context, $element) { return { 'if': function () { return $context.$data.templateName; } }; });
addToBindingsCache('template: templateName', function ($context, $element) { return { 'template': function () { return $context.$data.templateName; } }; });
addToBindingsCache('if: !$data.templateName', function ($context, $element) { return { 'if': function () { return !$context.$data.templateName; } }; });
addToBindingsCache('with: popularProperties', function ($context, $element) { return { 'with': function () { return $context.$data.popularProperties; } }; });
addToBindingsCache('foreach: (groupActions || [])', function ($context, $element) { return { 'foreach': function () { return ($context.$data.groupActions || []); } }; });
addToBindingsCache('foreach: (items || [])', function ($context, $element) { return { 'foreach': function () { return ($context.$data.items || []); } }; });
addToBindingsCache('template: { name: $data.templateName, if: $data.templateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'if': $context.$data.templateName }; } }; });
addToBindingsCache('css: { \'dx-property-grid-search-collapsed\': !isSearching() }', function ($context, $element) { return { 'css': function () { return { 'dx-property-grid-search-collapsed': !$context.$data.isSearching() }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': isSearching }, dxButtonWithTemplate: { onClick: switchSearchBox, icon: \'dxrd-svg-properties-search\', iconClass: \'image-search\' }, attr: { title: $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\') }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.isSearching }; }, 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.switchSearchBox, 'icon': 'dxrd-svg-properties-search', 'iconClass': 'image-search' }; }, 'attr': function () { return { 'title': $context.$root.getLocalization('Search', 'ASPxReportsStringId.SearchDialog_Header') }; } }; });
addToBindingsCache('dxTextBox: { value: textToSearch, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }, cacheElement: { action: function(element) { searchBox(element); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.textToSearch, 'valueChangeEvent': 'keyup', 'placeholder': $context.$data.searchPlaceholder(), 'showClearButton': true }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.searchBox(element); } }; } }; });
addToBindingsCache('visible: active() && visible()', function ($context, $element) { return { 'visible': function () { return $context.$data.active() && $context.$data.visible(); } }; });
addToBindingsCache('text: text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
addToBindingsCache('css: { \'dx-property-grid-search-collapsed\': isSearching }', function ($context, $element) { return { 'css': function () { return { 'dx-property-grid-search-collapsed': $context.$data.isSearching }; } }; });
addToBindingsCache('dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: focusedItem, displayExpr: displayExpr, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$root.controlsStore.dataSource, 'value': $context.$data.focusedItem, 'displayExpr': $context.$data.displayExpr, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('css: { \'dxd-state-active dxd-state-no-hover\': !isSortingByGroups() }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(false); }, icon: \'dxrd-svg-properties-sortingbyalphabet\', iconClass: \'image-sortingbyalphabet\' }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active dxd-state-no-hover': !$context.$data.isSortingByGroups() }; }, 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.isSortingByGroups(false); }, 'icon': 'dxrd-svg-properties-sortingbyalphabet', 'iconClass': 'image-sortingbyalphabet' }; } }; });
addToBindingsCache('css: { \'dxd-state-active dxd-state-no-hover\': isSortingByGroups }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(true); }, icon: \'dxrd-svg-properties-sortingbygroups\', iconClass: \'image-sortingbygroups\' }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active dxd-state-no-hover': $context.$data.isSortingByGroups }; }, 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.isSortingByGroups(true); }, 'icon': 'dxrd-svg-properties-sortingbygroups', 'iconClass': 'image-sortingbygroups' }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; } }; });
addToBindingsCache('visible: isSortingByGroups', function ($context, $element) { return { 'visible': function () { return $context.$data.isSortingByGroups; } }; });
addToBindingsCache('visible: visible', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('text: displayName()', function ($context, $element) { return { 'text': function () { return $context.$data.displayName(); } }; });
addToBindingsCache('dxLoadIndicator: { visible: !editorsCreated() }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': !$context.$data.editorsCreated() }; } }; });
addToBindingsCache('visible: editorsCreated', function ($context, $element) { return { 'visible': function () { return $context.$data.editorsCreated; } }; });
addToBindingsCache('visible: !isSortingByGroups()', function ($context, $element) { return { 'visible': function () { return !$context.$data.isSortingByGroups(); } }; });
addToBindingsCache('dxLoadIndicator: { visible: !allEditorsCreated() }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': !$context.$data.allEditorsCreated() }; } }; });
addToBindingsCache('visible: allEditorsCreated', function ($context, $element) { return { 'visible': function () { return $context.$data.allEditorsCreated; } }; });
addToBindingsCache('dxPopup: { width: 250, height: \'auto\', position: $data.rtl ? { my: \'left top\', at: \'right top\', of: popupService.target, collision: \'flipfit\' } : { my: \'right top\', at: \'left top\', of: popupService.target, collision: \'flipfit\' }, container: $root.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, visible: popupService.visible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 250, 'height': 'auto', 'position': $context.$data.rtl ? { 'my': 'left top', 'at': 'right top', 'of': $context.$data.popupService.target, 'collision': 'flipfit' } : { 'my': 'right top', 'at': 'left top', 'of': $context.$data.popupService.target, 'collision': 'flipfit' }, 'container': $context.$root.getPopupContainer($element), 'target': $context.$data.popupService.target, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'shading': false, 'visible': $context.$data.popupService.visible }; } }; });
addToBindingsCache('text: popupService.title, visible: popupService.title', function ($context, $element) { return { 'text': function () { return $context.$data.popupService.title; }, 'visible': function () { return $context.$data.popupService.title; } }; });
addToBindingsCache('dxMenu: { wrapperAttr: { class: \'dxd-button-back-color\' }, disabled: popupService.disabled, dataSource: popupService.actions, displayExpr: \'title\', cssClass: \'dxrd-editor-menu\', orientation: \'vertical\', showFirstSubmenuMode: \'onHover\', onSubmenuShowing: function(e) { e.submenu._overlay.option(\'container\', $root.getPopupContainer($element)) } }', function ($context, $element) { return { 'dxMenu': function () { return { 'wrapperAttr': { 'class': 'dxd-button-back-color' }, 'disabled': $context.$data.popupService.disabled, 'dataSource': $context.$data.popupService.actions, 'displayExpr': 'title', 'cssClass': 'dxrd-editor-menu', 'orientation': 'vertical', 'showFirstSubmenuMode': 'onHover', 'onSubmenuShowing': function (e) { e.submenu._overlay.option('container', $context.$root.getPopupContainer($element)); } }; } }; });
addToBindingsCache('dxclick: action', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; } }; });
addToBindingsCache('attr: { title: title }, text: title', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.title }; }, 'text': function () { return $context.$data.title; } }; });
addToBindingsCache('visible: $data.items && $data.items.length', function ($context, $element) { return { 'visible': function () { return $context.$data.items && $context.$data.items.length; } }; });
addToBindingsCache('if: $data.innerTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.innerTemplate; } }; });
addToBindingsCache('template: $data.innerTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.innerTemplate; } }; });
addToBindingsCache('with: model', function ($context, $element) { return { 'with': function () { return $context.$data.model; } }; });
addToBindingsCache('if: $root.controlsStore.visible()', function ($context, $element) { return { 'if': function () { return $context.$root.controlsStore.visible(); } }; });
addToBindingsCache('template: \'dx-propertygrid-searchbox\'', function ($context, $element) { return { 'template': function () { return 'dx-propertygrid-searchbox'; } }; });
addToBindingsCache('template: { name: \'dxrd-group-actions\', data: { groupActions: $root.contextGroupActions } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-group-actions', 'data': { 'groupActions': $context.$root.contextGroupActions } }; } }; });
addToBindingsCache('template: { name: \'dxrd-top-grid\', data: { contextActions: $root.contextActions, popularProperties: $root.popularProperties, collapsed: ko.observable(false), popularVisible: $root.popularVisible() && isSortingByGroups(), actionsGroupTitle: $root.actionsGroupTitle } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-top-grid', 'data': { 'contextActions': $context.$root.contextActions, 'popularProperties': $context.$root.popularProperties, 'collapsed': $context.ko.observable(false), 'popularVisible': $context.$root.popularVisible() && $context.$data.isSortingByGroups(), 'actionsGroupTitle': $context.$root.actionsGroupTitle } }; } }; });
addToBindingsCache('foreach: groups', function ($context, $element) { return { 'foreach': function () { return $context.$data.groups; } }; });
addToBindingsCache('ifnot: editorsCreated', function ($context, $element) { return { 'ifnot': function () { return $context.$data.editorsCreated; } }; });
addToBindingsCache('if: $data.editorsRendered()', function ($context, $element) { return { 'if': function () { return $context.$data.editorsRendered(); } }; });
addToBindingsCache('foreach: editors', function ($context, $element) { return { 'foreach': function () { return $context.$data.editors; } }; });
addToBindingsCache('template: editorTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.editorTemplate; } }; });
addToBindingsCache('if: ($index() === $parent.editors().length - 1 && $parent.editorsCreated(true))', function ($context, $element) { return { 'if': function () { return ($context.$index() === $context.$parent.editors().length - 1 && $context.$parent.editorsCreated(true)); } }; });
addToBindingsCache('foreach: $data.getEditors()', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(); } }; });
addToBindingsCache('if: ($index() === $parent._editors().length - 1 && $parent.allEditorsCreated(true))', function ($context, $element) { return { 'if': function () { return ($context.$index() === $context.$parent._editors().length - 1 && $context.$parent.allEditorsCreated(true)); } }; });
addToBindingsCache('template: \'dx-propertygrid-popupservice\'', function ($context, $element) { return { 'template': function () { return 'dx-propertygrid-popupservice'; } }; });
addToBindingsCache('if: $data.itemTemplate', function ($context, $element) { return { 'if': function () { return $context.$data.itemTemplate; } }; });
addToBindingsCache('template: $data.itemTemplate', function ($context, $element) { return { 'template': function () { return $context.$data.itemTemplate; } }; });
addToBindingsCache('ifnot: $data.itemTemplate', function ($context, $element) { return { 'ifnot': function () { return $context.$data.itemTemplate; } }; });
addToBindingsCache('dxTemplate: { name: \'content\' }', function () { return { dxTemplate: { name: 'content' } }; });
addToBindingsCache('dxTemplate: { name: \'item\' }', function () { return { dxTemplate: { name: 'item' } }; });
addToBindingsCache('styleunit: { width: tabPanel.width }, css: tabPanel.cssClasses(), resizable: tabPanel.getResizableOptions($element, 1, $root.calculateWithZoomFactor(325))', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.tabPanel.width }; }, 'css': function () { return $context.$data.tabPanel.cssClasses(); }, 'resizable': function () { return $context.$data.tabPanel.getResizableOptions($element, 1, $context.$root.calculateWithZoomFactor(325)); } }; });
addToBindingsCache('styleunit: { width: $data.headerWidth }, css: $data.cssClasses({\'dx-tab-panel-collapsed\':$data.collapsed }), accessibilityKeyboardHelper: $data.keyboardHelper', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.headerWidth }; }, 'css': function () { return $context.$data.cssClasses({ 'dx-tab-panel-collapsed': $context.$data.collapsed }); }, 'accessibilityKeyboardHelper': function () { return $context.$data.keyboardHelper; } }; });
addToBindingsCache('css: $data.cssClasses()', function ($context, $element) { return { 'css': function () { return $context.$data.cssClasses(); } }; });
addToBindingsCache('dxAction: { model: $data, action: function(s) { $parent.toggleTabVisibility({ model: s }); }}, css: { \'dxd-state-active dxd-state-no-hover\': active, \'dxrd-tab-item-disabled\': disabled }, attr: { title: $data.text, \'aria-label\': $data.text, \'aria-expanded\': $data.active }, visible: visible', function ($context, $element) { return { 'dxAction': function () { return { 'model': $context.$data, 'action': function (s) { $context.$parent.toggleTabVisibility({ 'model': s }); } }; }, 'css': function () { return { 'dxd-state-active dxd-state-no-hover': $context.$data.active, 'dxrd-tab-item-disabled': $context.$data.disabled }; }, 'attr': function () { return { 'title': $context.$data.text, 'aria-label': $context.$data.text, 'aria-expanded': $context.$data.active }; }, 'visible': function () { return $context.$data.visible; } }; });
addToBindingsCache('styleunit: { width: $data.width }, css: $data.cssClasses(), resizable: $data.getResizableOptions($element, 50, 340)', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width }; }, 'css': function () { return $context.$data.cssClasses(); }, 'resizable': function () { return $context.$data.getResizableOptions($element, 50, 340); } }; });
addToBindingsCache('foreach: tabPanel.tabs', function ($context, $element) { return { 'foreach': function () { return $context.$data.tabPanel.tabs; } }; });
addToBindingsCache('lazy: { template: $data.template }', function ($context, $element) { return { 'lazy': function () { return { 'template': $context.$data.template }; } }; });
addToBindingsCache('with: tabPanel', function ($context, $element) { return { 'with': function () { return $context.$data.tabPanel; } }; });
addToBindingsCache('foreach: $data.tabs', function ($context, $element) { return { 'foreach': function () { return $context.$data.tabs; } }; });
addToBindingsCache('dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\', disabled: disabled, onClick: toogle, hint: title }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'icon': 'dxrd-svg-operations-edit', 'iconClass': 'dx-image-edit', 'disabled': $context.$data.disabled, 'onClick': $context.$data.toogle, 'hint': $context.$data.title }; } }; });
addToBindingsCache('template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-toolbar-tmplt', 'data': $context.$data.actionLists.toolbarItems }; } }; });
addToBindingsCache('visible: visible, class: \'dxrd-toolbar-item-\' + $index(), css: {\'dxrd-toolbar-item-with-separator dxd-border-primary\': $data.hasSeparator }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'class': function () { return 'dxrd-toolbar-item-' + $context.$index(); }, 'css': function () { return { 'dxrd-toolbar-item-with-separator dxd-border-primary': $context.$data.hasSeparator }; } }; });
addToBindingsCache('attr: { \'aria-label\': $data.displayText && $data.displayText() || text, \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': ko.unwrap($data.disabled) ? \'true\' : \'false\', \'aria-checked\': $data.selected ? ($data.selected() ? \'true\' : \'false\') : null }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$data.displayText && $context.$data.displayText() || $context.$data.text, 'aria-hidden': $context.ko.unwrap($context.$data.visible) ? 'false' : 'true', 'aria-disabled': $context.ko.unwrap($context.$data.disabled) ? 'true' : 'false', 'aria-checked': $context.$data.selected ? ($context.$data.selected() ? 'true' : 'false') : null }; } }; });
addToBindingsCache('template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { class: \'dxrd-toolbar-item-image dxd-state-normal dxd-icon-highlighted \' + (ko.unwrap($data.imageClassName) || \'\'), title: $data.displayText && $data.displayText() || text }, }, dxclick: function() { if((typeof $data.disabled === \'function\') && !disabled() || !disabled) { clickAction($root.model && $root.model()); } }, css: {\'dxrd-disabled-button\': disabled, \'dxd-button-back-color dxd-back-highlighted dxd-state-active\': $data.selected }', function ($context, $element) { return { 'template': function () { return { 'name': $context.ko.unwrap($context.$data.imageTemplateName), 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'class': 'dxrd-toolbar-item-image dxd-state-normal dxd-icon-highlighted ' + ($context.ko.unwrap($context.$data.imageClassName) || ''), 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; }, '}': function () { return undefined; }, 'dxclick': function () { return function () { if ((typeof $context.$data.disabled === 'function') && !$context.$data.disabled() || !$context.$data.disabled) {
        $context.$data.clickAction($context.$root.model && $context.$root.model());
    } }; }, 'css': function () { return { 'dxrd-disabled-button': $context.$data.disabled, 'dxd-button-back-color dxd-back-highlighted dxd-state-active': $context.$data.selected }; } }; });
addToBindingsCache('foreach: $data', function ($context, $element) { return { 'foreach': function () { return $context.$data; } }; });
addToBindingsCache('template: { name: $data.templateName, data: $data.contentData || $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data.contentData || $context.$data }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true }; } }; });
addToBindingsCache('attr: { title: displayName }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, css: $data.imageClassName, draggable: $root.toolboxDragHandler', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'css': function () { return $context.$data.imageClassName; }, 'draggable': function () { return $context.$root.toolboxDragHandler; } }; });
addToBindingsCache('foreach: toolboxItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolboxItems; } }; });
addToBindingsCache('foreach: groupedToolboxItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.groupedToolboxItems; } }; });
addToBindingsCache('foreach: items', function ($context, $element) { return { 'foreach': function () { return $context.$data.items; } }; });
addToBindingsCache('dxSelectBox: { items: zoomLevels, value: $data.zoom, displayExpr: function(val) { return Math.round((val || this.option(\'value\')) * 100) + \'%\'; }, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: onCustomItemCreating, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.zoomLevels, 'value': $context.$data.zoom, 'displayExpr': function (val) { return Math.round((val || this.option('value')) * 100) + '%'; }, 'displayCustomValue': true, 'acceptCustomValue': true, 'onCustomItemCreating': $context.$data.onCustomItemCreating, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'useItemTextAsTitle': true }; } }; });
addToBindingsCache('dxclick: function(_, element) { showPopup(_, element) }, css: editorMenuButtonCss, attr: { title: hint }', function ($context, $element) { return { 'dxclick': function () { return function (_, element) { $context.$data.showPopup(_, element); }; }, 'css': function () { return $context.$data.editorMenuButtonCss; }, 'attr': function () { return { 'title': $context.$data.hint }; } }; });
addToBindingsCache('dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss', function ($context, $element) { return { 'dxclick': function () { return function (_, element) { $context.$data.showPopup(_, element); }; }, 'attr': function () { return { 'title': $context.$data.hint }; }, 'css': function () { return $context.$data.editorMenuButtonCss; } }; });
addToBindingsCache('template: { name: $data.imageTemplateName, if: ko.unwrap($data.imageTemplateName) }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': $context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
addToBindingsCache('if: $data.visible', function ($context, $element) { return { 'if': function () { return $context.$data.visible; } }; });
addToBindingsCache('template: $data.templateName', function ($context, $element) { return { 'template': function () { return $context.$data.templateName; } }; });
addToBindingsCache('ifnot: $data.templateName', function ($context, $element) { return { 'ifnot': function () { return $context.$data.templateName; } }; });
addToBindingsCache('if: !ko.unwrap($data.imageTemplateName)', function ($context, $element) { return { 'if': function () { return !$context.ko.unwrap($context.$data.imageTemplateName); } }; });
addToBindingsCache('if: ko.unwrap($data.imageTemplateName)', function ($context, $element) { return { 'if': function () { return $context.ko.unwrap($context.$data.imageTemplateName); } }; });
addToBindingsCache('dxdAccordion: { collapsed: collapsed, alwaysShow: alwaysShow }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed, 'alwaysShow': $context.$data.alwaysShow }; } }; });
addToBindingsCache(', attr: {\'aria-expanded\': !collapsed() ? \'true\' : \'false\' }', function ($context, $element) { return { '': function () { return undefined; }, 'attr': function () { return { 'aria-expanded': !$context.$data.collapsed() ? 'true' : 'false' }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: up, disabled: isDisabledButton(\'up\'), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dx-image-moveup\' }, attr: { title: getDisplayTextButton(\'up\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.up, 'disabled': $context.$data.isDisabledButton('up'), 'icon': 'dxrd-svg-operations-moveup', 'iconClass': 'dx-image-moveup' }; }, 'attr': function () { return { 'title': $context.$data.getDisplayTextButton('up') }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: down, disabled: isDisabledButton(\'down\'), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dx-image-movedown\' }, attr: { title: getDisplayTextButton(\'down\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.down, 'disabled': $context.$data.isDisabledButton('down'), 'icon': 'dxrd-svg-operations-movedown', 'iconClass': 'dx-image-movedown' }; }, 'attr': function () { return { 'title': $context.$data.getDisplayTextButton('down') }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: add, disabled: isDisabledButton(\'add\'), icon: \'dxrd-svg-operations-add\', iconClass: \'dx-image-add\' }, attr: { title: getDisplayTextButton(\'add\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.add, 'disabled': $context.$data.isDisabledButton('add'), 'icon': 'dxrd-svg-operations-add', 'iconClass': 'dx-image-add' }; }, 'attr': function () { return { 'title': $context.$data.getDisplayTextButton('add') }; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: remove, disabled: isDisabledButton(\'delete\'), icon: \'dxrd-svg-operations-remove\', iconClass: \'dx-image-remove\' }, attr: { title: getDisplayTextButton(\'delete\') }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': $context.$data.remove, 'disabled': $context.$data.isDisabledButton('delete'), 'icon': 'dxrd-svg-operations-remove', 'iconClass': 'dx-image-remove' }; }, 'attr': function () { return { 'title': $context.$data.getDisplayTextButton('delete') }; } }; });
addToBindingsCache('styleunit: { \'paddingLeft\': padding }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingLeft': $context.$data.padding }; } }; });
addToBindingsCache('text: displayName, attr: { title: displayName }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('attr:{\'aria-hidden\': collapsed() ? \'true\' : \'false\'}', function ($context, $element) { return { 'attr': function () { return { 'aria-hidden': $context.$data.collapsed() ? 'true' : 'false' }; } }; });
addToBindingsCache('visible: !disabled(), dxScrollView: { showScrollbar: \'onHover\', disabled: !showScroll, useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'visible': function () { return !$context.$data.disabled(); }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'disabled': !$context.$data.showScroll, 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
addToBindingsCache('text: getDisplayTextEmptyArray()', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayTextEmptyArray(); } }; });
addToBindingsCache('foreach: values', function ($context, $element) { return { 'foreach': function () { return $context.$data.values; } }; });
addToBindingsCache('with: $parent.createCollectionItemWrapper($parents[1], $index, $element)', function ($context, $element) { return { 'with': function () { return $context.$parent.createCollectionItemWrapper($context.$parents[1], $context.$index, $element); } }; });
addToBindingsCache('attr: { \'aria-selected\': $parents[1].selectedIndex() === $index() }, dxAction: { model: $data, action: $parents[1].select }, css: { \'dxd-state-selected\' : $parents[1].selectedIndex() === $index() }', function ($context, $element) { return { 'attr': function () { return { 'aria-selected': $context.$parents[1].selectedIndex() === $context.$index() }; }, 'dxAction': function () { return { 'model': $context.$data, 'action': $context.$parents[1].select }; }, 'css': function () { return { 'dxd-state-selected': $context.$parents[1].selectedIndex() === $context.$index() }; } }; });
addToBindingsCache('if: showButtons', function ($context, $element) { return { 'if': function () { return $context.$data.showButtons; } }; });
addToBindingsCache('if: isVisibleButton(\'up\')', function ($context, $element) { return { 'if': function () { return $context.$data.isVisibleButton('up'); } }; });
addToBindingsCache('if: isVisibleButton(\'down\')', function ($context, $element) { return { 'if': function () { return $context.$data.isVisibleButton('down'); } }; });
addToBindingsCache('if: isVisibleButton(\'add\')', function ($context, $element) { return { 'if': function () { return $context.$data.isVisibleButton('add'); } }; });
addToBindingsCache('if: isVisibleButton(\'delete\')', function ($context, $element) { return { 'if': function () { return $context.$data.isVisibleButton('delete'); } }; });
addToBindingsCache('if: displayName', function ($context, $element) { return { 'if': function () { return $context.$data.displayName; } }; });
addToBindingsCache('if: values().length === 0 && showButtons', function ($context, $element) { return { 'if': function () { return $context.$data.values().length === 0 && $context.$data.showButtons; } }; });
addToBindingsCache('if: values().length !== 0', function ($context, $element) { return { 'if': function () { return $context.$data.values().length !== 0; } }; });
addToBindingsCache('dxCheckBox: getOptions({ value: value, disabled: disabled, elementAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxCheckBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'elementAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: [ { val: true, text: $root.getLocalization(\'Yes\', \'AnalyticsCoreStringId.ParametersPanel_True\') }, { val: false, text: $root.getLocalization(\'No\', \'AnalyticsCoreStringId.ParametersPanel_False\') }], inputAttr: { \'aria-label\': displayName }, valueExpr: \'val\', displayExpr: \'text\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': [{ 'val': true, 'text': $context.$root.getLocalization('Yes', 'AnalyticsCoreStringId.ParametersPanel_True') }, { 'val': false, 'text': $context.$root.getLocalization('No', 'AnalyticsCoreStringId.ParametersPanel_False') }], 'inputAttr': { 'aria-label': $context.$data.displayName }, 'valueExpr': 'val', 'displayExpr': 'text', 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'displayName': $context.$data.displayName, 'level': $context.$data.level, 'info': $context.$data.info }; } }; });
addToBindingsCache('text: $data.display, attr: { title: $data.display }', function ($context, $element) { return { 'text': function () { return $context.$data.display; }, 'attr': function () { return { 'title': $context.$data.display }; } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName }}, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: $data.validationRules || [] })', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName } }; }, 'dxValidator': function () { return $context.$data.getValidatorOptions($context.$data.validatorOptions || { 'validationRules': $context.$data.validationRules || [] }); } }; });
addToBindingsCache('dxSelectBox: getOptions({ items: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, useItemTextAsTitle: true, placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, acceptCustomValue: true, onCustomItemCreating: function(arg) { return { value: arg.text, displayValue: arg.text }; }, dropDownOptions: { container: $root.getPopupContainer($element) } })', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'items': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'disabled': $context.$data.disabled, 'useItemTextAsTitle': true, 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'acceptCustomValue': true, 'onCustomItemCreating': function (arg) { return { 'value': arg.text, 'displayValue': arg.text }; }, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }); } }; });
addToBindingsCache('dxLocalizedSelectBox: { dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })', function ($context, $element) { return { 'dxLocalizedSelectBox': function () { return { 'dataSource': $context.$data.values, 'value': $context.$data.generateValue($context.$root.undoEngine), 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) } }; }, 'dxValidator': function () { return $context.$data.getValidatorOptions($context.$data.validatorOptions || { 'validationRules': $context.$data.validationRules || [] }); } }; });
addToBindingsCache('attr: { role: isComplexEditor && \'tab\', \'id\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-trigger\'), \'aria-controls\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-expanded\': isComplexEditor && (!collapsed() ? \'true\' : \'false\') }, css: {\'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor}', function ($context, $element) { return { 'attr': function () { return { 'role': $context.$data.isComplexEditor && 'tab', 'id': $context.$data.isComplexEditor && $context.$data.getIdByDisplayName('dxrd-accordion-trigger'), 'aria-controls': $context.$data.isComplexEditor && $context.$data.getIdByDisplayName('dxrd-accordion-pannel'), 'aria-expanded': $context.$data.isComplexEditor && (!$context.$data.collapsed() ? 'true' : 'false') }; }, 'css': function () { return { 'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented': $context.$data.isComplexEditor }; } }; });
addToBindingsCache('styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\' }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-accordion-empty': $context.$data.templateName === 'dx-emptyHeader' }; } }; });
addToBindingsCache('enable: templateName === \'dx-emptyHeader\'', function ($context, $element) { return { 'enable': function () { return $context.$data.templateName === 'dx-emptyHeader'; } }; });
addToBindingsCache('searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$data.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName }', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; } }; });
addToBindingsCache('searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }, css: { \'dx-field-label-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayName, 'textToSearch': $context.$data.textToSearch }; }, 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dx-field-label-required': $context.$data.isRequired }; }, 'style': function () { return { 'fontWeight': $context.$data.isPropertyModified() ? 'Bold' : '' }; } }; });
addToBindingsCache('text: displayName, attr: { \'title\': displayName }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; }, 'attr': function () { return { 'title': $context.$data.displayName }; }, 'css': function () { return { 'dx-property-required': $context.$data.isRequired }; }, 'style': function () { return { 'fontWeight': $context.$data.isPropertyModified() ? 'Bold' : '' }; } }; });
addToBindingsCache('css: { \'dxd-border-accented\': $data.isPropertyHighlighted }', function ($context, $element) { return { 'css': function () { return { 'dxd-border-accented': $context.$data.isPropertyHighlighted }; } }; });
addToBindingsCache('service: { name: \'createEditorAddOn\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createEditorAddOn' }; } }; });
addToBindingsCache('attr:{\'aria-labelledby\': getIdByDisplayName(\'dxrd-accordion-trigger\'), \'id\': getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-hidden\': collapsed() ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'aria-labelledby': $context.$data.getIdByDisplayName('dxrd-accordion-trigger'), 'id': $context.$data.getIdByDisplayName('dxrd-accordion-pannel'), 'aria-hidden': $context.$data.collapsed() ? 'true' : 'false' }; } }; });
addToBindingsCache('if: isComplexEditor', function ($context, $element) { return { 'if': function () { return $context.$data.isComplexEditor; } }; });
addToBindingsCache('if: !!$data.textToSearch', function ($context, $element) { return { 'if': function () { return !!$context.$data.textToSearch; } }; });
addToBindingsCache('ifnot: !!$data.textToSearch', function ($context, $element) { return { 'ifnot': function () { return !!$context.$data.textToSearch; } }; });
addToBindingsCache('if: !isComplexEditor', function ($context, $element) { return { 'if': function () { return !$context.$data.isComplexEditor; } }; });
addToBindingsCache('if: templateName !== \'dx-emptyHeader\'', function ($context, $element) { return { 'if': function () { return $context.$data.templateName !== 'dx-emptyHeader'; } }; });
addToBindingsCache('lazy: { innerBindings: { template: templateName }, isResolved: $data.isRendered }', function ($context, $element) { return { 'lazy': function () { return { 'innerBindings': { 'template': $context.$data.templateName }, 'isResolved': $context.$data.isRendered }; } }; });
addToBindingsCache('if: (!$data.editorCreated || editorCreated)', function ($context, $element) { return { 'if': function () { return (!$context.$data.editorCreated || $context.$data.editorCreated); } }; });
addToBindingsCache('template: contentTemplateName', function ($context, $element) { return { 'template': function () { return $context.$data.contentTemplateName; } }; });
addToBindingsCache('dxDateBox: getOptions({ value: value, closeOnValueChange: true, type: \'datetime\', disabled: disabled, inputAttr: { \'aria-label\': displayName }, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'closeOnValueChange': true, 'type': 'datetime', 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName }, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flip', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'File', 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { bold(!bold()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.bold(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.bold(!$context.$data.bold());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { italic(!italic()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.italic(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.italic(!$context.$data.italic());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { underline(!underline()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.underline(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.underline(!$context.$data.underline());
    } }; } }; });
addToBindingsCache('css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { strikeout(!strikeout()); } }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-active': $context.$data.strikeout(), 'dx-disabled-button': $context.$parent.disabled }; }, 'click': function () { return function () { if (!$context.$parent.disabled()) {
        $context.$data.strikeout(!$context.$data.strikeout());
    } }; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-bold\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-bold'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-italic\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-italic'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-underline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-underline'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-strikeout\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-strikeout'; } }; });
addToBindingsCache('dxFileImagePicker: { value: value, placeholderId: \'Image\', accept: \'image/*\', type: \'img\', disabled: disabled }', function ($context, $element) { return { 'dxFileImagePicker': function () { return { 'value': $context.$data.value, 'placeholderId': 'Image', 'accept': 'image/*', 'type': 'img', 'disabled': $context.$data.disabled }; } }; });
addToBindingsCache('dxNumberBox: getOptions({ value:value, showSpinButtons:true, disabled:disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'showSpinButtons': true, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName }}), dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return $context.$data.getValidatorOptions($context.$data.validatorOptions || { 'validationRules': $context.$data.validationRules || [] }); } }; });
addToBindingsCache('dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName }})', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getOptions({ 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'inputAttr': { 'aria-label': $context.$data.displayName } }); } }; });
addToBindingsCache('value: value, disable: disabled', function ($context, $element) { return { 'value': function () { return $context.$data.value; }, 'disable': function () { return $context.$data.disabled; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.value = _z; } }; } }; });
addToBindingsCache('if: $data.validationRules', function ($context, $element) { return { 'if': function () { return $context.$data.validationRules; } }; });
addToBindingsCache('if: !$data.validationRules', function ($context, $element) { return { 'if': function () { return !$context.$data.validationRules; } }; });
addToBindingsCache('css: { \'dx-rtl\' : rtl }', function ($context, $element) { return { 'css': function () { return { 'dx-rtl': $context.$data.rtl }; } }; });
addToBindingsCache('foreach: getEditors()', function ($context, $element) { return { 'foreach': function () { return $context.$data.getEditors(); } }; });
addToBindingsCache('dxPopup: { showTitle: true, width: \'750px\', height: \'475px\', title: title(), rtlEnabled: rtl, visible: popupVisible, wrapperAttr: { class: className }, toolbarItems: buttonItems, showCloseButton: true, container: $root.getPopupContainer($element), position: { of: $root.getPopupContainer($element) }, }', function ($context, $element) { return { 'dxPopup': function () { return { 'showTitle': true, 'width': '750px', 'height': '475px', 'title': $context.$data.title(), 'rtlEnabled': $context.$data.rtl, 'visible': $context.$data.popupVisible, 'wrapperAttr': { 'class': $context.$data.className }, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$root.getPopupContainer($element), 'position': { 'of': $context.$root.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxDataGrid: queriesGrid', function ($context, $element) { return { 'dxDataGrid': function () { return $context.$data.queriesGrid; } }; });
addToBindingsCache('dxDropDownButton: $data', function ($context, $element) { return { 'dxDropDownButton': function () { return $context.$data; } }; });
addToBindingsCache('if: $data', function ($context, $element) { return { 'if': function () { return $context.$data; } }; });
addToBindingsCache('template: { name: $data._queriesPopupHelper.template, data: _queriesPopupHelper }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data._queriesPopupHelper.template, 'data': $context.$data._queriesPopupHelper }; } }; });
addToBindingsCache('foreach: $data.popupItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.popupItems; } }; });
addToBindingsCache('template: { name: template, data: model }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.template, 'data': $context.$data.model }; } }; });
addToBindingsCache('with: options', function ($context, $element) { return { 'with': function () { return $context.$data.options; } }; });
addToBindingsCache('dxTextArea: { value: textAreaValue, isValid: isValid, spellcheck: false, onKeyUp: function() { isValid(true); } }, resizable: resizeHelper.resizable($root.resizeHandler, \'s\', $element)', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.textAreaValue, 'isValid': $context.$data.isValid, 'spellcheck': false, 'onKeyUp': function () { $context.$data.isValid(true); } }; }, 'resizable': function () { return $context.$data.resizeHelper.resizable($context.$root.resizeHandler, 's', $element); } }; });
addToBindingsCache('dxAceEditor: { value: textAreaValue, editorContainer: editorContainer, theme: theme, options: aceOptions, additionalOptions: additionalOptions, callbacks: callbacks }, resizable: resizeHelper.resizable($root.resizeHandler, \'s\', $element)', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.textAreaValue, 'editorContainer': $context.$data.editorContainer, 'theme': $context.$data.theme, 'options': $context.$data.aceOptions, 'additionalOptions': $context.$data.additionalOptions, 'callbacks': $context.$data.callbacks }; }, 'resizable': function () { return $context.$data.resizeHelper.resizable($context.$root.resizeHandler, 's', $element); } }; });
addToBindingsCache('visible: visible,  attr: { class: \'dx-expressioneditor-tools-tab dxd-back-primary2 \'+ ($data.templateName ? $data.templateName : \'\')}', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'attr': function () { return { 'class': 'dx-expressioneditor-tools-tab dxd-back-primary2 ' + ($context.$data.templateName ? $context.$data.templateName : '') }; } }; });
addToBindingsCache('dxEllipsisEditor: { value: displayValue, buttonAction: function() { popupVisible(true); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.displayValue, 'buttonAction': function () { $context.$data.popupVisible(true); }, 'disabled': $context.$data.disabled, 'isValid': $context.$data.modelValueValid, 'warningMessage': $context.$data.modelValueWarning }; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dx-popup-general\' }, title: title(), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'615px\', maxHeight: \'90%\', maxWidth: \'90%\', minHeight: 400, minWidth: 500, width: \'645px\', container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onContentReady: onContentReady, onShowing: onShowing, onHiding: onHiding, onShown: onShown, resizeEnabled: true }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'showTitle': true, 'wrapperAttr': { 'class': 'dx-expressioneditor dx-popup-general' }, 'title': $context.$data.title(), 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'fullScreen': false, 'height': '615px', 'maxHeight': '90%', 'maxWidth': '90%', 'minHeight': 400, 'minWidth': 500, 'width': '645px', 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) }, 'onContentReady': $context.$data.onContentReady, 'onShowing': $context.$data.onShowing, 'onHiding': $context.$data.onHiding, 'onShown': $context.$data.onShown, 'resizeEnabled': true }; } }; });
addToBindingsCache('if: !aceAvailable', function ($context, $element) { return { 'if': function () { return !$context.$data.aceAvailable; } }; });
addToBindingsCache('if: aceAvailable', function ($context, $element) { return { 'if': function () { return $context.$data.aceAvailable; } }; });
addToBindingsCache('with: tools', function ($context, $element) { return { 'with': function () { return $context.$data.tools; } }; });
addToBindingsCache('foreach: toolBox', function ($context, $element) { return { 'foreach': function () { return $context.$data.toolBox; } }; });
addToBindingsCache('template: { name: $data.templateName }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName }; } }; });
addToBindingsCache('template: \'dx-expressioneditor-popup\'', function ($context, $element) { return { 'template': function () { return 'dx-expressioneditor-popup'; } }; });
addToBindingsCache('if: popupVisible', function ($context, $element) { return { 'if': function () { return $context.$data.popupVisible; } }; });
addToBindingsCache('template: "dx-expressioneditor-main"', function ($context, $element) { return { 'template': function () { return 'dx-expressioneditor-main'; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }, resizable: $parents[1].resizeHelper.resizable($root.resizeHandler, \'e\')', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; }, 'resizable': function () { return $context.$parents[1].resizeHelper.resizable($context.$root.resizeHandler, 'e'); } }; });
addToBindingsCache('css: {\'dxd-state-selected\': content.isSelected }, text: displayName, dxclick: function() { $parent.click($data.content) }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.content.isSelected }; }, 'text': function () { return $context.$data.displayName; }, 'dxclick': function () { return function () { $context.$parent.click($context.$data.content); }; } }; });
addToBindingsCache('css: {\'dxd-state-selected\': $data.isSelected }, dxclick: function() { $data.updateContent($data.allItems(), $data.isSelected); $parent.click($data.content) }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; }, 'dxclick': function () { return function () { $context.$data.updateContent($context.$data.allItems(), $context.$data.isSelected); $context.$parent.click($context.$data.content); }; } }; });
addToBindingsCache('text: displayName', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; } }; });
addToBindingsCache('css: {\'dxd-state-selected\': isSelected }, text: $data.display, dxclick: function() { $parent.updateContent($data.data, $data.isSelected); $parents[1].click($parent.content); }', function ($context, $element) { return { 'css': function () { return { 'dxd-state-selected': $context.$data.isSelected }; }, 'text': function () { return $context.$data.display; }, 'dxclick': function () { return function () { $context.$parent.updateContent($context.$data.data, $context.$data.isSelected); $context.$parents[1].click($context.$parent.content); }; } }; });
addToBindingsCache('foreach: content', function ($context, $element) { return { 'foreach': function () { return $context.$data.content; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; } }; });
addToBindingsCache('text: content', function ($context, $element) { return { 'text': function () { return $context.$data.content; } }; });
addToBindingsCache('treeListSearchPanel: { controllers: [ ko.unwrap($data.parameters) ? ko.unwrap($data.parameters).treeListController : ko.unwrap($data.parameters), ko.unwrap($data.fields) ? ko.unwrap($data.fields).treeListController : ko.unwrap($data.fields) ] }', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': [$context.ko.unwrap($context.$data.parameters) ? $context.ko.unwrap($context.$data.parameters).treeListController : $context.ko.unwrap($context.$data.parameters), $context.ko.unwrap($context.$data.fields) ? $context.ko.unwrap($context.$data.fields).treeListController : $context.ko.unwrap($context.$data.fields)] }; } }; });
addToBindingsCache('treelist: fields', function ($context, $element) { return { 'treelist': function () { return $context.$data.fields; } }; });
addToBindingsCache('treelist: parameters', function ($context, $element) { return { 'treelist': function () { return $context.$data.parameters; } }; });
addToBindingsCache('visible: visible, event: { dblclick: function() { actions[0].clickAction($element); }}, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'event': function () { return { 'dblclick': function () { $context.$data.actions[0].clickAction($element); } }; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected': $context.$data.isSelected }; } }; });
addToBindingsCache('css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'template': function () { return 'dxrd-svg-collapsed'; }, 'click': function () { return $context.$data.toggleCollapsed; } }; });
addToBindingsCache('css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }', function ($context, $element) { return { 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('click: toggleSelected', function ($context, $element) { return { 'click': function () { return $context.$data.toggleSelected; } }; });
addToBindingsCache('if: fields', function ($context, $element) { return { 'if': function () { return $context.$data.fields; } }; });
addToBindingsCache('if: $data.parameters', function ($context, $element) { return { 'if': function () { return $context.$data.parameters; } }; });
addToBindingsCache('if: hasItems', function ($context, $element) { return { 'if': function () { return $context.$data.hasItems; } }; });
addToBindingsCache('ifnot: hasItems', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hasItems; } }; });
addToBindingsCache('template: { name: \'dx-treelist-item-text-content\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-treelist-item-text-content' }; } }; });
addToBindingsCache('attr: { class: \'dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted \' + ($data.class ? $data.class : \'\') }, text: $data.displayName || $data.text, css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }', function ($context, $element) { return { 'attr': function () { return { 'class': 'dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted ' + ($context.$data.class ? $context.$data.class : '') }; }, 'text': function () { return $context.$data.displayName || $context.$data.text; }, 'css': function () { return { 'dx-expressioneditor-state-selected dxd-state-selected': $context.$parent.selectedItem() === $context.$data }; }, 'dxclick': function () { return function () { $context.$parent.selectedItem($context.$data); $context.$parents[2].click($context.$data); }; }, 'event': function () { return { 'dblclick': function () { $context.$parents[2].dblclick($context.$data, $element); } }; } }; });
addToBindingsCache('dxTextBox: { value: textToSearch, showClearButton: true, valueChangeEvent: \'keyup\', placeholder: $parents[2].searchPlaceholder() }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.textToSearch, 'showClearButton': true, 'valueChangeEvent': 'keyup', 'placeholder': $context.$parents[2].searchPlaceholder() }; } }; });
addToBindingsCache('css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }, searchHighlighting: { text: $data.displayName || $data.text, textToSearch: $parent.textToSearch }', function ($context, $element) { return { 'css': function () { return { 'dx-expressioneditor-state-selected dxd-state-selected': $context.$parent.selectedItem() === $context.$data }; }, 'dxclick': function () { return function () { $context.$parent.selectedItem($context.$data); $context.$parents[2].click($context.$data); }; }, 'event': function () { return { 'dblclick': function () { $context.$parents[2].dblclick($context.$data, $element); } }; }, 'searchHighlighting': function () { return { 'text': $context.$data.displayName || $context.$data.text, 'textToSearch': $context.$parent.textToSearch }; } }; });
addToBindingsCache('with: content', function ($context, $element) { return { 'with': function () { return $context.$data.content; } }; });
addToBindingsCache('template: $data', function ($context, $element) { return { 'template': function () { return $context.$data; } }; });
addToBindingsCache('foreach: availableItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.availableItems; } }; });
addToBindingsCache('css: { \'advanced\': advancedMode }', function ($context, $element) { return { 'css': function () { return { 'advanced': $context.$data.advancedMode }; } }; });
addToBindingsCache('css: { \'advanced\': advancedMode }, visible: textVisible', function ($context, $element) { return { 'css': function () { return { 'advanced': $context.$data.advancedMode }; }, 'visible': function () { return $context.$data.textVisible; } }; });
addToBindingsCache('dxCheckBox: { value: advancedMode, text: advancedModeText }', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.advancedMode, 'text': $context.$data.advancedModeText }; } }; });
addToBindingsCache('style: { height: plainContentHeightPerc }', function ($context, $element) { return { 'style': function () { return { 'height': $context.$data.plainContentHeightPerc }; } }; });
addToBindingsCache('css: { \'advanced\': advancedMode }, style: { height: textContentHeightPerc }', function ($context, $element) { return { 'css': function () { return { 'advanced': $context.$data.advancedMode }; }, 'style': function () { return { 'height': $context.$data.textContentHeightPerc }; } }; });
addToBindingsCache('css: { \'advanced\': advancedMode }, style: { height: treeContentHeightPerc }', function ($context, $element) { return { 'css': function () { return { 'advanced': $context.$data.advancedMode }; }, 'style': function () { return { 'height': $context.$data.treeContentHeightPerc }; } }; });
addToBindingsCache('dxTextArea: { value: displayValue, isValid: isValid, onInput: onInput, spellcheck: false }, cacheElement: { action: function(element) { cacheElement(element) } }', function ($context, $element) { return { 'dxTextArea': function () { return { 'value': $context.$data.displayValue, 'isValid': $context.$data.isValid, 'onInput': $context.$data.onInput, 'spellcheck': false }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElement(element); } }; } }; });
addToBindingsCache('css: {\'dx-invalid\': !$data.isValid(), \'dx-state-focused\': textFocused }', function ($context, $element) { return { 'css': function () { return { 'dx-invalid': !$context.$data.isValid(), 'dx-state-focused': $context.$data.textFocused }; } }; });
addToBindingsCache('dxAceEditor: { value: $data.displayValue, theme: helper.aceTheme, editorContainer: editorContainer, options: aceOptions, additionalOptions: additionalOptions }', function ($context, $element) { return { 'dxAceEditor': function () { return { 'value': $context.$data.displayValue, 'theme': $context.$data.helper.aceTheme, 'editorContainer': $context.$data.editorContainer, 'options': $context.$data.aceOptions, 'additionalOptions': $context.$data.additionalOptions }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\', direction: \'both\' }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'direction': 'both' }; } }; });
addToBindingsCache('dxclick: function() { $data.advancedMode(true); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$data.advancedMode(true); }; } }; });
addToBindingsCache('text: invalidMessage()', function ($context, $element) { return { 'text': function () { return $context.$data.invalidMessage(); } }; });
addToBindingsCache('template: \'dx-filtereditor-content-tree\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-tree'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content-text\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-text'; } }; });
addToBindingsCache('with: operandSurface', function ($context, $element) { return { 'with': function () { return $context.$data.operandSurface; } }; });
addToBindingsCache('template: { name: $data.templateName, data: $data, if: $parent.isSurfaceValid }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data, 'if': $context.$parent.isSurfaceValid }; } }; });
addToBindingsCache('ifnot: isSurfaceValid', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isSurfaceValid; } }; });
addToBindingsCache('dxEllipsisEditor: { value: modelDisplayValue, isValid: modelValueIsValid, disabled: disabled, buttonAction: function() { popupVisible(true); } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.modelDisplayValue, 'isValid': $context.$data.modelValueIsValid, 'disabled': $context.$data.disabled, 'buttonAction': function () { $context.$data.popupVisible(true); } }; } }; });
addToBindingsCache('style: { pointerEvents: $data.options().disabled() ? \'none\' : \'\' }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.options().disabled() ? 'none' : '' }; } }; });
addToBindingsCache('template: \'dx-filtereditor-popup\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-popup'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content-popups\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-popups'; } }; });
addToBindingsCache('template: \'dx-filtereditor-content-plain\'', function ($context, $element) { return { 'template': function () { return 'dx-filtereditor-content-plain'; } }; });
addToBindingsCache('service: { name: \'createChangeType\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeType' }; } }; });
addToBindingsCache('dxclick: function() {  $data.remove && $data.remove(); }', function ($context, $element) { return { 'dxclick': function () { return function () { $context.$data.remove && $context.$data.remove(); }; } }; });
addToBindingsCache('visible: !!$data.canRemove', function ($context, $element) { return { 'visible': function () { return !!$context.$data.canRemove; } }; });
addToBindingsCache('with: property', function ($context, $element) { return { 'with': function () { return $context.$data.property; } }; });
addToBindingsCache('template: { name: templateName, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data }; } }; });
addToBindingsCache('if: $data.aggregatedExpression()', function ($context, $element) { return { 'if': function () { return $context.$data.aggregatedExpression(); } }; });
addToBindingsCache('with: aggregatedExpression', function ($context, $element) { return { 'with': function () { return $context.$data.aggregatedExpression; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-remove\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-remove'; } }; });
addToBindingsCache('template: { name: \'dx-filtereditor-aggregate-common\' }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-filtereditor-aggregate-common' }; } }; });
addToBindingsCache('with: condition', function ($context, $element) { return { 'with': function () { return $context.$data.condition; } }; });
addToBindingsCache('with: begin', function ($context, $element) { return { 'with': function () { return $context.$data.begin; } }; });
addToBindingsCache('with: end', function ($context, $element) { return { 'with': function () { return $context.$data.end; } }; });
addToBindingsCache('with: leftOperand', function ($context, $element) { return { 'with': function () { return $context.$data.leftOperand; } }; });
addToBindingsCache('with: rightOperand', function ($context, $element) { return { 'with': function () { return $context.$data.rightOperand; } }; });
addToBindingsCache('if: $data.leftPart && $data.leftPart.condition', function ($context, $element) { return { 'if': function () { return $context.$data.leftPart && $context.$data.leftPart.condition; } }; });
addToBindingsCache('with: leftPart', function ($context, $element) { return { 'with': function () { return $context.$data.leftPart; } }; });
addToBindingsCache('css: css', function ($context, $element) { return { 'css': function () { return $context.$data.css; } }; });
addToBindingsCache('text: displayType', function ($context, $element) { return { 'text': function () { return $context.$data.displayType; } }; });
addToBindingsCache('service: { name: \'createChangeValueType\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeValueType' }; } }; });
addToBindingsCache('template: { name: $data.leftPart.templateName, data: $data.leftPart }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.leftPart.templateName, 'data': $context.$data.leftPart }; } }; });
addToBindingsCache('foreach: rightPart', function ($context, $element) { return { 'foreach': function () { return $context.$data.rightPart; } }; });
addToBindingsCache('template: { name: $data.templateName, data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.templateName, 'data': $context.$data }; } }; });
addToBindingsCache('service: { name: \'createAddButton\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createAddButton' }; } }; });
addToBindingsCache('foreach: operands', function ($context, $element) { return { 'foreach': function () { return $context.$data.operands; } }; });
addToBindingsCache('dxclick: addValue', function ($context, $element) { return { 'dxclick': function () { return $context.$data.addValue; } }; });
addToBindingsCache('with: criteriaOperator', function ($context, $element) { return { 'with': function () { return $context.$data.criteriaOperator; } }; });
addToBindingsCache('if: $data.operands().length > 1', function ($context, $element) { return { 'if': function () { return $context.$data.operands().length > 1; } }; });
addToBindingsCache('foreach: $data.operands()', function ($context, $element) { return { 'foreach': function () { return $context.$data.operands(); } }; });
addToBindingsCache('if: $data.operands().length == 1', function ($context, $element) { return { 'if': function () { return $context.$data.operands().length == 1; } }; });
addToBindingsCache('template: { name: $data.operands()[0].templateName, data: $data.operands()[0] }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.operands()[0].templateName, 'data': $context.$data.operands()[0] }; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-add\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-add'; } }; });
addToBindingsCache('service: { name: \'createChangeParameter\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeParameter' }; } }; });
addToBindingsCache('if: $data.canChange', function ($context, $element) { return { 'if': function () { return $context.$data.canChange; } }; });
addToBindingsCache('service: { name: \'createChangeProperty\' }', function ($context, $element) { return { 'service': function () { return { 'name': 'createChangeProperty' }; } }; });
addToBindingsCache('if: $data.operand().reverse', function ($context, $element) { return { 'if': function () { return $context.$data.operand().reverse; } }; });
addToBindingsCache('template: {name: $data.operand().templateName, data: $data.operand() }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.operand().templateName, 'data': $context.$data.operand() }; } }; });
addToBindingsCache('ifnot: $data.operand().reverse', function ($context, $element) { return { 'ifnot': function () { return $context.$data.operand().reverse; } }; });
addToBindingsCache('with: operand', function ($context, $element) { return { 'with': function () { return $context.$data.operand; } }; });
addToBindingsCache('visible: isEditable', function ($context, $element) { return { 'visible': function () { return $context.$data.isEditable; } }; });
addToBindingsCache('dxTextBox: getStringEditorOptions($element), focus: { on: isEditable }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getStringEditorOptions($element); }, 'focus': function () { return { 'on': $context.$data.isEditable }; } }; });
addToBindingsCache('focus: isEditable, dxLocalizedSelectBox: getBoolEditorOptions($element, $root)', function ($context, $element) { return { 'focus': function () { return $context.$data.isEditable; }, 'dxLocalizedSelectBox': function () { return $context.$data.getBoolEditorOptions($element, $context.$root); } }; });
addToBindingsCache('focus: isEditable, dxDateBox: getDateEditorOptions($element, $root)', function ($context, $element) { return { 'focus': function () { return $context.$data.isEditable; }, 'dxDateBox': function () { return $context.$data.getDateEditorOptions($element, $context.$root); } }; });
addToBindingsCache('dxTextBox: getNumberEditorOptions($element), focus: { on: isEditable }', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.getNumberEditorOptions($element); }, 'focus': function () { return { 'on': $context.$data.isEditable }; } }; });
addToBindingsCache('focus: isEditable, dxSelectBox: getListEditOptions($element, $root)', function ($context, $element) { return { 'focus': function () { return $context.$data.isEditable; }, 'dxSelectBox': function () { return $context.$data.getListEditOptions($element, $context.$root); } }; });
addToBindingsCache('visible: !isEditable()', function ($context, $element) { return { 'visible': function () { return !$context.$data.isEditable(); } }; });
addToBindingsCache('text: value, click: function() { isEditable(true); }, css: { \'default\': $data.isDefaultDisplay() }', function ($context, $element) { return { 'text': function () { return $context.$data.value; }, 'click': function () { return function () { $context.$data.isEditable(true); }; }, 'css': function () { return { 'default': $context.$data.isDefaultDisplay() }; } }; });
addToBindingsCache('if: $data.items.length === 0', function ($context, $element) { return { 'if': function () { return $context.$data.items.length === 0; } }; });
addToBindingsCache('if: $data.specifics() === "string" || $data.specifics() === "guid"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() === 'string' || $context.$data.specifics() === 'guid'; } }; });
addToBindingsCache('if: $data.specifics() === "bool"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() === 'bool'; } }; });
addToBindingsCache('if: $data.specifics() === "date"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() === 'date'; } }; });
addToBindingsCache('if: $data.specifics() !== "string" && $data.specifics() !== "bool" && $data.specifics() !== "date" && $data.specifics() !== "guid"', function ($context, $element) { return { 'if': function () { return $context.$data.specifics() !== 'string' && $context.$data.specifics() !== 'bool' && $context.$data.specifics() !== 'date' && $context.$data.specifics() !== 'guid'; } }; });
addToBindingsCache('if: $data.items.length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.items.length > 0; } }; });
addToBindingsCache('dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-filtereditor dx-popup-general\' }, resizeEnabled: true, width: 700, height: 500, maxHeight: \'95%\', maxWidth: \'95%\', minHeight: 300, minWidth: 400, title: options() && options().title(), visible: popupVisible, onShown: function() { $data.focusText() }, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'animation': { 'show': { 'type': 'fadeIn', 'duration': 700 }, 'hide': { 'type': 'fadeOut', 'duration': 700 } }, 'showTitle': true, 'wrapperAttr': { 'class': 'dx-filtereditor dx-popup-general' }, 'resizeEnabled': true, 'width': 700, 'height': 500, 'maxHeight': '95%', 'maxWidth': '95%', 'minHeight': 300, 'minWidth': 400, 'title': $context.$data.options() && $context.$data.options().title(), 'visible': $context.$data.popupVisible, 'onShown': function () { $context.$data.focusText(); }, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) } }; } }; });
addToBindingsCache('dxclick: showPopup', function ($context, $element) { return { 'dxclick': function () { return $context.$data.showPopup; } }; });
addToBindingsCache('text: target.displayType, dxclick: showPopup, css: target.css', function ($context, $element) { return { 'text': function () { return $context.$data.target.displayType; }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return $context.$data.target.css; } }; });
addToBindingsCache('text: target.parameterName(), dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }', function ($context, $element) { return { 'text': function () { return $context.$data.target.parameterName(); }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return { 'dxd-state-selected': $context.$data.target.isSelected }; } }; });
addToBindingsCache('text: target.displayName, dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }', function ($context, $element) { return { 'text': function () { return $context.$data.target.displayName; }, 'dxclick': function () { return $context.$data.showPopup; }, 'css': function () { return { 'dxd-state-selected': $context.$data.target.isSelected }; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-edit'; } }; });
addToBindingsCache('dxPopupWithAutoHeight: { minWidth:\'170px\', maxWidth:\'500px\', width: \'auto\', height: \'300px\', wrapperAttr: { class: \'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay\' }, focusStateEnabled: false, position: $data.rtl ? { my: \'right top\', at: \'right bottom\', of: popupService.target} : { my: \'left top\', at: \'left bottom\', of: popupService.target }, container: $data.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, visible: popupService.visible }', function ($context, $element) { return { 'dxPopupWithAutoHeight': function () { return { 'minWidth': '170px', 'maxWidth': '500px', 'width': 'auto', 'height': '300px', 'wrapperAttr': { 'class': 'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay' }, 'focusStateEnabled': false, 'position': $context.$data.rtl ? { 'my': 'right top', 'at': 'right bottom', 'of': $context.$data.popupService.target } : { 'my': 'left top', 'at': 'left bottom', 'of': $context.$data.popupService.target }, 'container': $context.$data.getPopupContainer($element), 'target': $context.$data.popupService.target, 'showTitle': false, 'showCloseButton': false, 'animation': {}, 'hideOnOutsideClick': true, 'shading': false, 'visible': $context.$data.popupService.visible }; } }; });
addToBindingsCache('dxTextBox: { placeholder: searchPlaceholder(), value: ($data.value || $data.filterString), height: \'100%\', stylingMode: \'underlined\', valueChangeEvent: \'keyup\' }', function ($context, $element) { return { 'dxTextBox': function () { return { 'placeholder': $context.$data.searchPlaceholder(), 'value': ($context.$data.value || $context.$data.filterString), 'height': '100%', 'stylingMode': 'underlined', 'valueChangeEvent': 'keyup' }; } }; });
addToBindingsCache('template: { name: \'dx-filtereditor-search-panel\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-filtereditor-search-panel', 'data': $context.$data }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }, style: {\'height\': $data.height }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; }, 'style': function () { return { 'height': $context.$data.height }; } }; });
addToBindingsCache('text: $data.displayText || $data.name, click: function() { $parent.click($data); }, attr: {\'title\': $data.displayText || $data.name }', function ($context, $element) { return { 'text': function () { return $context.$data.displayText || $context.$data.name; }, 'click': function () { return function () { $context.$parent.click($context.$data); }; }, 'attr': function () { return { 'title': $context.$data.displayText || $context.$data.name }; } }; });
addToBindingsCache('searchHighlighting: { text: $data.displayText || $data.name, textToSearch: $parent.filterString }, click: function() { $parent.click($data); }, attr: {\'title\': $data.displayText || $data.name }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.displayText || $context.$data.name, 'textToSearch': $context.$parent.filterString }; }, 'click': function () { return function () { $context.$parent.click($context.$data); }; }, 'attr': function () { return { 'title': $context.$data.displayText || $context.$data.name }; } }; });
addToBindingsCache('treeListSearchPanel: { controllers: data().treeListController, template: \'dx-filtereditor-search-panel\' }', function ($context, $element) { return { 'treeListSearchPanel': function () { return { 'controllers': $context.$data.data().treeListController, 'template': 'dx-filtereditor-search-panel' }; } }; });
addToBindingsCache('dxScrollView: { showScrollbar: \'onHover\' }, style: {\'height\': $data.height}', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover' }; }, 'style': function () { return { 'height': $context.$data.height }; } }; });
addToBindingsCache('treelist: data', function ($context, $element) { return { 'treelist': function () { return $context.$data.data; } }; });
addToBindingsCache('with: popupService', function ($context, $element) { return { 'with': function () { return $context.$data.popupService; } }; });
addToBindingsCache('with: data', function ($context, $element) { return { 'with': function () { return $context.$data.data; } }; });
addToBindingsCache('template: template', function ($context, $element) { return { 'template': function () { return $context.$data.template; } }; });
addToBindingsCache('if: $data.isFiltered', function ($context, $element) { return { 'if': function () { return $context.$data.isFiltered; } }; });
addToBindingsCache('foreach: data', function ($context, $element) { return { 'foreach': function () { return $context.$data.data; } }; });
addToBindingsCache('if: !$data.hidden', function ($context, $element) { return { 'if': function () { return !$context.$data.hidden; } }; });
addToBindingsCache('ifnot: $parent.isFiltered', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.isFiltered; } }; });
addToBindingsCache('if: $parent.isFiltered', function ($context, $element) { return { 'if': function () { return $context.$parent.isFiltered; } }; });
addToBindingsCache('dxList: { items: $data.items, selectedItems: $data.selectedItems, onItemClick: $data.action, selectionMode: \'single\', activeStateEnabled: false }', function ($context, $element) { return { 'dxList': function () { return { 'items': $context.$data.items, 'selectedItems': $context.$data.selectedItems, 'onItemClick': $context.$data.action, 'selectionMode': 'single', 'activeStateEnabled': false }; } }; });
addToBindingsCache('click: $parent.removeItem, visible: $data.canRemove', function ($context, $element) { return { 'click': function () { return $context.$parent.removeItem; }, 'visible': function () { return $context.$data.canRemove; } }; });
addToBindingsCache('text: $data.displayName', function ($context, $element) { return { 'text': function () { return $context.$data.displayName; } }; });
addToBindingsCache('text: getDisplayText(\'types\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('types'); } }; });
addToBindingsCache('dxButton:{ onClick: addCustomFormat, text: getDisplayText(\'add\'), disabled: !canAddCustomFormat() }', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': $context.$data.addCustomFormat, 'text': $context.$data.getDisplayText('add'), 'disabled': !$context.$data.canAddCustomFormat() }; } }; });
addToBindingsCache('dxTextBox: { value: formatResult, onInput: function(e) { updateInputText(\'formatResult\', e.component); }  }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.formatResult, 'onInput': function (e) { $context.$data.updateInputText('formatResult', e.component); } }; } }; });
addToBindingsCache('text: getDisplayText(\'prefix\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('prefix'); } }; });
addToBindingsCache('dxTextBox: { value: formatPrefix, onInput: function(e) { updateInputText(\'formatPrefix\', e.component); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.formatPrefix, 'onInput': function (e) { $context.$data.updateInputText('formatPrefix', e.component); } }; } }; });
addToBindingsCache('text: getDisplayText(\'suffix\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('suffix'); } }; });
addToBindingsCache('dxTextBox: { value: formatSuffix, onInput: function(e) { updateInputText(\'formatSuffix\', e.component); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.formatSuffix, 'onInput': function (e) { $context.$data.updateInputText('formatSuffix', e.component); } }; } }; });
addToBindingsCache('template: { name: \'dx-format-string-list\', data: { items: patternList, action: setFormat, removeItem: removeCustomFormat, selectedItems: selectedFormats } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-format-string-list', 'data': { 'items': $context.$data.patternList, 'action': $context.$data.setFormat, 'removeItem': $context.$data.removeCustomFormat, 'selectedItems': $context.$data.selectedFormats } }; } }; });
addToBindingsCache('dxEllipsisEditor: { value: value, disabled: disabled, buttonAction: function() { popupVisible(true); } }', function ($context, $element) { return { 'dxEllipsisEditor': function () { return { 'value': $context.$data.value, 'disabled': $context.$data.disabled, 'buttonAction': function () { $context.$data.popupVisible(true); } }; } }; });
addToBindingsCache('dxPopup: { wrapperAttr: { class: \'dx-format-string dx-popup-general\' }, showTitle: true, width: \'95%\', height: \'95%\', minWidth: 650, title: getDisplayText(\'title\'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dx-format-string dx-popup-general' }, 'showTitle': true, 'width': '95%', 'height': '95%', 'minWidth': 650, 'title': $context.$data.getDisplayText('title'), 'visible': $context.$data.popupVisible, 'toolbarItems': $context.$data.buttonItems, 'showCloseButton': true, 'container': $context.$data.getPopupContainer($element), 'position': { 'of': $context.$data.getPopupContainer($element) } }; } }; });
addToBindingsCache('text: getDisplayText(\'category\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('category'); } }; });
addToBindingsCache('css: { \'dx-format-general\': isGeneralType }', function ($context, $element) { return { 'css': function () { return { 'dx-format-general': $context.$data.isGeneralType }; } }; });
addToBindingsCache('text: getDisplayText(\'preview\')', function ($context, $element) { return { 'text': function () { return $context.$data.getDisplayText('preview'); } }; });
addToBindingsCache('text: previewString', function ($context, $element) { return { 'text': function () { return $context.$data.previewString; } }; });
addToBindingsCache('template: { name: \'dx-format-string-list\', data: { items: types, action: setType, selectedItems: selectedTypes } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-format-string-list', 'data': { 'items': $context.$data.types, 'action': $context.$data.setType, 'selectedItems': $context.$data.selectedTypes } }; } }; });
addToBindingsCache('if: !isGeneralType', function ($context, $element) { return { 'if': function () { return !$context.$data.isGeneralType; } }; });
addToBindingsCache('template: \'dx-format-string-edit-area\'', function ($context, $element) { return { 'template': function () { return 'dx-format-string-edit-area'; } }; });
addToBindingsCache('if: isGeneralType', function ($context, $element) { return { 'if': function () { return $context.$data.isGeneralType; } }; });
addToBindingsCache('template: \'dx-format-string-edit-area-general\'', function ($context, $element) { return { 'template': function () { return 'dx-format-string-edit-area-general'; } }; });
addToBindingsCache('dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: ko.unwrap($data.imageTemplateName), iconClass: $data.imageClassName, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible), disabled: $data.disabled && $data.disabled() }, attr: { title: $data.displayText && $data.displayText() || text }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'onClick': function () { $context.$data.clickAction($context.$parent); }, 'icon': $context.ko.unwrap($context.$data.imageTemplateName), 'iconClass': $context.$data.imageClassName, 'visible': ($context.ko.unwrap($context.$data.visible) == undefined) || $context.ko.unwrap($context.$data.visible), 'disabled': $context.$data.disabled && $context.$data.disabled() }; }, 'attr': function () { return { 'title': $context.$data.displayText && $context.$data.displayText() || $context.$data.text }; } }; });
addToBindingsCache('dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\',  onClick: function() { $parent.collapsed(!$parent.collapsed()); } }, visible: $parent.hasContent, attr: { title: $data.displayText() }', function ($context, $element) { return { 'dxButtonWithTemplate': function () { return { 'icon': 'dxrd-svg-operations-edit', 'iconClass': 'dx-image-edit', 'onClick': function () { $context.$parent.collapsed(!$context.$parent.collapsed()); } }; }, 'visible': function () { return $context.$parent.hasContent; }, 'attr': function () { return { 'title': $context.$data.displayText() }; } }; });
addToBindingsCache('template: { name: \'dx-treelist-edit-action\', data: treeListEditAction() }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-treelist-edit-action', 'data': $context.$data.treeListEditAction() }; } }; });
addToBindingsCache('template: \'dx-treelist-item-actions\'', function ($context, $element) { return { 'template': function () { return 'dx-treelist-item-actions'; } }; });
addToBindingsCache('styleunit: padding, click: renderNext', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'click': function () { return $context.$data.renderNext; } }; });
addToBindingsCache('text: $data.text()', function ($context, $element) { return { 'text': function () { return $context.$data.text(); } }; });
addToBindingsCache('dxdAccordionExt: { collapsed: collapsed, lazyContentRendering: true }', function ($context, $element) { return { 'dxdAccordionExt': function () { return { 'collapsed': $context.$data.collapsed, 'lazyContentRendering': true }; } }; });
addToBindingsCache('visible: isSelected() || isHovered()', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected() || $context.$data.isHovered(); } }; });
addToBindingsCache('event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() }, mouseenter: mouseenter, mouseleave: mouseleave }, styleunit: padding, css: $data.getCssRules(), attr: { \'aria-expanded\': (hasItems && (!collapsed() ? \'true\' : \'false\')), \'aria-selected\': (isSelected() || isMultiSelected()) ? \'true\' : \'false\', \'aria-level\':level + 1, \'aria-label\': text, \'aria-setsize\': parent ? parent.items().length : 0, \'aria-posinset\': parent ? parent.items.indexOf($data) + 1 : 0 }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.dblClickHandler ? $context.$data.dblClickHandler($context.$data) : $context.$data.toggleCollapsed(); }, 'mouseenter': $context.$data.mouseenter, 'mouseleave': $context.$data.mouseleave }; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return $context.$data.getCssRules(); }, 'attr': function () { return { 'aria-expanded': ($context.$data.hasItems && (!$context.$data.collapsed() ? 'true' : 'false')), 'aria-selected': ($context.$data.isSelected() || $context.$data.isMultiSelected()) ? 'true' : 'false', 'aria-level': $context.$data.level + 1, 'aria-label': $context.$data.text, 'aria-setsize': $context.$data.parent ? $context.$data.parent.items().length : 0, 'aria-posinset': $context.$data.parent ? $context.$data.parent.items.indexOf($context.$data) + 1 : 0 }; } }; });
addToBindingsCache('style: { \'padding-left\': $data.hasItems ? \'0px\': \'18px\' }', function ($context, $element) { return { 'style': function () { return { 'padding-left': $context.$data.hasItems ? '0px' : '18px' }; } }; });
addToBindingsCache('click: toggleSelected, draggable: dragDropHandler', function ($context, $element) { return { 'click': function () { return $context.$data.toggleSelected; }, 'draggable': function () { return $context.$data.dragDropHandler; } }; });
addToBindingsCache('searchHighlighting: { text: text, textToSearch: treeListController.textToSearch, searchOptions: treeListController.searchOptions }, attr: { title: text }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.text, 'textToSearch': $context.$data.treeListController.textToSearch, 'searchOptions': $context.$data.treeListController.searchOptions }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
addToBindingsCache('if: treeListController.searchEnabled', function ($context, $element) { return { 'if': function () { return $context.$data.treeListController.searchEnabled; } }; });
addToBindingsCache('ifnot: treeListController.searchEnabled', function ($context, $element) { return { 'ifnot': function () { return $context.$data.treeListController.searchEnabled; } }; });
addToBindingsCache('if: hasContent', function ($context, $element) { return { 'if': function () { return $context.$data.hasContent; } }; });
addToBindingsCache('template: templates.accordionItem', function ($context, $element) { return { 'template': function () { return $context.$data.templates.accordionItem; } }; });
addToBindingsCache('ifnot: hasContent', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hasContent; } }; });
addToBindingsCache('template: templates.headerItem', function ($context, $element) { return { 'template': function () { return $context.$data.templates.headerItem; } }; });
addToBindingsCache('template: { name: contenttemplate }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contenttemplate }; } }; });
addToBindingsCache('template: actionsTemplate()', function ($context, $element) { return { 'template': function () { return $context.$data.actionsTemplate(); } }; });
addToBindingsCache('if: $data.hasItems', function ($context, $element) { return { 'if': function () { return $context.$data.hasItems; } }; });
addToBindingsCache('if: actions && actions.length > 0', function ($context, $element) { return { 'if': function () { return $context.$data.actions && $context.$data.actions.length > 0; } }; });
addToBindingsCache('template: templates.actionsContainer', function ($context, $element) { return { 'template': function () { return $context.$data.templates.actionsContainer; } }; });
addToBindingsCache('if: isDraggable', function ($context, $element) { return { 'if': function () { return $context.$data.isDraggable; } }; });
addToBindingsCache('template: templates.headerItemContent', function ($context, $element) { return { 'template': function () { return $context.$data.templates.headerItemContent; } }; });
addToBindingsCache('ifnot: isDraggable', function ($context, $element) { return { 'ifnot': function () { return $context.$data.isDraggable; } }; });
addToBindingsCache('template: templates.itemTextContent', function ($context, $element) { return { 'template': function () { return $context.$data.templates.itemTextContent; } }; });
addToBindingsCache('event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() }, mouseenter: mouseenter, mouseleave: mouseleave }, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected dxd-back-secondary\': isSelected() || isMultiSelected() }', function ($context, $element) { return { 'event': function () { return { 'dblclick': function () { $context.$data.dblClickHandler ? $context.$data.dblClickHandler($context.$data) : $context.$data.toggleCollapsed(); }, 'mouseenter': $context.$data.mouseenter, 'mouseleave': $context.$data.mouseleave }; }, 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-treelist-item-selected dxd-state-selected dxd-back-secondary': $context.$data.isSelected() || $context.$data.isMultiSelected() }; } }; });
addToBindingsCache('css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed, style: { \'visibility\': hasItems ? \'visible\' : \'hidden\' }', function ($context, $element) { return { 'css': function () { return $context.$data.nodeImageClass; }, 'template': function () { return 'dxrd-svg-collapsed'; }, 'click': function () { return $context.$data.toggleCollapsed; }, 'style': function () { return { 'visibility': $context.$data.hasItems ? 'visible' : 'hidden' }; } }; });
addToBindingsCache('visible: $data.isSelected() || $data.isHovered()', function ($context, $element) { return { 'visible': function () { return $context.$data.isSelected() || $context.$data.isHovered(); } }; });
addToBindingsCache('click: toggleSelected,  draggable: isDraggable ? dragDropHandler : null', function ($context, $element) { return { 'click': function () { return $context.$data.toggleSelected; }, 'draggable': function () { return $context.$data.isDraggable ? $context.$data.dragDropHandler : null; } }; });
addToBindingsCache('template: "dx-treelist-accordion-item-with-hover"', function ($context, $element) { return { 'template': function () { return 'dx-treelist-accordion-item-with-hover'; } }; });
addToBindingsCache('template: "dx-treelist-header-item-with-hover"', function ($context, $element) { return { 'template': function () { return 'dx-treelist-header-item-with-hover'; } }; });
addToBindingsCache('dxTextBox: { mode: \'search\',  value:value, valueChangeEvent: \'keyup\', showClearButton: true, placeholder: searchPlaceholder()}', function ($context, $element) { return { 'dxTextBox': function () { return { 'mode': 'search', 'value': $context.$data.value, 'valueChangeEvent': 'keyup', 'showClearButton': true, 'placeholder': $context.$data.searchPlaceholder() }; } }; });
addToBindingsCache('template: $data.visibleItems !== undefined ? \'dx-treelist-paginate\' : \'dx-treelist-common\'', function ($context, $element) { return { 'template': function () { return $context.$data.visibleItems !== undefined ? 'dx-treelist-paginate' : 'dx-treelist-common'; } }; });
addToBindingsCache('lazy: { resolver: resolver, innerBindings: { template: templateName } }', function ($context, $element) { return { 'lazy': function () { return { 'resolver': $context.$data.resolver, 'innerBindings': { 'template': $context.$data.templateName } }; } }; });
addToBindingsCache('if: !$data.collapsed()', function ($context, $element) { return { 'if': function () { return !$context.$data.collapsed(); } }; });
addToBindingsCache('template: { name: \'dx-treelist\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-treelist', 'data': $context.$data }; } }; });
addToBindingsCache('foreach: visibleItems', function ($context, $element) { return { 'foreach': function () { return $context.$data.visibleItems; } }; });

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/dx-analytics-core-svg-bindings.js

addToBindingsCache('template: \'dxrd-svg-collapsed\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-collapsed'; } }; });
addToBindingsCache('template: \'dxrd-svg-ellipsis\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-ellipsis'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-addition\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-addition'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-and\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-and'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-division\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-division'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-edit'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-equal'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-greater\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-greater'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-greater_or_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-greater_or_equal'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-less\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-less'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-less_or_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-less_or_equal'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-modulus\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-modulus'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-multiplication\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-multiplication'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-not\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-not'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-not_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-not_equal'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-or\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-or'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-parenthesis\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-parenthesis'; } }; });
addToBindingsCache('template: \'dxrd-svg-expressioneditor-subtraction\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-expressioneditor-subtraction'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-array\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-array'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-bitearray\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-bitearray'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-bool\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-bool'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-booleanfield\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-booleanfield'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-column\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-column'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-datasource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-datasource'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-date\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-date'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-datetimefield\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-datetimefield'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-doublefield\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-doublefield'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-enum\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-enum'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-float\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-float'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-guid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-guid'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-integer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-integer'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-integerfield\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-integerfield'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-listsource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-listsource'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-none\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-none'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-parameters\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-parameters'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-range\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-range'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-string\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-string'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-stringfield\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-stringfield'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-table\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-table'; } }; });
addToBindingsCache('template: \'dxrd-svg-fieldlist-view\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-view'; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-add\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-add'; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-edit'; } }; });
addToBindingsCache('template: \'dxrd-svg-filtereditor-remove\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-filtereditor-remove'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-bold\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-bold'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-italic\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-italic'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-strikeout\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-strikeout'; } }; });
addToBindingsCache('template: \'dxrd-svg-fontstyle-underline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fontstyle-underline'; } }; });
addToBindingsCache('template: \'dxrd-svg-menu-menu\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-menu'; } }; });
addToBindingsCache('template: \'dxrd-svg-menu-open\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-open'; } }; });
addToBindingsCache('template: \'dxrd-svg-menu-save\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-save'; } }; });
addToBindingsCache('template: \'dxrd-svg-menu-saveas\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-saveas'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-add\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-add'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-add_calcfield\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-add_calcfield'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-add_datasource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-add_datasource'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-add_query\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-add_query'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-ascending\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-ascending'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-descending\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-descending'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-edit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-edit'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-movedown\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-movedown'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-moveleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveleft'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-moveleft_all\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveleft_all'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-moveright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveright'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-moveright_all\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveright_all'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-moveup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-moveup'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-rebuild_schema\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-rebuild_schema'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-recycle_bin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-recycle_bin'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-recycle_bin_xl\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-recycle_bin_xl'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-remove\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-remove'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-rename\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-rename'; } }; });
addToBindingsCache('template: \'dxrd-svg-operations-unsorted\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-operations-unsorted'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-all\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-all'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-bottom\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-bottom'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-left'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-none\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-none'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-right'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-borders-top\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-borders-top'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-propertyexpression\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-propertyexpression'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-search\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-search'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-sortingbyalphabet\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-sortingbyalphabet'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-sortingbygroups\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-sortingbygroups'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-bottom\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-bottom'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-center\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-center'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-justify\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-justify'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-left'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-middle\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-middle'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-right'; } }; });
addToBindingsCache('template: \'dxrd-svg-properties-textAlignment-top\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-properties-textAlignment-top'; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-aggregate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-aggregate'; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-data_preview\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-data_preview'; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-group_by\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-group_by'; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-select_statment\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-select_statment'; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-sorting_asc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-sorting_asc'; } }; });
addToBindingsCache('template: \'dxrd-svg-queryBuilder-sorting_desc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-queryBuilder-sorting_desc'; } }; });
addToBindingsCache('template: \'dxrd-svg-tabs-properties\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-properties'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-copy\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-copy'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-cut\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-cut'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-delete\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-delete'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-paste\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-paste'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-redo\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-redo'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-undo\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-undo'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-validate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-validate'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-zoomin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-zoomin'; } }; });
addToBindingsCache('template: \'dxrd-svg-toolbar-zoomout\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-zoomout'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-Download\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-Download'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-expressions\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-expressions'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-FederationDataSource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-FederationDataSource'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-JsonDataSource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-JsonDataSource'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-NoDataSource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-NoDataSource'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-ObjectDataSource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-ObjectDataSource'; } }; });
addToBindingsCache('template: \'dxrd-svg-wizard-SqlDataSource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-SqlDataSource'; } }; });

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/dx-analytics-core-svg-templates.js

_svgTemplateEngine_SvgTemplatesEngine.addTemplates({
    'dxrd-svg-collapsed': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 9 9" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2l5 3-5 3z"/></svg>',
    'dxrd-svg-ellipsis': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="-467 277 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M-464 284h2v2h-2zM-460 284h2v2h-2zM-456 284h2v2h-2z"/></svg>',
    'dxrd-svg-expressioneditor-addition': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 10h-6V4h-4v6H4v4h6v6h4v-6h6z"/></svg>',
    'dxrd-svg-expressioneditor-and': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 4c-1.1 0-2.1.2-3 .7-.9-.5-1.9-.7-3-.7-3.9 0-7 3.1-7 7s3.1 7 7 7c1.1 0 2.1-.2 3-.7.9.4 1.9.7 3 .7 3.9 0 7-3.1 7-7s-3.1-7-7-7zm-1 7c0 1.6-.8 3.1-2 4-1.2-.9-2-2.3-2-4s.8-3.1 2-4c1.2.9 2 2.4 2 4zM4 11c0-2.8 2.2-5 5-5 .3 0 .7 0 1 .1-1.2 1.3-2 3-2 4.9s.8 3.6 2 4.9c-.3.1-.7.1-1 .1-2.8 0-5-2.2-5-5zm11 5c-.3 0-.7 0-1-.1 1.2-1.3 2-3 2-4.9s-.8-3.6-2-4.9c.3-.1.7-.1 1-.1 2.8 0 5 2.2 5 5s-2.2 5-5 5z"/><path class="dxd-icon-fill dxd-opacity-80" d="M14 11c0 1.6-.8 3.1-2 4-1.2-.9-2-2.3-2-4s.8-3.1 2-4c1.2.9 2 2.4 2 4z"/></svg>',
    'dxrd-svg-expressioneditor-division': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 10h20v4H2z"/><circle class="dxd-icon-fill" cx="12" cy="6" r="2"/><circle class="dxd-icon-fill" cx="12" cy="18" r="2"/></svg>',
    'dxrd-svg-expressioneditor-edit': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 8l-6 6-6-6z"/></svg>',
    'dxrd-svg-expressioneditor-equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 6h16v4H4zM4 12h16v4H4z"/></svg>',
    'dxrd-svg-expressioneditor-greater': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4v2l10 6-10 6v2l14-8z"/></svg>',
    'dxrd-svg-expressioneditor-greater_or_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 2v2l10 6-10 6v2l14-8zM4 22l14-8v-2L4 20z"/></svg>',
    'dxrd-svg-expressioneditor-less': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 4v2L8 12l10 6v2L4 12z"/></svg>',
    'dxrd-svg-expressioneditor-less_or_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 2v2L8 10l10 6v2L4 10zM18 22L4 14v-2l14 8z"/></svg>',
    'dxrd-svg-expressioneditor-modulus': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 4L2 20h4L20 4zM16 12c-2.2 0-4 1.8-4 4s1.8 4 4 4 4-1.8 4-4-1.8-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM6 12c2.2 0 4-1.8 4-4S8.2 4 6 4 2 5.8 2 8s1.8 4 4 4zm0-6c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2z"/></svg>',
    'dxrd-svg-expressioneditor-multiplication': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6l-2-2-5 5-5-5-2 2 5 5-5 5 2 2 5-5 5 5 2-2-5-5z"/></svg>',
    'dxrd-svg-expressioneditor-not': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 4c-1.1 0-2.1.2-3 .7-.9-.5-1.9-.7-3-.7-3.9 0-7 3.1-7 7s3.1 7 7 7c1.1 0 2.1-.2 3-.7.9.4 1.9.7 3 .7 3.9 0 7-3.1 7-7s-3.1-7-7-7zm-1 7c0 1.6-.8 3.1-2 4-1.2-.9-2-2.3-2-4s.8-3.1 2-4c1.2.9 2 2.4 2 4zM4 11c0-2.8 2.2-5 5-5 .3 0 .7 0 1 .1-1.2 1.3-2 3-2 4.9s.8 3.6 2 4.9c-.3.1-.7.1-1 .1-2.8 0-5-2.2-5-5zm11 5c-.3 0-.7 0-1-.1 1.2-1.3 2-3 2-4.9s-.8-3.6-2-4.9c.3-.1.7-.1 1-.1 2.8 0 5 2.2 5 5s-2.2 5-5 5z"/><path class="dxd-icon-fill dxd-opacity-80" d="M4 11c0-2.8 2.2-5 5-5 .3 0 .7 0 1 .1-1.2 1.3-2 3-2 4.9s.8 3.6 2 4.9c-.3.1-.7.1-1 .1-2.8 0-5-2.2-5-5z"/></svg>',
    'dxrd-svg-expressioneditor-not_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 0h-2l-3.8 6H4v4h7.6l-1.2 2H4v4h3.8L4 22h2l3.8-6H20v-4h-7.6l1.2-2H20V6h-3.8z"/></svg>',
    'dxrd-svg-expressioneditor-or': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M14 11c0 1.6-.8 3.1-2 4-1.2-.9-2-2.3-2-4s.8-3.1 2-4c1.2.9 2 2.4 2 4z"/><path class="dxd-icon-fill" d="M15 4c-1.1 0-2.1.2-3 .7-.9-.5-1.9-.7-3-.7-3.9 0-7 3.1-7 7s3.1 7 7 7c1.1 0 2.1-.2 3-.7.9.4 1.9.7 3 .7 3.9 0 7-3.1 7-7s-3.1-7-7-7zm-1 7c0 1.6-.8 3.1-2 4-1.2-.9-2-2.3-2-4s.8-3.1 2-4c1.2.9 2 2.4 2 4zM4 11c0-2.8 2.2-5 5-5 .3 0 .7 0 1 .1-1.2 1.3-2 3-2 4.9s.8 3.6 2 4.9c-.3.1-.7.1-1 .1-2.8 0-5-2.2-5-5zm11 5c-.3 0-.7 0-1-.1 1.2-1.3 2-3 2-4.9s-.8-3.6-2-4.9c.3-.1.7-.1 1-.1 2.8 0 5 2.2 5 5s-2.2 5-5 5z"/><path class="dxd-icon-fill dxd-opacity-80" d="M4 11c0-2.8 2.2-5 5-5 .3 0 .7 0 1 .1-1.2 1.3-2 3-2 4.9s.8 3.6 2 4.9c-.3.1-.7.1-1 .1-2.8 0-5-2.2-5-5zM15 16c-.3 0-.7 0-1-.1 1.2-1.3 2-3 2-4.9s-.8-3.6-2-4.9c.3-.1.7-.1 1-.1 2.8 0 5 2.2 5 5s-2.2 5-5 5z"/></svg>',
    'dxrd-svg-expressioneditor-parenthesis': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 11c0 3.8 1.8 7.1 4 9h2c-2.2-1.9-4-5.2-4-9s1.8-7.1 4-9H6c-2.2 1.9-4 5.2-4 9zM16 2h-2c2.2 1.8 4 5.2 4 9s-1.8 7.2-4 9h2c2.2-1.8 4-5.2 4-9s-1.8-7.2-4-9z"/><path class="dxd-icon-fill" d="M6 10h2v2H6zM10 10h2v2h-2zM14 10h2v2h-2z"/></svg>',
    'dxrd-svg-expressioneditor-subtraction': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 10h16v4H4z"/></svg>',
    'dxrd-svg-fieldlist-array': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4v8H2.3V5.5H1V4h3zm2.8 7.6c-.5-.3-.8-.8-1.1-1.4-.2-.6-.4-1.3-.4-2.2 0-.9.1-1.6.4-2.2.3-.6.7-1.1 1.1-1.4.5-.3 1-.5 1.6-.5s1.1.1 1.6.5c.5.3.8.8 1.1 1.4.3.6.4 1.4.4 2.2 0 .9-.1 1.6-.4 2.2-.3.6-.6 1.1-1.1 1.4-.5.3-1 .5-1.6.5s-1.1-.1-1.6-.5zm2.6-1.7c.3-.4.4-1 .4-1.9s-.1-1.5-.4-1.9c-.2-.4-.6-.6-1-.6s-.8.2-1 .6c-.3.4-.4 1-.4 1.9s.1 1.5.4 1.9c.2.4.6.6 1 .6.5.1.8-.1 1-.6zM15 4v8h-1.7V5.5H12V4h3z"/></svg>',
    'dxrd-svg-fieldlist-bitearray': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4v8H2.3V5.5H1V4h3zm2.8 7.6c-.5-.3-.8-.8-1.1-1.4-.2-.6-.4-1.3-.4-2.2 0-.9.1-1.6.4-2.2.3-.6.7-1.1 1.1-1.4.5-.3 1-.5 1.6-.5s1.1.1 1.6.5c.5.3.8.8 1.1 1.4.3.6.4 1.4.4 2.2 0 .9-.1 1.6-.4 2.2-.3.6-.6 1.1-1.1 1.4-.5.3-1 .5-1.6.5s-1.1-.1-1.6-.5zm2.6-1.7c.3-.4.4-1 .4-1.9s-.1-1.5-.4-1.9c-.2-.4-.6-.6-1-.6s-.8.2-1 .6c-.3.4-.4 1-.4 1.9s.1 1.5.4 1.9c.2.4.6.6 1 .6.5.1.8-.1 1-.6zM15 4v8h-1.7V5.5H12V4h3z"/></svg>',
    'dxrd-svg-fieldlist-bool': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M13.6 2.6L6 10.2 3.4 7.6 2 9l4 4 9-9z"/></svg>',
    'dxrd-svg-fieldlist-booleanfield': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M13.6 2.6L6 10.2 3.4 7.6 2 9l4 4 9-9z"/></svg>',
    'dxrd-svg-fieldlist-column': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1 6h14v4H1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5H1V1h4v4zm5-4H6v4h4V1zm5 0h-4v4h4V1zM5 11H1v4h4v-4zm5 0H6v4h4v-4zm5 0h-4v4h4v-4z"/></g></svg>',
    'dxrd-svg-fieldlist-datasource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="st1"><path class="dxd-icon-fill" d="M7.3 9V7H10V3c0-1.7-2-3-4.5-3S1 1.3 1 3v5c0 1.7 2 3 4.5 3 2 0 3.6-.8 4.2-2H7.3zm-4-6c0-.4.9-1 2.3-1s2.3.6 2.3 1-1 1-2.4 1-2.2-.6-2.2-1z"/></g><path class="dxd-icon-fill" d="M9.5 5C7 5 5 6.3 5 8v5c0 1.7 2 3 4.5 3s4.5-1.3 4.5-3V8c0-1.7-2-3-4.5-3zm0 4c-1.4 0-2.2-.6-2.2-1s.9-1 2.3-1 2.3.6 2.3 1-1 1-2.4 1z"/></svg>',
    'dxrd-svg-fieldlist-date': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 12c-2.8 0-5-2.2-5-5s2.2-5 5-5 5 2.2 5 5-2.2 5-5 5zm3-5v1H7V5h1v3h3z"/></svg>',
    'dxrd-svg-fieldlist-datetimefield': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 1C4.1 1 1 4.1 1 8s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm0 12c-2.8 0-5-2.2-5-5s2.2-5 5-5 5 2.2 5 5-2.2 5-5 5zm3-5v1H7V5h1v3h3z"/></svg>',
    'dxrd-svg-fieldlist-doublefield': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 4v8H3.3V5.5H2V4h3zM6.3 11.7c-.2-.2-.3-.4-.3-.7 0-.3.1-.5.3-.7.2-.2.4-.3.7-.3s.5.1.7.3.3.4.3.7c0 .3-.1.5-.3.7-.2.2-.4.3-.7.3s-.5-.1-.7-.3zM15 10.5V12H9v-1.2l3.1-2.9c.3-.3.5-.6.7-.8.1-.2.2-.4.2-.7 0-.3-.1-.6-.3-.7-.2-.2-.5-.3-.9-.3-.3 0-.7.1-.9.2-.5.2-.7.4-.9.6l-1.3-.8c.3-.5.7-.9 1.2-1.1.5-.3 1.2-.4 1.9-.4.6 0 1.1.1 1.5.3.4.2.8.5 1 .8.2.4.4.8.4 1.2 0 .4-.1.8-.3 1.2-.2.4-.5.8-1.1 1.3l-1.8 1.7H15z"/></svg>',
    'dxrd-svg-fieldlist-enum': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M13 12H1c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h12c.5 0 1-.5 1-1v-8c0-.5-.5-1-1-1zm-1 8H2v-2h10v2zm0-4H2v-2h10v2zM23 4H11c-.5 0-1 .5-1 1v5h12v2h-6v2h7c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 4H12V6h10v2z" id="Enum"/></svg>',
    'dxrd-svg-fieldlist-float': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 4v8H3.3V5.5H2V4h3zM6.3 11.7c-.2-.2-.3-.4-.3-.7 0-.3.1-.5.3-.7.2-.2.4-.3.7-.3s.5.1.7.3.3.4.3.7c0 .3-.1.5-.3.7-.2.2-.4.3-.7.3s-.5-.1-.7-.3zM15 10.5V12H9v-1.2l3.1-2.9c.3-.3.5-.6.7-.8.1-.2.2-.4.2-.7 0-.3-.1-.6-.3-.7-.2-.2-.5-.3-.9-.3-.3 0-.7.1-.9.2-.5.2-.7.4-.9.6l-1.3-.8c.3-.5.7-.9 1.2-1.1.5-.3 1.2-.4 1.9-.4.6 0 1.1.1 1.5.3.4.2.8.5 1 .8.2.4.4.8.4 1.2 0 .4-.1.8-.3 1.2-.2.4-.5.8-1.1 1.3l-1.8 1.7H15z"/></svg>',
    'dxrd-svg-fieldlist-guid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4.1 4.6c-.2-.2-.3-.4-.3-.7 0-.3.1-.5.3-.7.2-.2.4-.3.7-.3.3 0 .6.1.7.3.2.2.3.4.3.7 0 .3-.1.6-.3.8-.1.1-.4.2-.7.2-.3 0-.5-.1-.7-.3zm-.1 1h1.7V12H4V5.6zM13 3v9h-1.6v-.7c-.4.6-1 .8-1.8.8-.5 0-1-.1-1.5-.4-.4-.3-.8-.7-1-1.2-.2-.5-.3-1.1-.3-1.7 0-.7.1-1.2.4-1.7.2-.5.6-.9 1-1.2.4-.3.9-.4 1.5-.4.7 0 1.3.3 1.7.8V3H13zm-2 7.1c.3-.3.4-.8.4-1.3s-.1-1-.4-1.3c-.3-.3-.7-.5-1.1-.5-.4 0-.8.2-1 .5-.3.3-.4.7-.4 1.3 0 .5.1 1 .4 1.3.3.3.6.5 1 .5.4-.1.8-.2 1.1-.5z"/></svg>',
    'dxrd-svg-fieldlist-integer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 4v8H4.3V5.5H3V4h3zm8 6.5V12H8v-1.2l3.1-2.9c.3-.3.5-.6.7-.8.1-.2.2-.4.2-.7 0-.3-.1-.6-.3-.7-.2-.2-.5-.3-.9-.3-.3 0-.7.1-.9.2-.5.2-.7.4-.9.6l-1.3-.8c.3-.5.7-.9 1.2-1.1.5-.3 1.2-.4 1.9-.4.6 0 1.1.1 1.5.3.4.2.8.5 1 .8.2.4.4.8.4 1.2 0 .4-.1.8-.3 1.2-.2.4-.5.8-1.1 1.3l-1.8 1.7H14z"/></svg>',
    'dxrd-svg-fieldlist-integerfield': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 4v8H4.3V5.5H3V4h3zm8 6.5V12H8v-1.2l3.1-2.9c.3-.3.5-.6.7-.8.1-.2.2-.4.2-.7 0-.3-.1-.6-.3-.7-.2-.2-.5-.3-.9-.3-.3 0-.7.1-.9.2-.5.2-.7.4-.9.6l-1.3-.8c.3-.5.7-.9 1.2-1.1.5-.3 1.2-.4 1.9-.4.6 0 1.1.1 1.5.3.4.2.8.5 1 .8.2.4.4.8.4 1.2 0 .4-.1.8-.3 1.2-.2.4-.5.8-1.1 1.3l-1.8 1.7H14z"/></svg>',
    'dxrd-svg-fieldlist-listsource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 2C5.2 2 3 3.3 3 5v6c0 1.7 2.2 3 5 3s5-1.3 5-3V5c0-1.7-2.2-3-5-3zm0 4c-1.8 0-2.9-.8-3-1 .1-.2 1.2-1 3-1s2.9.8 3 1c-.1.2-1.2 1-3 1z"/></svg>',
    'dxrd-svg-fieldlist-none': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9.4 8l3.3-3.3c.4-.4.4-1 0-1.4s-1-.4-1.4 0L8 6.6 4.7 3.3c-.4-.4-1-.4-1.4 0s-.4 1 0 1.4L6.6 8l-3.3 3.3c-.4.4-.4 1 0 1.4s1 .4 1.4 0L8 9.4l3.3 3.3c.4.4 1 .4 1.4 0s.4-1 0-1.4L9.4 8z"/></svg>',
    'dxrd-svg-fieldlist-parameters': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M7.2 8.3c.2-.3.5-.6.8-1l.7-.7c.1-.2.2-.4.2-.6 0-.3-.1-.6-.4-.8-.3-.2-.6-.3-1-.3s-.8.1-1.1.3c-.3.1-.6.3-.8.6L4 4.9c.4-.6.9-1.1 1.5-1.4.6-.3 1.3-.5 2.2-.5 1 0 1.8.2 2.4.7.6.4.9 1.1.9 1.9 0 .4-.1.7-.2 1-.1.3-.3.5-.4.7l-.7.7c-.3.3-.5.5-.7.8-.1.2-.2.4-.2.7h-2c.1-.5.2-.9.4-1.2zm-.3 4.3c-.2-.2-.4-.5-.4-.9s.1-.6.4-.9c.2-.2.5-.4.9-.4s.7.1.9.4c.2.2.4.5.4.9s-.1.7-.4.9c-.2.3-.5.4-.9.4-.3 0-.6-.1-.9-.4z"/></svg>',
    'dxrd-svg-fieldlist-range': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M3 4v8h2v2H1V2h4v2H3zm10 0v8h-2v2h4V2h-4v2h2z"/></svg>',
    'dxrd-svg-fieldlist-string': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 6.1c.5.5.8 1.2.8 2.2V12H5.1v-.8c-.3.6-.9.9-1.9.9-.5 0-.9-.1-1.2-.3-.3-.2-.6-.4-.8-.7-.2-.3-.3-.6-.3-1 .1-.6.3-1.1.7-1.4.4-.3 1.1-.5 2-.5H5c0-.4-.1-.7-.4-1-.2-.2-.5-.3-1-.3-.3 0-.6 0-.9.1-.4.2-.6.3-.8.5l-.7-1.3c.4-.3.8-.5 1.2-.6.5-.1.9-.2 1.4-.2 1 0 1.7.2 2.2.7zm-1.5 4.5c.2-.1.4-.4.5-.7v-.6H3.8c-.7 0-1.1.3-1.1.8 0 .2.1.4.3.6.2.1.4.2.7.2.3-.1.6-.2.8-.3zm9-4.8c.5.3.8.7 1.1 1.2.3.5.4 1.1.4 1.7 0 .7-.1 1.3-.4 1.8-.3.5-.6.9-1.1 1.2-.5.3-1 .4-1.5.4-.8 0-1.5-.3-1.9-.8v.7H8.4V3h1.8v3.2c.4-.5 1.1-.8 1.8-.8.5 0 1 .1 1.5.4zm-.7 4.3c.3-.3.4-.8.4-1.3s-.1-1-.4-1.3c-.3-.3-.7-.5-1.1-.5s-.8.2-1.1.5c-.3.3-.4.8-.4 1.3s.1 1 .4 1.3c.3.3.7.5 1.1.5s.8-.2 1.1-.5z"/></svg>',
    'dxrd-svg-fieldlist-stringfield': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 6.1c.5.5.8 1.2.8 2.2V12H5.1v-.8c-.3.6-.9.9-1.9.9-.5 0-.9-.1-1.2-.3-.3-.2-.6-.4-.8-.7-.2-.3-.3-.6-.3-1 .1-.6.3-1.1.7-1.4.4-.3 1.1-.5 2-.5H5c0-.4-.1-.7-.4-1-.2-.2-.5-.3-1-.3-.3 0-.6 0-.9.1-.4.2-.6.3-.8.5l-.7-1.3c.4-.3.8-.5 1.2-.6.5-.1.9-.2 1.4-.2 1 0 1.7.2 2.2.7zm-1.5 4.5c.2-.1.4-.4.5-.7v-.6H3.8c-.7 0-1.1.3-1.1.8 0 .2.1.4.3.6.2.1.4.2.7.2.3-.1.6-.2.8-.3zm9-4.8c.5.3.8.7 1.1 1.2.3.5.4 1.1.4 1.7 0 .7-.1 1.3-.4 1.8-.3.5-.6.9-1.1 1.2-.5.3-1 .4-1.5.4-.8 0-1.5-.3-1.9-.8v.7H8.4V3h1.8v3.2c.4-.5 1.1-.8 1.8-.8.5 0 1 .1 1.5.4zm-.7 4.3c.3-.3.4-.8.4-1.3s-.1-1-.4-1.3c-.3-.3-.7-.5-1.1-.5s-.8.2-1.1.5c-.3.3-.4.8-.4 1.3s.1 1 .4 1.3c.3.3.7.5 1.1.5s.8-.2 1.1-.5z"/></svg>',
    'dxrd-svg-fieldlist-table': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14 1H2c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h12c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM9 3v2H7V3h2zm0 4v2H7V7h2zM3 3h2v2H3V3zm0 4h2v2H3V7zm0 6v-2h2v2H3zm4 0v-2h2v2H7zm6 0h-2v-2h2v2zm0-4h-2V7h2v2zm0-4h-2V3h2v2z"/></svg>',
    'dxrd-svg-fieldlist-view': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.7 13.3l-3.5-3.5C11.7 9 12 8 12 7c0-2.8-2.2-5-5-5S2 4.2 2 7s2.2 5 5 5c1 0 2-.3 2.8-.8l3.5 3.5c.4.4 1 .4 1.4 0s.4-1 0-1.4zM7 10c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z"/></svg>',
    'dxrd-svg-filtereditor-add': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-filter-editor-add-icon-fill-color" d="M20 10h-6V4h-4v6H4v4h6v6h4v-6h6z"/></svg>',
    'dxrd-svg-filtereditor-edit': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path class="dxd-filter-editor-text-color" d="M4 7h8l-4 4z"/></svg>',
    'dxrd-svg-filtereditor-remove': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-filter-editor-remove-icon-fill-color" d="M18 6l-2-2-5 5-5-5-2 2 5 5-5 5 2 2 5-5 5 5 2-2-5-5z"/></svg>',
    'dxrd-svg-fontstyle-bold': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14.4 10.8c1.1.3 1.9.7 2.5 1.3.8.8 1.1 1.8 1.1 3 0 .9-.2 1.8-.7 2.6-.5.8-1.2 1.4-2 1.8-.9.4-2.2.6-4 .6H4v-.5h.4c.7 0 1.1-.2 1.4-.7.2-.5.2-2 .2-3V6c0-1.1 0-2.6-.3-2.9-.3-.4-.7-.6-1.3-.6H4V2h6.6c1.3 0 2.3.1 3.1.3 1.2.3 2.1.9 2.7 1.7s.9 1.7.9 2.8c0 .9-.2 1.7-.7 2.4-.5.7-1.2 1.3-2.2 1.6zM8 10H10.6c1.1 0 2 0 2.6-.3.6-.3.9-.6 1.2-1.2.3-.6.5-1.2.5-1.9 0-1.1-.4-2-1.1-2.7S11.4 3 10 3H8v7zm0 8.9h3c1.4 0 2.5-.3 3.2-1s1.1-1.6 1.1-2.7c0-.7-.2-1.4-.5-2-.3-.6-.9-1.2-1.6-1.5-.8-.4-1.5-.7-2.7-.7H8v7.9z"/></svg>',
    'dxrd-svg-fontstyle-italic': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 21.5l-.2.5H6l.2-.5c.8 0 1.3-.1 1.6-.2.4-.2.7-.4.9-.7.3-.5.5-1.3.8-2.5l2.4-12c.3-1.3.3-1.8.3-2.3 0-.3-.1-.5-.2-.6s-.3-.3-.6-.4c-.3-.1-.7-.1-1.5-.1l.3-.7H18l-.2.5c-.6 0-1.4.1-1.7.2-.4.2-.8.5-1 .8-.1.5-.5 1-.8 2.5L12 18.1c-.2 1.3-.3 1.7-.3 2.1 0 .2.1.5.2.6.1.2.3.3.6.4s.7.2 1.5.3z"/></svg>',
    'dxrd-svg-fontstyle-strikeout': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 12h-5.3c-.7-.4-1.7-.9-2.9-1.5-2.4-1.2-3.9-2.1-4.6-2.8-.4-.5-.7-1-.7-1.6 0-.8.3-1.4 1-2.1.6-.4.8-.7 2.1-.9.9-.1 1.9.2 2.8.7.9.4 1.6 1 2.1 1.8s.8 1.4 1 2.4h.5V2h-.5c-.1.4-.2.7-.4.9-.2.1-.4.2-.7.2-.2 0-.6-.1-1.2-.4-1.3-.5-2.5-.7-3.6-.7-1.8 0-3 .8-3.9 1.5C4.5 4.4 4 5.7 4 7c0 .8.2 1.5.6 2.2s1 1.3 1.7 1.8c.4.3.9.6 1.6 1H2v2h9.7c.9.5 1.5.8 1.8 1 .6.4 1 .9 1.3 1.3s.4 1 .4 1.4c0 .8-.4 1.6-1.1 2.2-.8.6-1.8.9-3.1.9-1.1 0-2.1-.2-3.1-.7-.9-.5-1.8-1-2.3-1.7-.2-.2-.8-1.4-1-2.4H4v6h.6c.1-.4.2-.7.3-.9.2-.1.4-.2.6-.2.3 0 1.1.1 2.1.4s1.7.5 2 .5c.5.1 1.1.1 1.7.1 1.9 0 3.5-.5 4.8-1.6 1.2-1 1.9-2.3 1.9-3.7 0-.8-.2-1.5-.6-2.2-.1-.2-.2-.2-.3-.4H20v-2z"/></svg>',
    'dxrd-svg-fontstyle-underline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 0v1h.9c.4 0 .7.1.8.2.3.4.3 1.2.3 2.3V12c0 .8 0 1.7-.1 2.6-.1 1-.5 1.8-1 2.3-1 .9-3 1.1-3.7 1.1-.7 0-2.9-.2-3.9-1.1-.7-.7-.9-1.3-1.1-2.2-.2-1.1-.2-2-.2-2.7V3.5c0-1.1 0-2 .3-2.2.2-.2.6-.3 1.1-.3H8V0H2v1h.9c.7 0 .9.1 1 .2.1.2.1 1.1.1 2.3v7.6c0 2.4.2 4 .5 4.8.5 1.2 1.3 2.3 2.4 3C8.7 20 9.9 20 11 20c1.4 0 2.6-.1 4.1-1.1 1.1-.8 1.9-1.7 2.3-3 .3-.9.4-2.5.4-4.8V3.5c0-1.2 0-1.9.3-2.2.3-.3.5-.3 1.3-.3h.6V0h-6zM2 22h18v2H2z"/></svg>',
    'dxrd-svg-menu-menu': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 7H3V5h18v2zm0 4H3v2h18v-2zm0 6H3v2h18v-2z"/></svg>',
    'dxrd-svg-menu-open': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 10h-4V7c0-.5-.5-1-1-1H9V4c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v15c0 .5.5 1 1 1h17c.4 0 .7-.2.9-.6l4-8c.3-.6-.2-1.4-.9-1.4zM3 5h4v3h10v2H7.6c-.4 0-.7.2-.9.6L3 18V5z"/></svg>',
    'dxrd-svg-menu-save': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zM8 4h4v4H8V4zm8 16H8v-4h8v4zm4 0h-2v-5c0-.5-.5-1-1-1H7c-.5 0-1 .5-1 1v5H4V4h2v5c0 .5.5 1 1 1h10c.5 0 1-.5 1-1V4h2v16z"/></svg>',
    'dxrd-svg-menu-saveas': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 4H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zM8 6h4v4H8V6zm8 16H8v-4h8v4zm4 0h-2v-5c0-.5-.5-1-1-1H7c-.5 0-1 .5-1 1v5H4V6h2v5c0 .5.5 1 1 1h10c.5 0 1-.5 1-1V6h2v16zm2.5-22c.8 0 1.5.7 1.5 1.5S23.3 3 22.5 3 21 2.3 21 1.5 21.7 0 22.5 0zm-4 0c.8 0 1.5.7 1.5 1.5S19.3 3 18.5 3 17 2.3 17 1.5 17.7 0 18.5 0zm-4 0c.8 0 1.5.7 1.5 1.5S15.3 3 14.5 3 13 2.3 13 1.5 13.7 0 14.5 0z"/></svg>',
    'dxrd-svg-operations-add': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M7 0H5v5H0v2h5v5h2V7h5V5H7V0z" fill="#000"/></svg>',
    'dxrd-svg-operations-add_calcfield': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" fill-rule="evenodd" clip-rule="evenodd" d="M0 0h11v5H7v2H5v4H0V0zm3 4V1h2v1H4v2h1v1H4v3H2V7h1V5H2V4h1z"/><path class="dxd-icon-fill" d="M8 6h2v2h2v2h-2v2H8v-2H6V8h2V6z"/></svg>',
    'dxrd-svg-operations-add_datasource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><ellipse class="dxd-icon-fill" cx="8" cy="2" rx="6" ry="2"/><path class="dxd-icon-fill" d="M16 10c-3.3 0-6 2.7-6 6s2.7 6 6 6 6-2.7 6-6-2.7-6-6-6zm3 7h-2v2h-2v-2h-2v-2h2v-2h2v2h2v2zM8 13c-3.1 0-6-.9-6-2v5c0 1.1 2.9 2 6 2h.3c-.2-.6-.3-1.3-.3-2 0-1.1.2-2.1.6-3H8zM14 8.3V4c0 1.1-2.9 2-6 2s-6-.9-6-2v5c0 1.1 2.9 2 6 2 .6 0 1.3 0 1.9-.1 1-1.3 2.5-2.2 4.1-2.6z"/></svg>',
    'dxrd-svg-operations-add_query': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M0 0h11v2H0V0zm0 3h2v2H0V3zm5 0H3v2h2V3zm1 0h2v2H6V3zm5 0H9v2h2V3zM0 6h2v2H0V6zm5 0H3v2h2V6zM0 9h2v2H0V9zm5 0H3v2h2V9zm3-1V6h2v2h2v2h-2v2H8v-2H6V8h2z"/></svg>',
    'dxrd-svg-operations-ascending': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 0L6 6h4v16h4V6h4z"/></svg>',
    'dxrd-svg-operations-descending': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 22l6-6h-4V0h-4v16H6z"/></svg>',
    'dxrd-svg-operations-edit': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg">\<path class="dxd-icon-fill" d="M0 12h2.667L0 9.333V12zm1.333-4L4 10.667l5.333-5.334-2.666-2.666L1.333 8zm8-8L8 1.333 10.667 4 12 2.667 9.333 0z"/></svg>',
    'dxrd-svg-operations-movedown': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 10l6 6 6-6V6l-6 6-6-6z"/></svg>',
    'dxrd-svg-operations-moveleft': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 6l-6 6 6 6h4l-6-6 6-6z"/></svg>',
    'dxrd-svg-operations-moveleft_all': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 6H8l-6 6 6 6h4l-6-6z"/><path class="dxd-icon-fill" d="M20 6h-4l-6 6 6 6h4l-6-6z"/></svg>',
    'dxrd-svg-operations-moveright': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18l6-6-6-6H6l6 6-6 6z"/></svg>',
    'dxrd-svg-operations-moveright_all': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18h4l6-6-6-6h-4l6 6z"/><path class="dxd-icon-fill" d="M2 18h4l6-6-6-6H2l6 6z"/></svg>',
    'dxrd-svg-operations-moveup': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 12l-6-6-6 6v4l6-6 6 6z"/></svg>',
    'dxrd-svg-operations-rebuild_schema': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M9.5 0L12 5h-1.5v2.36c0 2.489-2.382 4.285-4.775 3.601l.55-1.923A1.746 1.746 0 008.5 7.36V5H7l2.5-5zm-6 4.64V7H5l-2.5 5L0 7h1.5V4.64c0-2.489 2.382-4.285 4.775-3.602l-.55 1.924A1.746 1.746 0 003.5 4.64z"/></svg>',
    'dxrd-svg-operations-recycle_bin': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M7 0H5v2H1v1h10V2H7V0z"/><path class="dxd-icon-fill" fill-rule="evenodd" clip-rule="evenodd" d="M2 4h8v7a1 1 0 01-1 1H3a1 1 0 01-1-1V4zm2 6h1V6H4v4zm3 0h1V6H7v4z"/></svg>',
    'dxrd-svg-operations-recycle_bin_xl': '<svg data-bind="svgAttrs" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" fill-rule="evenodd" clip-rule="evenodd" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zm4-9v8H9v-8h1zm5 8v-8h-1v8h1z"/><path class="dxd-icon-fill" d="M19 4h-5V3h-4v1H5v2h14V4z"/></svg>',
    'dxrd-svg-operations-remove': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M0 5h12v2H0z"/></svg>',
    'dxrd-svg-operations-rename': '<svg data-bind="svgAttrs" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg"><path class="dxd-icon-fill" d="M9 0h3v1h-1v10h1v1H9v-1h1V1H9V0z"/><path class="dxd-icon-fill" fill-rule="evenodd" clip-rule="evenodd" d="M9 11H7l-.637-2.04H2.637L2 11H0L3.2 1h2.6L9 11zM5.75 7L4.5 3 3.25 7h2.5z"/></svg>',
    'dxrd-svg-operations-unsorted': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 20l6-6V6H2l5-6 5 6H8v6l6-6V0h2v4l4-4 2 2-6 6v8h4l-5 6-5-6h4v-6l-6 6v6H6v-4l-4 4z"/></svg>',
    'dxrd-svg-properties-borders-all': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm20 20H2V2h18v18z"/></svg>',
    'dxrd-svg-properties-borders-bottom': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 12h2v4H0zM12 0h4v2h-4zM0 6h2v4H0zM18 2h2v2h2V0h-4zM6 0h4v2H6zM20 18v2H2v-2H0v4h22v-4zM2 4V2h2V0H0v4zM20 6h2v4h-2zM20 12h2v4h-2z"/></svg>',
    'dxrd-svg-properties-borders-left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 0h4v2H6zM20 12h2v4h-2zM12 0h4v2h-4zM20 18v2h-2v2h4v-4zM20 6h2v4h-2zM4 20H2V2h2V0H0v22h4zM18 2h2v2h2V0h-4zM12 20h4v2h-4zM6 20h4v2H6z"/></svg>',
    'dxrd-svg-properties-borders-none': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 0h4v2H6zM20 12h2v4h-2zM12 0h4v2h-4zM20 18v2h-2v2h4v-4zM20 6h2v4h-2zM18 2h2v2h2V0h-4zM12 20h4v2h-4zM6 20h4v2H6zM0 6h2v4H0zM2 4V2h2V0H0v4zM2 18H0v4h4v-2H2zM0 12h2v4H0z"/></svg>',
    'dxrd-svg-properties-borders-right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 20h4v2h-4zM0 6h2v4H0zM6 20h4v2H6zM2 4V2h2V0H0v4zM0 12h2v4H0zM18 2h2v18h-2v2h4V0h-4zM4 20H2v-2H0v4h4zM6 0h4v2H6zM12 0h4v2h-4z"/></svg>',
    'dxrd-svg-properties-borders-top': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 6h2v4h-2zM6 20h4v2H6zM20 12h2v4h-2zM4 20H2v-2H0v4h4zM12 20h4v2h-4zM2 4V2h18v2h2V0H0v4zM20 18v2h-2v2h4v-4zM0 12h2v4H0zM0 6h2v4H0z"/></svg>',
    'dxrd-svg-properties-propertyexpression': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M4.8 6h-2l.4-2h1.9l.3-1.5c.1-.7.5-1.9 2.5-2.3C9 .1 10.2 0 11 0l-.5 2c-.2 0-1.1 0-1.9.2-.5 0-.6.3-.7.7L7.7 4H10l-.4 2H7.3l-.7 3.5c-.1.7-.5 1.9-2.5 2.3-1.1.1-2.3.2-3.1.2l.5-2c.2 0 1.1 0 1.9-.2.5-.1.6-.4.7-.7L4.8 6z" id="Background"/></svg>',
    'dxrd-svg-properties-search': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.6c1.2.7 2.6 1.1 4.1 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.8.8-.8 2 0 2.8zM10 10.1c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.9-4-4z"/></svg>',
    'dxrd-svg-properties-sortingbyalphabet': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M3.2 0L1 7h1.6L3 5.3h2L5.4 7H7L4.9 0H3.2zm0 4.2L3.8 2c0-.1.1-.4.2-.8v.1c0 .3.1.6.1.7l.5 2.2H3.2zM1 10h4l-4 5v1h6v-1H3l4-5V9H1zM13 12V0h-2v12H8l4 4 4-4z"/></svg>',
    'dxrd-svg-properties-sortingbygroups': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1 7h7V0H1v7zm1-6h5v5H2V1zM9 1h6v1H9zM9 3h6v1H9zM9 5h6v1H9zM9 10h6v1H9zM9 12h6v1H9zM9 14h6v1H9z"/><path class="dxd-icon-fill" d="M5 2H4v1H3v1h1v1h1V4h1V3H5zM1 16h7V9H1v7zm1-6h5v5H2v-5z"/><path class="dxd-icon-fill" d="M5 11H4v1H3v1h1v1h1v-1h1v-1H5z"/></svg>',
    'dxrd-svg-properties-textAlignment-bottom': '<svg data-bind="svgAttrs" version="1.1" id="Bottom_Align_1_" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Bottom_Align" class="Black" d="M28 18H4v-2h24v2zm0 2H4v2h24v-2zm0 4H4v2h24v-2z"/></svg>',
    'dxrd-svg-properties-textAlignment-center': '<svg data-bind="svgAttrs" version="1.1" id="Align_Center" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Align_Center_1_" class="Black" d="M28 8H4V6h24v2zm-4 2H8v2h16v-2zm4 4H4v2h24v-2zm0 8H4v2h24v-2zm-4-4H8v2h16v-2z"/></svg>',
    'dxrd-svg-properties-textAlignment-justify': '<svg data-bind="svgAttrs" version="1.1" id="Align_Justify" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Align_Justify_2_" class="Black" d="M28 8H4V6h24v2zm0 2H4v2h24v-2zm0 4H4v2h24v-2zm0 8H4v2h24v-2zm0-4H4v2h24v-2z"/></svg>',
    'dxrd-svg-properties-textAlignment-left': '<svg data-bind="svgAttrs" version="1.1" id="Align_Left" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Align_Left_2_" class="Black" d="M28 8H4V6h24v2zm-8 2H4v2h16v-2zm8 4H4v2h24v-2zm0 8H4v2h24v-2zm-8-4H4v2h16v-2z"/></svg>',
    'dxrd-svg-properties-textAlignment-middle': '<svg data-bind="svgAttrs" version="1.1" id="Middle_Align" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Middle_Align_1_" class="Black" d="M28 12H4v-2h24v2zm0 2H4v2h24v-2zm0 4H4v2h24v-2z"/></svg>',
    'dxrd-svg-properties-textAlignment-right': '<svg data-bind="svgAttrs" version="1.1" id="Align_Right" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Align_Right_2_" class="Black" d="M28 8H4V6h24v2zm0 2H12v2h16v-2zm0 4H4v2h24v-2zm0 8H4v2h24v-2zm0-4H12v2h16v-2z"/></svg>',
    'dxrd-svg-properties-textAlignment-top': '<svg data-bind="svgAttrs" version="1.1" id="Top_Align" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}</style><path id="Top_Align_1_" class="Black" d="M28 6H4V4h24v2zm0 2H4v2h24V8zm0 4H4v2h24v-2z"/></svg>',
    'dxrd-svg-queryBuilder-aggregate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 0H3v4l8 8-8 8v4h18v-4H7l8-8-8-8h14z"/></svg>',
    'dxrd-svg-queryBuilder-data_preview': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.7 20.3l-2.5-2.5c.5-.8.8-1.8.8-2.8 0-2.8-2.2-5-5-5s-5 2.2-5 5 2.2 5 5 5c1 0 2-.3 2.8-.8l2.5 2.5c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4zM15 18c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3z"/><ellipse class="dxd-icon-fill" cx="8" cy="2" rx="6" ry="2"/><path class="dxd-icon-fill" d="M8.7 13s-.1 0 0 0c-.1 0-.1 0 0 0H7.3C4.4 12.8 2 12 2 11v5c0 1 2.6 1.9 5.4 2H9c-.4-.9-.7-1.9-.7-2.9.1-.8.2-1.5.4-2.1zM14 8.2V4c0 1.1-2.9 2-6 2s-6-.9-6-2v5c0 1.1 2.9 2 6 2 .6 0 1.2 0 1.7-.1 1-1.4 2.5-2.4 4.3-2.7z"/></svg>',
    'dxrd-svg-queryBuilder-group_by': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 4h14v6H2zM8 14h14v6H8z"/></svg>',
    'dxrd-svg-queryBuilder-select_statment': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 4l-4-4v4zM21.7 22.3l-4.5-4.5c.5-.8.8-1.8.8-2.8 0-2.8-2.2-5-5-5s-5 2.2-5 5 2.2 5 5 5c1 0 2-.3 2.8-.8l4.5 4.5c.4.4 1 .4 1.4 0s.4-1 0-1.4zM13.1 18c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3z"/><path class="dxd-icon-fill" d="M13 8c2 0 3.7.8 5 2.1V6h-6V0H0v20h8.1C6.8 18.7 6 17 6 15c0-3.9 3.1-7 7-7z"/></svg>',
    'dxrd-svg-queryBuilder-sorting_asc': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 0H4v14H2l4 8 4-8H8zM14 14h6l-6 6v2h8v-2h-6l6-6v-2h-8zM19.4 0L14 10h2l.9-2H20v2h2V0h-2.6zm.6 6h-1.9L20 2v4z"/></svg>',
    'dxrd-svg-queryBuilder-sorting_desc': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 0H4v14H2l4 8 4-8H8zM22 0h-8v2h6l-6 6v2h8V8h-6l6-6zM14 22h2l.9-2H20v2h2V12h-2.6L14 22zm6-4h-1.9l1.9-4v4z"/></svg>',
    'dxrd-svg-tabs-properties': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.6 10.4l-2.6-.3c-.2 0-.3-.2-.4-.3-.1-.3-.2-.6-.3-.8-.1-.2-.1-.4 0-.5l1.5-2.1c.1-.2.1-.5 0-.7l-1.5-1.5c-.2-.2-.5-.2-.7 0l-2.1 1.5c-.2.1-.4.1-.5 0-.3-.1-.5-.2-.8-.3-.1-.1-.2-.2-.3-.4l-.4-2.5c0-.2-.2-.4-.5-.4h-2.1c-.2 0-.5.2-.5.4L10.1 5c0 .2-.2.3-.3.4l-.9.3c-.2.1-.4.1-.5 0L6.3 4.1c-.2-.1-.4-.1-.6.1L4.2 5.7c-.2.2-.2.4-.1.6l1.5 2.1c.1.2.1.4 0 .5 0 .3-.1.6-.2.8-.1.2-.2.3-.4.4l-2.5.4c-.2 0-.4.2-.4.5v2.1c0 .2.2.5.4.5l2.5.3c.2 0 .3.2.4.3.1.3.2.6.3.8.1.2.1.4 0 .5l-1.5 2.1c-.1.2-.1.5 0 .7l1.5 1.5c.2.2.5.2.7 0l2.1-1.5c.2-.1.4-.1.5 0 .3.1.5.2.8.3.2.1.3.2.3.4.1.6.3 1.9.4 2.6 0 .2.2.4.5.4h2.1c.2 0 .5-.2.5-.4l.4-2.5c0-.2.2-.3.3-.4.3-.1.6-.2.8-.3.2-.1.4-.1.5 0l2.1 1.5c.2.1.5.1.7 0l1.5-1.5c.2-.2.2-.5 0-.7l-1.5-2.1c-.1-.2-.1-.4 0-.5.1-.3.2-.5.3-.8.1-.2.2-.3.4-.3l2.5-.4c.2 0 .4-.2.4-.5V11c0-.3-.2-.5-.4-.6zM12 17c-2.8 0-5-2.2-5-5s2.2-5 5-5 5 2.2 5 5-2.2 5-5 5zm2-5c0 1.1-.9 2-2 2s-2-.9-2-2 .9-2 2-2 2 .9 2 2z"/></svg>',
    'dxrd-svg-toolbar-copy': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 14h2v2H3c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h12c.5 0 1 .5 1 1v3h-2V4H4v10zm18-5v12c0 .5-.5 1-1 1H9c-.5 0-1-.5-1-1V9c0-.5.5-1 1-1h12c.5 0 1 .5 1 1zm-2 1H10v10h10V10z"/></svg>',
    'dxrd-svg-toolbar-cut': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20.4 5.6l-5 5-2-2 6.4-6.4c.4-.4 1.2-.1 1.2.5v1.5c0 .5-.2 1-.6 1.4zM22 17.5c.3 2.6-1.9 4.9-4.5 4.5-1.6-.2-2.9-1.4-3.3-3-.2-.9-.1-1.8.2-2.6L12 14l-2.4 2.4c.4.7.5 1.6.3 2.6-.4 1.6-1.7 2.8-3.3 3-2.6.3-4.9-1.9-4.5-4.5.2-1.6 1.4-2.9 3-3.3.9-.3 1.8-.2 2.5.2L10 12 3.6 5.6c-.4-.4-.6-.9-.6-1.4V2.7c0-.6.8-.9 1.2-.5l12.1 12.1c.8-.3 1.7-.5 2.6-.2 1.6.4 2.9 1.8 3.1 3.4zM8 18c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2zm12 0c0-1.1-.9-2-2-2s-2 .9-2 2 .9 2 2 2 2-.9 2-2z"/></svg>',
    'dxrd-svg-toolbar-delete': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M13.4 12l5.3-5.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L12 10.6 6.7 5.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l5.3 5.3-5.3 5.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l5.3-5.3 5.3 5.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L13.4 12z"/></svg>',
    'dxrd-svg-toolbar-paste': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 8H9c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h12c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-1 12H10V10h10v10zM15 2v3H7V2h2V1c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v1h2zm3 4h2V3c0-.5-.5-1-1-1h-3v2h2v2zM6 20H3c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H4v14h2v2z"/></svg>',
    'dxrd-svg-toolbar-redo': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 7c2.2 0 4.3.8 5.7 2.3l3.3 3.3V8c0-.6.4-1 1-1s1 .4 1 1v8h-8c-.6 0-1-.4-1-1s.4-1 1-1h4.6l-3.3-3.3C13.2 9.6 11.7 9 10 9c-3.3 0-6 2.7-6 6 0 .6-.4 1-1 1s-1-.4-1-1c0-4.4 3.6-8 8-8z"/></svg>',
    'dxrd-svg-toolbar-undo': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 7c-2.2 0-4.3.8-5.7 2.3L5 12.6V8c0-.6-.4-1-1-1s-1 .4-1 1v8h8c.6 0 1-.4 1-1s-.4-1-1-1H6.4l3.3-3.3C10.8 9.6 12.3 9 14 9c3.3 0 6 2.7 6 6 0 .6.4 1 1 1s1-.4 1-1c0-4.4-3.6-8-8-8z"/></svg>',
    'dxrd-svg-toolbar-validate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6L8 20l-6-6v-4l6 6L22 2v4z"/></svg>',
    'dxrd-svg-toolbar-zoomin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn" class="dxd-icon-fill" d="M19 11h-6V5c0-.5-.5-1-1-1s-1 .5-1 1v6H5c-.5 0-1 .5-1 1s.5 1 1 1h6v6c0 .5.5 1 1 1s1-.5 1-1v-6h6c.5 0 1-.5 1-1s-.5-1-1-1z"/></svg>',
    'dxrd-svg-toolbar-zoomout': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomOut" class="dxd-icon-fill" d="M19 13H5c-.5 0-1-.4-1-1 0-.5.4-1 1-1h14c.5 0 1 .4 1 1s-.4 1-1 1z"/></svg>',
    'dxrd-svg-wizard-Download': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7 12l5 5 5-5h-4V2h-2v10H7zm8-4v2h4v10H5V10h4V8H3v14h18V8h-6z"/></svg>',
    'dxrd-svg-wizard-expressions': '<svg data-bind="svgAttrs" version="1.1" id="Tabs" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><path class="dxd-icon-fill" d="M25.6 4.3c-.3-.4-.7-.7-1.2-1-.6-.2-1.3-.3-2.2-.3-1.8 0-3.3.4-4.5 1.3s-1.9 2.1-2.2 3.6l-.3 1.4-.4 1.7h-2.4l-.4 2h2.4L12 24.3c-.2 1.3-.7 1.9-1.3 1.9-.2 0-.3 0-.4-.1l-.4-.4c-.3-.4-.6-.7-.7-.8-.2-.2-.4-.3-.6-.4-.2-.1-.4-.1-.7-.1-.5 0-1 .2-1.3.6-.4.4-.6.9-.6 1.5 0 .7.4 1.3 1.2 1.9.6.4 1.5.6 2.6.6s2.1-.2 2.9-.6 1.5-1.1 2.2-2c.6-.9 1.1-2.1 1.4-3.4l2.3-9.9H21l.5-2H19l.4-1.7.4-1.6c.2-.8.3-1.2.5-1.5.2-.3.5-.5.9-.5.2 0 .3 0 .5.1s.4.3.7.7c.3.3.6.6.9.7s.6.2.9.2c.4 0 .7-.1 1-.2.3-.2.5-.4.7-.7.2-.3.3-.7.3-1-.2-.5-.3-.9-.6-1.3z" id="Expressions"/></svg>',
    'dxrd-svg-wizard-FederationDataSource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}.st1{opacity:.25}.st2{opacity:.5}</style><g class="st1"><ellipse class="Black" cx="32" cy="11" rx="21" ry="5"/></g><path class="Blue" d="M63 44H51V32h-6v12H33v6h12v12h6V50h12z"/><g class="st2"><path class="Black" d="M65 55c-3.6 0-7-.2-10-.6V66H44v18c0 2.8 9.4 5 21 5s21-2.2 21-5V50c0 2.8-9.4 5-21 5z"/></g><g class="st1"><path class="Black" d="M67 43v10c10.7-.2 19-2.4 19-5s-8.3-4.7-19-5z"/></g><g class="st2"><path class="Black" d="M32 18c-11.6 0-21-2.2-21-5v34c0 2.5 8.9 4.6 19 5V41h12V29h11V13c0 2.8-9.4 5-21 5z"/></g><path class="Blue" d="M65 43H53V31h-9v12H32v9h12v12h9V52h12z"/></svg>',
    'dxrd-svg-wizard-JsonDataSource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}.st1{opacity:.25}.st2{opacity:.5}</style><g id="JSON"><g class="st2"><path class="Black" d="M63.6 72.5c-.1-.2-.2-.4-.3-.7-.5-1.4-.8-2.9-.9-4.4-.1-2.3.4-4.5 1.5-6.3.7-1.2 1.7-2.4 2.8-3.2.4-.3 1.1-.7 1.1-.7s.5-.3 1.2-.6c.1.1.2.1.3.2 1.7 1.2 3 2.8 3.9 4.6.3.7.6 1.5.8 2.3v2.8c0 2.4-4.1 4.6-10.4 6zm-20.4-2.2c-.3-2.6-.3-5.3.2-7.9.4-2.3 1.2-4.5 2.2-6.5C48.9 49.5 55 44.6 62 42.8c1.4-.4 4.2-.8 5.8-.8 1.4 0 4.4.6 6.2 1.4v-22c0 4.2-11.6 7.6-26 7.6s-26-3.4-26-7.6v45c0 3.8 9.5 6.9 21.9 7.5-.3-1.2-.5-2.4-.7-3.6z"/></g><g class="st1"><ellipse class="Black" cx="48" cy="19.5" rx="26" ry="7.5"/></g><path class="Blue" d="M91.8 70.1c-.3 2.4-1 4.8-2 7-1.2 2.5-2.9 4.9-4.9 6.9-2.2 2.1-4.8 4-7.6 5.2-2 .9-5.5 1.9-9.1 1.9-1 0-3.3-.6-4.7-1.1-2.4-1-4.6-2.5-6.3-4.5-1.1-1.3-2-2.8-2.7-4.3-1.1-2.5-1.7-5.3-1.9-8.1-.1-2-.1-4 .2-5.9.5-3.1 1.8-6.2 4.1-8.5.4-.4 1.9-1.6 2.7-2.1.8-.5 3.2-1.3 4.5-1.4 1-.1 2 0 2.9.2-.5.3-1 .6-1.4 1-1.4 1-2.5 2.3-3.3 3.8-1.3 2.2-1.8 4.8-1.7 7.3 0 1.7.4 3.5 1 5.1.5 1.3 1.2 2.5 2.1 3.5.7.8 1.6 1.6 2.5 2.2.5.3 1 .7 1.6.9.5.2 1 .4 1.5.5 3.1.7 6.4-.4 8.9-2.2 1.5-1.1 2.8-2.6 3.8-4.2 1.4-2.2 2.2-4.7 2.5-7.2.2-1.5.2-3 .1-4.5-.1-2-.4-4.1-1-6-.8-3-2.3-5.8-4.4-8.1-.9-1-2-1.9-3.1-2.7-.2-.2-.5-.3-.7-.4-.2-.1-.5-.3-.7-.4 1.5.4 3 1 4.4 1.7 3.9 2 7.3 4.9 9.6 8.6.7 1 1.2 2.1 1.7 3.2.8 1.8 1.3 3.7 1.6 5.6.1 2.3.1 4.7-.2 7zm-40.1 8.6c-.6-2-.9-4.2-1-6.5-.1-1.5-.1-2.9.1-4.3.3-2.8 1.1-5.4 2.4-7.5 1-1.7 2.3-3.2 3.8-4.4 1.1-.8 2.3-1.5 3.5-1.9 1.3-.5 2.6-.7 4-.7.5 0 1.1 0 1.6.1.7.1 1.4.3 2 .5.1.1.7.3.8.4.4.2.9.5 1.5.9 2 1.4 3.5 3.2 4.5 5.4.9 1.9 1.3 4 1.4 6.3 0 2.4-.4 4.7-1.4 6.7-.8 1.7-2 3.3-3.4 4.5 2.2-.2 4.5-1.2 6.4-3 .4-.3.7-.7 1-1.1.5-.6.9-1.1 1.2-1.5.4-.7.8-1.4 1.2-2.2.5-1.1.8-2.1 1-3.1.3-1.7.4-3.5.3-5.8-.3-4.3-1.5-8-3.5-10.9-.4-.6-.7-1-1-1.4-.6-.7-1.3-1.3-2-2-.8-.7-1.1-.9-2.5-1.7S69 44 67.8 44c-1.3 0-4 .3-5.4.6-6.5 1.7-12 6.2-15 12.2-.9 1.9-1.6 3.9-2 6-.5 2.4-.5 4.8-.2 7.2.2 2 .7 3.9 1.5 5.7.4 1 .9 2.1 1.6 3.1 1.8 2.9 4.2 5.3 7.2 7.2-1.7-1.9-3-4.5-3.8-7.3z"/></g></svg>',
    'dxrd-svg-wizard-NoDataSource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.White{fill:#fff}.Red{fill:#d11c1c}.st1{opacity:.25}.st2{opacity:.5}</style><g id="NoData"><g class="st2"><path class="Black" d="M44 68c0-12.2 9.8-22 22-22 1.4 0 2.7.1 4 .4v-24c0 4.2-11.6 7.6-26 7.6s-26-3.4-26-7.6v45c0 4.2 11.6 7.6 26 7.6h1.1c-.7-2.2-1.1-4.6-1.1-7z"/></g><g class="st1"><ellipse class="Black" cx="44" cy="20.5" rx="26" ry="7.5"/></g><circle class="Red" cx="66" cy="68" r="20"/><path class="White" d="M53.4 77.8C51.3 75.1 50 71.7 50 68c0-8.8 7.2-16 16-16 3.7 0 7.1 1.3 9.8 3.4L53.4 77.8zm25.2-19.6L56.2 80.6c2.7 2.1 6.1 3.4 9.8 3.4 8.8 0 16-7.2 16-16 0-3.7-1.3-7.1-3.4-9.8z"/></g></svg>',
    'dxrd-svg-wizard-ObjectDataSource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}.st1{opacity:.25}.st2{opacity:.5}</style><g id="ObjectBinding"><g class="st2"><path class="Black" d="M64.7 71H64V59h6v7.4c0 1.8-2 3.3-5.3 4.6zM52 52v7h12v-7H52zm-18 7h12V46h18v-7h6V21.4c0 4.2-11.6 7.6-26 7.6s-26-3.4-26-7.6v45c0 3.1 6.6 5.8 16 7V59z"/></g><g class="st1"><ellipse class="Black" cx="44" cy="19.5" rx="26" ry="7.5"/></g><path class="Blue" d="M82 41H66v7H48v13H36v26h26V75h13V57h7V41zm-9 32H62V61H50V50h16v7h7v16z"/></g></svg>',
    'dxrd-svg-wizard-SqlDataSource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.st1{opacity:.25}.st2{opacity:.5}</style><g id="Database"><g class="st2"><path class="Black" d="M48 29c-14.4 0-26-3.4-26-7.6v45c0 4.2 11.6 7.6 26 7.6s26-3.4 26-7.6v-45c0 4.2-11.6 7.6-26 7.6z"/></g><g class="st1"><ellipse class="Black" cx="48" cy="19.5" rx="26" ry="7.5"/></g></g></svg>',
});

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/dx-analytics-core-templates.js

_svgTemplateEngine_SvgTemplatesEngine.addTemplates({
    'dxrd-bordereditor': '<div class="dxrd-bordereditor-content"> <!-- ko with: value--> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-none" data-bind="template: \'dxrd-svg-properties-borders-none\', css: { \'dxd-state-active\': (!bottom() && !left() && !top() && !right()), \'dxrd-disabled-button\': disabled }, click: function() { setNone() }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-all dxrd-bordereditor-right-margin" data-bind="template: \'dxrd-svg-properties-borders-all\', css: { \'dxd-state-active\': (bottom() && left() && top() && right()), \'dxrd-disabled-button\': disabled  }, click: function() { setAll() }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-left" data-bind="template: \'dxrd-svg-properties-borders-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\') }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-top" data-bind="template: \'dxrd-svg-properties-borders-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\') }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-right" data-bind="template: \'dxrd-svg-properties-borders-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\') }"></div> <div class="dxrd-bordereditor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-borders-bottom" data-bind="template: \'dxrd-svg-properties-borders-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\') }"></div> <p></p> <!-- /ko --></div>',
    'dxrd-borders': '<div class="dxrd-bordereditor" data-bind="dxBorderEditor: { value: value, disabled: disabled }"></div>',
    'dxrd-colorpicker': '<div data-bind="dxColorBox: { value: displayValue, placeholder: $root.getLocalization(\'(Not set)\', \'ReportStringId.UD_PropertyGrid_NotSetText\'), editAlphaChannel: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flipfit\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } }, inputAttr: { \'aria-label\': displayName } }"></div>',
    'dxrd-expressionstring': '<!-- ko if: $data.value() --> <div data-bind="dxExpressionEditor: getOptions({ options: value, fieldListProvider: $root.dataBindingsProvider, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() })"></div> <!-- /ko -->',
    'dxrd-field': '<!-- ko displayNameExtender: { path: path, dataMember: value } --> <!-- ko if: visible --> <div data-bind="dxFieldListPicker: { path: path, acceptCustomValue: true, value: value, displayValue: $displayName, itemsProvider: $root.dataBindingsProvider, treeListController: treeListController, disabled: disabled }"></div> <!-- /ko --> <!-- /ko -->',
    'dxrd-filterstring': '<!-- ko if: $data.value() --> <div data-bind="dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }"></div> <!-- /ko -->',
    'dxrd-filterstringgroup': '<!-- ko if: $data.value() --> <div data-bind="dxFilterEditor: { options: value, fieldListProvider: $root.dataBindingsGroupProvider, getDisplayNameByPath: $root.getDisplayNameByPath, displayNameProvider: $root.displayNameProvider && $root.displayNameProvider() }"></div> <!-- /ko -->',
    'dxrd-formatstring': '<div data-bind="dxFormatEditor: { value: value, disabled: disabled, actions: $data.actions, customPatterns: $data.customPatterns }"></div>',
    'dxrd-guid': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: (validationRules || []) }"></div>',
    'dxrd-emptyHeader': '',
    'dxrd-objectEditorContent': '<!-- ko if: $data.visible() && $data.editorCreated() --> <div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div> <!-- /ko -->',
    'dxrd-objectEditor': '<div data-bind="dxPropertyGrid: { target: ko.observable($data), level: $parent.level, textToSearch: $parent.textToSearch }"></div>',
    'dxrd-commonCollectionItem': '<div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1, parentDisabled: editor.disabled }"></div>',
    'dxrd-textalignment': '<div class="dxrd-textalignment-editor" data-bind="dxTextAlignmentEditor: { value: value, disabled: disabled }"></div>',
    'dxrd-objectVisitor': '<!-- ko if: options --> <div data-bind="treelist: options"></div> <!-- /ko -->',
    'dxd-snap-lines-holder': '<div class="dxd-snap-lines-holder"> <div class="dxd-snap-line dxd-snap-line-horizontal" data-bind="style: { transform: snapLineSurfaces[0].transform() }"></div> <div class="dxd-snap-line dxd-snap-line-horizontal" data-bind="style: { transform: snapLineSurfaces[1].transform() }"></div> <div class="dxd-snap-line dxd-snap-line-vertical" data-bind="style: { transform: snapLineSurfaces[2].transform() }"></div> <div class="dxd-snap-line dxd-snap-line-vertical" data-bind="style: { transform: snapLineSurfaces[3].transform() }"></div> </div>',
    'dxrd-surface-template-base': '<!-- ko ifnot: isLoading --> <!-- ko with: surface --> <div class="dxrd-surface-wrapper" data-bind="template: templateName, click: function(_, e) { !$root.selection.disabled() && $root.selection.clickHandler($data, e); e.stopPropagation(); }"> </div> <!-- /ko --> <!-- /ko --> <!-- ko if: isLoading --> <div class="dxrd-surface-wrapper"></div> <!-- /ko -->',
    'dxrd-designer': '<div tabindex="-1" data-bind="cssArray: [surfaceClass($element), { \'dx-accessibility\': $data.accessibilityCompliant } ]"> <div class="dxrd-designer-wrapper dx-editors dxd-surface-back-color dxd-scrollbar-color" data-bind="visible: (!$data.designMode || designMode()), cssArray: [$data.rootStyle, { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl }]"> <!-- ko foreach: parts --> <!-- ko template: { name: templateName, data: model }--> <!-- /ko --> <!-- /ko --> </div> <!-- ko if: ($data.addOns) --> <!-- ko foreach: addOns --> <!-- ko template: { name: templateName, data: model } --> <!-- /ko --> <!-- /ko --> <!-- /ko --> <div id="dxrd-designer-last-focus-item-blank" class="dxrd-visually-hidden" tabindex=\'-1\'></div> </div>',
    'dxrd-textalignment-editor': '<div class="dxrd-textalignment-editor-content"> <!-- ko with: value--> <div> <div class="dxrd-textalignment-editor-label dx-field-label" data-bind="text: verticalString"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-top" data-bind="template: \'dxrd-svg-properties-textAlignment-top\', css: { \'dxd-state-active\': top(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'top\', \'Vertical\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-middle" data-bind="template: \'dxrd-svg-properties-textAlignment-middle\', css: { \'dxd-state-active\': middle(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'middle\', \'Vertical\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-bottom" data-bind="template: \'dxrd-svg-properties-textAlignment-bottom\', css: { \'dxd-state-active\': bottom(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'bottom\', \'Vertical\') }"></div> </div> <div class="dxrd-textalignment-margin-top"> <br/> <div class="dxrd-textalignment-editor-label dx-field-label" data-bind="text: horizontalString"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-left" data-bind="template: \'dxrd-svg-properties-textAlignment-left\', css: { \'dxd-state-active\': left(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'left\', \'Horizontal\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-center" data-bind="template: \'dxrd-svg-properties-textAlignment-center\', css: { \'dxd-state-active\': center(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'center\', \'Horizontal\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-right" data-bind="template: \'dxrd-svg-properties-textAlignment-right\', css: { \'dxd-state-active\': right(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'right\', \'Horizontal\') }"></div> <div class="dxrd-textalignment-editor-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dxrd-image-textAlignment-justify" data-bind="template: \'dxrd-svg-properties-textAlignment-justify\', css: { \'dxd-state-active\': justify(), \'dxrd-disabled-button\': disabled }, click: function() { setValue(\'justify\', \'Horizontal\') }"></div> </div> <!-- /ko --> </div>',
    'dxrd-collectionactions-template': '<div class="dxrd-action-items-container"></div> <div class="dx-treelist-action" data-bind="dxButtonWithTemplate: { onClick: togglePopoverVisible, disabled: disabled, icon: ko.unwrap($data.imageTemplateName), iconClass: ko.unwrap($data.imageClassName) }, attr: { id: id, title: text }"></div> <div data-bind="dxPopup: { width: 235, height: \'auto\', position: { my: $root.rtl ? \'left top\': \'right top\', at: \'bottom\', of: (\'#\' + id) }, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, container: ($data.getContainer || function(_e, selector) { return selector; })($element, \'.dxrd-action-items-container\'), shading: false, visible: popoverVisible }"> <!-- ko if: $data.contentTemplate--> <!-- ko template: contentTemplate--> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.contentTemplate --> <!-- ko foreach: actions --> <div class="dxrd-action-item dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="dxclick: clickAction, css: { \'dxrd-disabled-button\': disabled }"> <div class="dxrd-action-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-drag-helper-source': '<div class="dxrd-drag-helper-source" data-bind="styleunit: { top: $data.top, left: $data.left, width: $data.width, height: $data.height }, css: { \'dxrd-locked\': $data.isLocked }"> <!-- ko foreach: $data.controls() --> <div class="dxrd-drag-helper-control" data-bind="styleunit: { left: $data.left, top: $data.top, width: $data.width, height: $data.height }, css: $data.className"> <!-- ko with: $parent.customData() --> <div data-bind="template: { name: $data.template, data: $data.data }"> </div> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dxrd-drag-helper-source-reorder-treelist': '<div class="dxrd-drag-helper-source-reorder-treelist dxd-back-primary dxd-text-primary dxd-ghost-border-color dxd-border-accented"> <div class="dxrd-drag-helper-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}"> </div> <div class="dxrd-drag-helper-treelist-text-wrapper"> <div class="dxrd-drag-helper-treelist-text" data-bind="text: text, attr: { title: text }"></div> </div> </div>',
    'dxrd-menubutton-template-base': '<div class="dxrd-menu-container" style="position:relative; width:0; height:100%"></div> <div class="dxrd-menu-button dxd-toolbox-back-color dxd-border-primary dxd-back-primary2"> <div class="dxrd-menu-place" style="width:54px;"></div> <div class="dxrd-menu-button-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="dxclick: function(e) { if(stopPropagation) { stopPropagation = false; } else { toggleAppMenu() } }, template: \'dxrd-svg-menu-menu\', css: {\'dxd-state-active\': appMenuVisible }"></div> <div data-bind="dxPopup: { width: 250, wrapperAttr: { class: \'dxd-menu-back-color dxd-back-primary2\' }, height: \'100%\' , position: $data.rtl ? { my: \'right top\' , at: \'left top\' , offset: \'-10 0\' } : { my: \'left top\' , at: \'right top\' , offset: \'10 0\' }, showTitle: false, showCloseButton: false, container: getMenuPopupContainer($element), target: getMenuPopupTarget($element), animation: {}, hideOnOutsideClick: function(e) { var buttonClassName = \'dxrd-menu-button-image\'; var parentClassList = e.target.parentNode && e.target.parentNode.parentNode && e.target.parentNode.parentNode.classList; stopPropagation = (e.target.classList && e.target.classList.contains(buttonClassName)) || (parentClassList && parentClassList.contains(buttonClassName)); return true; }, shading: false, focusStateEnabled: false, visible: appMenuVisible }"> <div class="dxrd-menu-break dxd-popup-back-color dxd-back-primary2"></div> <!-- ko foreach: actionLists.menuItems --> <div class="dxrd-menu-item dxd-text-primary dxd-list-item-back-color dxd-back-highlighted" data-bind="dxclick: function(e) { if(disabled && !disabled() || !disabled) { $root.toggleAppMenu(); clickAction($root.model(), e); }}, css: { \'dxrd-disabled-button\': disabled }, visible: visible"> <div class="dxrd-menu-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: {name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> <div class="dxrd-menu-item-text" data-bind="text: $data.displayText && $data.displayText() || text, attr: { title: $data.displayText && $data.displayText() || text}"></div> <div class="dxrd-menu-item-separator" data-bind="visible: $data.hasSeparator"></div> </div> <!-- /ko --> </div> </div>',
    'dxrd-top-grid': '<!-- ko if: popularVisible --> <div class="dx-fieldset"> <div class="dx-accordion" data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dxrd-group-header dx-accordion-header dxd-border-primary" data-bind="css: { \'dxrd-group-header-collapsed\': collapsed() }"> <div class="dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" style="display:inline-block;"></div> <span class="dxrd-group-header-text" data-bind="text: $root.actionsGroupTitle()"></span> </div> <div class="dx-accordion-content dxd-back-primary dxd-border-primary"> <!-- ko foreach: (contextActions || []) --> <!-- ko if: $data.templateName --> <!-- ko template: templateName  --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dxrd-properties-grid-action" data-bind="dxclick: function() { if($data.disabled && !$data.disabled() || !$data.disabled) { clickAction($root.editableObject()); } }, css: { \'dxrd-disabled-button\': $data.disabled && $data.disabled() }, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible)"> <div class="dxrd-properties-grid-action-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"></div> </div> <!-- /ko --> <!-- /ko --> <!-- ko with: popularProperties --> <div style="position: relative" data-bind="template: { name: \'dx-propertieseditor\', data: $data }"></div> <!-- /ko --> </div> </div> </div> <!-- /ko -->',
    'dxrd-group-actions': '<div class="dxd-back-primary2 dxrd-property-grid-actions-group"> <!-- ko foreach: (groupActions || []) --> <div class="dxd-border-primary dxrd-properties-grid-actions-group-content" data-bind="visible: items.some(x => !x.visible || ko.unwrap(x.visible))"> <div class="dxd-text-primary dxrd-properties-grid-action-name" data-bind="text: group"></div> <!-- ko foreach: (items || []) --> <!-- ko template: { name: $data.templateName, if: $data.templateName }  --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dxrd-properties-grid-action" data-bind="dxclick: function() { if($data.disabled && !$data.disabled() || !$data.disabled) { clickAction($root.editableObject()); } }, css: { \'dxrd-disabled-button\': $data.disabled && $data.disabled() }, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible)"> <div class="dxrd-properties-grid-action-image dxd-button-back-color dxd-state-normal dxd-back-highlighted" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: $data.displayText && $data.displayText() || text }"> </div> </div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dx-propertygrid-searchbox': '<div class="dx-property-grid-search-group dx-property-grid-search-collapsed" data-bind="css: { \'dx-property-grid-search-collapsed\': !isSearching() }"> <div class="dx-property-grid-sorting-action dxd-button-back-color dxd-state-normal dxd-back-highlighted dxd-back-primary2 dx-button-has-text" data-bind="css: { \'dxd-state-active\': isSearching }, dxButtonWithTemplate: { onClick: switchSearchBox, icon: \'dxrd-svg-properties-search\', iconClass: \'image-search\' }, attr: { title: $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\') }"> </div> <div class="dx-property-grid-search-box no-margin-right" data-bind="dxTextBox: { value: textToSearch, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true }, cacheElement: { action: function(element) { searchBox(element); } }"></div> </div>',
    'dxrd-propertiestab': '<div class="dxrd-properties-wrapper" data-bind="visible: active() && visible()"> <div class="dxd-text-primary dxrd-properties-sub-wrapper"> <div class="dxrd-right-panel-header"> <span data-bind="text: text"></span> </div> <!-- ko with: model --> <!-- ko if: $root.controlsStore.visible() --> <div class="dx-property-grid-header"> <div class="dx-property-grid-header-content"> <div class="dx-property-grid-sorting-actions-group" data-bind="css: { \'dx-property-grid-search-collapsed\': isSearching }"> <div class="dxrd-properties-focused-item" data-bind="dxSelectBox: { dataSource: $root.controlsStore.dataSource, value: focusedItem, displayExpr: displayExpr, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }"></div> <div class="dx-property-grid-sorting-actions-container"> <div class="dx-property-grid-sorting-action dxd-state-normal dxd-back-highlighted dxd-back-primary2 dx-button-has-text" data-bind="css: { \'dxd-state-active dxd-state-no-hover\': !isSortingByGroups() }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(false); }, icon: \'dxrd-svg-properties-sortingbyalphabet\', iconClass: \'image-sortingbyalphabet\' }"></div> <div class="dx-property-grid-sorting-action dxd-state-normal dxd-back-highlighted dxd-back-primary2 dx-button-has-text" data-bind="css: { \'dxd-state-active dxd-state-no-hover\': isSortingByGroups }, dxButtonWithTemplate: { onClick: function() { $data.isSortingByGroups(true); }, icon: \'dxrd-svg-properties-sortingbygroups\', iconClass: \'image-sortingbygroups\' }"></div> </div> </div> <!-- ko template: \'dx-propertygrid-searchbox\' --> <!-- /ko --> </div> </div> <!-- /ko --> <div class="dxrd-properties-grid dxd-border-primary" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }"> <!-- ko template: { name: \'dxrd-group-actions\', data: { groupActions: $root.contextGroupActions } } --> <!-- /ko --> <!-- ko template: { name: \'dxrd-top-grid\', data: { contextActions: $root.contextActions, popularProperties: $root.popularProperties, collapsed: ko.observable(false), popularVisible: $root.popularVisible() && isSortingByGroups(), actionsGroupTitle: $root.actionsGroupTitle } } --> <!-- /ko --> <div data-bind="visible: isSortingByGroups"> <!-- ko foreach: groups --> <div class="dx-fieldset" data-bind="visible: visible"> <div class="dx-accordion" data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dxrd-group-header dx-accordion-header dxd-border-primary" data-bind="css: { \'dxrd-group-header-collapsed\': collapsed() }"> <div class="dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" style="display:inline-block;"></div> <span class="dxrd-group-header-text" data-bind="text: displayName()"></span> </div> <div class="dx-accordion-content dxd-back-primary dxd-border-primary"> <!-- ko ifnot: editorsCreated --> <div class="dx-accordion-content-loading-panel"> <div data-bind="dxLoadIndicator: { visible: !editorsCreated() }"></div> </div> <!-- /ko --> <!-- ko if: $data.editorsRendered() --> <div data-bind="visible: editorsCreated"> <div class="dx-editors"> <!-- ko foreach: editors --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- ko if: ($index() === $parent.editors().length - 1 && $parent.editorsCreated(true)) --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> </div> </div> <!-- /ko --> </div> <div class="dx-fieldset dxd-back-primary" data-bind="visible: !isSortingByGroups()"> <div data-bind="dxLoadIndicator: { visible: !allEditorsCreated() }"></div> <!-- ko if: $data.editorsRendered() --> <div data-bind="visible: allEditorsCreated"> <div class="dx-editors"> <!-- ko foreach: $data.getEditors() --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- ko if: ($index() === $parent._editors().length - 1 && $parent.allEditorsCreated(true)) --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> <!-- ko template: \'dx-propertygrid-popupservice\' --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-propertygrid-popupservice': '<div data-bind="dxPopup: { width: 250, height: \'auto\', position: $data.rtl ? { my: \'left top\', at: \'right top\', of: popupService.target, collision: \'flipfit\' } : { my: \'right top\', at: \'left top\', of: popupService.target, collision: \'flipfit\' }, container: $root.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, visible: popupService.visible }"> <div data-options="dxTemplate: { name: \'content\' }"> <div class="dxrd-editor-menu-caption dxd-text-primary" data-bind="text: popupService.title, visible: popupService.title"></div> <div class="dxd-button-back-color" data-bind="dxMenu: { wrapperAttr: { class: \'dxd-button-back-color\' }, disabled: popupService.disabled, dataSource: popupService.actions, displayExpr: \'title\', cssClass: \'dxrd-editor-menu\', orientation: \'vertical\', showFirstSubmenuMode: \'onHover\', onSubmenuShowing: function(e) { e.submenu._overlay.option(\'container\', $root.getPopupContainer($element)) } }"> <div class="dxrd-editor-menu-item dxd-back-highlighted dxd-state-normal" data-options="dxTemplate: { name: \'item\' }"> <!-- ko if: $data.itemTemplate --> <!-- ko template: $data.itemTemplate --> <!--/ko--> <!--/ko--> <!-- ko ifnot: $data.itemTemplate --> <div data-bind="dxclick: action"> <span class="dxd-text-primary dx-menu-item-text" data-bind="attr: { title: title }, text: title"></span> <div class="dx-menu-item-popout-container" data-bind="visible: $data.items && $data.items.length"> <div class="dx-menu-item-popout"></div> </div> <!--ko if: $data.innerTemplate--> <!--ko template: $data.innerTemplate--> <!--/ko--> <!--/ko--> </div> <!--/ko--> </div> </div> </div> </div>',
    'dx-right-panel-lightweight': '<div class="dxrd-right-panel dx-shadow dx-shadow-right dxd-border-secondary dxd-property-grid-group-header-back-color dxd-back-primary2" data-bind="styleunit: { width: tabPanel.width }, css: tabPanel.cssClasses(), resizable: tabPanel.getResizableOptions($element, 1, $root.calculateWithZoomFactor(325))"> <!-- ko foreach: tabPanel.tabs --> <!-- ko lazy: { template: $data.template } --> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-right-panel-template-base': '<!-- ko with: tabPanel --> <div class="dx-shadow dx-shadow-right dxd-border-secondary dxrd-tab-panel-wrapper" data-bind="styleunit: { width: $data.headerWidth }, css: $data.cssClasses({\'dx-tab-panel-collapsed\':$data.collapsed }), accessibilityKeyboardHelper: $data.keyboardHelper"> <div class="dxrd-right-tabs dxd-side-panel-tabs-back-color dxd-back-contrast" data-bind="css: $data.cssClasses()"> <!-- ko foreach: $data.tabs --> <div role="button" class="dxrd-tab-item dx-accessibility-rightpanel-button dxd-side-panel-tab-back-color dxd-back-highlighted dx-accessibility-focus-border-accented" data-bind="dxAction: { model: $data, action: function(s) { $parent.toggleTabVisibility({ model: s }); }}, css: { \'dxd-state-active dxd-state-no-hover\': active, \'dxrd-tab-item-disabled\': disabled }, attr: { title: $data.text, \'aria-label\': $data.text, \'aria-expanded\': $data.active }, visible: visible"> <div class="dxrd-image-padding" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}"> </div> </div> <!-- /ko --> </div> <div class="dxrd-right-panel dxd-property-grid-group-header-back-color dxd-back-primary2" data-bind="styleunit: { width: $data.width }, css: $data.cssClasses(), resizable: $data.getResizableOptions($element, 50, 340)"> <!-- ko foreach: $data.tabs --> <!-- ko lazy: { template: $data.template } --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko -->',
    'dx-right-panel-switcher': '<div class="dx-right-panel-switcher"> <div class="dxrd-collectioneditor-action" data-bind="dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\', disabled: disabled, onClick: toogle, hint: title }"></div> </div>',
    'dxrd-toolbar-template-base': '<div class="dxrd-toolbar-wrapper dxd-back-secondary-invariant dx-shadow-top"> <div class="dxrd-toolbar" data-bind="template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems }"></div> </div>',
    'dxrd-toolbar-tmplt': '<!-- ko foreach: $data --> <!-- ko if: $data.templateName --> <!-- ko template: { name: $data.templateName, data: $data.contentData || $data } --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dxrd-toolbar-item" data-bind="visible: visible, class: \'dxrd-toolbar-item-\' + $index(), css: {\'dxrd-toolbar-item-with-separator dxd-border-primary\': $data.hasSeparator } "> <div role="button" class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-label\': $data.displayText && $data.displayText() || text, \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': ko.unwrap($data.disabled) ? \'true\' : \'false\', \'aria-checked\': $data.selected ? ($data.selected() ? \'true\' : \'false\') : null }" > <div data-bind="template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}, attr: { class: \'dxrd-toolbar-item-image dxd-state-normal dxd-icon-highlighted \' + (ko.unwrap($data.imageClassName) || \'\'), title: $data.displayText && $data.displayText() || text }, }, dxclick: function() { if((typeof $data.disabled === \'function\') && !disabled() || !disabled) { clickAction($root.model && $root.model()); } }, css: {\'dxrd-disabled-button\': disabled, \'dxd-button-back-color dxd-back-highlighted dxd-state-active\': $data.selected }"> </div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div> </div> </div> <!-- /ko --> <!-- /ko -->',
    'dxrd-toolbox-template-base': '<div class="dxrd-toolbox-wrapper dxd-toolbox-back-color dxd-back-primary2 dx-shadow dx-shadow-left" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }"> <!-- ko foreach: toolboxItems --> <div class="dxrd-toolbox-item dxd-icon-highlighted" data-bind="attr: { title: displayName }"> <div class="dxrd-image-padding dx-fontsize-reestablished" data-bind="template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, css: $data.imageClassName, draggable: $root.toolboxDragHandler"> </div> </div> <!-- /ko --> </div>',
    'dxrd-grouped-toolbox-template-base': '<div class="dxrd-toolbox-wrapper dxd-toolbox-back-color dxd-back-primary2-invariant toolbox-grouped dx-shadow dx-shadow-left" data-bind="dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true }"> <!-- ko foreach: groupedToolboxItems --> <div class="dxrd-toolbox-group dxd-border-primary"> <!-- ko foreach: items --> <div class="dxrd-toolbox-item dxd-icon-highlighted" data-bind="attr: { title: displayName }"> <div class="dxrd-image-padding dx-fontsize-reestablished" data-bind="template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, css: $data.imageClassName, draggable: $root.toolboxDragHandler"> </div> </div> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dxrd-zoom-select-template': '<div class="dxrd-toolbar-item-zoom" data-bind="visible: visible"> <div class="dxrd-toolbar-item-zoom-editor" data-bind="dxSelectBox: { items: zoomLevels, value: $data.zoom, displayExpr: function(val) { return Math.round((val || this.option(\'value\')) * 100) + \'%\'; }, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: onCustomItemCreating, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, useItemTextAsTitle: true }"></div> </div>',
    'dx-editor-addons': '<div class="dxrd-editormenu-boxes"> <!-- ko foreach: $data --> <!-- ko if: $data.visible --> <!-- ko if: $data.templateName --> <!-- ko template: $data.templateName --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.templateName --> <!-- ko if: !ko.unwrap($data.imageTemplateName) --> <div class="dxrd-editormenu-box dxd-property-grid-menu-box-color dxd-back-contrast" data-bind="dxclick: function(_, element) { showPopup(_, element) }, css: editorMenuButtonCss, attr: { title: hint }"> <div class="dxrd-editormenu-box-inside dxd-back-secondary"></div> </div> <!-- /ko --> <!-- ko if: ko.unwrap($data.imageTemplateName) --> <div class="dxrd-editormenu-box dxd-property-grid-menu-box-color dxrd-editor-box-image" data-bind="dxclick: function(_, element) { showPopup(_, element) }, attr: { title: hint }, css: editorMenuButtonCss"> <div class="dxrd-editor-box-image-content" data-bind="template: { name: $data.imageTemplateName, if: ko.unwrap($data.imageTemplateName) }"></div> </div> <!-- /ko --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-collectioneditor': '<div class="dx-collectioneditor"> <div data-bind="dxdAccordion: { collapsed: collapsed, alwaysShow: alwaysShow }"> <div class="dx-collectioneditor-header dx-accordion-header"> <div class="dx-editor-header"> <div role="tab" class="dx-field dx-accessibility-focus-border-accented dxrd-accessibility-accordion-trigger" data-bind=", attr: {\'aria-expanded\': !collapsed() ? \'true\' : \'false\' }"> <!-- ko if: showButtons--> <div class="dx-collectioneditor-actions-wrapper"> <!-- ko if: isVisibleButton(\'up\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: up, disabled: isDisabledButton(\'up\'), icon: \'dxrd-svg-operations-moveup\', iconClass: \'dx-image-moveup\' }, attr: { title: getDisplayTextButton(\'up\') }"></div> <!-- /ko --> <!-- ko if: isVisibleButton(\'down\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: down, disabled: isDisabledButton(\'down\'), icon: \'dxrd-svg-operations-movedown\', iconClass: \'dx-image-movedown\' }, attr: { title: getDisplayTextButton(\'down\') }"></div> <!-- /ko --> <div class="dx-collectioneditor-action-separator"></div> <!-- ko if: isVisibleButton(\'add\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: add, disabled: isDisabledButton(\'add\'), icon: \'dxrd-svg-operations-add\', iconClass: \'dx-image-add\' }, attr: { title: getDisplayTextButton(\'add\') }"></div> <!-- /ko --> <!-- ko if: isVisibleButton(\'delete\') --> <div class="dx-collectioneditor-action dx-accessibility-focus-border-accented" data-bind="dxButtonWithTemplate: { onClick: remove, disabled: isDisabledButton(\'delete\'), icon: \'dxrd-svg-operations-remove\', iconClass: \'dx-image-remove\' }, attr: { title: getDisplayTextButton(\'delete\') }"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: displayName --> <div class="dx-collectioneditor-header-text dxd-text-primary" data-bind="styleunit: { \'paddingLeft\': padding }"> <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div> <div class="dx-group-header-font dxd-text-primary" data-bind="text: displayName, attr: { title: displayName }"></div> </div> <!-- /ko --> </div> </div> </div> <div role="tabpanel" class="dx-accordion-content" data-bind="attr:{\'aria-hidden\': collapsed() ? \'true\' : \'false\'}"> <div data-bind="visible: !disabled(), dxScrollView: { showScrollbar: \'onHover\', disabled: !showScroll, useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }"> <!-- ko if: values().length === 0 && showButtons --> <div class="dx-collectioneditor-empty dxd-empty-area-placeholder-text-color dxd-text-info"> <span class="dx-collectioneditor-empty-text" data-bind="text: getDisplayTextEmptyArray()"></span> </div> <!-- /ko --> <!-- ko if: values().length !== 0 --> <div class="dx-collectioneditor-items" data-bind="foreach: values"> <div data-bind="with: $parent.createCollectionItemWrapper($parents[1], $index, $element)"> <div class="dx-collectioneditor-item-container dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-accessibility-list-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-selected\': $parents[1].selectedIndex() === $index() }, dxAction: { model: $data, action: $parents[1].select }, css: { \'dxd-state-selected\' : $parents[1].selectedIndex() === $index() }"> <div class="dx-collection-item"></div> </div> </div> </div> <!-- /ko --> </div> </div> </div> </div>',
    'dx-boolean': '<div class="propertygrid-editor-checkbox" data-bind="dxCheckBox: getOptions({ value: value, disabled: disabled, elementAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-boolean-select': '<div data-bind="dxLocalizedSelectBox: { dataSource: [ { val: true, text: $root.getLocalization(\'Yes\', \'AnalyticsCoreStringId.ParametersPanel_True\') }, { val: false, text: $root.getLocalization(\'No\', \'AnalyticsCoreStringId.ParametersPanel_False\') }], inputAttr: { \'aria-label\': displayName }, valueExpr: \'val\', displayExpr: \'text\', value: value, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-commonCollection': '<div class="dx-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, displayName: displayName, level: level, info: info }"> </div> </div>',
    'dx-commonCollectionItem': '<div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1, parentDisabled: editor.disabled }"></div>',
    'item-with-title': '<div class="dx-listitem-with-title" data-bind="text: $data.display, attr: { title: $data.display }"></div>',
    'dx-combobox': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName }}, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: $data.validationRules || [] })"> </div>',
    'dx-combobox-editable': '<div data-bind="dxSelectBox: getOptions({ items: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', disabled: disabled, useItemTextAsTitle: true, placeholder: $root.dx._static.selectPlaceholder(), noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, acceptCustomValue: true, onCustomItemCreating: function(arg) { return { value: arg.text, displayValue: arg.text }; }, dropDownOptions: { container: $root.getPopupContainer($element) } })"></div>',
    'dx-combobox-undo': '<div data-bind="dxLocalizedSelectBox: { dataSource: values, value: generateValue($root.undoEngine), valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element) } }, dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })"> </div>',
    'dx-property-editor': '<div class="dx-editor" data-bind="visible: visible"> <div class="dx-group" data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dx-editor-header"> <div class="dx-field" data-bind="attr: { role: isComplexEditor && \'tab\', \'id\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-trigger\'), \'aria-controls\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-expanded\': isComplexEditor && (!collapsed() ? \'true\' : \'false\') }, css: {\'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor}"> <div class="dx-field-label dx-accordion-header dxd-text-primary" data-bind="styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\' }"> <!-- ko if: isComplexEditor --> <div data-bind="enable: templateName === \'dx-emptyHeader\'"> <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div> <!-- ko if: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="text: displayName, attr: { \'title\': displayName }"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: !isComplexEditor --> <!-- ko if: !!$data.textToSearch --> <div class="propertygrid-editor-displayName" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }, css: { \'dx-field-label-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="propertygrid-editor-displayName" data-bind="text: displayName, attr: { \'title\': displayName }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}"></div> <!-- /ko --> <!-- /ko --> </div> <div class="dx-field-value" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div data-bind="service: { name: \'createEditorAddOn\' }"></div> <!-- ko if: templateName !== \'dx-emptyHeader\' --> <!-- ko lazy: { innerBindings: { template: templateName }, isResolved: $data.isRendered } --> <!-- /ko --> <!-- /ko --> </div> </div> </div> <!-- ko if: isComplexEditor --> <div class="dx-editor-content dx-accordion-content" role="tabpanel" data-bind="attr:{\'aria-labelledby\': getIdByDisplayName(\'dxrd-accordion-trigger\'), \'id\': getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-hidden\': collapsed() ? \'true\' : \'false\' }"> <!-- ko if: (!$data.editorCreated || editorCreated) --> <!-- ko template: contentTemplateName --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-emptyHeader': '',
    'dx-date': '<div class="dx-datebox-container"> <div data-bind=" dxDateBox: getOptions({ value: value, closeOnValueChange: true, type: \'datetime\', disabled: disabled, inputAttr: { \'aria-label\': displayName }, dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), dxValidator: { validationRules: validationRules || [] }"></div> </div>',
    'dx-file': '<div data-bind="dxFileImagePicker: { value: value, placeholderId: \'File\', disabled: disabled }"></div>',
    'dx-modificators': '<div class="dx-font-content"> <div class="dx-field"> <div class="dx-field-label dxd-text-primary" data-bind="styleunit: { \'paddingLeft\': padding }"></div> <!-- ko with: value --> <div class="dx-field-value"> <div class="dx-font-styles-content"> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-bold" data-bind="css: { \'dxd-state-active\': bold(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { bold(!bold()); } }"><!-- ko template: \'dxrd-svg-fontstyle-bold\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-italic" data-bind="css: { \'dxd-state-active\': italic(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { italic(!italic()); } }"><!-- ko template: \'dxrd-svg-fontstyle-italic\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-underline" data-bind="css: { \'dxd-state-active\': underline(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { underline(!underline()); } }"><!-- ko template: \'dxrd-svg-fontstyle-underline\'--><!-- /ko --></div> <div class="dx-font-style-button dxd-button-back-color dxd-state-normal dxd-back-highlighted dx-image-fontstyle-strikeout" data-bind="css: { \'dxd-state-active\': strikeout(), \'dx-disabled-button\': $parent.disabled }, click: function() { if(!$parent.disabled()) { strikeout(!strikeout()); } }"><!-- ko template: \'dxrd-svg-fontstyle-strikeout\'--><!-- /ko --></div> </div> </div> <!-- /ko --> </div> </div>',
    'dx-image': '<div data-bind="dxFileImagePicker: { value: value, placeholderId: \'Image\', accept: \'image/*\', type: \'img\', disabled: disabled }"></div>',
    'dx-numeric': '<div data-bind="dxNumberBox: getOptions({ value:value, showSpinButtons:true, disabled:disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-number-editor': '<div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: validationRules || [] }"></div>',
    'dx-text': '<!-- ko if: $data.validationRules --> <div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName }}), dxValidator: getValidatorOptions($data.validatorOptions || { validationRules: validationRules || [] })"></div> <!-- /ko --> <!-- ko if: !$data.validationRules --> <div data-bind="dxTextBox: getOptions({ value: value, disabled: disabled, inputAttr: { \'aria-label\': displayName }})"></div> <!-- /ko -->',
    'dx-string-array': '<div class="dx-field" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div class="dx-string-array-container dx-texteditor dx-editor-outlined dx-multiline"> <textarea class="dx-string-array-textarea dx-texteditor-input" data-bind="value: value, disable: disabled"></textarea> </div> </div>',
    'dx-propertieseditor': '<div data-bind="css: { \'dx-rtl\' : rtl }"> <div class="dx-editors"> <div class="dx-fieldset"> <!-- ko foreach: getEditors() --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- /ko --> </div> </div> </div>',
    'dx-objectEditorContent': '<!-- ko if: visible --> <div data-bind="template: { name: \'dx-propertieseditor\', data: viewmodel }"></div> <!-- /ko -->',
    'dxrd-federated-manageQueries-editor': '<!-- ko if: $data --><div> <div data-bind="dxPopup: { showTitle: true, width: \'750px\', height: \'475px\', title: title(), rtlEnabled: rtl, visible: popupVisible, wrapperAttr: { class: className }, toolbarItems: buttonItems, showCloseButton: true, container: $root.getPopupContainer($element), position: { of: $root.getPopupContainer($element) }, }"> <div class="dxrd-federated-manageQueries-grid-wrapper" style="cursor: default"> <div class="dxd-border-secondary dxrd-federated-manageQueries-grid" data-bind="dxDataGrid: queriesGrid"></div> </div> </div> </div><!-- ko template: { name: $data._queriesPopupHelper.template, data: _queriesPopupHelper } --><!-- /ko --><!-- /ko -->',
    'dx-querybuilder-federation-popup-templates': '<!-- ko if: $data --> <!-- ko foreach: $data.popupItems --> <!-- ko template: { name: template, data: model } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dxrd-managequeries-selectbox': '<!-- ko with: options --> <div class="dxrd-managequeries-selectbox"> <div data-bind="dxDropDownButton: $data"></div> </div> <!-- /ko -->',
    'dx-expressioneditor-main': '<div class="dx-expression-tree"> <!-- ko if: !aceAvailable --> <div class="dx-expressioneditor-textarea dxd-border-secondary dxd-back-primary2" data-bind="dxTextArea: { value: textAreaValue, isValid: isValid, spellcheck: false, onKeyUp: function() { isValid(true); } }, resizable: resizeHelper.resizable($root.resizeHandler, \'s\', $element)"></div> <!-- /ko --> <!-- ko if: aceAvailable --> <div class="dx-expressioneditor-textarea dxd-border-secondary dxd-back-primary2" data-bind="dxAceEditor: { value: textAreaValue, editorContainer: editorContainer, theme: theme, options: aceOptions, additionalOptions: additionalOptions, callbacks: callbacks }, resizable: resizeHelper.resizable($root.resizeHandler, \'s\', $element)"></div> <!-- /ko --> <div class="dx-expressioneditor-tools"> <!-- ko with: tools--> <div class="dx-expressioneditor-tools-tabs"> <!-- ko foreach: toolBox--> <div data-bind="visible: visible,  attr: { class: \'dx-expressioneditor-tools-tab dxd-back-primary2 \'+ ($data.templateName ? $data.templateName : \'\')}"> <!-- ko if: $data.templateName --> <!-- ko template: { name: $data.templateName }--> <!-- /ko --> <!-- /ko --> </div> <!-- /ko--> </div> <!-- /ko--> </div> </div>',
    'dx-expressioneditor': '<div> <div class="no-margin-right" data-bind="dxEllipsisEditor: { value: displayValue, buttonAction: function() { popupVisible(true); }, disabled: disabled, isValid: modelValueValid, warningMessage: modelValueWarning }"></div> <!-- ko template: \'dx-expressioneditor-popup\'--> <!--/ko--> </div>',
    'dx-expressioneditor-popup': '<div data-bind="dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-expressioneditor dx-popup-general\' }, title: title(), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, fullScreen: false, height: \'615px\', maxHeight: \'90%\', maxWidth: \'90%\', minHeight: 400, minWidth: 500, width: \'645px\', container: getPopupContainer($element), position: { of: getPopupContainer($element)}, onContentReady: onContentReady, onShowing: onShowing, onHiding: onHiding, onShown: onShown, resizeEnabled: true }"> <!-- ko if: popupVisible --> <!-- ko template: "dx-expressioneditor-main" --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-expressioneditor-categories': '<div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }, resizable: $parents[1].resizeHelper.resizable($root.resizeHandler, \'e\')"> <!-- ko foreach: content --> <!-- ko if: $data.templateName --> <!-- ko template: $data.templateName--> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.templateName --> <div class="dx-expressioneditor-tools-tab-category dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': content.isSelected }, text: displayName, dxclick: function() { $parent.click($data.content) }"> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dx-expressioneditor-category-accordion': '<div class="dx-fieldset" style="margin: 0;"> <div data-bind="dxdAccordion: { collapsed: collapsed }"> <div class="dx-accordion-header dx-expressioneditor-tools-tab-accordion-header dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': $data.isSelected }, dxclick: function() { $data.updateContent($data.allItems(), $data.isSelected); $parent.click($data.content) }"> <div class=" dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }" style="display:inline-block;"></div> <span class="dx-expressioneditor-tools-tab-header" data-bind="text: displayName"></span> </div> <div class="dx-accordion-content"> <!-- ko foreach: items--> <div class="dx-expressioneditor-tools-tab-item dxd-text-primary dxd-list-item-back-color dxd-back-highlighted" data-bind="css: {\'dxd-state-selected\': isSelected }, text: $data.display, dxclick: function() { $parent.updateContent($data.data, $data.isSelected); $parents[1].click($parent.content); }"></div> <!-- /ko --> </div> </div> </div>',
    'dx-expressioneditor-description': '<div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <div class="dx-expressioneditor-description-content dxd-text-primary" data-bind="text: content"></div> </div>',
    'dx-expressioneditor-fields': '<div class="dx-expressioneditor-fields"> <div data-bind="treeListSearchPanel: { controllers: [ ko.unwrap($data.parameters) ? ko.unwrap($data.parameters).treeListController : ko.unwrap($data.parameters), ko.unwrap($data.fields) ? ko.unwrap($data.fields).treeListController : ko.unwrap($data.fields) ] }"> </div> <div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary " data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko if: fields --> <div class="dx-treelist-wrapper" data-bind="treelist: fields"></div> <!-- /ko --> <!-- ko if: $data.parameters --> <div class="dx-treelist-wrapper" data-bind="treelist: parameters"></div> <!-- /ko --> </div> </div>',
    'dx-ee-treelist-item': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="visible: visible, event: { dblclick: function() { actions[0].clickAction($element); }}, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected\': isSelected }"> <div class="dx-treelist-item-images"> <!-- ko if: hasItems --> <div class="dx-treelist-collapsedbutton" data-bind="css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed"></div> <!-- /ko --> <!-- ko ifnot: hasItems --> <div class="dx-treelist-collapsedbutton"></div> <!-- /ko --> <div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> </div> <div class="dx-treelist-caption"> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected"> <!-- ko template: { name: \'dx-treelist-item-text-content\' } --> <!-- /ko --> </div> </div> </div>',
    'dx-expressioneditor-selectedcontent': '<!-- ko with: content --> <!-- ko template: $data--> <!-- /ko --> <!-- /ko -->',
    'dx-expressioneditor-collection': '<div class="dx-expressioneditor-tools-tab-content-wrapper dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko foreach: items --> <div data-bind="attr: { class: \'dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted \' + ($data.class ? $data.class : \'\') }, text: $data.displayName || $data.text, css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }"></div> <!-- /ko --> </div>',
    'dx-expressioneditor-collection-function': '<div class="dx-expressioneditor-collection-function"> <div class="dx-expressioneditor-collection-function-search"> <div data-bind="dxTextBox: { value: textToSearch, showClearButton: true, valueChangeEvent: \'keyup\', placeholder: $parents[2].searchPlaceholder() }"></div> </div> <div class="dx-expressioneditor-collection-function-items dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\' }"> <!-- ko foreach: availableItems --> <div class="dx-expressioneditor-tools-tab-item dxd-list-item-back-color dxd-text-primary dxd-back-highlighted" data-bind="css: { \'dx-expressioneditor-state-selected dxd-state-selected\': $parent.selectedItem() === $data }, dxclick: function() { $parent.selectedItem($data); $parents[2].click($data); }, event: { dblclick: function() { $parents[2].dblclick($data, $element); } }, searchHighlighting: { text: $data.displayName || $data.text, textToSearch: $parent.textToSearch }"></div> <!-- /ko --> </div> </div>',
    'dx-filtereditor-content': '<div class="dx-filtereditor-tree-container" data-bind="css: { \'advanced\': advancedMode }"> <!-- ko template: \'dx-filtereditor-content-tree\' --> <!-- /ko --> </div> <div class="dx-filtereditor-text-container" data-bind="css: { \'advanced\': advancedMode }, visible: textVisible"> <!-- ko template: \'dx-filtereditor-content-text\'--> <!-- /ko --> </div>',
    'dx-filtereditor-content-plain': '<div class="dx-filtereditor-plain-advanced" data-bind="dxCheckBox: { value: advancedMode, text: advancedModeText }"></div> <div class="dx-filtereditor-plain-content" data-bind="style: { height: plainContentHeightPerc }"> <div class="dx-filtereditor-text-container" data-bind="css: { \'advanced\': advancedMode }, style: { height: textContentHeightPerc }"> <!-- ko template: \'dx-filtereditor-content-text\'--> <!-- /ko --> </div> <div class="dx-filtereditor-tree-container" data-bind="css: { \'advanced\': advancedMode }, style: { height: treeContentHeightPerc }"> <!-- ko template: \'dx-filtereditor-content-tree\' --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-content-text': '<!-- ko if: !aceAvailable --> <div class="dx-filtereditor-text dx-default-border-style dxd-border-secondary" data-bind="dxTextArea: { value: displayValue, isValid: isValid, onInput: onInput, spellcheck: false }, cacheElement: { action: function(element) { cacheElement(element) } }"></div> <!-- /ko --> <!-- ko if: aceAvailable --> <div class="dx-filtereditor-text dx-default-border-style dxd-border-secondary dx-textarea dx-textbox dx-texteditor dx-editor-filled" data-bind="css: {\'dx-invalid\': !$data.isValid(), \'dx-state-focused\': textFocused }"> <div class="dx-texteditor-container"> <div class="dx-filtereditor-ace dxd-back-primary2" data-bind="dxAceEditor: { value: $data.displayValue, theme: helper.aceTheme, editorContainer: editorContainer, options: aceOptions, additionalOptions: additionalOptions }"></div> <div class="dx-texteditor-buttons-container"></div> </div> </div> <!-- /ko -->',
    'dx-filtereditor-content-tree': '<div class="dx-filtereditor-tree dxd-border-secondary" data-bind="dxScrollView: { showScrollbar: \'onHover\', direction: \'both\' }"> <!-- ko with: operandSurface --> <!-- ko template: { name: $data.templateName, data: $data, if: $parent.isSurfaceValid }--> <!-- /ko --> <!-- /ko --> </div> <!-- ko ifnot: isSurfaceValid --> <div class="dx-filtereditor-tree-lockscreen" data-bind="dxclick: function() { $data.advancedMode(true); }"> <div class="dx-filtereditor-tree-lockscreen-content"> <div class="dx-filtereditor-tree-lockscreen-content-text" data-bind="text: invalidMessage()"> </div> </div> </div> <!-- /ko -->',
    'dx-filtereditor': '<div> <div class="no-margin-right" data-bind="dxEllipsisEditor: { value: modelDisplayValue, isValid: modelValueIsValid, disabled: disabled, buttonAction: function() { popupVisible(true); } }"></div> <!-- ko template: \'dx-filtereditor-popup\' --> <!-- /ko --> </div>',
    'dx-filtereditor-advanced': '<div class="dx-filtereditor" style="width: 100%; height: 100%;" data-bind="style: { pointerEvents: $data.options().disabled() ? \'none\' : \'\' }"> <!-- ko template: \'dx-filtereditor-content\' --> <!-- /ko --> <!-- ko template: \'dx-filtereditor-content-popups\' --> <!-- /ko --> </div>',
    'dx-filtereditor-plain': '<div class="dx-filtereditor" style="width: 100%; height: 100%;" data-bind="style: { pointerEvents: $data.options().disabled() ? \'none\' : \'\' }"> <!-- ko template: \'dx-filtereditor-content-plain\' --> <!-- /ko --> <!-- ko template: \'dx-filtereditor-content-popups\' --> <!-- /ko --> </div>',
    'dx-filtereditor-aggregate-common': '<!-- ko with: property--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko if: $data.aggregatedExpression() --> <div class="criteria-operator-text dxd-filter-editor-text-color">(</div> <!-- ko with: aggregatedExpression--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div class="criteria-operator-text dxd-filter-editor-text-color">)</div> <!-- /ko -->',
    'dx-filtereditor-aggregate': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko template: { name: \'dx-filtereditor-aggregate-common\' }--> <!-- /ko --> </div> <div class="criteria-operator-content"> <!-- ko with: condition--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-between': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: property--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko with: begin--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div class="criteria-operator-text dxd-filter-editor-text-color">and</div> <!-- ko with: end--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-binary': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: leftOperand--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko with: rightOperand--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-common': '<!-- ko template: contentTemplateName --> <!-- /ko --> <!-- ko if: $data.leftPart && $data.leftPart.condition --> <div class="criteria-operator-content"> <!-- ko with: leftPart--> <!-- ko with: condition--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko -->',
    'dx-filtereditor-function-lightweight': '<div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="css: css"> <div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="text: displayType"></div> <div data-bind="service: { name: \'createChangeValueType\' }"></div> </div>',
    'dx-filtereditor-function': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko template: { name: $data.leftPart.templateName, data: $data.leftPart }--> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko foreach: rightPart --> <!-- ko template: { name: $data.templateName, data: $data }--> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-filtereditor-group': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <div class="criteria-operator-item"> <div data-bind="service: { name: \'createChangeType\' }"></div> </div> <div data-bind="service: { name: \'createAddButton\' }"></div> </div> <div class="criteria-operator-content"> <!-- ko foreach: operands --> <!-- ko template: { name: templateName, data: $data } --> <!-- /ko--> <!-- /ko --> </div> </div>',
    'dx-filtereditor-in': '<div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: criteriaOperator--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> <!-- ko if: $data.operands().length > 1--> <div class="criteria-operator-item criteria-operator-text dxd-filter-editor-text-color">(</div> <div class="criteria-operator-item"> <!-- ko foreach: $data.operands() --> <!-- ko template: { name: $data.templateName, data: $data }--> <!-- /ko --> <div class="criteria-operator-item criteria-operator-text dxd-filter-editor-text-color">,</div> <!-- /ko --> </div> <div class="criteria-operator-item criteria-operator-text dxd-filter-editor-text-color">)</div> <!-- /ko --> <!-- ko if: $data.operands().length == 1--> <!-- ko template: { name: $data.operands()[0].templateName, data: $data.operands()[0] }--> <!-- /ko --> <!-- /ko --> <div class="criteria-operator-action" data-bind="dxclick: addValue"> <div class="criteria-operator-action-image dx-image-filtereditor-add"><!-- ko template: \'dxrd-svg-filtereditor-add\' --><!-- /ko --></div> </div> </div> </div>',
    'dx-filtereditor-parameter': '<div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="css: css"> <div data-bind="service: { name: \'createChangeParameter\' }"></div> <!-- ko if: $data.canChange --> <div data-bind="service: { name: \'createChangeValueType\' }"></div> <!-- /ko --> </div>',
    'dx-filtereditor-property': '<div class="criteria-operator-text dxd-filter-editor-text-color" data-bind="css: css"> <div data-bind="service: { name: \'createChangeProperty\' }"></div> <!-- ko if: $data.canChange --> <div data-bind="service: { name: \'createChangeValueType\' }"></div> <!-- /ko --> </div>',
    'dx-filtereditor-unary': '<!-- ko if: $data.operand().reverse --> <!-- ko template: {name: $data.operand().templateName, data: $data.operand() }--> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: $data.operand().reverse --> <div class="criteria-operator-group"> <div class="criteria-operator-group-item"> <div class="criteria-operator-action" data-bind="dxclick: function() {  $data.remove && $data.remove(); }"> <div class="criteria-operator-action-image dx-image-filtereditor-remove" data-bind="visible: !!$data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> </div> <!-- ko with: operand--> <div class="criteria-operator-item"> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> </div> <!-- /ko --> <div data-bind="service: { name: \'createChangeType\' }"></div> </div> </div> <!-- /ko -->',
    'dx-filtereditor-not': '<!-- ko with: operand--> <!-- ko template: { name: templateName, data: $data }--> <!-- /ko --> <!-- /ko -->',
    'dx-filtereditor-value': '<div class="criteria-operator-item" data-bind="visible: isEditable"> <!-- ko if: $data.items.length === 0 --> <!-- ko if: $data.specifics() === "string" || $data.specifics() === "guid" --> <div class="criteria-operator-item-editor" data-bind="dxTextBox: getStringEditorOptions($element), focus: { on: isEditable }"></div> <!-- /ko --> <!-- ko if: $data.specifics() === "bool"  --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxLocalizedSelectBox: getBoolEditorOptions($element, $root)"></div> <!-- /ko --> <!-- ko if: $data.specifics() === "date" --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxDateBox: getDateEditorOptions($element, $root)"></div> <!-- /ko --> <!-- ko if: $data.specifics() !== "string" && $data.specifics() !== "bool" && $data.specifics() !== "date" && $data.specifics() !== "guid" --> <div class="criteria-operator-item-editor" data-bind="dxTextBox: getNumberEditorOptions($element), focus: { on: isEditable }"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: $data.items.length > 0 --> <div class="criteria-operator-item-editor" data-bind="focus: isEditable, dxSelectBox: getListEditOptions($element, $root)"></div> <!-- /ko --> </div> <div class="criteria-operator-text dxd-filter-editor-text-color criteria-operator-item-value dxd-filter-editor-value-back-color" data-bind="visible: !isEditable()"> <div class="criteria-operator-text dxd-filter-editor-text-color clickable" data-bind="text: value, click: function() { isEditable(true); }, css: { \'default\': $data.isDefaultDisplay() } "></div> <div data-bind="service: { name: \'createChangeValueType\' }"></div> </div>',
    'dx-filtereditor-popup': '<div data-bind="dxPopup: { animation: { show: { type: \'fadeIn\', duration: 700 }, hide: { type: \'fadeOut\', duration: 700 } }, showTitle: true, wrapperAttr: { class: \'dx-filtereditor dx-popup-general\' }, resizeEnabled: true, width: 700, height: 500, maxHeight: \'95%\', maxWidth: \'95%\', minHeight: 300, minWidth: 400, title: options() && options().title(), visible: popupVisible, onShown: function() { $data.focusText() }, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }"> <!-- ko template: \'dx-filtereditor-content\' --> <!-- /ko --> </div> <!-- ko template: \'dx-filtereditor-content-popups\' --> <!-- /ko -->',
    'dx-filtereditor-create': '<div class="criteria-operator-action" data-bind="dxclick: showPopup"> <div class="criteria-operator-action-image dx-image-filtereditor-add"><!-- ko template: \'dxrd-svg-filtereditor-add\' --><!-- /ko --></div> </div>',
    'dx-filtereditor-change': '<div class="criteria-operator-text dxd-filter-editor-text-color clickable" data-bind="text: target.displayType, dxclick: showPopup, css: target.css"></div>',
    'dx-filtereditor-changeParameter': '<div class="criteria-operator-text dxd-filter-editor-text-color clickable " data-bind="text: target.parameterName(), dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }"></div>',
    'dx-filtereditor-changeProperty': '<div class="criteria-operator-text dxd-filter-editor-text-color clickable" data-bind="text: target.displayName, dxclick: showPopup, css: { \'dxd-state-selected\': target.isSelected }"></div>',
    'dx-filtereditor-changeValueType': '<div class="criteria-operator-action" data-bind="dxclick: showPopup"> <div class="criteria-operator-action-image-edit dx-image-filtereditor-edit"><!-- ko template: \'dxrd-svg-filtereditor-edit\' --><!-- /ko --></div> </div>',
    'dx-filtereditor-content-popups': '<div class="dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay" data-bind="dxPopupWithAutoHeight: { minWidth:\'170px\', maxWidth:\'500px\', width: \'auto\', height: \'300px\', wrapperAttr: { class: \'dx-selectbox-popup-wrapper dx-dropdownlist-popup-wrapper dx-filtereditor-criteriaoperator-popup dx-dropdowneditor-overlay\' }, focusStateEnabled: false, position: $data.rtl ? { my: \'right top\', at: \'right bottom\', of: popupService.target} : { my: \'left top\', at: \'left bottom\', of: popupService.target }, container: $data.getPopupContainer($element), target: popupService.target, showTitle: false, showCloseButton: false, animation: {}, hideOnOutsideClick: true, shading: false, visible: popupService.visible }"> <!-- ko with: popupService--> <!-- ko with: data --> <!-- ko template: template--> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-filtereditor-search-panel': '<div class="dx-filtereditor-popup-item dx-filtereditor-search dx-item dx-list-item dxd-list-item-back-color dxd-back-highlighted"> <div class="dx-item-content dxd-border-secondary dxd-text-primary dx-list-item-content" data-bind="dxTextBox: { placeholder: searchPlaceholder(), value: ($data.value || $data.filterString), height: \'100%\', stylingMode: \'underlined\', valueChangeEvent: \'keyup\' }"> </div> </div>',
    'dx-filtereditor-popup-common': '<!-- ko if: $data.isFiltered --> <div data-bind="template: { name: \'dx-filtereditor-search-panel\', data: $data }"></div> <!-- /ko --> <div class="dx-widget" data-bind="dxScrollView: { showScrollbar: \'onHover\' }, style: {\'height\': $data.height }"> <!-- ko foreach: data --> <!-- ko if: !$data.hidden --> <!-- ko ifnot: $parent.isFiltered --> <div class="dx-filtereditor-popup-item dx-item dx-list-item dxd-list-item-back-color dxd-back-highlighted"> <span class="dx-item-content dx-list-item-content" data-bind="text: $data.displayText || $data.name, click: function() { $parent.click($data); }, attr: {\'title\': $data.displayText || $data.name } "></span> </div> <!-- /ko --> <!-- ko if: $parent.isFiltered --> <div class="dx-filtereditor-popup-item dx-item dx-list-item dxd-list-item-back-color dxd-back-highlighted"> <div class="dx-item-content dx-list-item-content" data-bind="searchHighlighting: { text: $data.displayText || $data.name, textToSearch: $parent.filterString }, click: function() { $parent.click($data); }, attr: {\'title\': $data.displayText || $data.name } "> </div> </div> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-filtereditor-popup-treelist': '<div class="dx-filtereditor-search" data-bind="treeListSearchPanel: { controllers: data().treeListController, template: \'dx-filtereditor-search-panel\' } "></div> <div class="dx-widget" data-bind="dxScrollView: { showScrollbar: \'onHover\' }, style: {\'height\': $data.height} "> <div class="dx-treelist-wrapper" data-bind="treelist: data"></div> </div>',
    'dx-format-string-list': '<div class="dx-format-string-list dxd-format-string-editor-border-color dxd-border-secondary"> <div data-bind="dxList: { items: $data.items, selectedItems: $data.selectedItems, onItemClick: $data.action, selectionMode: \'single\', activeStateEnabled: false }"> <div data-options="dxTemplate: { name: \'item\' }" class="dx-theme-border-color"> <div class="dx-image-filtereditor-remove" data-bind="click: $parent.removeItem, visible: $data.canRemove"><!-- ko template: \'dxrd-svg-filtereditor-remove\' --><!-- /ko --></div> <div class="dx-format-string-list-item" data-bind="text: $data.displayName"></div> </div> </div> </div>',
    'dx-format-string-edit-area': '<div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'types\')"></div> <div class="dx-format-string-formats"> <!-- ko template: { name: \'dx-format-string-list\', data: { items: patternList, action: setFormat, removeItem: removeCustomFormat, selectedItems: selectedFormats } } --> <!-- /ko --> <div class="dx-format-string-customization"> <div class="dx-format-string-customization-add" data-bind="dxButton:{ onClick: addCustomFormat, text: getDisplayText(\'add\'), disabled: !canAddCustomFormat() }"></div> <div class="dx-format-string-customization-value dx-format-string-value dxd-back-primary" data-bind="dxTextBox: { value: formatResult, onInput: function(e) { updateInputText(\'formatResult\', e.component); }  }"></div> </div> </div>',
    'dx-format-string-edit-area-general': '<div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'prefix\')"></div> <div class="dx-format-string-customization-general-value dx-format-string-value" data-bind="dxTextBox: { value: formatPrefix, onInput: function(e) { updateInputText(\'formatPrefix\', e.component); } }"></div> <div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'suffix\')"></div> <div class="dx-format-string-customization-general-value dx-format-string-value" data-bind="dxTextBox: { value: formatSuffix, onInput: function(e) { updateInputText(\'formatSuffix\', e.component); } }"></div>',
    'dx-format-string': '<div> <div class="no-margin-right" data-bind="dxEllipsisEditor: { value: value, disabled: disabled, buttonAction: function() { popupVisible(true); } }"></div> <div data-bind="dxPopup: { wrapperAttr: { class: \'dx-format-string dx-popup-general\' }, showTitle: true, width: \'95%\', height: \'95%\', minWidth: 650, title: getDisplayText(\'title\'), visible: popupVisible, toolbarItems: buttonItems, showCloseButton: true, container: getPopupContainer($element), position: { of: getPopupContainer($element) } }"> <div class="dx-format-string-content"> <div class="dx-format-string-content-area-left"> <div class="dx-format-string-content-area-title dxd-text-primary" data-bind="text: getDisplayText(\'category\')"></div> <!-- ko template: { name: \'dx-format-string-list\', data: { items: types, action: setType, selectedItems: selectedTypes } } --> <!-- /ko --> </div> <div class="dx-format-string-content-area-right"> <!-- ko if: !isGeneralType --> <!-- ko template: \'dx-format-string-edit-area\' --> <!-- /ko --> <!-- /ko --> <!-- ko if: isGeneralType --> <!-- ko template: \'dx-format-string-edit-area-general\' --> <!-- /ko --> <!-- /ko --> <div class="dx-format-string-preview-area" data-bind="css: { \'dx-format-general\': isGeneralType }"> <div class="dx-format-string-preview-area-caption dxd-text-primary" data-bind="text: getDisplayText(\'preview\')"></div> <div class="dx-format-string-preview-value dxd-format-string-editor-border-color dxd-text-primary dxd-back-primary dxd-border-secondary"> <span class="dx-format-string-preview-value-inner" data-bind="text: previewString"></span> </div> </div> </div> </div> </div> </div>',
    'dx-treelist-item-actions': '<!-- ko foreach: actions --> <!-- ko if: $data.templateName --> <!-- ko template: templateName  --> <!-- /ko --> <!-- /ko --> <!-- ko if: !$data.templateName --> <div class="dx-treelist-action" data-bind="dxButtonWithTemplate: { onClick: function() { clickAction($parent); }, icon: ko.unwrap($data.imageTemplateName), iconClass: $data.imageClassName, visible: (ko.unwrap($data.visible) == undefined) || ko.unwrap($data.visible), disabled: $data.disabled && $data.disabled() }, attr: { title: $data.displayText && $data.displayText() || text }"></div> <!-- /ko --> <!-- /ko -->',
    'dx-treelist-edit-action': '<div class="dx-treelist-action-edit dx-accordion-button" data-bind="dxButtonWithTemplate: { icon: \'dxrd-svg-operations-edit\', iconClass: \'dx-image-edit\',  onClick: function() { $parent.collapsed(!$parent.collapsed()); } }, visible: $parent.hasContent, attr: { title: $data.displayText() }"></div>',
    'dx-treelist-item-actions-with-edit': '<!-- ko template: { name: \'dx-treelist-edit-action\', data: treeListEditAction() }  --> <!-- /ko --> <!-- ko template: \'dx-treelist-item-actions\'  --> <!-- /ko -->',
    'dx-treelist-item-ellipsis': '<div class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted" data-bind="styleunit: padding, click: renderNext"> <div class="dx-treelist-collapsedbutton"></div> <div class="dx-treelist-caption"> <div class="dx-treelist-selectedcontent"> <div class="dx-treelist-text-wrapper"> <div class="dx-treelist-ellipsis-text dxd-text-accented dxd-hyperlink-color" data-bind="text: $data.text()"></div> </div> </div> </div> </div>',
    'dx-treelist-item': '<!-- ko if: visible --> <!-- ko if: hasContent --> <!-- ko template: templates.accordionItem --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: hasContent --> <!-- ko template: templates.headerItem --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dx-treelist-accordion-item': '<div data-bind="dxdAccordionExt: { collapsed: collapsed, lazyContentRendering: true }"> <!-- ko template: templates.headerItem --> <!-- /ko --> <div class="dx-fieldset dx-accordion-content dxd-back-primary"> <!-- ko with: data --> <!-- ko template: { name: contenttemplate } --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-treelist-item-actions-container': '<div class="dx-treelist-action-container" data-bind="visible: isSelected() || isHovered()"> <!-- ko template: actionsTemplate() --> <!-- /ko --> </div>',
    'dx-treelist-header-item': '<div role="treeitem" class="dx-treelist-item dxd-list-item-back-color dxd-back-highlighted dx-accessibility-treelist-item dx-accessibility-focus-border-accented" data-bind="event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() }, mouseenter: mouseenter, mouseleave: mouseleave }, styleunit: padding, css: $data.getCssRules(), attr: { \'aria-expanded\': (hasItems && (!collapsed() ? \'true\' : \'false\')), \'aria-selected\': (isSelected() || isMultiSelected()) ? \'true\' : \'false\', \'aria-level\':level + 1, \'aria-label\': text, \'aria-setsize\': parent ? parent.items().length : 0, \'aria-posinset\': parent ? parent.items.indexOf($data) + 1 : 0 }"> <!-- ko if: $data.hasItems--> <div class="dx-treelist-collapsedbutton" data-bind="css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed"></div> <!-- /ko --> <div class="dx-treelist-caption" data-bind="style: { \'padding-left\': $data.hasItems ? \'0px\': \'18px\' }"> <!-- ko if: actions && actions.length > 0 --> <!-- ko template: templates.actionsContainer --> <!-- /ko  --> <!-- /ko  --> <!-- ko if: isDraggable --> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected, draggable: dragDropHandler"> <!-- ko template: templates.headerItemContent --> <!-- /ko --> </div> <!-- /ko --> <!-- ko ifnot: isDraggable --> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected"> <!-- ko template: templates.headerItemContent --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-treelist-item-text-content': '<div class="dx-treelist-text-wrapper"> <!--ko if: treeListController.searchEnabled --> <div class="dx-treelist-text dx-highlighted-search-text" data-bind="searchHighlighting: { text: text, textToSearch: treeListController.textToSearch, searchOptions: treeListController.searchOptions }, attr: { title: text }"></div> <!-- /ko  --> <!--ko ifnot: treeListController.searchEnabled --> <div class="dx-treelist-text" data-bind="text: text, attr: { title: text }"></div> <!-- /ko  --> </div>',
    'dx-treelist-header-item-caption-content': '<div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> <!-- ko template: templates.itemTextContent --> <!-- /ko -->',
    'dx-treelist-item-with-hover': '<div data-bind="visible: visible"> <!-- ko if: hasContent --> <!-- ko template: "dx-treelist-accordion-item-with-hover" --> <!-- /ko --> <!-- /ko --> <!-- ko ifnot: hasContent --> <!-- ko template: "dx-treelist-header-item-with-hover" --> <!-- /ko --> <!-- /ko --> </div>',
    'dx-treelist-accordion-item-with-hover': '<div data-bind="dxdAccordionExt: { collapsed: collapsed, lazyContentRendering: true }"> <!-- ko template: "dx-treelist-header-item-with-hover" --> <!-- /ko --> <div class="dx-fieldset dx-accordion-content dxd-back-primary"> <!-- ko with: data --> <!-- ko template: { name: contenttemplate } --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dx-treelist-header-item-with-hover': '<div class="dx-background-inheritor dxd-back-highlighted dxd-state-selected"> <div class="dx-treelist-item dx-fontsize-reestablished dxd-list-item-back-color" data-bind="event: { dblclick: function() { $data.dblClickHandler ? $data.dblClickHandler($data) : $data.toggleCollapsed() }, mouseenter: mouseenter, mouseleave: mouseleave }, styleunit: padding, css: { \'dx-treelist-item-selected dxd-state-selected dxd-back-secondary\': isSelected() || isMultiSelected() }"> <div class="dx-treelist-collapsedbutton" data-bind="css: nodeImageClass, template: \'dxrd-svg-collapsed\', click: toggleCollapsed, style: { \'visibility\': hasItems ? \'visible\' : \'hidden\' }"></div> <div class="dx-treelist-caption"> <!-- ko if: actions && actions.length > 0 --> <div class="dx-treelist-action-container" data-bind="visible: $data.isSelected() || $data.isHovered()"> <!-- ko template: actionsTemplate() --> <!-- /ko --> </div> <!-- /ko  --> <div class="dx-treelist-selectedcontent" data-bind="click: toggleSelected,  draggable: isDraggable ? dragDropHandler : null"> <div class="dx-treelist-image" data-bind="css: $data.imageClassName, template: {name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, attr: { title: text }"> </div> <div class="dx-treelist-text-wrapper"> <div class="dx-treelist-text" data-bind="text: text, attr: { title: text }"></div> </div> </div> </div> </div> </div>',
    'dx-treelist': '<div role="group" class="dx-treelist dxd-text-primary"> <!-- ko template: $data.visibleItems !== undefined ? \'dx-treelist-paginate\' : \'dx-treelist-common\' --> <!-- /ko --> </div>',
    'dx-treelist-search-panel': '<div class="dxrd-treelist-search-panel" data-bind="dxTextBox: { mode: \'search\',  value:value, valueChangeEvent: \'keyup\', showClearButton: true, placeholder: searchPlaceholder()}"></div>',
    'dx-treelist-common': '<!-- ko foreach: items --> <!-- ko lazy: { resolver: resolver, innerBindings: { template: templateName } } --> <!-- /ko --> <!-- ko if: !$data.collapsed() --> <!-- ko template: { name: \'dx-treelist\', data: $data } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->',
    'dx-treelist-paginate': '<!-- ko foreach: visibleItems --> <!-- ko template: templateName --> <!-- /ko --> <!-- ko if: !$data.collapsed() --> <!-- ko template: { name: \'dx-treelist\', data: $data } --> <!-- /ko --> <!-- /ko --> <!-- /ko -->'
});

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/collectioneditor/_editor.js






class _editor_CollectionItemWrapper extends utils["a" /* Disposable */] {
    constructor(editor, array, index, displayNameField = '') {
        super();
        this.collapsed = external_ko_["observable"](true);
        this.selected = external_ko_["observable"](false);
        this._disposables.push(this.value = external_ko_["computed"]({
            read: () => {
                return array.peek()[index()];
            },
            write: (val) => {
                array.peek()[index()] = val;
            }
        }));
        this.editor = editor;
        this.index = index;
        this._disposables.push(this.name = external_ko_["computed"](() => {
            return displayNameField && this.value() && this.value()[displayNameField] ? external_ko_["unwrap"](this.value()[displayNameField]) : index();
        }));
    }
}
class _editor_CollectionEditorViewModel extends utils["a" /* Disposable */] {
    constructor(options, disabled = external_ko_["observable"](false)) {
        super();
        this.buttonMap = {
            'delete': { text: 'Delete', localizationId: 'AnalyticsCoreStringId.Cmd_Delete' },
            'add': { text: 'Add', localizationId: 'DataAccessUIStringId.Button_Add' },
            'down': { text: 'Move Down', localizationId: 'AnalyticsCoreStringId.Cmd_MoveDown' },
            'up': { text: 'Move Up', localizationId: 'AnalyticsCoreStringId.Cmd_MoveUp' }
        };
        this.selectedIndex = external_ko_["observable"](null);
        this.alwaysShow = external_ko_["observable"](false);
        this.collapsed = external_ko_["observable"](options.collapsed !== false);
        var addHandler = () => (options.addHandler || options.info && options.info() && options.info()['addHandler']).call(this);
        var hideButtons = options.hideButtons || options.info && options.info() && options.info()['hideButtons'];
        this._textEmptyArray = options.textEmptyArray || { text: 'To create an item click the Add button.', localizationId: 'AnalyticsCoreStringId.SqlDSWizard_PageConfigureParametersEmpty' };
        this.displayPropertyName = options.info && options.info() && options.info()['displayPropertyName'] || options.displayName;
        this._disposables.push(this.showButtons = external_ko_["computed"](() => {
            return !external_ko_["unwrap"](hideButtons) && !this.collapsed();
        }));
        this.showScroll = !!options.showScroll;
        var _isDisabled = (selectedIndex, name) => {
            if (options.isDisabledButton) {
                return options.isDisabledButton(selectedIndex, name);
            }
            else if (name === 'delete') {
                return selectedIndex === null;
            }
            else if (name === 'add') {
                return false;
            }
            else if (name === 'up') {
                return selectedIndex === null || selectedIndex === 0;
            }
            else if (name === 'down') {
                return selectedIndex === null || selectedIndex === (this.values().length - 1);
            }
        };
        this.isDisabledButton = (name) => {
            return disabled() || _isDisabled(this.selectedIndex(), name);
        };
        this.isVisibleButton = (name) => {
            if (!this.showButtons()) {
                return false;
            }
            else
                return options.isVisibleButton ? options.isVisibleButton(this.selectedIndex(), name) : true;
        };
        this.padding = options.level !== void 0 ? options.level * Object(internal_internal["d" /* propertiesGridEditorsPaddingLeft */])() : 0;
        this.displayName = (options.info && options.info()) ? Object(localization_utils["c" /* getLocalization */])(options.info().displayName, options.info().localizationId) : options.displayName;
        this.options = options;
        if (!options.displayName) {
            this.collapsed(false);
            this.alwaysShow(true);
        }
        if (options.alwaysShow)
            this.alwaysShow(true);
        this._disposables.push(this.values = external_ko_["computed"](() => {
            this._timeoutItemRendered && clearTimeout(this._timeoutItemRendered);
            this._timeoutItemRendered = setTimeout(() => {
                this.listKeyboardHelper && this.listKeyboardHelper.initialize();
            }, 100);
            return external_ko_["unwrap"](options.values());
        }));
        var selectedItem = external_ko_["unwrap"](options.selectedItem);
        if (selectedItem) {
            this._setSelectedIndex(selectedItem);
            this._disposables.push(options.selectedItem.subscribe((newVal) => {
                this._setSelectedIndex(newVal);
            }));
        }
        this.add = (model) => {
            model.event.stopPropagation();
            options.undoEngine && options.undoEngine().start();
            var item = addHandler();
            if (!item)
                return;
            var index = options.values().push(item);
            options.undoEngine && options.undoEngine().end();
            if (options.selectedItem) {
                this.select({ index: () => index - 1 });
            }
        };
        this.up = (model) => {
            this._move(options.values(), -1);
            model.event.stopPropagation();
        };
        this.down = (model) => {
            this._move(options.values(), 1);
            model.event.stopPropagation();
        };
        this.remove = (model) => {
            model.event.stopPropagation();
            if (this.selectedIndex() < 0)
                return;
            options.values().splice(this.selectedIndex(), 1);
            var valuesCount = options.values()().length;
            if (valuesCount > 0) {
                this.select({
                    index: () => this.selectedIndex() >= valuesCount ? valuesCount - 1 : this.selectedIndex()
                }, true);
            }
            else {
                this.select({ index: () => null }, true);
            }
        };
        this.select = (model, force = false) => {
            if (this.selectedIndex() === model.index() && !force)
                return;
            this.selectedIndex(model.index());
            if (options.selectedItem) {
                options.selectedItem(this.selectedIndex() !== null ? this.values()[this.selectedIndex()] : null);
            }
        };
        this.disabled = disabled;
        this.listKeyboardHelper = new _listKeyboardHelper_ListKeyboardHelper();
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    _move(array, offset) {
        if (this.selectedIndex() >= 0) {
            var old_index = this.selectedIndex(), new_index = old_index + offset;
            if ((new_index >= array().length) || (new_index < 0)) {
                return;
            }
            array.splice(new_index, 0, array.splice(old_index, 1)[0]);
            this.selectedIndex(new_index);
        }
    }
    _setSelectedIndex(selectedItem) {
        var index = this.values().indexOf(selectedItem);
        this.selectedIndex(index === -1 ? null : index);
    }
    getDisplayTextButton(key) {
        return Object(localization_utils["c" /* getLocalization */])(this.buttonMap[key].text, this.buttonMap[key].localizationId);
    }
    getDisplayTextEmptyArray() {
        return Object(localization_utils["c" /* getLocalization */])(this._textEmptyArray.text, this._textEmptyArray.localizationId);
    }
    createCollectionItemWrapper(grandfather, index, element) {
        var wrapper = new _editor_CollectionItemWrapper(grandfather, this.values, index, this.displayPropertyName);
        Object(_internal["c" /* addDisposeCallback */])(element, () => wrapper.dispose());
        return wrapper;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/collectioneditor/_bindings.js





external_ko_["bindingHandlers"]['dxCollectionEditor'] = {
    init: function (element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
        var values = valueAccessor(), gridViewModel = new _editor_CollectionEditorViewModel(values, viewModel.disabled), templateHtml = getTemplate(values.editorTemplate || '#dx-collectioneditor'), $templateHtml = external_jQuery_["fn"].constructor(templateHtml), itemTemplateName = values.info && values.info() && values.info()['template'] || values.template;
        if (itemTemplateName) {
            var itemTemplateHtml = getTemplate(itemTemplateName);
            $templateHtml.find('.dx-collection-item').append(external_jQuery_["fn"].constructor(itemTemplateHtml));
        }
        else {
            $templateHtml.find('.dx-collection-item').append(external_jQuery_["fn"].constructor(element).children());
        }
        var $element = external_jQuery_["fn"].constructor(element).append($templateHtml);
        var childContext = bindingContext.createChildContext(gridViewModel);
        external_ko_["applyBindings"](childContext, $element.children()[0]);
        Object(_internal["c" /* addDisposeCallback */])(element, () => gridViewModel.dispose());
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/ellipsiseditor/_editor.js








var editor_prefix = 'dx-ellipsiseditor', EDITOR_CLASS = editor_prefix + ' dx-dropdowneditor', EDITOR_BUTTON_CLASS = editor_prefix + '-button dx-widget dx-button-normal dx-dropdowneditor-button dx-ellipsis-button', EDITOR_BUTTON_ICON_CLASS = editor_prefix + '-icon dx-ellipsis-image dx-dropdowneditor-icon', EDITOR_BUTTON_ICON_TEMPLATE = 'dxrd-svg-ellipsis', EDITOR_WARNING_STATE_CLASS = 'dx-ellipsiseditor-warning';
class _editor_dxEllipsisEditor extends external_DevExpress_ui_dxTextBox_default.a {
    constructor(element, options) {
        super(element, options);
    }
    _init() {
        super['_init'].apply(this);
        if (!this._$element) {
            this._$element = external_jQuery_["fn"].constructor(this.element());
        }
        this._$element.addClass(EDITOR_CLASS);
        this._koContext = external_ko_["contextFor"](this._$element.get(0));
    }
    _render() {
        super['_render'].apply(this);
        this._renderButton();
        this._updateWarningState();
        this._attachInputEvents();
    }
    _updateWarningState(value = this.option('warningMessage')) {
        if (value) {
            this._$element.attr('title', value.toString());
            this._$element.addClass(EDITOR_WARNING_STATE_CLASS);
        }
        else {
            this._$element.removeAttr('title');
            this._$element.removeClass(EDITOR_WARNING_STATE_CLASS);
        }
    }
    _renderButton() {
        this._$button = external_jQuery_["fn"].constructor('<div />').addClass(EDITOR_BUTTON_CLASS);
        this._attachButtonEvents();
        this._$buttonIcon = external_jQuery_["fn"].constructor('<div />').addClass(EDITOR_BUTTON_ICON_CLASS).height('100%').append(_svgTemplateEngine_SvgTemplatesEngine.templates[EDITOR_BUTTON_ICON_TEMPLATE]).appendTo(this._$button);
        external_ko_["applyBindingsToDescendants"](this._koContext, this._$buttonIcon[0]);
        var buttonsContainer = this['_buttonsContainer']();
        this._$button.prependTo(buttonsContainer);
    }
    _updateButtonSize() {
        this._$buttonIcon.height(external_jQuery_["fn"].constructor(this.element()).height());
    }
    _attachButtonEvents() {
        var subscribeElements = [];
        if (!this._$input)
            this._$input = external_jQuery_["fn"].constructor(this['_input']());
        this._$button.off('click');
        this._$input.off('click');
        if (!this.option('disabled'))
            subscribeElements.push(this._$button);
        if (this.option('openOnFieldClick'))
            subscribeElements.push(this._$input);
        subscribeElements.forEach(($element) => {
            $element.on('click', this.buttonAction.bind(this));
        });
    }
    _attachInputEvents() {
        var input = this['_input']()[0];
        if (!input)
            return;
        var handler = (e) => {
            if (e.key == KeyboardEnum.Enter || (e.key == KeyboardEnum.ArrowDown && e.altKey)) {
                this.buttonAction(e);
            }
        };
        input.addEventListener('keydown', handler);
        Object(_internal["c" /* addDisposeCallback */])(input, function () {
            input.removeEventListener('keydown', handler);
        });
    }
    _optionChanged(args) {
        switch (args.name) {
            case 'disabled':
                this._attachButtonEvents();
                break;
            case 'warningMessage':
                this._updateWarningState(args.value);
                break;
        }
        super['_optionChanged'].apply(this, arguments);
    }
    buttonAction(e) {
        if (this.option('buttonAction')) {
            this.option('buttonAction')();
            e.stopPropagation();
        }
    }
}
external_DevExpress_registerComponent_default()('dxEllipsisEditor', _editor_dxEllipsisEditor);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/fileimageeditor/_editor.js





var _editor_editor_prefix = 'dx-fileimage', EDITOR_INPUT_WRAPPER_CLASS = _editor_editor_prefix + '-input-wrapper';
class _editor_dxFileImagePicker extends _editor_dxEllipsisEditor {
    constructor(element, options) {
        options.placeholder = options.placeholder || Object(localization_utils["c" /* getLocalization */])('(none)', 'DxDesignerStringId.None');
        super(element, options);
    }
    _getDisplayValue() {
        var knownPlaceholders = {
            'Image': 'AnalyticsCoreStringId.ImagePicker_Placeholder',
            'File': 'AnalyticsCoreStringId.FilePicker_Placeholder'
        };
        var placeholderId = this.option('placeholderId');
        if (this.option('value') && placeholderId)
            return Object(localization_utils["c" /* getLocalization */])(placeholderId, knownPlaceholders[placeholderId]);
        else
            return this.option('value');
    }
    _handleResult(result) {
        if (this.option('useFormat')) {
            this.option('format', result.format);
        }
        this.option('value', result.content);
    }
    _renderInput(inputContainer) {
        var $inputContainer = inputContainer && external_jQuery_["fn"].constructor(inputContainer) || external_jQuery_["fn"].constructor('<div />');
        $inputContainer.addClass(EDITOR_INPUT_WRAPPER_CLASS);
        this['_inputContainer'] = $inputContainer.get(0);
        external_jQuery_["fn"].constructor(this.element()).append(this['_inputContainer']);
        super['_renderInput'].apply(this, [inputContainer]);
    }
    _attachButtonEvents() {
        this._$button.off('click');
        if (!this.option('disabled')) {
            this._$button.on('click', (e) => {
                var _a, _b;
                e.stopPropagation();
                e.preventDefault();
                uploadFile({
                    accept: ((_a = this.option('accept')) === null || _a === void 0 ? void 0 : _a.toString()) || 'image/*',
                    readMode: (_b = this.option('readMode')) === null || _b === void 0 ? void 0 : _b.toString()
                }).done((result) => {
                    this._handleResult(result);
                });
            });
        }
    }
    _renderValue() {
        this.option('text', this._getDisplayValue());
        super['_renderValue'].apply(this);
    }
}
external_DevExpress_registerComponent_default()('dxFileImagePicker', _editor_dxFileImagePicker);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/fonteditor/_model.js



var availableUnits = [
    { value: 'pt', displayValue: 'Point', localizationId: 'DevExpress.ReportDesigner_FontOptions_Unit_Point' },
    { value: 'world', displayValue: 'World', localizationId: 'AnalyticsCoreStringId.FontOptions_Unit_World' },
    { value: 'px', displayValue: 'Pixel', localizationId: 'AnalyticsCoreStringId.FontOptions_Unit_Pixel' },
    { value: 'in', displayValue: 'Inch', localizationId: 'AnalyticsCoreStringId.Wizard_Inch' },
    { value: 'doc', displayValue: 'Document', localizationId: 'PreviewStringId.ReportDesigner_FontOptions_Unit_Document' },
    { value: 'mm', displayValue: 'Millimetr', localizationId: 'AnalyticsCoreStringId.Wizard_Millimeter' }
];
class _model_FontModel extends utils["a" /* Disposable */] {
    constructor(value) {
        super();
        this.family = external_ko_["observable"](null);
        this.unit = external_ko_["observable"](null);
        this.isUpdateModel = false;
        this.size = external_ko_["observable"](null);
        this.modificators = {
            bold: external_ko_["observable"](false),
            italic: external_ko_["observable"](false),
            strikeout: external_ko_["observable"](false),
            underline: external_ko_["observable"](false)
        };
        this.updateModel(value());
        this._disposables.push(value.subscribe((newVal) => {
            this.isUpdateModel = true;
            this.updateModel(newVal);
            this.isUpdateModel = false;
        }));
        this._disposables.push(this.modificators.bold.subscribe((newVal) => this.updateValue(value)));
        this._disposables.push(this.modificators.italic.subscribe((newVal) => this.updateValue(value)));
        this._disposables.push(this.modificators.strikeout.subscribe((newVal) => this.updateValue(value)));
        this._disposables.push(this.modificators.underline.subscribe((newVal) => this.updateValue(value)));
        this._disposables.push(this.family.subscribe((newVal) => this.updateValue(value)));
        this._disposables.push(this.size.subscribe((newVal) => this.updateValue(value)));
        this._disposables.push(this.unit.subscribe((newVal) => this.updateValue(value)));
    }
    _toString() {
        var leftPart = [this.family(), this.size() + this.unit()].join(', ');
        var modificators = [];
        if (this.modificators.bold())
            modificators.push('Bold');
        if (this.modificators.italic())
            modificators.push('Italic');
        if (this.modificators.underline())
            modificators.push('Underline');
        if (this.modificators.strikeout())
            modificators.push('Strikeout');
        var rightPart = modificators.join(', ');
        return !!rightPart ? [leftPart, rightPart].join(', style=') : leftPart;
    }
    updateModel(value) {
        if (!value)
            value = Object(internal_internal["a" /* defaultFontSerialization */])();
        var components = value.split(',');
        this.family(components[0]);
        var self = this;
        availableUnits.forEach(function (element) {
            if (components[1].trim().indexOf(element.value) != -1) {
                self.size(parseFloat(components[1].split(element.value)[0]));
                self.unit(element.value);
            }
        });
        this.modificators.bold(value.indexOf('Bold') !== -1);
        this.modificators.italic(value.indexOf('Italic') !== -1);
        this.modificators.underline(value.indexOf('Underline') !== -1);
        this.modificators.strikeout(value.indexOf('Strikeout') !== -1);
    }
    updateValue(value) {
        if (!this.isUpdateModel) {
            value(this._toString());
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/internal/_extendedSvgTemplates.js

var extendedTemplates = (templates) => ({
    'dxrd-svg-fieldlist-list': templates['dxrd-svg-fieldlist-table'],
    'dxrd-svg-fieldlist-default': templates['dxrd-svg-fieldlist-column']
});
_svgTemplateEngine_SvgTemplatesEngine.addTemplates(extendedTemplates(_svgTemplateEngine_SvgTemplatesEngine.templates));

// EXTERNAL MODULE: external "window[\"ace\"]"
var external_window_ace_ = __webpack_require__(35);
var external_window_ace_default = /*#__PURE__*/__webpack_require__.n(external_window_ace_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/ace/_ace-available.js

var aceAvailable = createGlobalAceVariableFunc();
function createGlobalAceVariableFunc() {
    var currentValue;
    return (newVal) => {
        if (newVal !== undefined)
            currentValue = newVal;
        return currentValue === undefined ? !!external_window_ace_default.a : currentValue;
    };
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/tools/_tools.js









class _tools_Tools extends utils["a" /* Disposable */] {
    constructor(onClick, parametersOptions, options, fieldListOptions) {
        super();
        this.searchPlaceholder = () => Object(_localization["n" /* searchPlaceholder */])();
        this._categories = external_ko_["observableArray"]([]);
        this.toolBox = [];
        this.description = external_ko_["observable"]();
        this._defaultClick = onClick;
        operatorNames.filter((item) => { return !!item.descriptionStringId; }).forEach(item => this._initDescription(item));
        var functionGroups = external_ko_["computed"](() => {
            return options() && external_ko_["unwrap"](options().functions) || functionDisplay();
        }), functions = external_ko_["computed"](() => {
            return functionGroups().map((funtionGroup) => {
                return this._createFunctionsCategoryItem(funtionGroup.items, Object(localization_utils["c" /* getLocalization */])(funtionGroup.display, funtionGroup.localizationId));
            });
        }), createDefaultCategories = () => {
            return [
                this._createFieldsCategory(fieldListOptions, parametersOptions),
                this._createConstantCategory(),
                this._createFunctionsCategory(functions),
                this._createOperatorsCategory(operatorNames)
            ];
        }, selectedContent = external_ko_["observable"](null), resetCategoriesSelection = () => {
            var firstItem = this._categories()[0].content;
            selectedContent() && selectedContent().isSelected(false);
            selectedContent(firstItem);
            firstItem.isSelected(true);
        }, updateCategories = (newOptions) => {
            this._disposeCategories();
            var defaultCategories = createDefaultCategories();
            newOptions && newOptions.customizeCategories && newOptions.customizeCategories(this, defaultCategories, onClick);
            this._categories(defaultCategories);
            resetCategoriesSelection();
        };
        this.resetCategoriesSelection = resetCategoriesSelection;
        [functionGroups, functions].forEach(x => this._disposables.push(x));
        this._disposables.push(options.subscribe((newOptions) => {
            updateCategories(newOptions);
        }));
        updateCategories(options());
        this._disposables.push(this.showDescription = external_ko_["computed"](() => { return selectedContent() && selectedContent().showDescription; }));
        this.toolBox = [
            this._generateTab(this._categories, 'dx-expressioneditor-categories', (item) => {
                if (item.data && item.data.selectedItem && item.data.selectedItem() && item.data.items.indexOf(item.data.selectedItem()) !== -1) {
                    var contentItem = item.data.selectedItem();
                    this.description(this._localizedExpressionEditorItem(contentItem));
                }
                else {
                    this.description(undefined);
                }
                if (selectedContent() === item)
                    return;
                selectedContent().isSelected(false);
                item.isSelected(true);
                selectedContent(item);
            }),
            this._generateTab(selectedContent, 'dx-expressioneditor-selectedcontent', (item) => { this.description(this._localizedExpressionEditorItem(item)); }, this._defaultClick),
            this._generateTab(this.description, 'dx-expressioneditor-description', undefined, undefined, this.showDescription)
        ];
    }
    _generateTab(content, templateName = null, click, dblclick, visible) {
        return {
            templateName,
            content,
            click,
            dblclick,
            visible: visible || true
        };
    }
    _localizedExpressionEditorItem(item) {
        return item.descriptionStringId ? Object(localization_utils["c" /* getLocalization */])(item.text, item.descriptionStringId) : item.description ? item.description : item.text;
    }
    _initDescription(expressionEditorItem) {
        expressionEditorItem.description = this._localizedExpressionEditorItem(expressionEditorItem);
    }
    _createFieldsCategory(fields, parameters) {
        var category = {
            displayName: Object(localization_utils["c" /* getLocalization */])('Fields', 'AnalyticsCoreStringId.ExpressionEditor_ItemInfo_Fields'),
            content: {
                showDescription: false,
                isSelected: external_ko_["observable"](false),
                data: { fields, parameters },
                name: 'dx-expressioneditor-fields'
            },
            dispose: () => void 0
        };
        return category;
    }
    _createConstantCategory() {
        var items = [
            { text: '?', descriptionStringId: 'ExpressionEditorStringId.Constant_Null' },
            { text: 'False', descriptionStringId: 'ExpressionEditorStringId.Constant_False' },
            { text: 'True', descriptionStringId: 'ExpressionEditorStringId.Constant_True' }
        ];
        return createExpressionEditorCollectionToolOptions(items, 'Constants', 'DataAccessStringId.ExpressionEditor_DocumentationCategory_Constants', true);
    }
    _createOperatorsCategory(data) {
        return createExpressionEditorCollectionToolOptions(data, 'Operators', 'DataAccessStringId.ExpressionEditor_DocumentationCategory_Operators', true);
    }
    _createFunctionsCategoryContent(textToSearch, isSelected, items) {
        return {
            showDescription: true,
            isSelected,
            data: {
                textToSearch,
                items,
                availableItems: external_ko_["observableArray"](items),
                selectedItem: external_ko_["observable"](null)
            },
            name: 'dx-expressioneditor-collection-function',
        };
    }
    _createFunctionsCategoryItem(functions, display) {
        var result = {
            display,
            isSelected: external_ko_["observable"](false),
            data: [],
            name: 'dx-expressioneditor-collection-function',
        };
        external_jQuery_["map"](functions, (item => {
            if (item) {
                item.forEach((functionItem) => {
                    this._initDescription(functionItem);
                    result.data.push(functionItem);
                });
            }
        }));
        return result;
    }
    _createFunctionsCategory(items) {
        var textToSearch = external_ko_["observable"](''), disposables = [], isSelected = external_ko_["observable"](false), timeout = null, allItems = external_ko_["computed"](() => [].concat(...items().map(x => x.data))), content = this._createFunctionsCategoryContent(textToSearch, isSelected, allItems()), category = {
            displayName: Object(localization_utils["c" /* getLocalization */])('Functions', 'DataAccessStringId.ExpressionEditor_DocumentationCategory_Functions'),
            items, allItems, isSelected, content,
            collapsed: external_ko_["observable"](true),
            updateContent: (items, isSelected) => {
                content.isSelected && content.isSelected(false);
                content.isSelected = isSelected;
                content.isSelected(true);
                content.data.items = items;
                content.data.availableItems(content.data.items.filter(x => !!findMatchesInString(x.text, textToSearch())));
            },
            templateName: 'dx-expressioneditor-category-accordion',
            dispose: () => {
                disposables.forEach(x => x.dispose());
                disposables.splice(0, disposables.length);
            }
        };
        disposables.push(allItems);
        disposables.push(textToSearch.subscribe((newVal) => {
            timeout && clearTimeout(timeout);
            timeout = setTimeout(() => {
                category.content.data.availableItems(category.content.data.items.filter(x => !!findMatchesInString(x.text, newVal)));
            }, 150);
        }));
        return category;
    }
    _disposeCategories() {
        this._categories().forEach(category => category.dispose && category.dispose());
    }
    dispose() {
        super.dispose();
        this._disposeCategories();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/treelist/_treelistController.js
class TreeListController {
    constructor() {
        this.selectedItem = null;
    }
    dispose() {
        this.selectedItem = null;
    }
    itemsFilter(item, path) {
        return true;
    }
    hasItems(item) {
        return item.specifics !== 'none' && (item.specifics === 'List' || item.specifics === 'ListSource' || item.isList === true);
    }
    canSelect(value) {
        return !value.hasItems;
    }
    select(value) {
        if (this.canSelect(value)) {
            this.selectedItem && this.selectedItem.isSelected(false);
            this.selectedItem = value;
            value.isSelected(true);
        }
    }
    isDraggable(item) {
        return false;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/tools/_treeListControllers.js


class _treeListControllers_ExpressionEditorTreeListController extends TreeListController {
    constructor(fieldName, putSelectionHandler, selectionHandler, customFilter) {
        super();
        this.fieldName = fieldName;
        this.putSelectionHandler = putSelectionHandler;
        this.selectionHandler = selectionHandler;
        this.customFilter = customFilter;
    }
    itemsFilter(item, path) {
        return item.specifics !== 'none' && item.name !== 'ReportItems' && (!this.customFilter || this.customFilter(path));
    }
    select(value) {
        if (this.selectionHandler)
            this.selectionHandler(value);
        else
            super.select(value);
    }
    getActions(item) {
        return [{ clickAction: (element) => this.putSelectionHandler(item, external_jQuery_["fn"].constructor(element)) }];
    }
    canSelect(value) {
        return true;
    }
}
class _treeListControllers_ExpressionEditorParametersTreeListController extends TreeListController {
    constructor(customFilter, putSelectionHandler, selectionHandler) {
        super();
        this.customFilter = customFilter;
        this.putSelectionHandler = putSelectionHandler;
        this.selectionHandler = selectionHandler;
    }
    itemsFilter(item) {
        return item.specifics !== 'none' && (!this.customFilter || this.customFilter(item));
    }
    select(value) {
        this.selectionHandler(value);
    }
    getActions(item) {
        return [{
                clickAction: (element) => {
                    if (item && !item.hasItems)
                        this.putSelectionHandler(item.path, external_jQuery_["fn"].constructor(element));
                }
            }];
    }
    canSelect(value) {
        return true;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/_addon.js



class _addon_FilterEditorAddOn extends utils["a" /* Disposable */] {
    constructor(criteria, popupService, action, propertyName, templateName) {
        super();
        this._filterPlaceHolder = Object(_localization["n" /* searchPlaceholder */])();
        this.showPopup = (_, element) => {
            this.dispose();
            this._disposables.splice(0);
            this._popupService.title('');
            this.target.isSelected(true);
            this._updateActions(this.target);
            this._popupService.target(element);
            setTimeout(() => {
                this._popupService.visible(true);
            }, 10);
        };
        this.popupContentTemplate = 'dx-filtereditor-popup-common';
        this.filterString = external_ko_["observable"]('');
        this.isFiltered = external_ko_["observable"](false);
        this.target = criteria;
        this._action = action;
        this.propertyName = propertyName;
        this._popupService = popupService;
        this.popupContentTemplate = templateName || this.popupContentTemplate;
    }
    _updateActions(viewModel) {
        this._popupService.data(null);
        if (viewModel) {
            this._disposables.push(this._popupService.visible.subscribe((newVal) => {
                this.target.isSelected(newVal);
                this.filterString('');
            }));
            this._popupService['viewModel'] = viewModel;
            var data = viewModel[this.propertyName];
            this.isFiltered(false);
            if (data && data.length > 10) {
                this.isFiltered(true);
                this._disposables.push(data = external_ko_["pureComputed"](() => {
                    if (!this.filterString())
                        return viewModel[this.propertyName];
                    return viewModel[this.propertyName].filter(x => (x.displayText || x.name).toLocaleLowerCase().indexOf(this.filterString().toLocaleLowerCase()) != -1);
                }));
            }
            this._popupService.data({
                data: data,
                template: this.popupContentTemplate,
                click: (data) => {
                    viewModel[this._action](data);
                    this._popupService.visible(false);
                },
                isFiltered: this.isFiltered,
                filterString: this.filterString,
                searchPlaceholder: () => Object(_localization["n" /* searchPlaceholder */])(),
                height: this.isFiltered() || data instanceof Function ? 'calc(100% - 30px)' : '100%'
            });
        }
    }
}

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/operators/options/function.js
var options_function = __webpack_require__(5);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/criteriaOperatorSurface.js





class criteriaOperatorSurface_CriteriaOperatorSurface extends utils["a" /* Disposable */] {
    constructor(operator, parent, fieldListProvider, path) {
        super();
        this.isUpdated = external_ko_["observable"](false);
        this.canRemove = true;
        this.operatorType = external_ko_["observable"](null);
        this.templateName = 'dx-filtereditor-common';
        this.isSelected = external_ko_["observable"](false);
        this.operatorClass = 'criteria-operator-item-operator dxd-filter-editor-operator-back-color dxd-filter-editor-text-color';
        this.popupService = parent.popupService || { visible: external_ko_["observable"](false) };
        this.model = operator;
        this.helper = parent.helper;
        this.fieldListProvider = fieldListProvider;
        this.path = path;
        this.parent = parent;
        this.operatorType(operator.operatorType);
        this._disposables.push(this.operatorType.subscribe((newVal) => {
            this.model.assignType(newVal);
        }));
    }
    _createLeftPartProperty(value) {
        if (value instanceof operators_property["a" /* OperandProperty */]) {
            var surface = this.createChildSurface(value);
        }
        else {
            var surface = this.createChildSurface(value);
            var specifics = Object.keys(this.helper.filterEditorOperators).reduce((key, value) => {
                if (value !== '_common' && key === 'integer'
                    && !!this.helper._getFilterEditorOperator(this.model, this.helper.filterEditorOperators[value], this.reverse)) {
                    key = value;
                }
                return key;
            }, 'integer');
            surface.specifics = surface.specifics || external_ko_["observable"](specifics);
        }
        surface['canChange'] = false;
        surface.canRemove = false;
        if (surface && surface.model.type === 'aggregate') {
            this.specifics = external_ko_["computed"](() => {
                return surface['aggregatedExpression']() && surface['aggregatedExpression']().specifics() || 'integer';
            });
            this.dataType = external_ko_["computed"](() => {
                return surface['aggregatedExpression']() && surface['aggregatedExpression']().dataType() || 'integer';
            });
            this._disposables.push(this.specifics);
            this._disposables.push(this.dataType);
        }
        else {
            this.specifics = surface.specifics;
            this.dataType = surface.dataType;
        }
        this.isUpdated = surface.isUpdated;
        return surface;
    }
    createChildSurface(item, path, actions) {
        return new this.helper.mapper[item.type](item, this, this.fieldListProvider, path || this.path);
    }
    getDisplayType() {
        var type = this.operatorType && this.operatorType() || '';
        var item = this.helper._getFilterEditorOperator(this.model, this.items, this.reverse);
        return item && item.name && (item.displayText || Object(localization_utils["c" /* getLocalization */])(item.name, item.localizationId)) || this.model.displayType || type;
    }
    get items() {
        return this.helper.filterEditorOperators[this.specifics()] || this.helper.filterEditorOperators._common;
    }
    get displayType() {
        return this.getDisplayType();
    }
    get leftPart() {
        return null;
    }
    get rightPart() {
        return null;
    }
    get css() {
        return this.operatorClass + (this.isSelected() ? ' selected' : '');
    }
    change(type, surface) {
        if (!surface && type && this.model.enumType === type.type && this.reverse === type.reverse && type.type !== options_function["FunctionOperatorType"]) {
            this.operatorType(type.value);
        }
        else {
            this.parent.change(type, this);
        }
        this.helper.onChange();
    }
    remove(surface) {
        this.parent.remove(this);
        this.helper.onChange();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/unaryOperandSurface.js





class unaryOperandSurface_UnaryOperandSurface extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.contentTemplateName = 'dx-filtereditor-unary';
        this.operand = external_ko_["observable"](null);
        var operand = this.createChildSurface(operator.operand);
        if (operator.operatorType === options_unary["UnaryOperatorType"].Not) {
            this.templateName = 'dx-filtereditor-not';
            operand.reverse = true;
            this.specifics = operand.specifics;
        }
        else {
            operand.dispose();
            operand = this._createLeftPartProperty(operator.operand);
        }
        this.operand(operand);
    }
    get leftPart() {
        var leftPart = this.operand();
        if (this.operand() && this.operand().reverse && this.operand().leftPart) {
            leftPart = this.operand().leftPart;
        }
        return leftPart;
    }
    get rightPart() {
        return this.operand() && this.operand().reverse ? this.operand().rightPart : null;
    }
    createChildSurface(item, path, actions) {
        if (this.operatorType() === options_unary["UnaryOperatorType"].Not && !this.helper._getFilterEditorOperator(item, this.helper._allFilterEditorOperators, true)) {
            this.model.operand = new group["GroupOperator"](options_group["GroupOperatorType"].And, [item]);
        }
        return super.createChildSurface(this.model.operand, path, actions);
    }
    dispose() {
        this.operand().dispose();
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/aggregateOperandSurface.js



class aggregateOperandSurface_AggregateOperandSurface extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.contentTemplateName = 'dx-filtereditor-aggregate';
        this.property = external_ko_["observable"](null);
        this.aggregatedExpression = external_ko_["observable"](null);
        this.condition = external_ko_["observable"](null);
        this.property(this._createLeftPartProperty(operator.property));
        var childPath = external_ko_["computed"](() => {
            return this.path() + '.' + this.property().propertyName();
        });
        this._disposables.push(childPath);
        if (operator.aggregatedExpression) {
            this.aggregatedExpression(this.createChildSurface(operator.aggregatedExpression, childPath));
            this.templateName = 'dx-filtereditor-aggregate-common';
        }
        if (operator.operatorType === 'Count') {
            this.templateName = 'dx-filtereditor-aggregate-common';
        }
        var surface = this.createChildSurface(operator.condition, childPath);
        surface.canRemove = false;
        if (surface instanceof unaryOperandSurface_UnaryOperandSurface) {
            surface.operand().canRemove = false;
        }
        this.condition(surface);
        this.change = (type, surface) => {
            if (surface) {
                var newModel = this.model.change(type, surface.model);
                var condition = this.createChildSurface(newModel, childPath);
                condition.canRemove = false;
                if (condition instanceof unaryOperandSurface_UnaryOperandSurface) {
                    condition.operand().canRemove = false;
                }
                this.condition(condition);
            }
            else {
                if (this.operatorType() === 'Exists' || this.operatorType() === 'Count') {
                    this.parent.change(type, this);
                }
                else {
                    if (type && (type.value === 'Exists' || type.value === 'Count')) {
                        this.parent.change(type, this);
                    }
                    else {
                        super.change(type, surface);
                    }
                }
            }
            this.helper.onChange();
        };
    }
    get leftPart() {
        return this.property && this.property();
    }
    get rightPart() {
        return this.aggregatedExpression();
    }
    dispose() {
        this.property().dispose();
        this.condition().dispose();
        this.aggregatedExpression() && this.aggregatedExpression().dispose();
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/betweenOperandSurface.js


class betweenOperandSurface_BetweenOperandSurface extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.property = external_ko_["observable"](null);
        this.end = external_ko_["observable"](null);
        this.begin = external_ko_["observable"](null);
        this.contentTemplateName = 'dx-filtereditor-between';
        this.property(this._createLeftPartProperty(operator.property));
        this.begin(this.createChildSurface(operator.begin));
        this.end(this.createChildSurface(operator.end));
    }
    get leftPart() {
        return this.property && this.property();
    }
    get rightPart() {
        return [this.begin(), this.end()];
    }
    dispose() {
        this.property().dispose();
        this.begin().dispose();
        this.end().dispose();
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/binaryOperandSurface.js


class binaryOperandSurface_BinaryOperandSurface extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.contentTemplateName = 'dx-filtereditor-binary';
        this.leftOperand = external_ko_["observable"](null);
        this.rightOperand = external_ko_["observable"](null);
        this.leftOperand(this._createLeftPartProperty(operator.leftOperand));
        this.rightOperand(this.createChildSurface(operator.rightOperand));
    }
    get leftPart() {
        return this.leftOperand();
    }
    get rightPart() {
        return this.rightOperand();
    }
    dispose() {
        this.leftOperand().dispose();
        this.rightOperand().dispose();
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/_helper.js

function initDisplayText(object) {
    object.displayText = Object(localization_utils["c" /* getLocalization */])(object.name, object.localizationId);
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/operandSurfaceBase.js








class operandSurfaceBase_OperandSurfaceBase extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.canChange = true;
        this.canRemove = false;
        this.changeValueType = (type) => {
            var parent = this.getRealParent(this.parent);
            var property = this.getRealProperty(this);
            var propertyLocation = this.getPropertyName(parent, property);
            var model = parent.model.changeValueType(type.instance, propertyLocation);
            if (propertyLocation.index !== null) {
                parent[propertyLocation.name]()[propertyLocation.index].dispose();
                parent[propertyLocation.name].splice(propertyLocation.index, 1, parent.createChildSurface(model));
            }
            else {
                parent[propertyLocation.name]().dispose();
                parent[propertyLocation.name](parent.createChildSurface(model));
            }
            this.helper.onChange();
        };
    }
    getRealParent(parent) {
        if (parent instanceof unaryOperandSurface_UnaryOperandSurface) {
            return this.getRealParent(parent.parent);
        }
        else {
            return parent;
        }
    }
    getRealProperty(property) {
        if (property.parent instanceof unaryOperandSurface_UnaryOperandSurface) {
            return this.getRealProperty(property.parent);
        }
        else {
            return property;
        }
    }
    getPropertyName(parent, searchProperty) {
        var position = null;
        var name = null;
        external_jQuery_["each"](parent, (propertyName, property) => {
            if (Array.isArray(external_ko_["unwrap"](property)) && external_ko_["isObservable"](property)) {
                var index = external_ko_["unwrap"](property).indexOf(searchProperty);
                if (index > -1) {
                    position = index;
                    name = propertyName;
                    return;
                }
            }
            else if (searchProperty === external_ko_["unwrap"](property) && external_ko_["isObservable"](property)) {
                name = propertyName;
                return;
            }
        });
        return { index: position, name: name };
    }
    getConvertableParameters(destinationSpecifics) {
        if (!this.helper.parameters())
            return [];
        return this.helper.parameters().filter((item) => {
            var sourceSpecifics = item.specifics && item.specifics.toLowerCase();
            if (sourceSpecifics == null || destinationSpecifics == null)
                return false;
            if (sourceSpecifics === destinationSpecifics)
                return true;
            if (destinationSpecifics === 'default')
                return true;
            if (destinationSpecifics === 'string')
                return true;
            if (destinationSpecifics === 'float')
                return sourceSpecifics === 'integer';
            return false;
        });
    }
    get changeTypeItems() {
        var items = [{ name: 'Value', instance: operators_value["a" /* OperandValue */], localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Value' }];
        if (this.helper.canChoiceProperty) {
            items.push({ name: 'Property', instance: operators_property["a" /* OperandProperty */], localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Property' });
        }
        if (this.helper.canChoiceParameters && (this.getConvertableParameters(this.parent.specifics()).length > 0 || this.helper.canCreateParameters)) {
            items.push({ name: 'Parameter', instance: parameter["a" /* OperandParameter */], localizationId: 'AnalyticsCoreStringId.FilterEditor_Operand_Type_Parameter' });
        }
        items.forEach(initDisplayText);
        return items;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/functionOperandSurface.js





class functionOperandSurface_FunctionOperandSurface extends operandSurfaceBase_OperandSurfaceBase {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.canRemove = true;
        this.contentTemplateName = 'dx-filtereditor-function';
        this.operands = external_ko_["observableArray"]([]);
        if (operator.operands.length === 0) {
            if (parent instanceof unaryOperandSurface_UnaryOperandSurface) {
                this.specifics = parent.parent.specifics;
            }
            else {
                this.specifics = parent.specifics;
            }
            this.contentTemplateName = 'dx-filtereditor-function-lightweight';
            this.canRemove = false;
        }
        else {
            this.operands.push(this._createLeftPartProperty(operator.operands[0]));
            for (var i = 1; i < operator.operands.length; i++) {
                this.operands.push(this.createChildSurface(operator.operands[i]));
            }
        }
    }
    get leftPart() {
        return this.operands && this.operands()[0];
    }
    get rightPart() {
        return this.operands && this.operands().filter((_, index) => { return index !== 0; });
    }
    get displayType() {
        var item = this.items.filter((item) => { return this.operatorType() === item.value && this.reverse === item.reverse && this.model.enumType === item.type; })[0];
        if (item && item.name) {
            return item.displayText || Object(localization_utils["c" /* getLocalization */])(item.name, item.localizationId);
        }
        else {
            if (!isNaN(parseInt(this.operatorType()))) {
                return options_function["FunctionOperatorType"][this.operatorType()];
            }
            else {
                return this.operatorType() || '';
            }
        }
    }
    dispose() {
        this.operands().forEach(x => x.dispose());
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/groupOperandSurface.js





class groupOperandSurface_GroupOperandSurface extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.templateName = 'dx-filtereditor-group';
        this.operatorClass = 'criteria-operator-item-group dxd-filter-editor-group-back-color dxd-filter-editor-text-color';
        this.operands = external_ko_["observableArray"]([]);
        this.createItems = null;
        this.createItems = [
            { name: 'Add group', value: true, localizationId: 'StringId.FilterMenuGroupAdd' },
            { name: 'Add condition', value: false, localizationId: 'StringId.FilterMenuConditionAdd' }
        ];
        this.createItems.forEach(initDisplayText);
        this.operands((operator.operands || []).map((operand) => {
            return this.createChildSurface(operand);
        }));
        this.specifics = external_ko_["observable"]('group');
    }
    change(type, surface) {
        if (surface) {
            var specifics = surface.specifics() || 'integer';
            var operators = this.helper.filterEditorOperators[specifics] || this.helper.filterEditorOperators._common;
            if (!type) {
                var item = operators.filter((item) => {
                    return surface.operatorType() === item.value && surface.reverse === item.reverse && surface.model.enumType === item.type;
                })[0];
                if (item) {
                    type = item;
                }
                else {
                    type = operators[0];
                }
            }
            var newModel = this.model.change(type, surface.model, surface.leftPart instanceof aggregateOperandSurface_AggregateOperandSurface && surface.leftPart.leftPart.specifics() !== 'list');
            var position = this.operands().indexOf(surface);
            var operand = this.createChildSurface(newModel);
            this.operands()[position].dispose();
            this.operands.splice(position, 1, operand);
        }
        else {
            super.change(type, surface);
        }
        this.helper.onChange();
    }
    remove(surface) {
        if (surface) {
            this.model.remove(surface.model);
            this.operands.remove(surface);
            surface.dispose();
        }
        else {
            this.parent.remove(this);
            this.dispose();
        }
        this.helper.onChange();
    }
    create(type) {
        var newModel = this.model.create(type.value, new operators_property["a" /* OperandProperty */]());
        this.operands.push(this.createChildSurface(newModel));
        this.helper.onChange();
    }
    get rightPart() {
        return this.operands();
    }
    dispose() {
        this.operands().forEach(x => x.dispose());
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/inOperandSurface.js



class inOperandSurface_InOperandSurface extends criteriaOperatorSurface_CriteriaOperatorSurface {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.contentTemplateName = 'dx-filtereditor-in';
        this.operands = external_ko_["observableArray"]([]);
        this.criteriaOperator = external_ko_["observable"](null);
        this.criteriaOperator(this._createLeftPartProperty(operator.criteriaOperator));
        this.operands((operator.operands || []).map((operand) => {
            return this.createChildSurface(operand);
        }));
        this.addValue = () => {
            var value = new operators_value["a" /* OperandValue */](null);
            this.model.operands.push(value);
            this.operands.push(this.createChildSurface(value));
        };
    }
    get leftPart() {
        return this.criteriaOperator();
    }
    get rightPart() {
        return this.operands();
    }
    dispose() {
        this.criteriaOperator().dispose();
        this.operands().forEach(x => x.dispose());
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/operandParameterSurface.js


class operandParameterSurface_OperandParameterSurface extends operandSurfaceBase_OperandSurfaceBase {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this.changeParameter = (item) => {
            this.model.parameterName = item.name;
            this.parameterName(item.name);
            this.helper.onChange();
        };
        this.operatorClass = 'criteria-operator-item-parameter dxd-filter-editor-parameter-back-color dxd-filter-editor-text-color';
        this.parameterName = external_ko_["observable"]('');
        this.templateName = 'dx-filtereditor-parameter';
        this.specifics = parent.specifics;
        this.parameterName(operator.parameterName);
        if (!this.parameterName() && this.items.length > 0) {
            this.changeParameter(this.items[0]);
        }
        this.specifics && this._disposables.push(this.specifics.subscribe((newVal) => {
            if (this.items.filter(x => external_ko_["unwrap"](x.name) == this.parameterName()).length == 0)
                this.items.length > 0 ? this.changeParameter(this.items[0]) : this.changeParameter({ name: '' });
        }));
    }
    get items() {
        return this.getConvertableParameters(this.specifics());
    }
    get displayType() {
        return null;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/operandPropertySurface.js



class operandPropertySurface_OperandPropertySurface extends operandSurfaceBase_OperandSurfaceBase {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this._displayName = external_ko_["observable"]('');
        this.propertyName = external_ko_["observable"]('');
        this.specifics = external_ko_["observable"]('integer');
        this.dataType = external_ko_["observable"]('');
        this.valueType = external_ko_["observable"]('');
        this.changeProperty = (item) => {
            this.fieldsOptions().selected(item);
        };
        this.templateName = 'dx-filtereditor-property';
        this.operatorClass = 'criteria-operator-item-field dxd-filter-editor-field-back-color dxd-filter-editor-field-back-color dxd-filter-editor-text-color';
        this.propertyName(operator.propertyName);
        var options = this.helper.generateTreelistOptions(fieldListProvider, path);
        if (options.options && options.subscription) {
            this.fieldsOptions = options.options;
            this._disposables.push(options.subscription);
        }
        else {
            this.fieldsOptions = options;
        }
        this._disposables.push(this.fieldsOptions().selectedPath.subscribe((newVal) => {
            var realName = this.fieldsOptions().selectedPath().substr(this.path && this.path().length > 0 ? this.path().length + 1 : 0);
            this.propertyName(realName);
            this.model.propertyName = realName;
            this.popupService.visible(false);
        }));
        this._disposables.push(this.fieldsOptions().selected.subscribe((newVal) => {
            this._updateDisplayName(path, this.propertyName(), newVal.displayName);
            var specifics = newVal.specifics.toLowerCase();
            if (specifics.indexOf('calc') === 0) {
                specifics = specifics.split('calc')[1];
            }
            if (this.specifics() !== specifics || this.dataType() !== newVal.dataType) {
                this.specifics(specifics);
                this.dataType(newVal.dataType);
                this.parent.change();
            }
            this.helper.onChange();
        }));
        this.fieldsOptions().selectedPath(this.path && !!external_ko_["unwrap"](this.path) ? [external_ko_["unwrap"](this.path), this.propertyName()].join('.') : this.propertyName());
        this._updateSpecifics();
        this._disposables.push(this.displayName = external_ko_["computed"](() => {
            return this._displayName() || this.propertyName();
        }));
    }
    _updateDisplayName(path, propertyName, displayName) {
        if (!!this.helper.getDisplayPropertyName) {
            this.helper.getDisplayPropertyName(external_ko_["unwrap"](path), propertyName).done((newVal) => {
                this._displayName(newVal);
            });
        }
        else {
            this._displayName(displayName);
        }
    }
    _updateSpecifics() {
        var self = this;
        var propertyPath = this.propertyName().split('.');
        var realPropertyName = propertyPath.pop();
        if (external_ko_["unwrap"](this.fieldsOptions).itemsProvider) {
            this.isUpdated(true);
            external_ko_["unwrap"](this.fieldsOptions).itemsProvider.getItems(new PathRequest([this.path()].concat(propertyPath).join('.'))).done((result) => {
                var notListProperties = result.filter((item) => { return item.specifics !== 'List' && !item.isList; });
                if (!this.propertyName() && notListProperties.length > 0) {
                    this.model.propertyName = notListProperties[0].name;
                    this.propertyName(notListProperties[0].name);
                    realPropertyName = notListProperties[0].name;
                }
                var item = result.filter((item) => { return item.name === realPropertyName; })[0];
                if (item) {
                    var specifics = item.specifics.toLowerCase();
                    if (specifics.indexOf('calc') === 0) {
                        specifics = specifics.split('calc')[1];
                    }
                    this.specifics(specifics);
                    this.dataType(item.dataType);
                    this._updateDisplayName(this.path, this.propertyName(), item.displayName);
                }
            }).always(() => {
                this.isUpdated(false);
            });
        }
    }
    get items() {
        return this.fieldsOptions;
    }
    get displayType() {
        return null;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/operators/operandValueSurface.js












class operandValueSurface_OperandValueSurface extends operandSurfaceBase_OperandSurfaceBase {
    constructor(operator, parent, fieldListProvider, path) {
        super(operator, parent, fieldListProvider, path);
        this._value = external_ko_["observable"](null);
        this._scroll = null;
        this._updateDate = function (specifics) {
            if (specifics === 'date') {
                if (!(this._value() instanceof Date)) {
                    this._value(new Date(new Date().setHours(0, 0, 0, 0)));
                }
            }
            else {
                this._value('');
            }
        };
        this.changeValue = () => {
            var parent = this.getRealParent(this.parent);
            var property = this.getRealProperty(this);
            var propertyLocation = this.getPropertyName(parent, property);
            var model = parent.model.changeValue(this.model, this.reverse, propertyLocation);
            if (propertyLocation.index !== null) {
                parent[propertyLocation.name]()[propertyLocation.index].dispose();
                parent[propertyLocation.name].splice(propertyLocation.index, 1, parent.createChildSurface(model));
            }
            else {
                parent[propertyLocation.name]().dispose();
                parent[propertyLocation.name](parent.createChildSurface(model));
            }
        };
        this.dataType = external_ko_["observable"]('');
        this.values = external_ko_["observable"]([]);
        this.isEditable = external_ko_["observable"](false);
        this.templateName = 'dx-filtereditor-value';
        this._getBaseOptions = (element) => {
            return {
                value: this._value,
                onFocusOut: () => this.isEditable(false),
                onFocusIn: () => this.scrollTo(element)
            };
        };
        this.getNumberEditorOptions = (element) => {
            return _valueEditorHelper_ValueEditorHelper.getNumberEditorOptions(this.dataType(), this.specifics(), this._getBaseOptions(element));
        };
        this.getStringEditorOptions = (element) => {
            return this._getBaseOptions(element);
        };
        this.getBoolEditorOptions = (element, $root) => {
            return Object.assign({ dataSource: [
                    { val: 'True', text: 'Yes', localizationId: 'AnalyticsCoreStringId.ParametersPanel_True' },
                    { val: 'False', text: 'No', localizationId: 'AnalyticsCoreStringId.ParametersPanel_False' }
                ], valueExpr: 'val', displayExpr: 'text', dropDownOptions: { container: $root.getPopupContainer(element) } }, this._getBaseOptions(element));
        };
        this.getDateEditorOptions = (element, $root) => {
            return Object.assign({ closeOnValueChange: true, type: 'date', dropDownOptions: { container: $root.getPopupContainer(element) } }, this._getBaseOptions(element));
        };
        this.getListEditOptions = (element, $root) => {
            var isCustomValue = typeof this.items[0] !== 'object';
            return Object.assign({ dataSource: this.dataSource, acceptCustomValue: isCustomValue, valueExpr: !isCustomValue ? 'value' : undefined, displayExpr: !isCustomValue ? 'display' : undefined, useItemTextAsTitle: true, searchEnabled: true, dropDownOptions: { container: $root.getPopupContainer(element) } }, this._getBaseOptions(element));
        };
        var dataSource = null;
        this._disposables.push(this.dataSource = external_ko_["computed"](() => {
            dataSource && dataSource.dispose();
            dataSource = new external_DevExpress_data_DataSource_default.a({
                store: this.values(),
                paginate: this.values().length > 200,
                pageSize: 100
            });
            return dataSource;
        }));
        if (parent instanceof unaryOperandSurface_UnaryOperandSurface) {
            this.specifics = parent.parent.specifics;
            this.isUpdated = parent.parent.isUpdated;
            this.dataType = parent.parent.dataType;
            if (parent.model.operatorType === options_unary["UnaryOperatorType"].Minus) {
                this.reverse = true;
            }
        }
        else {
            this.specifics = parent.specifics;
            this.isUpdated = parent.isUpdated;
            this.dataType = parent.dataType;
        }
        if (operator.specifics && external_ko_["isWritableObservable"](this.specifics))
            this.specifics(operator.specifics);
        this._disposables.push(this.specifics.subscribe((newVal) => {
            if (!this.isUpdated || !this.isUpdated()) {
                operator.specifics = newVal;
                this._updateDate(newVal);
            }
        }));
        this._value(operator.value);
        this._disposables.push(this._value.subscribe((newVal) => {
            this.model.value = newVal;
            this.helper.onChange();
        }));
        if (isNullOrEmptyString(this._value())) {
            this._updateDate(this.specifics());
        }
        this._disposables.push(this.value = external_ko_["computed"]({
            read: () => {
                var value = this._value();
                if (value instanceof Date) {
                    value = Object(_localization["c" /* formatDate */])(value);
                }
                if (this.items.length > 0) {
                    var result = this.items.filter((item) => { return String(item.value) === String(value); })[0];
                    if (result) {
                        return result.display;
                    }
                }
                if (this.reverse) {
                    value = '-' + value;
                }
                return value !== null && value !== undefined && value !== '' ? value : this.getDefaultValue();
            },
            write: (newVal) => {
                if (newVal > 0 && !this.reverse || newVal < 0 && this.reverse) {
                    this._value(newVal);
                }
                else if (newVal > 0 && this.reverse || newVal < 0 && !this.reverse) {
                    this.reverse = !this.reverse;
                    this._value(newVal < 0 ? ('' + newVal).substring(1) : newVal);
                    this.changeValue();
                }
            }
        }));
        this._disposables.push(external_ko_["computed"](() => {
            var itemsProvider = external_ko_["unwrap"](fieldListProvider);
            if (itemsProvider && itemsProvider.getValues && this.parent.leftPart instanceof operandPropertySurface_OperandPropertySurface) {
                if (this.parent.leftPart.propertyName()) {
                    itemsProvider.getValues(new PathRequest(external_ko_["unwrap"](this.path) + '.' + this.parent.leftPart.propertyName())).done((result) => {
                        this.values(result);
                    });
                }
            }
        }));
        operator.specifics = this.specifics();
    }
    get items() {
        return this.values();
    }
    get displayType() {
        return null;
    }
    isDefaultDisplay() {
        return this.value() === this.getDefaultValue();
    }
    getDefaultValue() {
        return operandValueSurface_OperandValueSurface._defaultValue ? operandValueSurface_OperandValueSurface._defaultValue :
            operandValueSurface_OperandValueSurface._defaultValue = Object(localization_utils["c" /* getLocalization */])('Enter a value', 'StringId.FilterEmptyEnter');
    }
    scrollTo(element) {
        if (!this._scroll) {
            var scrollElement = element.closest('.dx-filtereditor-tree');
            this._scroll = external_DevExpress_ui_dxScrollView_default.a.getInstance(scrollElement);
        }
        this._scroll.scrollToElement(element);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/_treelistController.js

class _treelistController_FilterEditorTreeListController extends TreeListController {
    constructor(selectedItem) {
        super();
        this.selectedItem = selectedItem;
    }
    itemsFilter(item) {
        return true;
    }
    hasItems(item) {
        return item.specifics !== 'none' && (item.specifics !== 'List' && item.isList === true);
    }
    canSelect(value) {
        return !value.data.isList || (value.data.isList === true && value.data.specifics === 'List');
    }
    select(value) {
        if (this.canSelect(value)) {
            this.selectedItem(value.data);
            value.isSelected(true);
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/_validator.js







var CriteriaSurfaceValidatorState;
(function (CriteriaSurfaceValidatorState) {
    CriteriaSurfaceValidatorState[CriteriaSurfaceValidatorState["Left"] = 0] = "Left";
    CriteriaSurfaceValidatorState[CriteriaSurfaceValidatorState["Right"] = 1] = "Right";
    CriteriaSurfaceValidatorState[CriteriaSurfaceValidatorState["Unary"] = 2] = "Unary";
})(CriteriaSurfaceValidatorState || (CriteriaSurfaceValidatorState = {}));
class _validator_CriteriaSurfaceValidator {
    customValidate(operator, from) {
        return false;
    }
    checkLeftPart(leftPart) {
        return leftPart instanceof operators_property["a" /* OperandProperty */] || this.customValidate(leftPart, CriteriaSurfaceValidatorState.Left);
    }
    _checkRightPart(criteriaOperator) {
        return criteriaOperator instanceof operators_property["a" /* OperandProperty */]
            || criteriaOperator instanceof parameter["a" /* OperandParameter */]
            || criteriaOperator instanceof operators_value["a" /* OperandValue */]
            || criteriaOperator instanceof constant["a" /* ConstantValue */]
            || (criteriaOperator instanceof unary["a" /* UnaryOperator */] && this._checkRightPart(criteriaOperator.operand))
            || this.customValidate(criteriaOperator, CriteriaSurfaceValidatorState.Right);
    }
    checkRightPart(rigthPart) {
        if (Array.isArray(rigthPart)) {
            for (var i = 0; i < rigthPart.length; i++) {
                if (!this._checkRightPart(rigthPart[i])) {
                    return false;
                }
            }
            return true;
        }
        else {
            return this._checkRightPart(rigthPart);
        }
    }
    aggregateIsValid(criteriaOperator) {
        return this.checkLeftPart(criteriaOperator.leftPart)
            && this.validateModel(criteriaOperator.condition)
            && (!!criteriaOperator.aggregatedExpression ?
                (criteriaOperator.aggregatedExpression instanceof operators_property["a" /* OperandProperty */] ||
                    this.validateModel(criteriaOperator.aggregatedExpression))
                : true);
    }
    commonOperandValid(criteriaOperator) {
        return criteriaOperator.leftPart instanceof operators_aggregate["a" /* AggregateOperand */] ?
            this.validateModel(criteriaOperator.leftPart) : this.checkLeftPart(criteriaOperator.leftPart)
            && this.checkRightPart(criteriaOperator.rightPart);
    }
    groupIsValid(criteriaOperator) {
        for (var i = 0; i < criteriaOperator.operands.length; i++) {
            if (!this.validateModel(criteriaOperator.operands[i])) {
                return false;
            }
        }
        return true;
    }
    unaryIsValid(criteriaOperator) {
        return criteriaOperator.operand instanceof operators_property["a" /* OperandProperty */] || this.validateModel(criteriaOperator.operand) || this.customValidate(criteriaOperator.operand, CriteriaSurfaceValidatorState.Unary);
    }
    validateModel(criteriaOperator) {
        if (criteriaOperator instanceof operators_aggregate["a" /* AggregateOperand */]) {
            return this.aggregateIsValid(criteriaOperator);
        }
        else if (criteriaOperator instanceof group["GroupOperator"]) {
            return this.groupIsValid(criteriaOperator);
        }
        else if (criteriaOperator instanceof unary["a" /* UnaryOperator */]) {
            return this.unaryIsValid(criteriaOperator);
        }
        else {
            return this.commonOperandValid(criteriaOperator);
        }
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/helper.js



























class helper_FilterEditorHelper {
    constructor(serializer) {
        this.rtl = false;
        this.parameters = external_ko_["observable"]([]);
        this.canSelectLists = true;
        this.canCreateParameters = false;
        this.canChoiceParameters = true;
        this.canChoiceProperty = true;
        this.criteriaTreeValidator = new _validator_CriteriaSurfaceValidator();
        this.filterEditorOperators = {
            _common: [
                { name: 'Equals', _type: 'binary', insertVal: '==', value: options_binary["BinaryOperatorType"].Equal, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseEquals' },
                { name: 'Does not equal', _type: 'binary', hidden: true, reverse: true, value: options_binary["BinaryOperatorType"].Equal, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseDoesNotEqual' },
                { name: 'Does not equal', _type: 'binary', insertVal: '!=', value: options_binary["BinaryOperatorType"].NotEqual, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseDoesNotEqual' },
                { name: 'Equals', _type: 'binary', reverse: true, hidden: true, value: options_binary["BinaryOperatorType"].NotEqual, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseEquals' },
                { name: 'Is greater than', _type: 'binary', insertVal: '>', value: options_binary["BinaryOperatorType"].Greater, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseGreater' },
                { name: 'Is less than or equal to', _type: 'binary', hidden: true, reverse: true, value: options_binary["BinaryOperatorType"].Greater, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseGreater' },
                { name: 'Is greater than or equal to', _type: 'binary', insertVal: '>=', value: options_binary["BinaryOperatorType"].GreaterOrEqual, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseGreaterOrEqual' },
                { name: 'Is less than', _type: 'binary', hidden: true, reverse: true, value: options_binary["BinaryOperatorType"].GreaterOrEqual, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseLess' },
                { name: 'Is less than', _type: 'binary', insertVal: '<', value: options_binary["BinaryOperatorType"].Less, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseLess' },
                { name: 'Is greater than or equal to', _type: 'binary', reverse: true, hidden: true, value: options_binary["BinaryOperatorType"].Less, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseGreaterOrEqual' },
                { name: 'Is less than or equal to', _type: 'binary', insertVal: '<=', value: options_binary["BinaryOperatorType"].LessOrEqual, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseLessOrEqual' },
                { name: 'Is greater than', _type: 'binary', reverse: true, hidden: true, value: options_binary["BinaryOperatorType"].LessOrEqual, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseGreater' },
                { name: 'Is between', _type: 'between', value: 'Between', insertVal: 'Between(, )', paramCount: 1, type: between["a" /* BetweenOperator */], localizationId: 'StringId.FilterClauseBetween' },
                { name: 'Is not between', _type: 'between', value: 'Between', insertVal: 'Between(, )', paramCount: 1, type: between["a" /* BetweenOperator */], reverse: true, localizationId: 'StringId.FilterClauseNotBetween' }
            ],
            string: [],
            guid: [],
            integer: [],
            float: [],
            date: [],
            list: [],
            group: [],
            bool: []
        };
        this.onChange = () => { };
        this.onEditorFocusOut = (criteria) => { };
        this.onSave = (criteria) => { };
        this.onClosing = () => { };
        this.handlers = {
            create: (criteria, popupService) => {
                return {
                    data: new _addon_FilterEditorAddOn(criteria, popupService, 'create', 'createItems'),
                    templateName: 'dx-filtereditor-create'
                };
            },
            change: (criteria, popupService) => {
                return {
                    data: new _addon_FilterEditorAddOn(criteria, popupService, 'change', 'items'),
                    templateName: 'dx-filtereditor-change'
                };
            },
            changeProperty: (criteria, popupService) => {
                return {
                    data: new _addon_FilterEditorAddOn(criteria, popupService, 'changeProperty', 'items', 'dx-filtereditor-popup-treelist'),
                    templateName: 'dx-filtereditor-changeProperty'
                };
            },
            changeValueType: (criteria, popupService) => {
                return {
                    data: new _addon_FilterEditorAddOn(criteria, popupService, 'changeValueType', 'changeTypeItems'),
                    templateName: 'dx-filtereditor-changeValueType'
                };
            },
            changeParameter: (criteria, popupService) => {
                return {
                    data: new _addon_FilterEditorAddOn(criteria, popupService, 'changeParameter', 'items'),
                    templateName: 'dx-filtereditor-changeParameter'
                };
            }
        };
        this.mapper = {
            aggregate: aggregateOperandSurface_AggregateOperandSurface,
            property: operandPropertySurface_OperandPropertySurface,
            parameter: operandParameterSurface_OperandParameterSurface,
            value: operandValueSurface_OperandValueSurface,
            group: groupOperandSurface_GroupOperandSurface,
            between: betweenOperandSurface_BetweenOperandSurface,
            binary: binaryOperandSurface_BinaryOperandSurface,
            function: functionOperandSurface_FunctionOperandSurface,
            in: inOperandSurface_InOperandSurface,
            unary: unaryOperandSurface_UnaryOperandSurface,
            default: criteriaOperatorSurface_CriteriaOperatorSurface
        };
        this.serializer = serializer || new _serializer_FilterEditorSerializer();
        this.filterEditorOperators.string = [].concat(this.filterEditorOperators._common, [
            { name: 'Contains', _type: 'function', insertVal: 'Contains(, )', value: options_function["FunctionOperatorType"].Contains, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterClauseContains' },
            { name: 'Does not contain', _type: 'function', value: options_function["FunctionOperatorType"].Contains, type: options_function["FunctionOperatorType"], reverse: true, localizationId: 'StringId.FilterClauseDoesNotContain' },
            { name: 'Begins with', _type: 'function', insertVal: 'StartsWith(, )', value: options_function["FunctionOperatorType"].StartsWith, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterClauseBeginsWith' },
            { name: 'Ends with', _type: 'function', insertVal: 'StartsWith(, )', value: options_function["FunctionOperatorType"].EndsWith, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterClauseEndsWith' },
            { name: 'Is like', _type: 'binary', insertVal: 'Like', value: options_binary["BinaryOperatorType"].Like, type: options_binary["BinaryOperatorType"], localizationId: 'StringId.FilterClauseLike' },
            { name: 'Is not like', _type: 'binary', insertVal: 'Not Like', value: options_binary["BinaryOperatorType"].Like, type: options_binary["BinaryOperatorType"], reverse: true, localizationId: 'StringId.FilterClauseNotLike' },
            { name: 'Is any of', _type: 'in', value: 'In', insertVal: 'In()', paramCount: 1, type: operators_in["a" /* InOperator */], localizationId: 'StringId.FilterClauseAnyOf' },
            { name: 'Is none of', _type: 'in', type: operators_in["a" /* InOperator */], reverse: true, localizationId: 'StringId.FilterClauseNoneOf' },
            { name: 'Is blank', _type: 'function', insertVal: 'IsNullOrEmpty()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsNullOrEmpty, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterClauseIsNullOrEmpty' },
            { name: 'Is not blank', _type: 'function', insertVal: 'Not IsNullOrEmpty()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsNullOrEmpty, type: options_function["FunctionOperatorType"], reverse: true, localizationId: 'StringId.FilterClauseIsNotNullOrEmpty' }
        ]);
        this.filterEditorOperators.guid = this.filterEditorOperators.string;
        this.filterEditorOperators.integer = [].concat(this.filterEditorOperators._common, [
            { name: 'Is null', insertVal: 'Is Null', value: options_unary["UnaryOperatorType"].IsNull, type: options_unary["UnaryOperatorType"], localizationId: 'StringId.FilterClauseIsNull' },
            { name: 'Is not null', insertVal: 'Is Not Null', value: options_unary["UnaryOperatorType"].IsNull, type: options_unary["UnaryOperatorType"], reverse: true, localizationId: 'StringId.FilterClauseIsNotNull' },
            { name: 'Is any of', _type: 'in', value: 'In', insertVal: 'In()', paramCount: 1, type: operators_in["a" /* InOperator */], localizationId: 'StringId.FilterClauseAnyOf' },
            { name: 'Is none of', _type: 'in', value: 'In', type: operators_in["a" /* InOperator */], reverse: true, localizationId: 'StringId.FilterClauseNoneOf' },
        ]);
        this.filterEditorOperators.float = this.filterEditorOperators.integer;
        this.filterEditorOperators.bool = this.filterEditorOperators.integer;
        this.filterEditorOperators.date = [].concat(this.filterEditorOperators._common, [
            { name: 'Is null', _type: 'unary', insertVal: 'Is Null', value: options_unary["UnaryOperatorType"].IsNull, type: options_unary["UnaryOperatorType"], localizationId: 'StringId.FilterClauseIsNull' },
            { name: 'Is not null', _type: 'unary', insertVal: 'Is Not Null', value: options_unary["UnaryOperatorType"].IsNull, type: options_unary["UnaryOperatorType"], reverse: true, localizationId: 'StringId.FilterClauseIsNotNull' },
            { name: 'Is any of', _type: 'in', value: 'In', insertVal: 'In()', type: operators_in["a" /* InOperator */], localizationId: 'StringId.FilterClauseAnyOf' },
            { name: 'Is none of', _type: 'in', value: 'In', type: operators_in["a" /* InOperator */], reverse: true, localizationId: 'StringId.FilterClauseNoneOf' },
            { name: 'Is beyond this year', _type: 'function', insertVal: 'IsOutlookIntervalBeyondThisYear()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalBeyondThisYear, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalBeyondThisYear' },
            { name: 'Is next week', _type: 'function', insertVal: 'IsOutlookIntervalNextWeek()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalNextWeek, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalNextWeek' },
            { name: 'Is tomorrow', _type: 'function', insertVal: 'IsOutlookIntervalTomorrow()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalTomorrow, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalTomorrow' },
            { name: 'Is today', _type: 'function', insertVal: 'IsOutlookIntervalToday()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalToday, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalToday' },
            { name: 'Is yesterday', _type: 'function', insertVal: 'IsOutlookIntervalYesterday()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalYesterday, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalYesterday' },
            { name: 'Is last week', _type: 'function', insertVal: 'IsOutlookIntervalLastWeek()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalLastWeek, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalLastWeek' },
            { name: 'Is prior this year', _type: 'function', insertVal: 'IsOutlookIntervalPriorThisYear()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOutlookIntervalPriorThisYear, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOutlookIntervalPriorThisYear' },
            { name: 'Is same day', _type: 'function', insertVal: 'IsSameDay(, )', value: options_function["FunctionOperatorType"].IsSameDay, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsSameDay' },
            { name: 'Is this month', _type: 'function', insertVal: 'IsThisMonth()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsThisMonth, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsThisMonth' },
            { name: 'Is this week', _type: 'function', insertVal: 'IsThisWeek()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsThisWeek, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsThisWeek' },
            { name: 'Is this year', _type: 'function', insertVal: 'IsThisYear()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsThisYear, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsThisYear' },
            { name: 'Is next month', _type: 'function', insertVal: 'IsNextMonth', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsNextMonth, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsNextMonth' },
            { name: 'Is next year', _type: 'function', insertVal: 'IsNextYear()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsNextYear, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsNextYear' },
            { name: 'Is last month', _type: 'function', insertVal: 'IsLastMonth()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsLastMonth, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsLastMonth' },
            { name: 'Is last year', _type: 'function', insertVal: 'IsLastYear()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsLastYear, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsLastYear' },
            { name: 'Is the year-to-date period', _type: 'function', insertVal: 'IsYearToDate()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsYearToDate, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsYearToDate' },
            { name: 'Is January', _type: 'function', insertVal: 'IsJanuary()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsJanuary, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsJanuary' },
            { name: 'Is February', _type: 'function', insertVal: 'IsFebruary()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsFebruary, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsFebruary' },
            { name: 'Is March', _type: 'function', insertVal: 'IsMarch()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsMarch, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsMarch' },
            { name: 'Is April', _type: 'function', insertVal: 'IsApril()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsApril, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsApril' },
            { name: 'Is May', _type: 'function', insertVal: 'IsMay()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsMay, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsMay' },
            { name: 'Is June', _type: 'function', insertVal: 'IsJune()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsJune, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsJune' },
            { name: 'Is July', _type: 'function', insertVal: 'IsJuly()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsJuly, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsJuly' },
            { name: 'Is August', _type: 'function', insertVal: 'IsAugust()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsAugust, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsAugust' },
            { name: 'Is September', _type: 'function', insertVal: 'IsSeptember()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsSeptember, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsSeptember' },
            { name: 'Is October', _type: 'function', insertVal: 'IsOctober()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsOctober, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsOctober' },
            { name: 'Is November', _type: 'function', insertVal: 'IsNovember()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsNovember, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsNovember' },
            { name: 'Is December', _type: 'function', insertVal: 'IsDecember()', emptyRightPart: true, value: options_function["FunctionOperatorType"].IsDecember, type: options_function["FunctionOperatorType"], localizationId: 'StringId.FilterCriteriaToStringFunctionIsDecember' },
        ]);
        this.filterEditorOperators.list = [
            { name: 'Exists', _type: 'aggregate', value: 'Exists', insertVal: 'Exists()', type: operators_aggregate["a" /* AggregateOperand */], localizationId: 'StringId.FilterAggregateExists' },
            { name: 'Count', _type: 'aggregate', value: 'Count', insertVal: 'Count()', type: operators_aggregate["a" /* AggregateOperand */], localizationId: 'StringId.FilterAggregateCount' },
            { name: 'Max', _type: 'aggregate', value: 'Max', insertVal: 'Max()', type: operators_aggregate["a" /* AggregateOperand */], localizationId: 'StringId.FilterAggregateMax' },
            { name: 'Min', _type: 'aggregate', value: 'Min', insertVal: 'Min()', type: operators_aggregate["a" /* AggregateOperand */], localizationId: 'StringId.FilterAggregateMin' },
            { name: 'Sum', _type: 'aggregate', value: 'Sum', insertVal: 'Sum()', type: operators_aggregate["a" /* AggregateOperand */], localizationId: 'StringId.FilterAggregateSum' },
            { name: 'Avg', _type: 'aggregate', value: 'Avg', insertVal: 'Avg()', type: operators_aggregate["a" /* AggregateOperand */], localizationId: 'StringId.FilterAggregateAvg' }
        ];
        this.filterEditorOperators.group = [
            { name: 'And', _type: 'group', insertVal: 'And', value: options_group["GroupOperatorType"].And, type: options_group["GroupOperatorType"], localizationId: 'StringId.FilterGroupAnd' },
            { name: 'Or', _type: 'group', insertVal: 'Or', value: options_group["GroupOperatorType"].Or, type: options_group["GroupOperatorType"], localizationId: 'StringId.FilterGroupOr' },
            { name: 'Not And', _type: 'group', value: options_group["GroupOperatorType"].And, reverse: true, type: options_group["GroupOperatorType"], localizationId: 'StringId.FilterGroupNotAnd' },
            { name: 'Not Or', _type: 'group', value: options_group["GroupOperatorType"].Or, reverse: true, type: options_group["GroupOperatorType"], localizationId: 'StringId.FilterGroupNotOr' },
        ];
        this._initDisplayText();
    }
    get _allFilterEditorOperators() {
        var operators = [];
        Object.keys(this.filterEditorOperators).forEach(propertyName => {
            operators.push(...this.filterEditorOperators[propertyName]);
        });
        return operators;
    }
    _getFilterEditorOperator(item, items, reverse) {
        return items.filter(x => x.value === item.operatorType && x.type === item.enumType && x.reverse === reverse)[0];
    }
    _initDisplayText() {
        Object.keys(this.filterEditorOperators).forEach(specific => {
            this.filterEditorOperators[specific].forEach(initDisplayText);
        });
    }
    registrateOperator(specific, targetEnum, value, name, opreatorType = 'function', reverse = false, localizationId) {
        if (this.filterEditorOperators[specific]) {
            if (!targetEnum[value]) {
                var maxNumber = 0;
                var index = 0;
                external_jQuery_["each"](targetEnum, (name, _) => {
                    index = parseInt(name);
                    if (!isNaN(index) && maxNumber < index) {
                        maxNumber = index;
                    }
                });
                maxNumber++;
                targetEnum[maxNumber] = value;
                targetEnum[value] = maxNumber;
            }
            var newOperator = { name: name, value: targetEnum[value], type: targetEnum, _type: opreatorType, reverse: reverse, displayText: Object(localization_utils["c" /* getLocalization */])(name, localizationId) };
            this.filterEditorOperators[specific].push(newOperator);
        }
    }
    generateTreelistOptions(fieldListProvider, path) {
        var treeListOptions = external_ko_["observable"](null);
        var selected = external_ko_["observable"](null);
        return {
            subscription: external_ko_["computed"](() => {
                treeListOptions({
                    itemsProvider: external_ko_["unwrap"](fieldListProvider),
                    selectedPath: external_ko_["observable"](''),
                    selected: selected,
                    path: external_ko_["unwrap"](path),
                    treeListController: new _treelistController_FilterEditorTreeListController(selected),
                    rtl: this.rtl
                });
            }),
            options: treeListOptions
        };
    }
}
var DefaultFilterEditorHelper = Object(_internal["d" /* createGlobalModuleVariableFunc */])(helper_FilterEditorHelper);
function _setDefaultFilterEditorHelper(helperType) {
    DefaultFilterEditorHelper(helperType);
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/helpers/_codeCompletor.js




class _codeCompletor_FilterEditorCodeCompletor extends _codeCompletor_CodeCompletor {
    constructor(options) {
        super(options);
        var helper = new helper_FilterEditorHelper();
        var functions = [];
        var aggregate = [];
        var operators = [];
        var groups = Object.keys(helper.filterEditorOperators);
        groups.forEach((groupName) => {
            helper.filterEditorOperators[groupName].forEach((operator) => {
                if (operator.insertVal) {
                    var name = operator.name, insertVal = operator.insertVal, paramCount = operator.paramCount;
                    if (operator.type === options_function["FunctionOperatorType"] && functions.filter(x => x.name === name).length === 0) {
                        functions.push({ name: name, insertVal: insertVal });
                    }
                    else if (operator.type === operators_aggregate["a" /* AggregateOperand */] && aggregate.filter(x => x.name === name).length === 0) {
                        aggregate.push({ name: name, insertVal: insertVal });
                    }
                    else if (operator.type !== operators_aggregate["a" /* AggregateOperand */] && operator.type !== options_function["FunctionOperatorType"] && operators.filter(x => x.name === name).length === 0) {
                        operators.push({ name: name, insertVal: insertVal, paramCount: paramCount });
                    }
                }
            });
        });
        this.filterEditorAvailable = { operators, aggregate, functions };
    }
    getFunctionsCompletions() {
        var functions = [];
        this.filterEditorAvailable.functions.forEach(funcItem => {
            functions.push(createFunctionCompletion({ text: funcItem.name, paramCount: funcItem.insertVal.split(',').length }, funcItem.insertVal, funcItem.insertVal));
        });
        return functions;
    }
    getAggregateCompletions() {
        var functions = [];
        this.filterEditorAvailable.aggregate.forEach(funcItem => {
            functions.push(createFunctionCompletion({ text: funcItem.name, paramCount: 0 }, funcItem.insertVal, funcItem.insertVal));
        });
        return functions;
    }
    getOperatorCompletions(prefix) {
        var operators = [];
        this.filterEditorAvailable.operators.forEach(operator => {
            operators.push((operator.insertVal.match(new RegExp('[\(][^\(\)]*[\)]', 'g'))) ?
                createFunctionCompletion({ text: operator.name, paramCount: operator.paramCount || operator.insertVal.split(',').length }, operator.insertVal, operator.insertVal) :
                { caption: operator.insertVal, snippet: prefix + operator.insertVal, meta: 'operator' });
        });
        return operators;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/formatstring/_patterns.js
var formatStringStandardPatterns = {
    'DateTime': { type: 'System.DateTime', value: new Date(Date.now()), patterns: [] },
    'Number': { type: 'System.Int32', value: '123456789', patterns: ['#.00', '#,#', '0.E+0.0', '0.e+0.0', 'n', 'n1', 'n2', 'e', 'e1', 'f', 'f1'] },
    'Percent': { type: 'System.Int32', value: '100', patterns: ['0.00%', '0%'] },
    'Currency': { type: 'System.Int32', value: '100', patterns: ['$0.00', '$0', 'c', 'c1', 'c2'] },
    'Special': { type: 'System.Int32', value: '123456789', patterns: ['(###) ### - ####', '### - ## - ####'] },
    'General': { type: 'System.String', value: '', patterns: ['General format have no specific number format'] }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/internal/_popupComponentBase.js


class _popupComponentBase_PopupComponentBase extends utils["a" /* Disposable */] {
    constructor() {
        super(...arguments);
        this._component = external_ko_["observable"]();
        this.onContentReady = (e) => {
            this._component(e.component);
        };
        this.hideOnOutsideClick = (e) => {
            var component = this.getComponent();
            var $content = component && $.fn.constructor(component.content());
            return !$content || !($content.has(e.target).length || $content.is(e.target));
        };
    }
    getComponent() {
        return external_ko_["unwrap"](this._component);
    }
    dispose() {
        super.dispose();
        var component = this._component();
        component && component.dispose();
        this._component(null);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/internal/_popupwithautoheight.js


class _popupwithautoheight_dxPopupWithAutoHeight extends external_DevExpress_ui_dxPopup_default.a {
    _setContentHeight() {
        this['_$popupContent'].css({
            height: '100%'
        });
    }
}
external_DevExpress_registerComponent_default()('dxPopupWithAutoHeight', _popupwithautoheight_dxPopupWithAutoHeight);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/internal/_resizeHelper.js



class _resizeHelper_ResizeHelper {
    constructor(resultSize, disabled = external_ko_["observable"](false)) {
        this.resultSize = resultSize;
        this.disabled = disabled;
        this._resize = (deltaWidth, deltaHeight, oldDelta, element) => {
            if (this.resultSize) {
                this.resultSize(this.resultSize() - (deltaWidth || deltaHeight) + oldDelta);
            }
            else {
                if (element) {
                    if (deltaWidth) {
                        const newWidth = element.offsetWidth - deltaWidth + oldDelta;
                        element.style.width = `${newWidth}px`;
                    }
                    else if (deltaHeight) {
                        const newHeight = element.offsetHeight + deltaHeight - oldDelta;
                        element.style.height = `${newHeight}px`;
                    }
                }
            }
            return deltaWidth || deltaHeight;
        };
    }
    resizable(resizeHandler, handles) {
        if (!resizeHandler)
            resizeHandler = { starting: () => { }, stopped: () => { } };
        var oldDelta = 0;
        return Object(_utils["b" /* extend */])({}, resizeHandler, {
            handles: handles,
            $selectedNodes: external_jQuery_["fn"].constructor(),
            stopped: () => { oldDelta = 0; },
            resize: (event, element, boundsDiff) => {
                oldDelta = this._resize(-boundsDiff.width, boundsDiff.height, oldDelta, element);
            },
            handleClassName: 'dxd-back-secondary',
            disabled: this.disabled
        });
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/treelist/options.js

var LoadChildItemsForCollapsedNodes = Object(_internal["d" /* createGlobalModuleVariableFunc */])(true);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/treelist/_treelistItem.js









var maxSearchLevel = Object(_internal["d" /* createGlobalModuleVariableFunc */])(5);
var treeListEditAction = {
    templateName: 'dx-treelist-edit-action',
    imageClassName: '',
    text: 'Edit',
    clickAction: external_jQuery_["noop"],
    displayText: () => Object(localization_utils["c" /* getLocalization */])('Edit', 'AnalyticsCoreStringId.Group_Edit')
};
class DefaultTreeListItemFactory {
    createRootItem(options, path, onItemsVisibilityChanged, rtl) {
        return new _treelistItem_TreeListRootItemViewModel(options, path, onItemsVisibilityChanged, rtl);
    }
    createItem(options, path, onItemsVisibilityChanged, rtl, resolver) {
        return new _treelistItem_TreeListItemViewModel(options, path, onItemsVisibilityChanged, rtl, resolver);
    }
}
class _treelistItem_TreeListEllipsisButton {
    constructor(_availableItemsCount, padding, pageSize) {
        this._availableItemsCount = _availableItemsCount;
        this.padding = padding;
        this.pageSize = pageSize;
        this.templateName = 'dx-treelist-item-ellipsis';
        this.collapsed = () => true;
        this.visibleItems = () => [];
        this.text = () => Object(localization_utils["c" /* getLocalization */])('Show more...', 'AnalyticsCoreStringId.QueryBuilder_Tables_ShowMore');
    }
    renderNext() {
        this._availableItemsCount(this._availableItemsCount() + this.pageSize);
    }
}
class _treelistItem_TreeListItemViewModel extends utils["a" /* Disposable */] {
    constructor(options, path = [], onItemsVisibilityChanged = external_jQuery_["noop"], rtl = false, resolver = new _codeResolver_CodeResolver()) {
        super();
        this.resolver = resolver;
        this._rtl = false;
        this._data = external_ko_["observable"](null);
        this._actions = external_ko_["observable"]([]);
        this._isVisible = external_ko_["observable"](true);
        this._pageSize = -1;
        this._actionsSubscription = null;
        this._iconName = () => (external_ko_["unwrap"]((this.data && this.data.icon) || (this.data && this.data.specifics)) || 'default').split('.').join('_').toLowerCase();
        this._nodeIsLocked = false;
        this.level = -1;
        this.items = external_ko_["observableArray"]();
        this.collapsed = external_ko_["observable"](true);
        this.isSelected = external_ko_["observable"](false);
        this.isHovered = external_ko_["observable"](false);
        this.isMultiSelected = external_ko_["observable"](false);
        this.templates = {
            accordionItem: 'dx-treelist-accordion-item',
            headerItem: 'dx-treelist-header-item',
            headerItemContent: 'dx-treelist-header-item-caption-content',
            itemTextContent: 'dx-treelist-item-text-content',
            actionsContainer: 'dx-treelist-item-actions-container',
        };
        this._pageSize = options.pageSize || -1;
        this._path = path;
        this._rtl = rtl;
        this._factory = options.factory || new DefaultTreeListItemFactory();
        this._treeListController = options.treeListController;
        this._templateName = options.templateName;
        this._onItemsVisibilityChanged = onItemsVisibilityChanged;
        this.dragDropHandler = options.treeListController.dragDropHandler;
        this._onItemsChangedCallback = options.onItemsChanged;
        this.getItems = () => {
            if (this.items().length > 0)
                return external_jQuery_["Deferred"]().resolve(this.items()).promise();
            return this._loadItems(options);
        };
        this._initPaginate();
        this.toggleSelected = (_, event) => {
            if (event && (event.shiftKey || event.ctrlKey || event.metaKey) && this.selectedItems().length > 0 && this._treeListController.canMultiSelect && this._treeListController.canMultiSelect(this)) {
                options.selectedPath('');
                this._treeListController.multiSelect(this, event.shiftKey, event.ctrlKey || event.metaKey);
            }
            else if (this._treeListController.canSelect(this)) {
                options.treeListController.clickHandler && options.treeListController.clickHandler(this);
                options.selectedPath(this.path);
            }
        };
        if (options.treeListController.dblClickHandler) {
            this.dblClickHandler = (item) => {
                options.treeListController.dblClickHandler && options.treeListController.dblClickHandler(item);
            };
        }
        this.toggleCollapsed = () => {
            if (this.hasItems) {
                this.collapsed(!this.collapsed.peek());
                if (!this.collapsed.peek() && this.items().length === 0) {
                    this._loadItems(options, LoadChildItemsForCollapsedNodes()).always(() => { onItemsVisibilityChanged(); });
                }
                else if (LoadChildItemsForCollapsedNodes()) {
                    this.items().forEach((item) => {
                        item._treeListController.hasItems(item.data) && item.items().length === 0 && item._loadItems(options);
                    });
                    onItemsVisibilityChanged();
                }
            }
        };
        this.nodeImageClass = this._getNodeImageClassName();
    }
    _equal(obj1, obj2) {
        var ignore = ['innerActions', 'noDragable', 'dragData'];
        if (obj2 === obj1)
            return true;
        return Object.keys(obj2).filter(key => ignore.indexOf(key) === -1).every((key) => {
            return obj2[key] === obj1[key];
        });
    }
    _getImageClassName(showIcon) {
        return external_ko_["computed"](() => {
            return 'dx-image-fieldlist-'
                + this._iconName()
                + (!showIcon ? ' dx-treelist-image-empty' : '');
        });
    }
    _getImageTemplateName() {
        return external_ko_["computed"](() => {
            var _templateName = 'dxrd-svg-fieldlist-' + this._iconName();
            return _svgTemplateEngine_SvgTemplatesEngine.getExistingTemplate(_templateName);
        });
    }
    _getNodeImageClassName() {
        return external_ko_["computed"]({
            read: () => {
                var result = 'dx-collapsing-image';
                if (!this.hasItems) {
                    return 'dx-image-leaf-node';
                }
                if (!this.collapsed())
                    result += ' dx-image-expanded';
                return result;
            }
        });
    }
    _createItemsObj(items) {
        var obj = {};
        for (var i = 0; i < items.length; i++) {
            obj[items[i].name] = { item: items[i], index: i };
        }
        return obj;
    }
    _loadItems(options, loadInnerItems = false) {
        var deferred = external_jQuery_["Deferred"]();
        if (this._loader) {
            this._loader.dispose();
        }
        this._disposables.reverse().forEach(x => x.dispose && x.dispose());
        this._disposables.splice(0);
        var promise = external_ko_["observable"]();
        var subscription = promise.subscribe((value) => {
            if (!value)
                return;
            value.done((data) => {
                if (this.isDisposing) {
                    deferred.reject();
                    return;
                }
                var _data = data;
                var items = this.items.peek();
                var dataObj = this._createItemsObj(_data);
                var isMutated = false;
                var splicedItems = 0;
                var tempItems = [].concat.apply([], items);
                for (var i = 0; i < tempItems.length; i++) {
                    if (!dataObj[tempItems[i].data.name]) {
                        tempItems[i].dispose();
                        items.splice(i - splicedItems, 1);
                        splicedItems++;
                        isMutated = true;
                    }
                }
                var itemsObj = this._createItemsObj(items);
                var resorted = false;
                var showIconsForChildItems = !this._treeListController.showIconsForChildItems || this._treeListController.showIconsForChildItems(this);
                var showIconTemplate = this._treeListController.showIconsForChildItems && this._treeListController.showIconsForChildItems(this);
                _data.forEach((d, index) => {
                    var currentItem = itemsObj[d.name];
                    if (!currentItem) {
                        isMutated = true;
                        var newItem = this._factory.createItem(options, this.pathParts, this._onItemsVisibilityChanged, this._rtl, this.resolver);
                        newItem.data = d;
                        newItem.level = this.level + 1;
                        newItem.parent = this;
                        newItem.padding = this._applyPadding(this._rtl ? 'right' : 'left', 20 * newItem.level + 12);
                        newItem.imageClassName = newItem._getImageClassName(showIconsForChildItems);
                        newItem.imageTemplateName = newItem._getImageTemplateName();
                        newItem.showIcon = showIconTemplate;
                        items.splice(index, 0, newItem);
                        itemsObj[d.name] = { item: newItem, index: index };
                    }
                    else {
                        if (!this._equal(d, currentItem.item.data))
                            currentItem.item.data = d;
                        if (!resorted)
                            resorted = currentItem.index !== index;
                    }
                });
                if (resorted) {
                    var index = items.reduce((acc, x, index) => {
                        var max = Math.abs(index - (dataObj[x.data.name] ? dataObj[x.data.name].index : -1));
                        if (!acc || acc.max < max) {
                            return { max, index };
                        }
                        return acc;
                    }, null).index;
                    var curItem = items[index];
                    items.splice(index, 1);
                    items.splice(dataObj[curItem.data.name] ? dataObj[curItem.data.name].index : -1, 0, curItem);
                    isMutated = true;
                }
                dataObj = null;
                itemsObj = null;
                if (isMutated) {
                    this.items.valueHasMutated();
                    this._onItemsChanged();
                }
                if (!this.collapsed() || loadInnerItems) {
                    this.items().forEach(item => {
                        if (item._treeListController.hasItems(item.data)) {
                            item._loadItems(options);
                        }
                    });
                }
                deferred.resolve(this.items.peek());
                var selectedPath = options.selectedPath.peek();
                if (selectedPath) {
                    var item2Select = this.items.peek().filter(item => { return selectedPath.indexOf(item.path) === 0; })[0];
                    if (item2Select) {
                        this._selectItem(item2Select.name + selectedPath.substring(item2Select.path.length));
                    }
                }
            });
        });
        this._disposables.push({
            dispose: () => {
                subscription.dispose();
                promise(null);
            }
        });
        this._disposables.push(this._loader = external_ko_["computed"](() => {
            promise(options.itemsProvider.getItems(new PathRequest(this.path, this.pathParts)));
        }));
        return deferred.promise();
    }
    _onItemsChanged() {
        if (this._onItemsChangedCallback)
            this._onItemsChangedCallback(this.items());
    }
    _getTemplateName() {
        return this._templateName || this.data && this.data.templateName || 'dx-treelist-item';
    }
    _selectItem(itemPath) {
        if (!this.hasItems) {
            return;
        }
        var selectItemDelegate = () => {
            this._find(itemPath);
            if (this.collapsed.peek()) {
                this.toggleCollapsed();
            }
        };
        if (this.items.peek().length === 0) {
            this.getItems().done((items) => {
                selectItemDelegate();
            });
        }
        else {
            selectItemDelegate();
        }
    }
    _find(itemPath) {
        var item = itemPath && this.items.peek().filter(childItem => itemPath === childItem.name
            || itemPath.indexOf(childItem.name) === 0 && itemPath[childItem.name.length] === '.')[0];
        if (item) {
            if (itemPath.length > item.name.length) {
                item._selectItem(itemPath.substr(item.name.length + 1));
            }
            else {
                this._treeListController.select(item);
            }
        }
    }
    _getItemsWithLock() {
        var deffered = external_jQuery_["Deferred"]();
        if (this._nodeIsLocked)
            return deffered.reject().promise();
        this._nodeIsLocked = true;
        this.getItems().done(result => {
            this._nodeIsLocked = false;
            deffered.resolve(result);
        }).fail(() => {
            this._nodeIsLocked = false;
            deffered.reject();
        });
        return deffered.promise();
    }
    _applyPadding(position, value) {
        var padding = {};
        padding['padding-' + position] = value;
        return padding;
    }
    _initPaginate() {
        if (this._pageSize === -1)
            return;
        this.maxItemsCount = external_ko_["observable"](this._pageSize);
        this.visibleItems = external_ko_["computed"](() => {
            if (this.items().length === 0)
                return [];
            var result = this.items().filter(x => x._isVisible.peek());
            if (result.length > this.maxItemsCount()) {
                result = result.slice(0, this.maxItemsCount());
                result.push(new _treelistItem_TreeListEllipsisButton(this.maxItemsCount, result[0].padding, this._pageSize));
            }
            return result;
        });
    }
    get hasItems() {
        if (!this.data) {
            return true;
        }
        var hasItems = this._treeListController.hasItems(this.data);
        return LoadChildItemsForCollapsedNodes() ?
            hasItems && this.items().some((item) => item.visible) :
            hasItems;
    }
    get data() {
        return this._data();
    }
    set data(newVal) {
        this._data(newVal);
        this._actionsSubscription && this._actionsSubscription.dispose();
        this._actionsSubscription = external_ko_["computed"](() => {
            this._actions(this._treeListController && this._treeListController.getActions ? this._treeListController.getActions(this) : []);
        });
    }
    get name() {
        return external_ko_["unwrap"](this.data && this.data.name);
    }
    get path() {
        return this.pathParts.join('.');
    }
    get pathParts() {
        if (this.name) {
            return (external_ko_["unwrap"](this._path) || []).concat([this.name]);
        }
        else {
            return external_ko_["unwrap"](this._path);
        }
    }
    get text() {
        return this.data && this.data.displayName;
    }
    get templateName() {
        return this._getTemplateName();
    }
    actionsTemplate() {
        return this.data && external_ko_["unwrap"](this.data['actionsTemplate']) || 'dx-treelist-item-actions-with-edit';
    }
    treeListEditAction() {
        return treeListEditAction;
    }
    get hasContent() {
        return this.data && this.data['contenttemplate'];
    }
    get actions() {
        return this._actions();
    }
    get isDraggable() {
        if (this.data && this.data['dragData']) {
            return !this.data['dragData'].noDragable;
        }
        if (this._treeListController.isDraggable) {
            return this._treeListController.isDraggable(this);
        }
        return false;
    }
    get treeListController() {
        return this._treeListController;
    }
    dispose() {
        super.dispose();
        this._actions([]);
        this.visibleItems && this.visibleItems.dispose();
        this._actionsSubscription && this._actionsSubscription.dispose();
        this.disposeObservableArray(this.items);
        this.resetObservableArray(this.items);
        this.parent = null;
    }
    get visible() {
        if (this.data && this._treeListController.itemsFilter && !this._treeListController.itemsFilter(this.data, this.path, this))
            return false;
        return this._isVisible();
    }
    setVisible(value) {
        this._isVisible(value);
        if (value && this.parent && !this.parent.visible)
            this.parent.setVisible(true);
    }
    getCssRules() {
        return {
            'dx-treelist-item-selected dxd-state-selected': this.isSelected() || this.isMultiSelected()
        };
    }
    mouseenter() {
        this.isHovered(true);
    }
    mouseleave() {
        this.isHovered(false);
    }
    selectedItems() {
        return this._treeListController.selectedItems && this._treeListController.selectedItems() || [];
    }
}
class _treelistItem_TreeListRootItemViewModel extends _treelistItem_TreeListItemViewModel {
    constructor(_options, path = [], onItemsVisibilityChanged = external_jQuery_["noop"], rtl = false) {
        super(_options, path, onItemsVisibilityChanged, rtl);
        this._options = _options;
        this._resolver = new _codeResolver_CodeResolver();
        this._selectedPathSubscription = null;
        this.resolver.done(() => {
            onItemsVisibilityChanged();
        });
        this._selectedPathSubscription = _options.selectedPath.subscribe((newPath) => {
            this._selectItem(!!this.path ? newPath.substr(this.path.length + 1) : newPath);
        });
        this._selectItem(!!this.path ? this.path + '.' + _options.selectedPath() : _options.selectedPath());
    }
    dispose() {
        super.dispose();
        this._resolver.clear();
        if (this._selectedPathSubscription) {
            this._selectedPathSubscription.dispose();
            this._selectedPathSubscription = null;
        }
    }
    walkOnTree(walkCallBack) {
        this._resolver.clear();
        this._visitNextNode(this, walkCallBack);
        if (this['_pageSize'] != -1)
            this._resolver.doneOnce(() => this.items.valueHasMutated());
        return { stop: () => this._resolver.clear() };
    }
    _visitNextNode(item, walkCallback = (_item) => { }) {
        if (item.data && !item.data.specifics)
            throw new Error('Specific should be set');
        if (item.level >= maxSearchLevel())
            return;
        var processItemsFunc = null;
        if (item.items().length > 0) {
            processItemsFunc = () => item.items().forEach(node => {
                walkCallback(node);
                this._visitNextNode(node, walkCallback);
            });
        }
        else if (!item.data || item.treeListController.hasItems(item.data)) {
            processItemsFunc = () => item._getItemsWithLock().done(result => {
                result.forEach((node) => {
                    walkCallback(node);
                    this._visitNextNode(node, walkCallback);
                });
            });
        }
        if (processItemsFunc)
            this._resolver.execute(processItemsFunc, 1);
    }
    _onItemsChanged() {
        if (this._options.expandRootItems)
            this.items().forEach(item => {
                item.collapsed(false);
            });
        super._onItemsChanged();
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/treelist/_treeListSearchViewModel.js






class _treeListSearchViewModel_TreeListSearchOptions {
    constructor() {
        this.globalMatch = true;
        this.canUseRegex = false;
        this.caseSensitive = false;
        this.searchMode = SearchMode.contains;
        this.searchTimeout = 500;
        this.searchExpr = 'displayName';
        this.searchBoxTemplate = 'dx-treelist-searchbox';
    }
}
class _treeListSearchViewModel_TreeListSearchViewModel extends utils["a" /* Disposable */] {
    constructor() {
        super();
        this._processedNodes = [];
        this._currentProcess = [];
        this.searchTimeout = 500;
        this._roots = [];
        this.searchPlaceholder = () => Object(_localization["n" /* searchPlaceholder */])();
        var _textToSearch = external_ko_["observable"]('');
        var timeout = null;
        this._disposables.push(this.value = external_ko_["computed"]({
            read: () => _textToSearch(),
            write: (newVal) => {
                clearTimeout(timeout);
                timeout = setTimeout(() => {
                    _textToSearch(newVal);
                }, this.searchTimeout);
            }
        }));
        this._disposables.push(this.value.subscribe((newValue) => this.valueChanged(newValue)));
    }
    static createController(element, controllers, modelType = _treeListSearchViewModel_TreeListSearchViewModel, templateName = 'dx-treelist-search-panel') {
        var model = new modelType();
        var $element = external_jQuery_["fn"].constructor(element);
        var subscriptions = [];
        controllers.forEach((controller) => {
            if (!controller)
                return;
            controller.root = controller.root || external_ko_["observable"]();
            subscriptions.push(controller.root.subscribe((newRoot) => {
                model.addController(newRoot);
                model.valueChanged('');
            }));
        });
        model._disposables.push({
            dispose: () => {
                controllers.forEach(controller => {
                    if (controller) {
                        controller.root(null);
                        delete controller.root;
                    }
                });
            }
        });
        var template = getTemplate(templateName);
        $element.addClass('dxrd-treelist-search-panel-container').addClass('dxd-border-primary');
        $element.children().remove();
        $element.append(template);
        external_ko_["cleanNode"]($element.children()[0]);
        external_ko_["applyBindings"](model, $element.children()[0]);
        var disposeCallback = () => {
            subscriptions.forEach(x => x.dispose());
            model && model.dispose();
            external_ko_["utils"].domNodeDisposal.removeDisposeCallback(element, disposeCallback);
        };
        external_ko_["utils"].domNodeDisposal.addDisposeCallback(element, disposeCallback);
    }
    dispose() {
        super.dispose();
        this.clearProcess();
    }
    clearProcess() {
        this._currentProcess.forEach(x => x.stop && x.stop());
        this._currentProcess = [];
        this._processedNodes = [];
    }
    valueChanged(newValue) {
        if (!newValue)
            this._processedNodes.forEach(x => x.setVisible(true));
        this.clearProcess();
        this._roots.forEach((root) => {
            root.treeListController.textToSearch(newValue);
            if (newValue) {
                this._currentProcess.push(root.walkOnTree((node) => {
                    var regexResult = findMatchesInString(node.data[root.treeListController.searchOptions.searchExpr], newValue, root.treeListController.searchOptions);
                    this._processedNodes.push(node);
                    node.setVisible(!!regexResult);
                    regexResult && this._collapseTreeBranch(node);
                }));
            }
            else {
                root.items.valueHasMutated();
            }
        });
    }
    _collapseTreeBranch(node) {
        if (node.parent) {
            if (node.parent.collapsed())
                node.parent.toggleCollapsed();
            this._collapseTreeBranch(node.parent);
        }
    }
    addController(root) {
        this._roots = this._roots.filter((a) => !a.isDisposing);
        root.treeListController.textToSearch = root.treeListController.textToSearch || external_ko_["observable"]('');
        if (this._roots.indexOf(root) === -1)
            this._roots.push(root);
        this.searchTimeout = Math.max.apply(Math, this._roots.map(x => x.treeListController.searchOptions.searchTimeout)) || 500;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/treelist/_binding.js








external_ko_["bindingHandlers"]['treelist'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var treeListViewModel = null;
        var childContext = null;
        var callback = null;
        var values = valueAccessor(), options = external_ko_["unwrap"](values), pathArray, updateScrollBar = () => {
            var options = external_ko_["unwrap"](values);
            var scrollViewElt = external_jQuery_["fn"].constructor(element).closest('.dx-scrollview').get(0);
            var scrollView = scrollViewElt && external_DevExpress_ui_dxScrollView_default.a.getInstance(scrollViewElt);
            scrollView && scrollView['update']();
            if (options.onItemsVisibilityChanged) {
                options.onItemsVisibilityChanged();
            }
        }, updateTreeList = (options) => {
            pathArray && pathArray.dispose();
            var treeListController = options.treeListController || new TreeListController();
            options.treeListController = treeListController;
            treeListController.dragDropHandler = treeListController.dragDropHandler || bindingContext.$root.fieldDragHandler;
            options.factory = options.factory || new DefaultTreeListItemFactory();
            options.itemsProvider = external_ko_["unwrap"](options.itemsProvider);
            options.pageSize = options.pageSize || -1;
            treeListViewModel && treeListViewModel.dispose();
            if (!options || !options.itemsProvider)
                return;
            if (!options.rtl) {
                options.rtl = external_jQuery_["fn"].constructor(element).closest('.dx-rtl').length > 0;
            }
            pathArray = external_ko_["computed"](() => {
                var result = external_ko_["unwrap"](options.path);
                if (!Array.isArray(result)) {
                    return !!result ? result.split('.') : [];
                }
                return result;
            });
            treeListViewModel = options.factory.createRootItem(options, pathArray, updateScrollBar, options.rtl);
            var treeListTemplate = options.templateHtml || getTemplate('dx-treelist');
            if (treeListController.root) {
                treeListController.searchEnabled = true;
                treeListController.searchOptions = treeListController.searchOptions || new _treeListSearchViewModel_TreeListSearchOptions();
                treeListController.root(treeListViewModel);
            }
            var $element = external_jQuery_["fn"].constructor(element).html(treeListTemplate);
            childContext = bindingContext.createChildContext(treeListViewModel);
            external_ko_["applyBindings"](childContext, $element.children()[0]);
            callback && external_ko_["utils"].domNodeDisposal.removeDisposeCallback(element, callback);
            callback = function () {
                treeListViewModel && treeListViewModel.dispose();
                treeListViewModel = null;
                subscription && subscription.dispose();
                pathArray && pathArray.dispose();
                callback = null;
                external_ko_["utils"].domNodeDisposal.removeDisposeCallback(element, callback);
            };
            external_ko_["utils"].domNodeDisposal.addDisposeCallback(element, callback);
        };
        updateTreeList(Object(_utils["b" /* extend */])({}, options));
        var subscription = null;
        if (external_ko_["isSubscribable"](values)) {
            subscription = values.subscribe((newValue) => {
                newValue && updateTreeList(Object(_utils["b" /* extend */])({}, newValue));
            });
        }
        else if (external_ko_["isSubscribable"](values.itemsProvider)) {
            subscription = values.itemsProvider.subscribe((newValue) => {
                newValue && updateTreeList(Object(_utils["b" /* extend */])({}, values));
            });
        }
        return { controlsDescendantBindings: true };
    }
};
external_ko_["bindingHandlers"]['treeListSearchPanel'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor();
        var template = external_ko_["unwrap"](values.template);
        var modelType = external_ko_["unwrap"](values.modelType);
        var controllers = external_ko_["unwrap"](values.controllers);
        if (!Array.isArray(controllers))
            controllers = [controllers];
        _treeListSearchViewModel_TreeListSearchViewModel.createController(element, controllers, modelType, template);
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/treelist/_reorderTreeListDragDropHelper.js




class _reorderTreeListDragDropHelper_ReorderTreeListDragDropHelper extends utils["a" /* Disposable */] {
    constructor(dragHelperContent) {
        super();
        this.dragHelperContent = dragHelperContent;
        this.droppableClassName = 'dxrd-treelist-droppable';
        this.approveClassName = 'dxrd-drop-approve';
        this.classDropBefore = 'drop-before';
        this.classDropAfter = 'drop-after';
        this.started = false;
    }
    _getElementViewModel(item) {
        return item && item.data && item.data['data'];
    }
    dispose() {
        super.dispose();
        this._targetElement = null;
        this._target = null;
        this._draggable = null;
    }
    isDragToBottom() {
        return find(this._draggable.parent.items(), item => item === this._draggable || item === this._target) === this._draggable;
    }
    start(draggable) {
        this.started = true;
        this._draggable = draggable;
        this._draggableModel = this._getElementViewModel(draggable);
    }
    canDrop() {
        return this._draggable !== this._target && this._draggable.parent === this._target.parent;
    }
    reorderSiblings(isDragToBottom = this.isDragToBottom()) {
        var siblings = this.getSiblings();
        if (siblings) {
            var _siblings = siblings.peek();
            var index = _siblings.indexOf(this._draggableModel);
            if (index > -1)
                _siblings.splice(index, 1);
            _siblings.splice(_siblings.indexOf(this._targetModel) + (isDragToBottom ? 1 : 0), 0, this._draggableModel);
            siblings.valueHasMutated();
        }
    }
    clearDroppableClasses() {
        this._removeClass(this._targetElement);
    }
    getDroppablePosition() {
        return this.isDragToBottom() ? this.classDropAfter : this.classDropBefore;
    }
    drag(elementModel, element) {
        this.clearDroppableClasses();
        this._target = elementModel;
        this._targetElement = external_jQuery_["fn"].constructor(element).closest('.dx-treelist-item').get(0);
        this._targetModel = this._getElementViewModel(this._target);
    }
    stop() {
        this.clearDroppableClasses();
        this.started = false;
    }
    helper(draggable, event) {
        var item = draggable;
        var target = external_jQuery_["fn"].constructor(event.target).closest('.ui-draggable');
        var rect = new rectangle_Rectangle(6, 6, null, target.height());
        rect.className = 'dxrd-image-ghost-report';
        this.dragHelperContent.reset();
        this.dragHelperContent.setContent(rect, {
            template: 'dxrd-drag-helper-source-reorder-treelist',
            data: {
                imageClassName: item.imageClassName,
                imageTemplateName: item.imageTemplateName,
                text: item.text
            }
        });
    }
    addDroppableClass() {
        var className = this.droppableClassName;
        if (this.canDrop()) {
            className = className + ' ' + this.approveClassName + ' ' + this.getDroppablePosition();
        }
        external_jQuery_["fn"].constructor(this._targetElement).addClass(className);
    }
    _removeClass(target) {
        external_jQuery_["fn"].constructor(target).removeClass(this.droppableClassName + ' ' + this.approveClassName + ' ' + this.classDropBefore + ' ' + this.classDropAfter);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-widgets-internal.js























































































// EXTERNAL MODULE: external "DevExpress.events"
var external_DevExpress_events_ = __webpack_require__(45);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/bindings.js










external_ko_["bindingHandlers"]['dxPropertyGrid'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        external_jQuery_["fn"].constructor(element).children().remove();
        var templateHtml = getTemplate('dx-propertieseditor'), $element = external_jQuery_["fn"].constructor(element).append(templateHtml);
        var value = valueAccessor();
        var model = new propertygrid_ObjectProperties(value.target, value.editorsInfo, value.level, value.parentDisabled, value.recreateEditors, value.textToSearch);
        external_ko_["applyBindings"](bindingContext.createChildContext(model), $element.children()[0]);
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            model.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
external_ko_["virtualElements"].allowedBindings['lazy'] = true;
external_ko_["bindingHandlers"]['lazy'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var parsedBindings = valueAccessor();
        var resolver = parsedBindings.resolver || globalResolver;
        var isResolved = parsedBindings.isResolved || external_ko_["observable"](false);
        if (parsedBindings.innerBindings) {
            parsedBindings = parsedBindings.innerBindings;
        }
        var isDisposed = false;
        var tasks = [];
        external_jQuery_["each"](parsedBindings, (innerBindingKey, innerBindingParameters) => {
            var innerBinding = external_ko_["bindingHandlers"][innerBindingKey];
            tasks.push(resolver.execute(() => {
                if (!isDisposed) {
                    var isInitialized = false;
                    external_ko_["computed"]({
                        read: () => {
                            if (!isInitialized && innerBinding.init) {
                                innerBinding.init(element, () => { return innerBindingParameters; }, allBindings, viewModel, bindingContext);
                                isInitialized = true;
                            }
                            if (innerBinding.update) {
                                innerBinding.update(element, () => { return innerBindingParameters; }, allBindings, viewModel, bindingContext);
                            }
                        },
                        disposeWhenNodeIsRemoved: element
                    });
                    isResolved(true);
                }
            }, 1));
        });
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            isDisposed = true;
            tasks.forEach(x => x.dispose());
            tasks = [];
        });
        return { controlsDescendantBindings: true };
    }
};
external_ko_["bindingHandlers"]['dxdAccordion'] = {
    init: function (element, valueAccessor) {
        var options = valueAccessor(), $element = external_jQuery_["fn"].constructor(element), $accordionContent = $element.find('.dx-accordion-content').first(), scrollUpdateCallback = () => {
            var $scroll = $element.parents('.dx-scrollview');
            if ($scroll.length > 0) {
                var scrollView = external_DevExpress_ui_dxScrollView_default.a.getInstance($scroll.get(0));
                scrollView && scrollView['update']();
            }
        };
        var accordionButton = $element
            .find('.dx-accordion-header,.dx-accordion-button').get(0);
        external_DevExpress_events_["off"](accordionButton, 'dxclick');
        external_DevExpress_events_["on"](accordionButton, 'dxclick', function () {
            options.collapsed(external_ko_["unwrap"](options.alwaysShow) ? false : !options.collapsed());
            $element.addClass('dx-transition-style');
            if (options.collapsed())
                $element.addClass('dx-accordion-collapsed');
            setTimeout(() => {
                $element.removeClass('dx-accordion-collapsed');
                if (!options.collapsed())
                    $element.removeClass('dx-transition-style');
            }, 500);
        });
        options.collapsed() ? $accordionContent.hide() : $accordionContent.show();
        var subscription = options.collapsed.subscribe((newVal) => {
            $accordionContent.slideToggle(options.timeout, () => scrollUpdateCallback());
        });
        Object(_internal["c" /* addDisposeCallback */])(element, () => subscription.dispose());
    }
};
external_ko_["bindingHandlers"]['dxdAccordionExt'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var options = valueAccessor(), $element = external_jQuery_["fn"].constructor(element), scrollUpdateCallback = () => {
            var $scroll = $element.parents('.dx-scrollview');
            if ($scroll.length > 0) {
                var scrollView = external_DevExpress_ui_dxScrollView_default.a.getInstance($scroll.get(0));
                scrollView && scrollView['update']();
            }
        }, $accordionContent = $element.find('.dx-accordion-content').first(), accordionContentHTML = null;
        if (options.collapsed() && options.lazyContentRendering === true) {
            accordionContentHTML = $accordionContent.html();
            $accordionContent.empty();
        }
        options.collapsed.subscribe((newVal) => {
            if (newVal) {
                $accordionContent.slideUp(options.timeout, () => {
                    scrollUpdateCallback();
                });
            }
            else {
                if (accordionContentHTML) {
                    $accordionContent.html(accordionContentHTML);
                    external_ko_["applyBindingsToDescendants"](bindingContext, $accordionContent.get(0));
                    accordionContentHTML = null;
                }
                $accordionContent.slideDown(options.timeout, () => {
                    scrollUpdateCallback();
                });
            }
        });
        options.collapsed() ? $accordionContent.hide() : $accordionContent.show();
    }
};
external_ko_["bindingHandlers"]['dxLocalizedSelectBox'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var options = valueAccessor();
        var prevDisplayExpr = options.displayExpr;
        options['placeholder'] = options['placeholder'] || Object(_localization["o" /* selectPlaceholder */])();
        options['noDataText'] = options['noDataText'] || Object(_localization["j" /* noDataText */])();
        options['encodeNoDataText'] = true;
        options.displayExpr = function (value) {
            if (!value)
                return value;
            if (!prevDisplayExpr)
                return Object(localization_utils["c" /* getLocalization */])(value, value.localizationId);
            return Object(localization_utils["c" /* getLocalization */])(external_jQuery_["isFunction"](prevDisplayExpr) ? prevDisplayExpr(value) : value[prevDisplayExpr], value.localizationId);
        };
        options.itemTemplate = function (itemData, itemIndex, itemElement) {
            var context = bindingContext.createChildContext({
                display: options.displayExpr(itemData)
            });
            external_jQuery_["fn"].constructor(itemElement).children().remove();
            var templateHtml = getTemplate('item-with-title'), $element = external_jQuery_["fn"].constructor(itemElement).append(templateHtml);
            external_ko_["applyBindingsToDescendants"](context, $element[0]);
            return itemElement;
        };
        var extendedOptions = viewModel.getOptions ? viewModel.getOptions(options) : options;
        external_ko_["bindingHandlers"]['dxSelectBox'].init(element, () => { return extendedOptions; }, allBindings, viewModel, bindingContext);
        return { controlsDescendantBindings: true };
    }
};
external_ko_["bindingHandlers"]['styleunit'] = {
    'update': function (element, valueAccessor) {
        var value = external_ko_["utils"].unwrapObservable(valueAccessor() || {});
        external_jQuery_["each"](value, (styleName, styleValue) => {
            styleValue = external_ko_["utils"].unwrapObservable(styleValue) || 0;
            element.style[styleName] = styleValue + 'px';
        });
    }
};
external_ko_["bindingHandlers"]['service'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = external_ko_["unwrap"](valueAccessor() || {}), findService = (serviceName) => {
            var context = bindingContext.$parents.filter((item) => { return item[serviceName] !== undefined; })[0];
            if (context) {
                return context[serviceName];
            }
            return null;
        }, service = findService(value.name), entity = service && service(viewModel);
        if (entity) {
            var childContext = bindingContext.createChildContext(entity.data);
            external_ko_["renderTemplate"](entity.templateName, childContext, {}, element, 'replaceNode');
        }
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/guideditor.js


class guideditor_GuidEditor extends editor_Editor {
    _getEditorValidationRules() {
        return (super._getEditorValidationRules() || []).concat(internal_internal["c" /* guidValidationRules */]).concat((this.editorOptions && this.editorOptions.isNullable) ? [] : internal_internal["b" /* guidRequiredValidationRules */]);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/fonteditor/metadata.js



var fontName = {
    propertyName: 'family', displayName: 'Font Name', localizationId: 'AnalyticsCoreStringId.FormatFontName',
    editor: editorTemplates.getEditor('combobox'), values: availableFonts
};
var fontSize = {
    propertyName: 'size', displayName: 'Size', localizationId: 'AnalyticsCoreStringId.Font.Size', editor: editorTemplates.getEditor('numeric')
};
var fontSizeUnit = {
    propertyName: 'unit', displayName: 'Unit', localizationId: 'AnalyticsCoreStringId.Font.Unit', editor: editorTemplates.getEditor('combobox'),
    valuesArray: availableUnits
};
var fontInfo = [
    fontName,
    fontSize,
    fontSizeUnit,
    { propertyName: 'modificators', editor: editorTemplates.getEditor('modificators') },
];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/fonteditor/editor.js




class editor_FontEditor extends propertygrid_PropertyGridEditor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
    }
    createObjectProperties() {
        var model = new _model_FontModel(this.value);
        this._disposables.push(model);
        return new propertygrid_ObjectProperties(external_ko_["observable"](model), { editors: fontInfo }, this.level + 1, this.disabled, undefined, this.textToSearch);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/bindings.js



external_ko_["bindingHandlers"]['focus'] = {
    init: function (element, valueAccessor) {
        var visible = valueAccessor().on || valueAccessor();
        var subscription = visible.subscribe((newVal) => {
            if (newVal) {
                setTimeout(() => {
                    external_jQuery_["fn"].constructor(element).find(':input').focus();
                }, 1);
            }
        });
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            subscription.dispose();
        });
    }
};
external_ko_["bindingHandlers"]['svgAttrs'] = {
    update: function (element, valueAccessor, allBindingsAccessor, viewModel) {
        element.setAttribute('xmlns', 'http://www.w3.org/2000/svg');
        element.setAttribute('xmlns:xlink', 'http://www.w3.org/1999/xlink');
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/expressioneditor.js














function getNotValidRange(value, errorMessage) {
    var start = 0;
    var end = 0;
    var parts = errorMessage.split('\n');
    var errorText = parts[1];
    var errorLength = parts[2].length;
    if (errorText.indexOf('...') === 0) {
        errorText = errorText.split('...')[1];
    }
    var start = value.indexOf(errorText);
    var end = start + errorLength;
    return { start: start, end: end };
}
function createExpressionEditorFieldListProvider(originalProvider, fieldName) {
    return external_ko_["computed"](() => {
        var provider = external_ko_["unwrap"](originalProvider);
        var unwrappedFieldName = external_ko_["unwrap"](fieldName);
        return !unwrappedFieldName ? provider : {
            getItems: (path) => {
                var $deferred = external_jQuery_["Deferred"]();
                provider.getItems(path)
                    .done((data) => {
                    $deferred.resolve(data.filter(field => field.name !== unwrappedFieldName));
                })
                    .fail(() => $deferred.reject());
                return $deferred.promise();
            },
            getValues: (path) => {
                return provider.getValues(path);
            }
        };
    });
}
class expressioneditor_ExpressionEditor extends utils["a" /* Disposable */] {
    constructor(options, fieldListProvider, disabled = external_ko_["observable"](false), rtl = false, _displayNameProvider, popupVisible = external_ko_["observable"](false)) {
        super();
        this.options = options;
        this._displayNameProvider = _displayNameProvider;
        this.popupVisible = popupVisible;
        this._updateTextAreaValue = (item, element) => {
            var textArea = this._getTextArea(element), textAreaValue = this.textAreaValue().toString(), cursorPosition = textArea && textArea.selectionStart || textAreaValue.length, newAddedText = textAreaValue[cursorPosition - 1] == ' ' ? (item.val || item.text || item) + ' ' : ' ' + (item.val || item.text || item) + ' ';
            this.textAreaValue([textAreaValue.slice(0, cursorPosition), newAddedText, textAreaValue.slice(cursorPosition)].join(''));
            if (textArea && textArea.setSelectionRange) {
                textArea.focus();
                var posisition = cursorPosition + (newAddedText.indexOf('(') !== -1 ? newAddedText.indexOf('(') + 1 : newAddedText.length);
                textArea.setSelectionRange(posisition, posisition);
            }
        };
        this._updateAceValue = (item, element) => {
            var editor = this.editorContainer(), { row, column: col } = editor.getCursorPosition(), insertion = (item.val || item.text || item) + ' ';
            if (col && editor.getSession().getValue().split('\n')[row][col - 1] !== ' ')
                insertion = ' ' + insertion;
            editor.insert(insertion);
            editor.focus();
            setCursorInFunctionParameter(item.paramCount, editor, insertion);
        };
        this._updateValue = (item, element) => {
            this.aceAvailable ? this._updateAceValue(item, external_jQuery_["fn"].constructor(element)) : this._updateTextAreaValue(item, external_jQuery_["fn"].constructor(element));
        };
        this.patchFieldName = (fieldName) => fieldName;
        this._parametersPutSelectionHandler = (selectedItemPath, element) => {
            var pathParts = selectedItemPath.split('.');
            var newAddedString = '?' + this.patchFieldName(pathParts[pathParts.length - 1]);
            this._updateValue(newAddedString, element);
        };
        this._fieldsPutSelectionHandler = (selectedItemPath, element) => {
            var path = this.koOptions.peek().path.peek();
            var proposedFieldName = selectedItemPath.substring(path.length + 1);
            var newAddedString = '[' + this.patchFieldName(proposedFieldName) + ']';
            if (this._displayNameProvider) {
                this.displayExpressionConverter.toDisplayExpression(path, newAddedString)
                    .done((result) => { this._updateValue(result, element); })
                    .fail(() => { this._updateValue(newAddedString, element); });
            }
            else {
                this._updateValue(newAddedString, element);
            }
        };
        this.aceAvailable = aceAvailable();
        this.title = () => Object(localization_utils["c" /* getLocalization */])('Expression Editor', 'AnalyticsCoreStringId.ExpressionEditor_ExpressionCaption');
        this.value = external_ko_["observable"]('');
        this.textAreaValue = external_ko_["observable"]('');
        this.languageHelper = {
            getLanguageMode: () => 'ace/mode/criteria',
            createCompleters: (editor, bindingContext, viewModel) => {
                var path = external_ko_["computed"](() => { return viewModel.koOptions() && external_ko_["unwrap"](viewModel.koOptions().path) || ''; }), functions = external_ko_["computed"](() => { return viewModel.koOptions() && external_ko_["unwrap"](viewModel.koOptions().functions) || []; }), completor = new _codeCompletor_CodeCompletor({
                    editor,
                    bindingContext,
                    fieldListProvider: viewModel.fieldListProvider,
                    path,
                    functions,
                    rootItems: viewModel.options.rootItems,
                    getRealExpression: (path, member) => {
                        return this.displayExpressionConverter && this.displayExpressionConverter.toRealExpression(path, member) || external_jQuery_["Deferred"]().resolve(member).promise();
                    }
                });
                [path, functions].forEach(x => completor._disposables.push(x));
                return [completor];
            }
        };
        this.aceOptions = {
            showLineNumbers: false,
            showPrintMargin: false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            showFoldWidgets: false,
            highlightActiveLine: false
        };
        this.additionalOptions = {
            onChange: (session) => {
                var value = session.getValue();
                try {
                    var operator = criteriaOperatorStateMachine_CriteriaOperatorStateMachine.parse(value);
                    if (this.koOptions().validate) {
                        this.isValid(this.koOptions().validate(operator));
                    }
                    session.clearAnnotations();
                }
                catch (exception) {
                    var row = exception.hash && exception.hash.line || 0;
                    var column = 0;
                    var lines = exception.message.split('\n');
                    var text = lines[1] + '\n' + lines[2];
                    session.setAnnotations([{ row, column, text, 'type': 'error' }]);
                }
            }
        };
        this.callbacks = {
            focus: external_jQuery_["noop"]
        };
        this.koOptions = external_ko_["observable"](null);
        this.editorContainer = external_ko_["observable"]();
        this.isValid = external_ko_["observable"](true);
        this.buttonItems = [];
        this.rtl = false;
        this.modelValueValid = external_ko_["computed"](() => {
            var options = this.koOptions();
            return options && external_ko_["isObservable"](options.isValid) ? options.isValid() : true;
        });
        this.modelValueWarning = external_ko_["computed"](() => {
            var options = this.koOptions();
            return options && external_ko_["unwrap"](options.warningMessage) || '';
        });
        this.getPopupContainer = getParentContainer;
        this.koOptions(options);
        this.patchFieldName = (fieldName) => {
            return this.koOptions().patchFieldName && this.koOptions().patchFieldName(fieldName) || fieldName;
        };
        this.theme = this.koOptions() && this.koOptions().theme;
        this._disposables.push(this.value = external_ko_["computed"]({
            read: () => {
                var value = this.koOptions() && external_ko_["unwrap"](this.koOptions().value);
                return (value && value.toString()) || '';
            },
            write: (newVal) => this.koOptions() && this.koOptions().value(newVal)
        }));
        if (_displayNameProvider && options.path) {
            this.displayExpressionConverter = new _displayNameProvider_DisplayExpressionConverter(_displayNameProvider);
            var pathFunc = external_ko_["pureComputed"](() => this.koOptions() && this.koOptions().path && this.koOptions().path());
            this.displayValue = wrapExpressionValue(pathFunc, this.value, this.displayExpressionConverter, this._disposables);
            this._disposables.push(pathFunc);
        }
        else {
            this.displayValue = this.value;
        }
        this.rtl = rtl;
        this.validate = (value, sender) => {
            try {
                criteriaOperatorStateMachine_CriteriaOperatorStateMachine.parse(value);
                this.isValid(true);
                return true;
            }
            catch (exception) {
                var result = getNotValidRange(value, exception.message);
                var textArea = this._getTextArea(sender && sender.element);
                textArea && textArea.setSelectionRange(result.start, result.end);
                this.isValid(false);
            }
        };
        this._disposables.push(this.popupVisible.subscribe((newVal) => {
            if (!newVal) {
                this.editorContainer(null);
                return;
            }
            this.initDisplayValue();
        }));
        var fieldName = external_ko_["computed"](() => { return this.koOptions() && this.koOptions().fieldName && this.koOptions().fieldName(); });
        this._disposables.push(this.fieldListProvider = createExpressionEditorFieldListProvider(fieldListProvider, fieldName));
        this.disabled = disabled;
        var self = this;
        this.save = (sender) => {
            var value = this.getValue();
            if (this.validate(value, sender)) {
                this.displayValue(value);
                this.popupVisible(false);
            }
        };
        var selectedItem = null;
        var selectionHandler = (item) => {
            var selectedItemType = external_ko_["unwrap"](item.data['type']);
            if (selectedItem)
                selectedItem.isSelected(false);
            selectedItem = item;
            item.isSelected(true);
        };
        var fieldsTreeListOptions = external_ko_["pureComputed"](() => {
            return this.koOptions() && this.koOptions().path && this.koOptions().path() && this._createToolsOptions(this.koOptions().path(), this.fieldListProvider(), new _treeListControllers_ExpressionEditorTreeListController(fieldName, (data, element) => { this._fieldsPutSelectionHandler(data.path, element); }, selectionHandler));
        });
        this.parametersTreeListController = new _treeListControllers_ExpressionEditorParametersTreeListController(this._parametersCustomFilter, this._parametersPutSelectionHandler, selectionHandler);
        var parametersTreeListOptions = external_ko_["pureComputed"](() => {
            return this._createToolsOptions('', this.fieldListProvider(), this.parametersTreeListController);
        });
        this._disposables.push(this.tools = new _tools_Tools(this._updateValue, parametersTreeListOptions, this.koOptions, fieldsTreeListOptions));
        this._disposables.push(this.modelValueValid, this.modelValueWarning);
        this._createMainPopupButtons();
        [fieldName, fieldsTreeListOptions, parametersTreeListOptions].forEach(x => this._disposables.push(x));
        this.resizeHelper = new _resizeHelper_ResizeHelper();
    }
    dispose() {
        super.dispose();
        this.koOptions(null);
        this.editorContainer(null);
        this.options = null;
    }
    _createMainPopupButtons() {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: Object(localization_utils["c" /* getLocalization */])('OK', StringId.DataAccessBtnOK), type: 'default', stylingMode: 'contained', onClick: function (sender) { self.save(sender); } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: Object(localization_utils["c" /* getLocalization */])('Cancel', StringId.DataAccessBtnCancel), type: 'normal', stylingMode: 'contained', onClick: function () { self.popupVisible(false); } } }
        ];
    }
    _getTextArea(element) {
        var $el = external_jQuery_["fn"].constructor(element);
        return ($el && $el.parents('.dx-expressioneditor').find(':input')[0]);
    }
    _createToolsOptions(path, fieldListProvider, treeListController) {
        return {
            itemsProvider: fieldListProvider,
            selectedPath: external_ko_["observable"](''),
            path: external_ko_["observable"](path),
            templateName: 'dx-ee-treelist-item',
            treeListController: treeListController,
            rtl: this.rtl
        };
    }
    _parametersCustomFilter(item) {
        return item.specifics === 'parameters' || item.specifics === RangeSpecific || !_utils_isList(item);
    }
    onShown() {
        this.callbacks.focus();
    }
    onHiding(e) {
        var options = this.koOptions();
        return options && options.onHiding && options.onHiding(e);
    }
    onShowing(e) {
        var options = this.koOptions();
        return options && options.onShowing && options.onShowing(e);
    }
    onContentReady(e) {
        var options = this.koOptions();
        return options && options.onContentReady && options.onContentReady(e);
    }
    initDisplayValue() {
        this.tools.resetCategoriesSelection && this.tools.resetCategoriesSelection();
        this.textAreaValue(this.displayValue());
        if (!this.aceAvailable) {
            this.validate(this.value());
        }
        else {
            var editor = this.editorContainer();
            var session = editor && editor.getSession();
            session && session.setValue(this.textAreaValue());
        }
    }
    getValue() {
        var value = this.textAreaValue();
        if (this.aceAvailable) {
            var editor = this.editorContainer();
            var session = editor && editor.getSession();
            value = session && session.getValue();
        }
        return value;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/expressioneditor/bindings.js




external_ko_["bindingHandlers"]['dxExpressionEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var $element = external_jQuery_["fn"].constructor(element);
        $element.children().remove();
        var values = valueAccessor();
        external_jQuery_["fn"].constructor(element).addClass(values.wrapper ? 'dx-expressioneditor-content' : 'dx-popup-general');
        var templateName = values.editorTemplateName || 'dx-expressioneditor';
        var optionSubscription = null;
        var editor = new expressioneditor_ExpressionEditor(external_ko_["unwrap"](values.options), values.fieldListProvider, viewModel.disabled, external_jQuery_["fn"].constructor(element).closest('.dx-rtl').length > 0, values.displayNameProvider, values.popupVisible);
        if (external_ko_["isSubscribable"](values.options)) {
            optionSubscription = values.options.subscribe(newOptions => {
                newOptions && editor.koOptions(newOptions);
            });
        }
        values.wrapper && values.wrapper.editor(editor);
        var childContext = bindingContext.createChildContext(editor);
        var child = document.createElement('div'), $element = $element.append(child);
        external_ko_["renderTemplate"](templateName, childContext, {}, child, 'replaceNode');
        var callback = () => {
            editor.dispose();
            editor = null;
            values.wrapper && values.wrapper.editor(null);
            optionSubscription && optionSubscription.dispose();
        };
        Object(_internal["c" /* addDisposeCallback */])(element, callback);
        return { controlsDescendantBindings: true };
    }
};

// EXTERNAL MODULE: external "DevExpress.ui.dxTextArea"
var external_DevExpress_ui_dxTextArea_ = __webpack_require__(54);
var external_DevExpress_ui_dxTextArea_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxTextArea_);

// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/criteriaOperatorPreprocessor.js
var criteriaOperatorPreprocessor = __webpack_require__(4);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/filtereditor.js


















class filtereditor_FilterEditor extends _popupEditorBase_PopupEditorBase {
    constructor(options, fieldListProvider, rtl = false, _displayNameProvider) {
        super();
        this.options = options;
        this._displayNameProvider = _displayNameProvider;
        this._advancedMode = external_ko_["observable"](false);
        this.textFocused = external_ko_["observable"](false);
        this.aceAvailable = aceAvailable();
        this.languageHelper = {
            getLanguageMode: () => 'ace/mode/criteria',
            createCompleters: (editor, bindingContext, viewModel) => {
                var path = external_ko_["computed"](() => { return this.path && this.path(); }), completor = new _codeCompletor_FilterEditorCodeCompletor({
                    editor,
                    bindingContext,
                    fieldListProvider: viewModel.fieldListProvider(),
                    path,
                    getRealExpression: (path, expression) => {
                        return this.displayExpressionConverter && this.displayExpressionConverter.toRealExpression(path, expression) || external_jQuery_["Deferred"]().resolve(expression).promise();
                    }
                });
                completor._disposables.push(path);
                return [completor];
            }
        };
        this.aceOptions = {
            showLineNumbers: false,
            showPrintMargin: false,
            enableBasicAutocompletion: true,
            enableLiveAutocompletion: true,
            showGutter: false
        };
        this.additionalOptions = {
            onChange: session => this.onValueChange(session.getValue()),
            changeTimeout: 200,
            onFocus: _ => this.onFocus(),
            onBlur: _ => this.onBlur()
        };
        this.editorContainer = external_ko_["observable"]();
        this.textVisible = external_ko_["observable"](false);
        this.getPopupContainer = (el) => {
            return getParentContainer(el, this.options()['popupContainer']);
        };
        this.timeout = null;
        this.animationTimeout = null;
        this.advancedMode = external_ko_["computed"]({
            read: () => {
                return this._advancedMode();
            },
            write: (newVal) => {
                this.timeout && clearTimeout(this.timeout);
                this.animationTimeout && clearTimeout(this.animationTimeout);
                if (newVal) {
                    this.textVisible(true);
                    this.timeout = setTimeout(() => {
                        this._advancedMode(true);
                        this.focusText();
                    }, 1);
                    this.animationTimeout = setTimeout(() => {
                        this.editorContainer() && this.editorContainer().resize && this.editorContainer().resize();
                    }, 210);
                }
                else {
                    this._advancedMode(false);
                    this.timeout = setTimeout(() => {
                        this.textVisible(false);
                    }, 200);
                }
            },
        });
        this.invalidMessage = () => Object(localization_utils["c" /* getLocalization */])('Cannot create a tree for this expression', 'AnalyticsCoreStringId.FilterEditor_TreeCreationError');
        this.advancedModeText = external_ko_["observable"](Object(localization_utils["c" /* getLocalization */])('Advanced Mode', 'AnalyticsCoreStringId.FilterEditor_AdvancedMode'));
        this.operandSurface = external_ko_["observable"](null);
        this.operand = null;
        this.popupService = new _popupService_PopupService();
        this.rtl = rtl;
        options() && options().helper && (options().helper.rtl = rtl);
        this._disposables.push(this.disabled = external_ko_["computed"](() => {
            return external_ko_["unwrap"](this.options() && this.options().disabled());
        }));
        this.value = external_ko_["observable"]('');
        this.displayExpressionConverter = _displayNameProvider && new _displayNameProvider_DisplayExpressionConverter(_displayNameProvider);
        this.save = () => {
            this.helper.onSave(this.value());
            if (this.operandSurface() && this.isSurfaceValid()) {
                var value = options().helper.serializer.serialize(this.operand, false);
                this.options().value(value);
            }
            else {
                this.options().value(this.value());
            }
            this.popupVisible(false);
        };
        this.displayValue = wrapExpressionValue(this.path, this.value, this.displayExpressionConverter, this._disposables);
        var modelValue = external_ko_["computed"]({
            read: () => {
                var options = this.options();
                return options && options.value();
            },
            write: (newVal) => {
                var options = this.options();
                options && options.value(newVal);
            }
        });
        this.modelDisplayValue = wrapExpressionValue(this.path, modelValue, this.displayExpressionConverter, this._disposables);
        this.fieldListProvider = fieldListProvider;
        this.modelValueIsValid = external_ko_["computed"](() => {
            return options() && this._validateValue(options().value());
        });
        this.isValid = external_ko_["computed"](() => {
            return this._validateValue(this.value());
        });
        this.isSurfaceValid = external_ko_["computed"](() => {
            try {
                return this.options() && this.isValid() && this.options().helper.criteriaTreeValidator.validateModel(this.options().helper.serializer.deserialize(this.value()));
            }
            catch (e) {
                return false;
            }
        });
        this._disposables.push(modelValue);
        this._disposables.push(this.modelValueIsValid);
        this._disposables.push(this.isValid);
        this._disposables.push(this.isSurfaceValid);
        this._disposables.push(this.popupVisible.subscribe((newVal) => {
            if (newVal) {
                this.value(this.options().value());
                if (this.isSurfaceValid()) {
                    this.operand = this._generateOperand(this.value());
                    this.operandSurface(this._generateSurface(this.operand));
                }
                else {
                    this.textVisible(true);
                    this._advancedMode(true);
                    this.editorContainer() && this.focusText();
                }
                options().helper.onChange = () => {
                    this.value(options().helper.serializer.serialize(this.operand, false));
                };
            }
            else {
                this.helper.onClosing();
                this.value(null);
                this.operandSurface() && this.operandSurface().dispose();
                this.operandSurface(null);
                this.operand = null;
            }
        }));
        this.createAddButton = (criteria) => { return options().helper.handlers.create(criteria, this.popupService); };
        this.createChangeType = (criteria) => { return options().helper.handlers.change(criteria, this.popupService); };
        this.createChangeProperty = (criteria) => { return options().helper.handlers.changeProperty(criteria, this.popupService); };
        this.createChangeParameter = (criteria) => { return options().helper.handlers.changeParameter(criteria, this.popupService); };
        this.createChangeValueType = (criteria) => { return options().helper.handlers.changeValueType(criteria, this.popupService); };
        this._disposables.push(this.advancedMode);
        this.buttonItems.push({ toolbar: 'bottom', location: 'before', widget: 'dxCheckBox', options: { value: this.advancedMode, text: this.advancedModeText() } });
    }
    _generateOperand(value) {
        return this.options().helper.serializer.deserialize(value);
    }
    _generateSurface(operand) {
        var type = null;
        if (operand instanceof unary["a" /* UnaryOperator */]) {
            type = this.options().helper.mapper.unary;
        }
        else {
            type = this.options().helper.mapper.group;
        }
        var surface = new type(operand, this, this.fieldListProvider, this.path);
        if (surface instanceof unaryOperandSurface_UnaryOperandSurface) {
            if (!(surface.model.operand instanceof group["GroupOperator"])) {
                this.operand = new group["GroupOperator"](options_group["GroupOperatorType"].And, [this.operand]);
                surface.dispose();
                return this._generateSurface(this.operand);
            }
            surface.operand().canRemove = false;
        }
        surface.canRemove = false;
        return surface;
    }
    _validateValue(value) {
        try {
            if (this.options() && this.options().helper) {
                this.options().helper.serializer.deserialize(value);
                return true;
            }
            else {
                return false;
            }
        }
        catch (e) {
            return false;
        }
    }
    canSave() {
        return this.isValid();
    }
    change(type, surface) {
        this.operand = criteriaOperatorPreprocessor["criteriaCreator"].changeByType(type);
        this.operand.assignFrom(surface.model);
        var type = null;
        if (this.operand instanceof unary["a" /* UnaryOperator */]) {
            type = this.options().helper.mapper.unary;
        }
        else {
            type = this.options().helper.mapper.group;
        }
        var surface = new type(this.operand, this, this.fieldListProvider, this.path);
        surface.canRemove = false;
        if (surface instanceof unaryOperandSurface_UnaryOperandSurface) {
            surface.operand().canRemove = false;
        }
        this.operandSurface(surface);
    }
    get helper() {
        return this.options() && this.options().helper;
    }
    get path() {
        return this.options() && this.options().path;
    }
    dispose() {
        super.dispose();
        this.editorContainer(null);
        this.operandSurface() && this.operandSurface().dispose();
    }
    onInput(s, e) {
        var self = this;
        this.timeout && clearTimeout(this.timeout);
        this.timeout = setTimeout(() => {
            self.onValueChange(s.component.option('text'));
        }, 200);
    }
    onFocus() {
        this.textFocused(true);
    }
    onBlur() {
        this.textFocused(false);
        this.helper.onEditorFocusOut(this.operand);
    }
    cacheElement($element) {
        this.editorContainer(external_DevExpress_ui_dxTextArea_default.a.getInstance($element.get(0)));
    }
    updateCriteria() {
        if (this.isSurfaceValid()) {
            this.operand = this._generateOperand(this.value());
            this.operandSurface() && this.operandSurface().dispose();
            this.operandSurface(this._generateSurface(this.operand));
        }
    }
    onValueChange(value) {
        if (this.displayValue() === value.trim())
            return;
        this.displayValue(value);
        if (this.displayExpressionConverter) {
            this.displayExpressionConverter.toRealExpression(this.path(), value).done((result) => {
                this.value(result);
                this.updateCriteria();
            }).fail(() => {
                this.value(value);
                this.updateCriteria();
            });
        }
        else {
            this.updateCriteria();
        }
    }
    focusText() {
        var focusFn = (editor) => {
            setTimeout(_ => {
                if (editor.renderer)
                    editor.renderer.updateText();
                editor.focus();
            }, 1);
        };
        if (!this.editorContainer())
            var subscription = this.editorContainer.subscribe((editor) => {
                subscription.dispose();
                focusFn(editor);
            });
        else
            focusFn(this.editorContainer());
    }
    get cancelLocalization() {
        return Object(localization_utils["c" /* getLocalization */])('Cancel', 'StringId.Cancel');
    }
    get saveLocalization() {
        return Object(localization_utils["c" /* getLocalization */])('OK', 'StringId.OK');
    }
}
external_ko_["bindingHandlers"]['dxFilterEditor'] = {
    init: function (element, valueAccessor) {
        external_jQuery_["fn"].constructor(element).children().remove();
        external_jQuery_["fn"].constructor(element).addClass('dx-popup-general');
        var templateHtml = getTemplate('dx-filtereditor'), $element = external_jQuery_["fn"].constructor(element).append(templateHtml), values = valueAccessor();
        var itemsProvider = external_ko_["observable"](external_ko_["unwrap"](values.fieldListProvider));
        var computedFunctions = [];
        computedFunctions.push(external_ko_["computed"](() => {
            if (values.options() && values.options().itemsProvider) {
                itemsProvider(external_ko_["unwrap"](values.options().itemsProvider));
            }
            else {
                itemsProvider(external_ko_["unwrap"](values.fieldListProvider));
            }
        }));
        computedFunctions.push(external_ko_["computed"](() => {
            if (values.getDisplayNameByPath && values.options() && values.options().helper && !values.options().helper.getDisplayPropertyName) {
                values.options().helper.getDisplayPropertyName = values.getDisplayNameByPath;
            }
        }));
        var editor = new filtereditor_FilterEditor(values.options, itemsProvider, external_jQuery_["fn"].constructor(element).closest('.dx-rtl').length > 0, values.displayNameProvider);
        external_ko_["applyBindingsToDescendants"](editor, $element.children()[0]);
        Object(_internal["c" /* addDisposeCallback */])($element.children()[0], () => {
            computedFunctions.forEach(x => x.dispose());
            editor.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};
class filtereditor_FilterEditorPlain extends filtereditor_FilterEditor {
    constructor(element, options, fieldListProvider, rtl = false, _displayNameProvider) {
        super(options, fieldListProvider, rtl, _displayNameProvider);
        this.element = element;
        this._contentMargins = 20;
        this._topOffset = 30;
        this._defaultActiveTextContentHeightPerc = 25;
        this._defaultActiveTreeContentHeightPerc = 75;
        this._currentActiveTextContentHeightPerc = this._defaultActiveTextContentHeightPerc;
        this._currentActiveTreeContentHeightPerc = this._defaultActiveTreeContentHeightPerc;
        this.plainContentHeightPerc = external_ko_["observable"]('100%');
        this.textContentHeightPerc = external_ko_["observable"](null);
        this.treeContentHeightPerc = external_ko_["observable"](null);
        var $element = external_jQuery_["fn"].constructor(element);
        var updateHeight = () => {
            var currentHeight = $element.height();
            this.plainContentHeightPerc((1 - this._topOffset / currentHeight) * 100 + '%');
            var diffPerc = (this._contentMargins / (currentHeight - this._topOffset)) * 100 / 2;
            this._currentActiveTextContentHeightPerc = this._defaultActiveTextContentHeightPerc - diffPerc;
            this._currentActiveTreeContentHeightPerc = this._defaultActiveTreeContentHeightPerc - diffPerc;
            if (this.advancedMode()) {
                this.treeContentHeightPerc(this._currentActiveTreeContentHeightPerc);
                this.textContentHeightPerc(this._currentActiveTextContentHeightPerc);
            }
        };
        updateHeight();
        this._disposables.push(this.advancedMode.subscribe((newVal) => {
            if (newVal) {
                this.treeContentHeightPerc(this._currentActiveTreeContentHeightPerc + '%');
                this.textContentHeightPerc(this._currentActiveTextContentHeightPerc + '%');
            }
            else {
                this.treeContentHeightPerc(null);
                this.textContentHeightPerc(null);
            }
        }));
        window.addEventListener('resize', updateHeight);
        Object(_internal["c" /* addDisposeCallback */])(element, () => {
            window.removeEventListener('resize', updateHeight);
            this.dispose();
        });
    }
}
external_ko_["components"].register('dx-filtereditor-plain', {
    viewModel: {
        createViewModel: (params, componentInfo) => {
            var viewModel = new filtereditor_FilterEditorPlain(componentInfo.element, params.options, external_ko_["observable"](params.fieldListProvider), undefined, params.displayNameProvider);
            viewModel.popupVisible(true);
            params.options().value.subscribe(() => {
                viewModel.popupVisible(false);
                viewModel.popupVisible(true);
            });
            return viewModel;
        }
    },
    template: getTemplate('dx-filtereditor-plain')
});
external_ko_["components"].register('dx-filtereditor-advanced', {
    viewModel: {
        createViewModel: (params, componentInfo) => {
            var viewModel = new filtereditor_FilterEditor(params.options, external_ko_["observable"](params.fieldListProvider), undefined, params.displayNameProvider);
            viewModel.advancedMode(true);
            viewModel.popupVisible(true);
            params.options().value.subscribe(() => {
                viewModel.popupVisible(false);
                viewModel.popupVisible(true);
            });
            return viewModel;
        }
    },
    template: getTemplate('dx-filtereditor-advanced')
});
external_ko_["bindingHandlers"]['cacheElement'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var value = valueAccessor();
        value.action(external_jQuery_["fn"].constructor(element));
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/filtereditor/filtereditoroptions.js



class filtereditoroptions_FilterStringOptions {
    constructor(filterString, dataMember, disabled, title) {
        this.popupContainer = '.dx-designer-viewport';
        this.itemsProvider = null;
        this.resetValue = () => {
            this.value('');
        };
        this.title = external_ko_["pureComputed"]({
            read: () => {
                var title = this._title();
                return Object(localization_utils["c" /* getLocalization */])(title.text, title.localizationId);
            },
            write: (value) => {
                this._title({ text: value });
            }
        });
        this.value = filterString;
        this.path = dataMember || external_ko_["observable"]('');
        this.disabled = disabled || external_ko_["observable"](false);
        var filterEditorHelperType = DefaultFilterEditorHelper();
        this.helper = new filterEditorHelperType();
        this._title = external_ko_["observable"](title || { text: Object(localization_utils["c" /* getLocalization */])('Filter Editor', 'DataAccessUIStringId.FiltersView') });
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/formatstring/formatstringeditor.js








class formatstringeditor_FormatStringEditor extends utils["a" /* Disposable */] {
    constructor(value, disabled, defaultPatterns, customPatterns, actions, rtl, popupContainer) {
        super();
        this._isDisabled = external_ko_["observable"](false);
        this._timeout = null;
        this.currentType = external_ko_["observable"]();
        this.patternList = external_ko_["observableArray"]([]);
        this.canAddCustomFormat = external_ko_["observable"](false);
        this.formatPrefix = external_ko_["observable"]('');
        this.formatSuffix = external_ko_["observable"]('');
        this.previewString = external_ko_["observable"]('Preview string');
        this.formatResult = external_ko_["observable"]('');
        this.selectedFormats = external_ko_["observable"]([]);
        this.selectedTypes = external_ko_["observable"]([]);
        this.popupVisible = external_ko_["observable"](false);
        this.localizationIdMap = {
            'title': { text: 'FormatString Editor', localizationId: 'AnalyticsCoreStringId.FormatStringEditor_Title' },
            'category': { text: 'Category', localizationId: 'AnalyticsCoreStringId.Category' },
            'preview': { text: 'Preview', localizationId: 'AnalyticsCoreStringId.TooltipButtons_Preview' },
            'types': { text: 'Types', localizationId: 'AnalyticsCoreStringId.FormatStringEditor_Types' },
            'add': { text: 'Add', localizationId: 'DataAccessUIStringId.Button_Add' },
            'prefix': { text: 'Prefix', localizationId: 'AnalyticsCoreStringId.Prefix' },
            'suffix': { text: 'Suffix', localizationId: 'AnalyticsCoreStringId.FormatStringEditor_Suffix' }
        };
        this.option('value', value);
        this.option('disabled', disabled || false);
        this.option('rtl', rtl || false);
        this.option('popupContainer', popupContainer || '.dx-designer-viewport');
        var self = this;
        this.popupService = new _popupService_PopupService();
        this._standardPatternSource = defaultPatterns || formatStringStandardPatterns;
        this._customPatternSource = customPatterns || {};
        this.types = this._convertArray(Object.keys(this._standardPatternSource));
        this._disposables.push(this.currentType.subscribe((newVal) => {
            if (self.isGeneralType) {
                self.formatResult('');
                self.selectedFormats([]);
            }
            else {
                self._updateFormatList();
            }
        }));
        this.currentType(this.types[0].name);
        this._disposables.push(this.formatResult.subscribe((newVal) => {
            self._updateCanAddCustomFormat(newVal);
            self._updatePreview();
        }));
        this._disposables.push(this.formatPrefix.subscribe((newVal) => {
            self._updatePreview();
        }));
        this._disposables.push(this.formatSuffix.subscribe((newVal) => {
            self._updatePreview();
        }));
        this._disposables.push(this.popupVisible.subscribe((newVal) => {
            if (!newVal)
                return;
            self._initEditor(value());
            self.selectedTypes(self.types.filter((item) => { return item.name === self.currentType(); }));
        }));
        this._createMainPopupButtons();
        actions && actions.updatePreview && (this.updatePreview = actions.updatePreview);
        this.setType = (e) => {
            self.currentType(e.itemData.name);
            self._updateSelection();
        };
        this.setFormat = (e) => {
            self.formatResult(e.itemData.name);
        };
        this.addCustomFormat = () => {
            if (self.formatResult() && self.canAddCustomFormat()) {
                self.customPatterns.push(self.formatResult());
                self._updateFormatList();
                self._scrollToBottom();
                actions && actions.saveCustomPattern(self.currentType(), self.formatResult());
                self._updateSelection(self.patternList().length - 1);
                self.canAddCustomFormat(false);
            }
        };
        this.removeCustomFormat = (data) => {
            var currentSelection = self.selectedFormats()[0];
            var patternList = self.patternList();
            var removedItemIndex = patternList.map((item) => { return item.name; }).indexOf(data.name);
            self.customPatterns.splice(self.customPatterns.indexOf(data.name), 1);
            self._updateFormatList();
            actions && actions.removeCustomPattern(self.currentType(), data.name);
            if (currentSelection.name === data.name) {
                self._updateSelection(removedItemIndex === (patternList.length - 1) ? (self.patternList().length - 1) : removedItemIndex);
            }
            else {
                self.selectedFormats(self.patternList().filter((item) => { return item.name === currentSelection.name; }));
            }
        };
    }
    okAction() {
        var result = this.isGeneralType ? this._getGeneralPreview('{0}') : this._wrapFormat();
        this.option('value', result);
        this.popupVisible(false);
    }
    _createMainPopupButtons() {
        var self = this;
        this.buttonItems = [
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: Object(localization_utils["c" /* getLocalization */])('OK', StringId.DataAccessBtnOK), type: 'default', stylingMode: 'contained', disabled: this._isDisabled, onClick: function () { self.okAction(); } } },
            { toolbar: 'bottom', location: 'after', widget: 'dxButton', options: { text: Object(localization_utils["c" /* getLocalization */])('Cancel', StringId.DataAccessBtnCancel), type: 'normal', stylingMode: 'contained', onClick: function () { self.popupVisible(false); } } }
        ];
    }
    _convertArray(array, canRemove) {
        return array.map(item => { return { name: item, displayName: Object(localization_utils["c" /* getLocalization */])(item), canRemove: !!canRemove }; });
    }
    _scrollToBottom() {
        var $scrollView = external_jQuery_["fn"].constructor('.dx-format-string .dx-format-string-formats').find('.dx-scrollview').filter(':visible');
        var scrollViewInstance = external_DevExpress_ui_dxScrollView_default.a.getInstance($scrollView.get(0));
        scrollViewInstance && scrollViewInstance['scrollTo'] && scrollViewInstance['scrollTo'](scrollViewInstance['scrollHeight']());
    }
    _updateFormatList() {
        this.selectedFormats([]);
        var currentTypeInfo = this._standardPatternSource[this.currentType()];
        this.patternList(this._convertArray(currentTypeInfo.patterns).concat(this._convertArray(this.customPatterns, true)));
    }
    _updateSelection(selectedItemIndex) {
        var currectFormat = this.patternList()[selectedItemIndex || 0];
        if (currectFormat) {
            this.selectedFormats([currectFormat]);
            this.formatResult(currectFormat.name);
        }
    }
    _setPreviewString(previewString) {
        this.previewString(previewString);
        this._isDisabled(false);
    }
    _setErrorMessage(setDisabled) {
        this.previewString(Object(localization_utils["c" /* getLocalization */])('Preview string is not available', 'AnalyticsCoreStringId.FormatStringEditor_PreviewNotAvailable_Text'));
        this._isDisabled(setDisabled);
    }
    _updatePreview() {
        this._timeout && clearTimeout(this._timeout);
        this._timeout = setTimeout(() => {
            if (this.isGeneralType) {
                this.previewString(this._getGeneralPreview(undefined));
                return;
            }
            var category = this._standardPatternSource[this.currentType()];
            var updatedPreviewPromise = this.updatePreview(category.value, category.type, this._wrapFormat());
            this._lastUpdatePreviewPromise = updatedPreviewPromise;
            updatedPreviewPromise
                .done((previewResult) => {
                if (this._lastUpdatePreviewPromise === updatedPreviewPromise) {
                    if (previewResult.Result)
                        this._setPreviewString(previewResult.Result);
                    else
                        this._setErrorMessage(previewResult.IsError);
                }
            }).fail((error) => {
                if (this._lastUpdatePreviewPromise === updatedPreviewPromise)
                    this.previewString(Object(localization_utils["c" /* getLocalization */])('Preview string is not available', 'AnalyticsCoreStringId.FormatStringEditor_PreviewNotAvailable_Text'));
            });
        }, 100);
    }
    _getGeneralPreview(value = '###') {
        return this.formatPrefix() + value + this.formatSuffix();
    }
    _wrapFormat(format) {
        var pattern = format || this.formatResult();
        if (pattern && pattern.indexOf('{0:') !== -1) {
            return pattern;
        }
        return pattern ? '{0:' + pattern + '}' : '';
    }
    _updateCanAddCustomFormat(newFormat) {
        if (!newFormat) {
            this.canAddCustomFormat(false);
            return;
        }
        var canAddCustomFormat = true;
        Object.keys(this._standardPatternSource).some((name) => {
            canAddCustomFormat = this._standardPatternSource[name].patterns.indexOf(newFormat) === -1;
            return !canAddCustomFormat;
        });
        this.canAddCustomFormat(canAddCustomFormat ? this.customPatterns.indexOf(newFormat) === -1 : canAddCustomFormat);
    }
    _initEditor(formatStringValue) {
        if (!formatStringValue) {
            this.setType({ itemData: this.types[0] });
            return;
        }
        if (formatStringValue.indexOf('{0}') !== -1) {
            this.currentType('General');
            this.formatPrefix(formatStringValue.substring(0, formatStringValue.indexOf('{0}')));
            this.formatSuffix(formatStringValue.substring(formatStringValue.indexOf('{0}') + 3));
            return;
        }
        var startIndex = formatStringValue.indexOf('{0:'), closingBracketIndex = formatStringValue.indexOf('}', startIndex), formatPattern = formatStringValue.substring(startIndex + 3, closingBracketIndex), isFormatPatternFind;
        var selectTypePatternPair = (name) => {
            this.currentType(name);
            if (startIndex === 0 && closingBracketIndex === (formatStringValue.length - 1)) {
                this.selectedFormats(this.patternList().filter((item) => { return item.name === formatPattern; }));
                this.formatResult(formatPattern);
                isFormatPatternFind = true;
            }
        };
        Object.keys(this._standardPatternSource).some((name) => {
            if (this._standardPatternSource[name].patterns.indexOf(formatPattern) !== -1) {
                selectTypePatternPair(name);
                return true;
            }
            var customPatterns = this._customPatternSource[this._standardPatternSource[name].type];
            if (customPatterns && customPatterns.indexOf(formatPattern) !== -1) {
                selectTypePatternPair(name);
                return true;
            }
            return false;
        });
        if (!isFormatPatternFind) {
            this.currentType(this.types[0].name);
            this.selectedFormats([]);
            this.formatResult(formatStringValue);
        }
    }
    updateInputText(propertyName, componentInstance) {
        this[propertyName](componentInstance.option('text'));
    }
    option(name, value) {
        if (value !== void 0) {
            if (external_ko_["isObservable"](this[name])) {
                this[name](value);
            }
            else {
                this[name] = value;
            }
        }
        return external_ko_["unwrap"](this[name]);
    }
    updatePreview(value, category, pattern) {
        return external_jQuery_["Deferred"]().resolve({ Result: value || 'preview string' }).promise();
    }
    get customPatterns() {
        var currentTypeInfo = this._standardPatternSource[this.currentType()];
        return this._customPatternSource[currentTypeInfo.type] = this._customPatternSource[currentTypeInfo.type] || [];
    }
    get isGeneralType() {
        return this.currentType() === 'General';
    }
    getDisplayText(key) {
        return Object(localization_utils["c" /* getLocalization */])(this.localizationIdMap[key].text, this.localizationIdMap[key].localizationId);
    }
    getPopupContainer(el) {
        return external_jQuery_["fn"].constructor(el).closest(this.option('popupContainer'));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/formatstring/binding.js





external_ko_["bindingHandlers"]['dxFormatEditor'] = {
    init: function (element, valueAccessor) {
        external_jQuery_["fn"].constructor(element).children().remove();
        external_jQuery_["fn"].constructor(element).addClass('dx-popup-general');
        var templateHtml = getTemplate('dx-format-string'), $element = external_jQuery_["fn"].constructor(element).append(templateHtml), values = valueAccessor();
        var formatEditor = new formatstringeditor_FormatStringEditor(values.value, values['disabled'], values['standardPatterns'], values['customPatterns'], values['actions'], values['rtl'], values['popupContainer']);
        external_ko_["applyBindings"](formatEditor, $element.children()[0]);
        Object(_internal["c" /* addDisposeCallback */])(element, function () {
            formatEditor.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/colorPickerEditor.js


class colorPickerEditor_ColorPickerEditor extends editor_Editor {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this._disposables.push(this.displayValue = external_ko_["pureComputed"]({
            read: () => {
                var value = external_ko_["unwrap"](this.value);
                if (!value)
                    return undefined;
                if (value && value.toLowerCase() === 'transparent') {
                    return 'rgba(0,0,0,0)';
                }
                if ((/^rgba\s*\((\s*[a-f\d]+\s*,){3}\s*[a-f\d]+\s*\)$/i).test(value))
                    return value;
                var div = document.createElement('div');
                div.style.backgroundColor = value;
                return div.style.backgroundColor || 'rgba(0,0,0,1)';
            },
            write: (val) => {
                this.value(val);
            }
        }));
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/fieldListEditor.js



class fieldListEditor_FieldListEditor extends editor_Editor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this.path = external_ko_["pureComputed"](() => {
            return this._model() && this._model()['getPath'] && this._model()['getPath'](this.name) || '';
        });
        this.treeListController = new TreeListController();
        this._disposables.push(this.path);
        this._disposables.push(this.treeListController);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/dataMemberEditor.js


class dataMemberEditor_DataMemberEditor extends fieldListEditor_FieldListEditor {
    constructor(modelPropertyInfo, level, parentDisabled, textToSearch) {
        super(modelPropertyInfo, level, parentDisabled, textToSearch);
        this.treeListController = new DataMemberTreeListController();
        this._disposables.push(this.treeListController);
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/widgets/registerDesignerEditors.js







function registerDesignerEditors() {
    editorTemplates.registerEditors({
        guid: { header: 'dxrd-guid', editorType: guideditor_GuidEditor },
        date: { header: 'dx-date', editorType: _requiredNullableEditor_RequiredNullableEditor },
        borders: { header: 'dxrd-borders' },
        textAlignment: { header: 'dxrd-textalignment' },
        objecteditorCustom: { custom: 'dxrd-objectEditorContent', editorType: propertygrid_PropertyGridEditor },
        field: { header: 'dxrd-field', editorType: fieldListEditor_FieldListEditor },
        dataMember: { header: 'dxrd-field', editorType: dataMemberEditor_DataMemberEditor },
        filterEditor: { header: 'dxrd-filterstring' },
        formatEditor: { header: 'dxrd-formatstring' },
        expressionEditor: { header: 'dxrd-expressionstring' },
        customColorEditor: { header: 'dxrd-colorpicker', editorType: colorPickerEditor_ColorPickerEditor },
        sbyte: createNumericEditor('System.SByte', 'integer'),
        decimal: createNumericEditor('System.Decimal', 'float'),
        int64: createNumericEditor('System.Int64', 'integer'),
        int32: createNumericEditor('System.Int32', 'integer'),
        int16: createNumericEditor('System.Int16', 'integer'),
        single: createNumericEditor('System.Single', 'float'),
        double: createNumericEditor('System.Double', 'float'),
        byte: createNumericEditor('System.Byte', 'integer'),
        uint16: createNumericEditor('System.UInt16', 'integer'),
        uint32: createNumericEditor('System.UInt32', 'integer'),
        uint64: createNumericEditor('System.UInt64', 'integer')
    });
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/widgets/registerBaseEdtior.js



function registerBaseEditors() {
    editorTemplates.registerEditors({
        'bool': { header: 'dx-boolean' },
        'boolSelect': { header: 'dx-boolean-select' },
        'numeric': { header: 'dx-numeric' },
        'modificators': { custom: 'dx-modificators' },
        'combobox': { header: 'dx-combobox' },
        'comboboxEditable': { header: 'dx-combobox-editable' },
        'text': { header: 'dx-text' },
        'image': { header: 'dx-image' },
        'file': { header: 'dx-file' },
        'commonCollection': { custom: 'dx-commonCollection' },
        'stringArray': { header: 'dx-emptyHeader', content: 'dx-string-array' },
        'font': { header: 'dx-emptyHeader', content: 'dx-objectEditorContent', editorType: editor_FontEditor },
        'objecteditor': { header: 'dx-emptyHeader', content: 'dx-objectEditorContent', editorType: propertygrid_PropertyGridEditor },
        'inplaceObjectEditor': { custom: 'dx-objectEditorContent', editorType: PropertyGridEditorFlat }
    });
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-widgets.js





















registerBaseEditors();
registerDesignerEditors();




















// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-widgets-metadata.js



// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-widgets-filtering.js

























// EXTERNAL MODULE: ./node_modules/@devexpress/analytics-core/analytics-criteria.js
var analytics_criteria = __webpack_require__(55);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/criteriaChangeOperator.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/criteriaProcessType.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/propertyLocation.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/criteria/utils/criteriaOperatorVisitor.js


// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-criteria-utils.js

















// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-widgets-treeList.js



// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/baseSurface.js








class baseSurface_SurfaceElementArea extends utils["a" /* Disposable */] {
    constructor(control, context, unitProperties) {
        super();
        this._createSurface = (item) => {
            return item['surface'] || new (item.getControlFactory()).controlsMap[item.controlType].surfaceType(item, this._context);
        };
        this.preInitProperties(control, context, unitProperties);
        this._control = control;
        this._context = context;
        control['surface'] = this;
        if (this._context) {
            createUnitProperties(control, this, unitProperties, this._context.measureUnit, this._context.zoom, (property) => { this._disposables.push(property); });
        }
        this._x = this._x || external_ko_["observable"](0);
        this._y = this._y || external_ko_["observable"](0);
        this._width = this._width || external_ko_["observable"](0);
        this._height = this._height || external_ko_["observable"](0);
        var container = external_ko_["pureComputed"](() => this.container());
        this._disposables.push(container);
        this._container = container();
        this._disposables.push(container.subscribe((value) => {
            if (this._container !== value && this.rtlLayout()) {
                var x = this._getX();
                this._container = value;
                this._setX(x);
            }
            else {
                this._container = value;
            }
        }));
        var x = external_ko_["computed"]({
            read: () => this._getX(),
            write: (value) => {
                this._setX(value);
            }
        }), y = this._y, width = this._width, height = this._height;
        this['position'] = {
            top: y,
            left: x,
            width: width,
            height: height,
            lineHeight: height
        };
        this._disposables.push(x);
        var _rect = external_ko_["observable"]();
        this._disposables.push(external_ko_["computed"](() => {
            if (!this._control.update()) {
                _rect({ top: y(), left: x(), right: x() + width(), bottom: y() + height(), width: width(), height: height() });
            }
        }));
        this._disposables.push(this.rect = external_ko_["pureComputed"]({
            read: () => {
                return _rect();
            },
            write: (newRect) => {
                newRect = this.beforeRectUpdated(newRect);
                this._control.update(true);
                try {
                    if (newRect.left !== undefined) {
                        this._setX(newRect.left, newRect.width);
                    }
                    else if (newRect.width !== undefined) {
                        this._setX(x(), newRect.width);
                    }
                    if (newRect.top !== undefined) {
                        y(newRect.top);
                    }
                    if (newRect.right !== undefined && newRect.left === undefined && newRect.width === undefined) {
                        width(newRect.right - x());
                    }
                    if (newRect.bottom !== undefined && newRect.top === undefined) {
                        height(newRect.bottom - y());
                    }
                    if (newRect.right !== undefined && newRect.left !== undefined && newRect.width === undefined) {
                        width(newRect.right - newRect.left);
                    }
                    if (newRect.bottom !== undefined && newRect.top !== undefined) {
                        height(newRect.bottom - newRect.top);
                    }
                    if (newRect.width !== undefined) {
                        width(newRect.width);
                    }
                    if (newRect.height !== undefined) {
                        height(newRect.height);
                    }
                }
                finally {
                    this._control.update(false);
                }
            }
        }));
    }
    _getX() {
        if (this.rtlLayout() && this._container) {
            return this._container.rect().width - this._x() - this._width();
        }
        else {
            return this._x();
        }
    }
    _setX(value, width) {
        width = width || this._width();
        if (this.rtlLayout() && this._container) {
            this._x(this._container.rect().width - value - width);
        }
        else {
            this._x(value);
        }
    }
    getRoot() {
        return this._context;
    }
    preInitProperties(control, context, unitProperties) { }
    container() {
        return this['parent'];
    }
    beforeRectUpdated(rect) {
        rect.left = rect.left < 0 ? 0 : rect.left;
        rect.top = rect.top < 0 ? 0 : rect.top;
        return rect;
    }
    rtlLayout() {
        return !!external_ko_["unwrap"](this._context.rtl);
    }
    getControlModel() {
        return this._control;
    }
}
class baseSurface_SurfaceElementBase extends baseSurface_SurfaceElementArea {
    constructor(control, context, unitProperties) {
        super(control, context, unitProperties);
        this._countSelectedChildren = external_ko_["observable"](0);
        this.focused = external_ko_["observable"](false);
        this.selected = external_ko_["observable"](false);
        this.underCursor = external_ko_["observable"](new HoverInfo());
        this.allowMultiselect = true;
        this.absolutePosition = new point_Point(0, 0);
        this.getControlModel = () => {
            return control;
        };
        this.cssCalculator = new _cssCalculator_CssCalculator(control, context.rtl);
        if (this._getChildrenHolderName() && control[this._getChildrenHolderName()]) {
            var collection = external_ko_["observableArray"]();
            if (this._getChildrenHolderName() === 'controls') {
                this._disposables.push(createObservableReverseArrayMapCollection(control[this._getChildrenHolderName()], collection, this._createSurface));
            }
            else {
                this._disposables.push(createObservableArrayMapCollection(control[this._getChildrenHolderName()], collection, this._createSurface));
            }
            this[this._getChildrenHolderName()] = collection;
            this._disposables.push(this.isSelected = external_ko_["pureComputed"](() => {
                if (!(this.focused() || this.selected())) {
                    return collection().some((item) => {
                        return item.isSelected();
                    });
                }
                return true;
            }));
        }
        else {
            this._disposables.push(this.isSelected = external_ko_["pureComputed"](() => {
                return this.focused() || this.selected();
            }));
        }
        this._disposables.push(this.css = external_ko_["pureComputed"](() => {
            return Object(_utils["b" /* extend */])({}, this.cssCalculator.fontCss(), this.cssCalculator.foreColorCss(), this.cssCalculator.backGroundCss(), this.cssCalculator.textAlignmentCss());
        }));
        this._disposables.push(this.contentCss = external_ko_["pureComputed"](() => {
            return Object(_utils["b" /* extend */])({}, this.cssCalculator.fontCss(), this.cssCalculator.foreColorCss(), this.cssCalculator.textAlignmentCss(), this.cssCalculator.angle(), this.cssCalculator.wordWrapCss(), this.cssCalculator.paddingsCss());
        }));
        this._disposables.push(external_ko_["computed"](() => {
            this.updateAbsolutePosition();
        }));
        this._disposables.push(this.absoluteRect = external_ko_["pureComputed"](() => {
            var controlRect = this.rect(), absolutePositionY = this.absolutePosition.y(), absolutePositionX = this.absolutePosition.x();
            return { top: absolutePositionY, left: absolutePositionX, right: absolutePositionX + controlRect.width, bottom: absolutePositionY + controlRect.height, width: controlRect.width, height: controlRect.height };
        }));
        this.locked = control['lockedInUserDesigner'] ? control['lockedInUserDesigner']() : false;
    }
    _getParent() {
        return this.getControlModel().parentModel() && this.getControlModel().parentModel().surface;
    }
    get parent() {
        return this._getParent();
    }
    checkParent(surfaceParent) {
        return this.parent === surfaceParent;
    }
    _getChildrenHolderName() { return 'controls'; }
    getChildrenCollection() {
        return this._getChildrenHolderName() && this[this._getChildrenHolderName()] || external_ko_["observableArray"]([]);
    }
    updateAbsolutePosition() {
        if (this.parent && this.parent.absolutePosition) {
            var parentX = this.parent.absolutePosition.x(), parentY = this.parent.absolutePosition.y(), newX = parentX + this.rect().left, newY = parentY + this.rect().top;
            this.absolutePosition.x(newX);
            this.absolutePosition.y(newY);
        }
        else {
            this.absolutePosition.x(0);
            this.absolutePosition.y(0);
        }
        this.afterUpdateAbsolutePosition();
    }
    canDrop() { return !this.locked && this._control.getMetaData().isContainer; }
    afterUpdateAbsolutePosition() {
    }
    findNextSelection() {
        var parentSurface = this.parent;
        var targetSurface = parentSurface;
        if (parentSurface) {
            var childrenCollection = parentSurface.getChildrenCollection()();
            var indexInCollection = childrenCollection.indexOf(this);
            if (indexInCollection === -1 && childrenCollection.length > 0) {
                targetSurface = childrenCollection[childrenCollection.length - 1];
            }
            else if (childrenCollection.length > 1 && indexInCollection === childrenCollection.length - 1) {
                targetSurface = childrenCollection[indexInCollection - 1];
            }
            else if (childrenCollection.length > 1 && indexInCollection === 0) {
                targetSurface = childrenCollection[childrenCollection.length - 1];
            }
            else if (childrenCollection.length > 1) {
                targetSurface = childrenCollection[childrenCollection.length - 1];
            }
            else if (indexInCollection === -1 && targetSurface.parent && targetSurface.parent.getChildrenCollection()().indexOf(targetSurface) === -1) {
                targetSurface = targetSurface.findNextSelection();
            }
        }
        return targetSurface;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/margins.js


class margins_Margins {
    constructor(left, right, top, bottom) {
        this.bottom = external_ko_["observable"](bottom);
        this.left = external_ko_["observable"](left);
        this.right = external_ko_["observable"](right);
        this.top = external_ko_["observable"](top);
    }
    getInfo() {
        return paddingSerializationsInfo;
    }
    isEmpty() {
        return this.toString() === margins_Margins.defaultVal;
    }
    static fromString(value = margins_Margins.defaultVal) {
        var components = value.split(',');
        return new margins_Margins(parseFloat(components[0]), parseFloat(components[1]), parseFloat(components[2]), parseFloat(components[3]));
    }
    toString() {
        var result = this.left() + ', ' + this.right() + ', ' + this.top() + ', ' + this.bottom();
        return result;
    }
}
margins_Margins.defaultVal = '100, 100, 100, 100';
margins_Margins.unitProperties = ['left', 'right'];

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/core/elements/serializableModel.js


class serializableModel_SerializableModel extends utils["a" /* Disposable */] {
    preInitProperties(model, serializer, info) { }
    constructor(model, serializer, info) {
        super();
        this.preInitProperties(model, serializer, info);
        if (info) {
            this.getInfo = () => {
                return info;
            };
        }
        serializer = serializer || new serializer_ModelSerializer();
        serializer.deserialize(this, model, info);
    }
    getInfo() {
        return null;
    }
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-elements.js

















// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-elements-metadata.js



// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-tools.js



// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/property-grid/localization/localization.js

function loadMessages(messages) { Object(_localization["f" /* loadMessages */])(messages); }

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-localization.js



// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/ace/_ace-mode-doc-comment.js
function defineAceDocComments(ace) {
    ace.define('ace/mode/doc_comment_highlight_rules', ['require', 'exports', 'module', 'ace/lib/oop', 'ace/mode/text_highlight_rules'], function (require, exports, module) {
        'use strict';
        var oop = ace.require('ace/lib/oop');
        var TextHighlightRules = ace.require('ace/mode/text_highlight_rules').TextHighlightRules;
        var DocCommentHighlightRules = function () {
            this.$rules = {
                'start': [{
                        token: 'comment.doc.tag',
                        regex: '@[\\w\\d_]+'
                    },
                    DocCommentHighlightRules['getTagRule'](),
                    {
                        defaultToken: 'comment.doc',
                        caseInsensitive: true
                    }]
            };
        };
        oop.inherits(DocCommentHighlightRules, TextHighlightRules);
        DocCommentHighlightRules['getTagRule'] = function (start) {
            return {
                token: 'comment.doc.tag.storage.type',
                regex: '\\b(?:TODO|FIXME|XXX|HACK)\\b'
            };
        };
        DocCommentHighlightRules['getStartRule'] = function (start) {
            return {
                token: 'comment.doc',
                regex: '\\/\\*(?=\\*)',
                next: start
            };
        };
        DocCommentHighlightRules['getEndRule'] = function (start) {
            return {
                token: 'comment.doc',
                regex: '\\*\\/',
                next: start
            };
        };
        exports.DocCommentHighlightRules = DocCommentHighlightRules;
    });
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/ace/_ace-mode-criteria.js
function defineAceCriteria(ace) {
    ace.define('ace/mode/criteria', ['require', 'exports', 'module', 'ace/lib/oop', 'ace/mode/text'], function (require, exports, module) {
        'use strict';
        var oop = ace.require('ace/lib/oop');
        var TextMode = ace.require('ace/mode/text').Mode;
        var CriteriaHighlightRules = ace.require('ace/mode/criteria_highlight_rules').CriteriaHighlightRules;
        var Mode = function () {
            this.HighlightRules = CriteriaHighlightRules;
        };
        oop.inherits(Mode, TextMode);
        exports.Mode = Mode;
    });
    ace.define('ace/mode/criteria_highlight_rules', ['require', 'exports', 'module', 'ace/lib/oop', 'ace/mode/text_highlight_rules'], function (require, exports, module) {
        'use strict';
        var oop = ace.require('ace/lib/oop');
        var TextHighlightRules = ace.require('ace/mode/text_highlight_rules').TextHighlightRules;
        var DocCommentHighlightRules = ace.require('ace/mode/doc_comment_highlight_rules').DocCommentHighlightRules;
        var CriteriaHighlightRules = function () {
            this.$rules = {
                'start': [
                    {
                        token: 'comment',
                        start: '/\\*',
                        end: '\\*/'
                    },
                    {
                        token: 'constant.other',
                        regex: /(?:#(?:[^\\\#]|(?:\\.))*#?)|(?:\{[-0-9A-Fa-f]*\}?)/
                    },
                    {
                        token: 'string.quoted.single',
                        regex: /N?'(?:\\.|[^'\\])*'?/,
                    },
                    {
                        token: 'constant.numeric',
                        regex: /[+\-]?\.?\d[\d.]*/i
                    },
                    {
                        token: 'support.other.aggregate',
                        regex: /\.([a-zA-Z_]\w*)?/
                    },
                    {
                        token: 'keyword.operator',
                        regex: /[+\-*/%|&^<>]|==|!=|<=|>=|In|Like|Between|And|Or|Not/i
                    },
                    {
                        token: 'constant.language',
                        regex: /True|False/i
                    },
                    {
                        token: 'support.context.start',
                        regex: /\[(?:[^\]\)])*\]\[/
                    },
                    {
                        token: 'support.variable.other',
                        regex: /\[(?:[^\]\,])*\]?/
                    },
                    {
                        token: 'support.variable.parameter',
                        regex: /\?\w+/
                    },
                    {
                        token: 'support.context.end',
                        regex: /\]/
                    },
                    {
                        token: 'support.function',
                        regex: /[_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376-\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E46\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC][\d_\u0041-\u005A\u0061-\u007A\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376-\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06E5-\u06E6\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4-\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E46\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A-\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AD\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]*/
                    }
                ],
                comment: [
                    {
                        token: 'comment',
                        regex: '\\*\\/',
                        next: 'no_regex'
                    },
                    {
                        defaultToken: 'comment'
                    }
                ]
            };
            this.embedRules(DocCommentHighlightRules, 'doc-', [DocCommentHighlightRules.getEndRule('start')]);
            this.normalizeRules();
        };
        oop.inherits(CriteriaHighlightRules, TextHighlightRules);
        exports.CriteriaHighlightRules = CriteriaHighlightRules;
    });
}

// EXTERNAL MODULE: external "''"
var external_ = __webpack_require__(56);
var external_default = /*#__PURE__*/__webpack_require__.n(external_);

// EXTERNAL MODULE: external "\"/mode-json\""
var mode_json_ = __webpack_require__(57);
var mode_json_default = /*#__PURE__*/__webpack_require__.n(mode_json_);

// EXTERNAL MODULE: external "\"/mode-sql\""
var mode_sql_ = __webpack_require__(58);
var mode_sql_default = /*#__PURE__*/__webpack_require__.n(mode_sql_);

// EXTERNAL MODULE: external "\"/mode-text\""
var mode_text_ = __webpack_require__(59);
var mode_text_default = /*#__PURE__*/__webpack_require__.n(mode_text_);

// EXTERNAL MODULE: external "\"/theme-ambiance\""
var theme_ambiance_ = __webpack_require__(60);
var theme_ambiance_default = /*#__PURE__*/__webpack_require__.n(theme_ambiance_);

// EXTERNAL MODULE: external "\"/theme-dreamweaver\""
var theme_dreamweaver_ = __webpack_require__(61);
var theme_dreamweaver_default = /*#__PURE__*/__webpack_require__.n(theme_dreamweaver_);

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/widgets/ace/_binding.js














var aceDefined = false;
function defineAce(ace) {
    if (!aceDefined) {
        defineAceDocComments(ace);
        defineAceCriteria(ace);
        if (!window['ace'] && aceAvailable()) {
            ace.config.setModuleUrl('ace/ext/language_tools', external_default.a);
            ace.config.setModuleUrl('ace/mode/sql', mode_sql_default.a);
            ace.config.setModuleUrl('ace/mode/text', mode_text_default.a);
            ace.config.setModuleUrl('ace/mode/json', mode_json_default.a);
            ace.config.setModuleUrl('ace/theme/ambiance', theme_ambiance_default.a);
            ace.config.setModuleUrl('ace/theme/dreamweaver', theme_dreamweaver_default.a);
        }
    }
    aceDefined = true;
}
external_ko_["bindingHandlers"]['dxAceEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var _ace = external_window_ace_default.a || window['ace'];
        defineAce(_ace);
        var values = valueAccessor(), text = values.value, editorContainer = values.editorContainer, editor, shouldProcessOnChangeEvent = true, _setEditorText = (editorInstance, text) => {
            shouldProcessOnChangeEvent = false;
            editorInstance.getSession().setValue((text && text.toString()) || '');
            editorInstance.clearSelection();
            editorInstance.getSession().getUndoManager().reset();
            shouldProcessOnChangeEvent = true;
        };
        if (_ace) {
            var showGutter = values.options.showGutter != undefined ? values.options.showGutter : true;
            var additionalOptions = values.additionalOptions;
            var langTools = _ace.require('ace/ext/language_tools');
            editor = _ace.edit(element);
            var guid = external_ko_["observable"](null);
            var theme = values.theme;
            if (!theme)
                theme = isDarkTheme() ? 'ace/theme/ambiance' : 'ace/theme/dreamweaver';
            editor.setTheme(theme);
            editor.$blockScrolling = Infinity;
            var languageMode = viewModel.languageHelper.getLanguageMode();
            var session = editor.getSession();
            session.gutterRenderer = {
                getWidth: (session, lastLineNumber, config) => {
                    return lastLineNumber.toString().length * config.characterWidth;
                },
                getText: (session, row) => {
                    return row + 1;
                }
            };
            session.setMode(languageMode);
            var onBlur = () => { editor.completer && editor.completer.popup && editor.completer.popup.hide(); }, onChange, onFocus, onChangeAnnotation;
            if (additionalOptions) {
                if (additionalOptions.onChange) {
                    var timer = null;
                    onChange = (e) => {
                        if (timer !== null)
                            clearTimeout(timer);
                        if (shouldProcessOnChangeEvent) {
                            timer = setTimeout(() => {
                                if (text() !== session.getValue() || (session.getAnnotations() || []).some(x => x.type === 'error')) {
                                    additionalOptions.onChange(session);
                                }
                            }, additionalOptions && additionalOptions.changeTimeout || 1000);
                        }
                    };
                    session.on('change', onChange);
                }
                if (additionalOptions.overrideEditorFocus) {
                    editor.focus = function (a, e) {
                        editor.textInput.getElement().focus();
                    };
                }
                if (additionalOptions.onFocus) {
                    onFocus = () => { additionalOptions.onFocus(session); };
                    editor.on('focus', onFocus);
                }
                if (additionalOptions.onBlur) {
                    onBlur = () => {
                        editor.completer && editor.completer.popup && editor.completer.popup.hide();
                        return additionalOptions.onBlur(session);
                    };
                }
                if (additionalOptions.onChangeAnnotation) {
                    onChangeAnnotation = (a, e) => {
                        additionalOptions.onChangeAnnotation(e);
                    };
                    session.on('changeAnnotation', onChangeAnnotation);
                }
            }
            editor.on('blur', onBlur);
            var completers = viewModel.languageHelper.createCompleters(editor, bindingContext, viewModel);
            langTools.setCompleters(completers);
            editor.setOptions(values.options);
            if (additionalOptions && 'setUseWrapMode' in additionalOptions) {
                editor.getSession().setUseWrapMode(additionalOptions.setUseWrapMode);
            }
            if (!showGutter) {
                editor.renderer.setShowGutter(showGutter);
            }
            if (editor.renderer.$gutter) {
                var gutterClassName = editor.renderer.$gutter.className + ' dxd-border-primary dxd-text-primary dxd-back-primary';
                editor.renderer.$gutter.className = gutterClassName;
            }
            var oldMouseMove = editor._defaultHandlers.guttermousemove;
            editor._defaultHandlers.guttermousemove = function (e) {
                var rect = element.getBoundingClientRect();
                e.x = e.x - rect.left;
                e.y = e.y - rect.top;
                oldMouseMove(e);
            };
            if (external_ko_["isSubscribable"](text)) {
                var subscription = text.subscribe((newText) => {
                    if (newText !== session.getValue()) {
                        _setEditorText(editor, newText);
                    }
                    if (additionalOptions && additionalOptions.onValueChange)
                        additionalOptions.onValueChange(editor);
                });
            }
            _setEditorText(editor, external_ko_["unwrap"](text));
            if (values.callbacks)
                values.callbacks.focus = () => {
                    setTimeout(() => {
                        editor.textInput.getElement().focus();
                    }, 10);
                };
            Object(_internal["c" /* addDisposeCallback */])(element, function () {
                editor.completers && editor.completers.splice(0);
                editor._defaultHandlers.guttermousemove = oldMouseMove;
                subscription.dispose();
                if (values.callbacks)
                    values.callbacks.focus = external_jQuery_["noop"];
                completers.forEach(x => x.dispose && x.dispose());
                onBlur && editor.off('blur', onBlur);
                onFocus && editor.off('focus', onFocus);
                onChange && session.off('change', onChange);
                onChangeAnnotation && session.off('changeAnnotation', onChangeAnnotation);
                editor.destroy();
            });
        }
        if (external_ko_["isObservable"](editorContainer)) {
            editorContainer(editor);
        }
    }
};

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/analytics-widgets-ace.js







// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/bundle/_add-analytics-to-bundle.js















function _addAnalyticsToBundle(bundle) {
    bundle.Analytics = bundle.Analytics || {};
    bundle.Analytics.Internal = analytics_internal_namespaceObject;
    bundle.Analytics.Utils = analytics_utils_namespaceObject;
    bundle.Analytics.Widgets = analytics_widgets_namespaceObject;
    bundle.Analytics.Widgets.Ace = analytics_widgets_ace_namespaceObject;
    bundle.Analytics.Widgets.Metadata = analytics_widgets_metadata_namespaceObject;
    bundle.Analytics.Widgets.Internal = analytics_widgets_internal_namespaceObject;
    bundle.Analytics.Widgets.Filtering = analytics_widgets_filtering_namespaceObject;
    bundle.Analytics.Widgets.TreeList = analytics_widgets_treeList_namespaceObject;
    bundle.Analytics.Criteria = analytics_criteria;
    bundle.Analytics.Criteria.Utils = analytics_criteria_utils_namespaceObject;
    bundle.Analytics.Elements = analytics_elements_namespaceObject;
    bundle.Analytics.Elements.Metadata = analytics_elements_metadata_namespaceObject;
    bundle.Analytics.Tools = analytics_tools_namespaceObject;
    bundle.Analytics.Localization = analytics_localization_namespaceObject;
    bundle.Analytics.VERSION = version;
    return bundle;
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/bundle/_validator.js
function checkIncludedScripts() {
    var ko = window['ko'];
    var devextremeExists = false;
    if (!(window['DevExpress'] && window['DevExpress'].ui && window['DevExpress'].ui.dxTextBox)) {
        console.error('The DevExtreme library is missing. Check whether a script is included on the page.');
    }
    else
        devextremeExists = true;
    if (!ko) {
        console.error('The Knockout library is missing. Check whether a script is included on the page.');
    }
    else if (!ko.bindingHandlers['dxPopup'] && devextremeExists) {
        console.error('The DevExtreme library is included before the Knockout library. Check the order in which the scripts appear on the page.');
    }
    var $ = window['$'] || window['jQuery'];
    if (!$) {
        console.error('The jQuery library is missing. Check whether a script is included on the page.');
    }
}
function checkVersions() {
    const DevExpress = window.DevExpress;
    var analyticsVersion = DevExpress['Analytics']['VERSION'];
    var devExtremeVersion = DevExpress['VERSION'];
    if (devExtremeVersion != analyticsVersion)
        console.warn(`Analytics-Core (v${analyticsVersion}) and DevExtreme (v${devExtremeVersion}) versions do not match.`);
}

// CONCATENATED MODULE: ./node_modules/@devexpress/analytics-core/bundle/analytic-core-bundle.js


checkIncludedScripts();
const DevExpress = window.DevExpress || {};
_addAnalyticsToBundle(DevExpress);
checkVersions();
/* harmony default export */ var analytic_core_bundle = __webpack_exports__["default"] = (DevExpress['Analytics']);


/***/ })
/******/ ]);
/**
* DevExpress HTML/JS Reporting (dist\js\dx-webdocumentviewer.js)
* Version:  22.2.3
* Build date: Dec 6, 2022
* Copyright (c) 2012 - 2022 Developer Express Inc. ALL RIGHTS RESERVED
* License: https://www.devexpress.com/Support/EULAs/universal.xml
*/
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 21);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Widgets.Internal;

/***/ }),
/* 1 */
/***/ (function(module, exports) {

module.exports = ko;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Utils;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Internal;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Widgets;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = DevExpress.events;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

module.exports = DevExpress.utils.browser;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxGallery;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxPopup;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

module.exports = DevExpress.data.DataSource;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxTextBox;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

module.exports = DevExpress.data.ArrayStore;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = DevExpress.registerComponent;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Internal.dxversions;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = "";

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Localization;

/***/ }),
/* 17 */
/***/ (function(module, exports) {

module.exports = DevExpress.localization;

/***/ }),
/* 18 */
/***/ (function(module, exports) {

module.exports = DevExpress.Analytics.Elements;

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = DevExpress.config;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = DevExpress.ui.dxScrollView;

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting.js
var reporting_namespaceObject = {};
__webpack_require__.r(reporting_namespaceObject);
__webpack_require__.d(reporting_namespaceObject, "ImageSource", function() { return imageSource_ImageSource; });
__webpack_require__.d(reporting_namespaceObject, "convertMapToKeyValuePair", function() { return convertMapToKeyValuePair; });
__webpack_require__.d(reporting_namespaceObject, "EventGenerator", function() { return eventGenerator_EventGenerator; });
__webpack_require__.d(reporting_namespaceObject, "CustomizeExportOptionsEventArgs", function() { return exportOptionsEventArgs_CustomizeExportOptionsEventArgs; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-editing.js
var reporting_editing_namespaceObject = {};
__webpack_require__.r(reporting_editing_namespaceObject);
__webpack_require__.d(reporting_editing_namespaceObject, "Categories", function() { return Categories; });
__webpack_require__.d(reporting_editing_namespaceObject, "EditingFieldExtensions", function() { return editingFieldExtensions_EditingFieldExtensions; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-export.js
var reporting_export_namespaceObject = {};
__webpack_require__.r(reporting_export_namespaceObject);
__webpack_require__.d(reporting_export_namespaceObject, "CsvExportOptions", function() { return csvExportOptions_CsvExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "DocxExportDocumentOptions", function() { return docxExportDocumentOptions_DocxExportDocumentOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "docxExportDocumentOptionsSerializationInfo", function() { return docxExportDocumentOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_namespaceObject, "DocxExportOptions", function() { return docxExportOptions_DocxExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "AdditionalRecipientModel", function() { return emailExportOptions_AdditionalRecipientModel; });
__webpack_require__.d(reporting_export_namespaceObject, "additionalRecipientSerializationsInfo", function() { return additionalRecipientSerializationsInfo; });
__webpack_require__.d(reporting_export_namespaceObject, "ExportOptions", function() { return exportOptions_ExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "HtmlExportOptions", function() { return htmlExportOptions_HtmlExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "ImageExportOptions", function() { return imageExportOptions_ImageExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "MhtExportOptions", function() { return mhtExportOptions_MhtExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "PdfExportDocumentOptions", function() { return pdfExportDocumentOptions_PdfExportDocumentOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "author", function() { return author; });
__webpack_require__.d(reporting_export_namespaceObject, "application", function() { return application; });
__webpack_require__.d(reporting_export_namespaceObject, "title", function() { return title; });
__webpack_require__.d(reporting_export_namespaceObject, "subject", function() { return subject; });
__webpack_require__.d(reporting_export_namespaceObject, "pdfExportDocumentOptionsSerializationInfo", function() { return pdfExportDocumentOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_namespaceObject, "PdfPermissionsOptions", function() { return pdfPermissionsOptions_PdfPermissionsOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "pdfExportPermissionsOptionsSerializationInfo", function() { return pdfExportPermissionsOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_namespaceObject, "PdfPasswordSecurityOptions", function() { return pdfPasswordSecurityOptions_PdfPasswordSecurityOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "pdfEncryptionLevel", function() { return pdfEncryptionLevel; });
__webpack_require__.d(reporting_export_namespaceObject, "pdfExportPasswordSecurityOptionsSerializationInfo", function() { return pdfExportPasswordSecurityOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_namespaceObject, "PdfExportOptions", function() { return pdfExportOptions_PdfExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "PrintPreviewOptions", function() { return printPreviewOptions_PrintPreviewOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "RtfExportOptions", function() { return rtfExportOptions_RtfExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "TextExportOptions", function() { return textExportOptions_TextExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "XlsExportOptions", function() { return xlsExportOptions_XlsExportOptions; });
__webpack_require__.d(reporting_export_namespaceObject, "XlsxExportOptions", function() { return xlsxExportOptions_XlsxExportOptions; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-export-metadata.js
var reporting_export_metadata_namespaceObject = {};
__webpack_require__.r(reporting_export_metadata_namespaceObject);
__webpack_require__.d(reporting_export_metadata_namespaceObject, "csvExportOptionsSerializationInfo", function() { return csvExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "docxDocumentOptions", function() { return docxDocumentOptions; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "docxExportOptionsSerializationInfo", function() { return docxExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "nativeFormatOptionsSerializationInfo", function() { return nativeFormatOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "additionalRecipients", function() { return additionalRecipients; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "emailOptionsSerializationInfo", function() { return emailOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "exportOptionsSerializationInfo", function() { return exportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "htmlExportOptionsSerializationInfoBase", function() { return htmlExportOptionsSerializationInfoBase; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "htmlExportOptionsSerializationInfo", function() { return htmlExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "imageExportOptionsSerializationInfoBase", function() { return imageExportOptionsSerializationInfoBase; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "imageExportOptionsSerializationInfo", function() { return imageExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pageBorderColor", function() { return pageBorderColor; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pageBorderWidth", function() { return pageBorderWidth; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pageRange", function() { return pageRange; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "expotOptionsTitle", function() { return expotOptionsTitle; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "htmlTableLayout", function() { return htmlTableLayout; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "docxTableLayout", function() { return docxTableLayout; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "allowURLsWithJSContent", function() { return allowURLsWithJSContent; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "rasterizationResolution", function() { return rasterizationResolution; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "rasterizeImages", function() { return rasterizeImages; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "useHRefHyperlinks", function() { return useHRefHyperlinks; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "exportWatermarks", function() { return exportWatermarks; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "inlineCss", function() { return inlineCss; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "removeSecondarySymbols", function() { return removeSecondarySymbols; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "characterSet", function() { return characterSet; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "getExportModeValues", function() { return getExportModeValues; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "exportPageBreaks", function() { return exportPageBreaks; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "rtfExportMode", function() { return rtfExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "docxExportMode", function() { return docxExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "htmlExportMode", function() { return htmlExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "embedImagesInHTML", function() { return embedImagesInHTML; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "imageExportMode", function() { return imageExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsExportMode", function() { return xlsExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsxExportMode", function() { return xlsxExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "textExportMode", function() { return textExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsTextExportMode", function() { return xlsTextExportMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "csvTextSeparator", function() { return csvTextSeparator; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "useCustomSeparator", function() { return useCustomSeparator; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "textEncodingType", function() { return textEncodingType; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsExportHyperlinks", function() { return xlsExportHyperlinks; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsRawDataMode", function() { return xlsRawDataMode; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsShowGridLines", function() { return xlsShowGridLines; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsExportOptionsSheetName", function() { return xlsExportOptionsSheetName; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "mhtExportOptionsSerializationInfoBase", function() { return mhtExportOptionsSerializationInfoBase; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "mhtExportOptionsSerializationInfo", function() { return mhtExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pdfACompatibilityValues", function() { return pdfACompatibilityValues; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pdfACompatibility", function() { return pdfACompatibility; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pdfUACompatibilityValues", function() { return pdfUACompatibilityValues; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pdfUACompatibility", function() { return pdfUACompatibility; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "pdfExportOptionsSerializationInfo", function() { return pdfExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "printPreviewOptionsSerializationInfo", function() { return printPreviewOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "rtfExportOptionsSerializationInfoBase", function() { return rtfExportOptionsSerializationInfoBase; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "emptyFirstPageHeaderFooter", function() { return emptyFirstPageHeaderFooter; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "keepRowHeight", function() { return keepRowHeight; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "rtfExportOptionsSerializationInfo", function() { return rtfExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "textExportOptionsSerializationInfo", function() { return textExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsExportOptionsSerializationInfoCommon", function() { return xlsExportOptionsSerializationInfoCommon; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsExportOptionsSerializationInfoBase", function() { return xlsExportOptionsSerializationInfoBase; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsExportOptionsSerializationInfo", function() { return xlsExportOptionsSerializationInfo; });
__webpack_require__.d(reporting_export_metadata_namespaceObject, "xlsxExportOptionsSerializationInfo", function() { return xlsxExportOptionsSerializationInfo; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-internal.js
var reporting_internal_namespaceObject = {};
__webpack_require__.r(reporting_internal_namespaceObject);
__webpack_require__.d(reporting_internal_namespaceObject, "Locker", function() { return Locker; });
__webpack_require__.d(reporting_internal_namespaceObject, "cultureInfo", function() { return cultureInfo; });
__webpack_require__.d(reporting_internal_namespaceObject, "generateGuid", function() { return generateGuid; });
__webpack_require__.d(reporting_internal_namespaceObject, "createFullscreenComputed", function() { return createFullscreenComputed; });
__webpack_require__.d(reporting_internal_namespaceObject, "processZoomFactor", function() { return processZoomFactor; });
__webpack_require__.d(reporting_internal_namespaceObject, "transformNewLineCharacters", function() { return transformNewLineCharacters; });
__webpack_require__.d(reporting_internal_namespaceObject, "editorTemplates", function() { return editorTemplates; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-metadata.js
var reporting_metadata_namespaceObject = {};
__webpack_require__.r(reporting_metadata_namespaceObject);
__webpack_require__.d(reporting_metadata_namespaceObject, "previewBackColor", function() { return previewBackColor; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewSides", function() { return previewSides; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewBorderColor", function() { return previewBorderColor; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewBorderStyle", function() { return previewBorderStyle; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewBorderDashStyle", function() { return previewBorderDashStyle; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewBorderWidth", function() { return previewBorderWidth; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewForeColor", function() { return previewForeColor; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewFont", function() { return previewFont; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewPadding", function() { return previewPadding; });
__webpack_require__.d(reporting_metadata_namespaceObject, "previewTextAlignment", function() { return previewTextAlignment; });
__webpack_require__.d(reporting_metadata_namespaceObject, "brickStyleSerializationsInfo", function() { return brickStyleSerializationsInfo; });
__webpack_require__.d(reporting_metadata_namespaceObject, "defaultCulture", function() { return defaultCulture; });
__webpack_require__.d(reporting_metadata_namespaceObject, "availableCultures", function() { return availableCultures; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer.js
var reporting_viewer_namespaceObject = {};
__webpack_require__.r(reporting_viewer_namespaceObject);
__webpack_require__.d(reporting_viewer_namespaceObject, "ActionId", function() { return ActionId; });
__webpack_require__.d(reporting_viewer_namespaceObject, "ExportFormatID", function() { return ExportFormatID; });
__webpack_require__.d(reporting_viewer_namespaceObject, "PreviewElements", function() { return PreviewElements; });
__webpack_require__.d(reporting_viewer_namespaceObject, "ZoomAutoBy", function() { return ZoomAutoBy; });
__webpack_require__.d(reporting_viewer_namespaceObject, "ReportPreview", function() { return reportPreview_ReportPreview; });
__webpack_require__.d(reporting_viewer_namespaceObject, "JSReportViewer", function() { return jsReportViewer_JSReportViewer; });
__webpack_require__.d(reporting_viewer_namespaceObject, "JSReportViewerBinding", function() { return jsReportViewerBinding_JSReportViewerBinding; });
__webpack_require__.d(reporting_viewer_namespaceObject, "DxReportViewer", function() { return jsReportViewerBinding_DxReportViewer; });
__webpack_require__.d(reporting_viewer_namespaceObject, "DateRangeDialogElementsKeyboardHelper", function() { return _dateRangeKeyboardHelper_DateRangeDialogElementsKeyboardHelper; });
__webpack_require__.d(reporting_viewer_namespaceObject, "PredefinedDateRangesKeyboardHelper", function() { return _dateRangeKeyboardHelper_PredefinedDateRangesKeyboardHelper; });
__webpack_require__.d(reporting_viewer_namespaceObject, "PreviewBricksKeyboardHelper", function() { return _previewBricksKeyboardHelper_PreviewBricksKeyboardHelper; });
__webpack_require__.d(reporting_viewer_namespaceObject, "PreviewEditingFieldsKeyboardHelper", function() { return _previewEditingFieldsKeyboardHelper_PreviewEditingFieldsKeyboardHelper; });
__webpack_require__.d(reporting_viewer_namespaceObject, "SearchKeyboardHelper", function() { return _searchKeyboardHelper_SearchKeyboardHelper; });
__webpack_require__.d(reporting_viewer_namespaceObject, "MobilePreviewElements", function() { return MobilePreviewElements; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-editing.js
var reporting_viewer_editing_namespaceObject = {};
__webpack_require__.r(reporting_viewer_editing_namespaceObject);
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "ImageAlignment", function() { return ImageAlignment; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "ImageSizeMode", function() { return ImageSizeMode; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "sizing", function() { return sizing; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "imageAlignment", function() { return imageAlignment; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "EditingField", function() { return editingField_EditingField; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "CharacterCombEditingFieldViewModel", function() { return characterCombEditingField_CharacterCombEditingFieldViewModel; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "GlyphStyle", function() { return GlyphStyle; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "CheckState", function() { return CheckState; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "createCustomGlyphStyleCss", function() { return createCustomGlyphStyleCss; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "getCheckBoxTemplate", function() { return getCheckBoxTemplate; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "CheckEditingFieldViewModel", function() { return checkEditingField_CheckEditingFieldViewModel; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "ImageEditingFieldViewModel", function() { return imageEditingField_ImageEditingFieldViewModel; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "PopupImageEditingFieldViewModel", function() { return popupImageEditingField_PopupImageEditingFieldViewModel; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "DefaultImageEditingFieldViewModel", function() { return DefaultImageEditingFieldViewModel; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "TextEditingFieldViewModelBase", function() { return textEditingField_TextEditingFieldViewModelBase; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "TextEditingFieldViewModel", function() { return textEditingField_TextEditingFieldViewModel; });
__webpack_require__.d(reporting_viewer_editing_namespaceObject, "focusTextElement", function() { return focusTextElement; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-export.js
var reporting_viewer_export_namespaceObject = {};
__webpack_require__.r(reporting_viewer_export_namespaceObject);
__webpack_require__.d(reporting_viewer_export_namespaceObject, "CsvExportOptionsPreview", function() { return csvExportOptionsPreview_CsvExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "DocxExportOptionsPreview", function() { return docxExportOptionsPreview_DocxExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "DocxExportOptionsMergedPreview", function() { return docxExportOptionsPreview_DocxExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "ExportOptionsModel", function() { return exportOptionsModel_ExportOptionsModel; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "ExportOptionsEventHandlers", function() { return ExportOptionsEventHandlers; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "ExportOptionsPreview", function() { return exportOptionsPreview_ExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "ExportOptionsMergedPreview", function() { return exportOptionsPreview_ExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "HtmlExportOptionsPreview", function() { return htmlExportOptionsPreview_HtmlExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "HtmlExportOptionsMergedPreview", function() { return htmlExportOptionsPreview_HtmlExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "ImageExportOptionsPreview", function() { return imageExportOptionsPreview_ImageExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "ImageExportOptionsMergedPreview", function() { return imageExportOptionsPreview_ImageExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "rtfExportModeMergedPreview", function() { return rtfExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "docxExportModeMergedPreview", function() { return docxExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "excludeModesForMergedDocuments", function() { return excludeModesForMergedDocuments; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "excludeDifferentFilesMode", function() { return excludeDifferentFilesMode; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "htmlExportModePreviewBase", function() { return htmlExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "htmlExportModePreview", function() { return htmlExportModePreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "htmlExportModeMergedPreview", function() { return htmlExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "xlsExportModePreviewBase", function() { return xlsExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "xlsExportModePreview", function() { return xlsExportModePreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "xlsExportModeMergedPreview", function() { return xlsExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "imageExportModePreviewBase", function() { return imageExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "imageExportModePreview", function() { return imageExportModePreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "imageExportModeMergedPreview", function() { return imageExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "xlsxExportModePreviewBase", function() { return xlsxExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "xlsxExportModePreview", function() { return xlsxExportModePreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "xlsxExportModeMergedPreview", function() { return xlsxExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "MhtExportOptionsPreview", function() { return mhtExportOptionsPreview_MhtExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "MhtExportOptionsMergedPreview", function() { return mhtExportOptionsPreview_MhtExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "RtfExportOptionsPreview", function() { return rtfExportOptionsPreview_RtfExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "RtfExportOptionsMergedPreview", function() { return rtfExportOptionsPreview_RtfExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "XlsExportOptionsPreview", function() { return xlsExportOptionsPreview_XlsExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "XlsExportOptionsMergedPreview", function() { return xlsExportOptionsPreview_XlsExportOptionsMergedPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "XlsxExportOptionsPreview", function() { return xlsxExportOptionsPreview_XlsxExportOptionsPreview; });
__webpack_require__.d(reporting_viewer_export_namespaceObject, "XlsxExportOptionsMergedPreview", function() { return xlsxExportOptionsPreview_XlsxExportOptionsMergedPreview; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-export-metadata.js
var reporting_viewer_export_metadata_namespaceObject = {};
__webpack_require__.r(reporting_viewer_export_metadata_namespaceObject);
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "rtfExportModeMergedPreview", function() { return rtfExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "docxExportModeMergedPreview", function() { return docxExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "excludeModesForMergedDocuments", function() { return excludeModesForMergedDocuments; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "excludeDifferentFilesMode", function() { return excludeDifferentFilesMode; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "htmlExportModePreviewBase", function() { return htmlExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "htmlExportModePreview", function() { return htmlExportModePreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "htmlExportModeMergedPreview", function() { return htmlExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "xlsExportModePreviewBase", function() { return xlsExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "xlsExportModePreview", function() { return xlsExportModePreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "xlsExportModeMergedPreview", function() { return xlsExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "imageExportModePreviewBase", function() { return imageExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "imageExportModePreview", function() { return imageExportModePreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "imageExportModeMergedPreview", function() { return imageExportModeMergedPreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "xlsxExportModePreviewBase", function() { return xlsxExportModePreviewBase; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "xlsxExportModePreview", function() { return xlsxExportModePreview; });
__webpack_require__.d(reporting_viewer_export_metadata_namespaceObject, "xlsxExportModeMergedPreview", function() { return xlsxExportModeMergedPreview; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-internal.js
var reporting_viewer_internal_namespaceObject = {};
__webpack_require__.r(reporting_viewer_internal_namespaceObject);
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "DocumentMapItemsProvider", function() { return _documentMapItemsProvider_DocumentMapItemsProvider; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "DocumentMapModel", function() { return _documentMapModel_DocumentMapModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "DocumentMapTreeListController", function() { return _documentMapTreeListController_DocumentMapTreeListController; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewDesignerActions", function() { return _actions_PreviewDesignerActions; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "ActionLists", function() { return _actions_ActionLists; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewActions", function() { return _actions_PreviewActions; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "convertToPercent", function() { return convertToPercent; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "getBrickValueForKey", function() { return getBrickValueForKey; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "brickText", function() { return brickText; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "updateBricksPosition", function() { return updateBricksPosition; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "initializeBrick", function() { return initializeBrick; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "ExportResultRequestData", function() { return ExportResultRequestData; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "ExportHandler", function() { return _exportHandler_ExportHandler; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "createDesktopPreview", function() { return createDesktopPreview; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "createPreview", function() { return createPreview; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "createAndInitPreviewModel", function() { return createAndInitPreviewModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "createPreviewModel", function() { return createPreviewModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "initPreviewModel", function() { return initPreviewModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewPage", function() { return _page_PreviewPage; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewHandlersHelper", function() { return _previewHandlersHelper_PreviewHandlersHelper; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewDisposableModel", function() { return _previewModel_PreviewDisposableModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewModel", function() { return PreviewModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "ColumnSortOrder", function() { return ColumnSortOrder; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewRequestWrapper", function() { return _previewRequestWrapper_PreviewRequestWrapper; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "PreviewSelection", function() { return _previewSelection_PreviewSelection; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "getUpdateProgressBarCallback", function() { return getUpdateProgressBarCallback; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "ProgressViewModel", function() { return _progressViewModel_ProgressViewModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "stringToPosition", function() { return stringToPosition; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "getDockedElementCallback", function() { return getDockedElementCallback; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "updatePreviewContentSize", function() { return updatePreviewContentSize; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "updatePreviewZoomWithAutoFit", function() { return updatePreviewZoomWithAutoFit; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "SortingProcessor", function() { return _sortingProcessor_SortingProcessor; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "getCurrentResolution", function() { return getCurrentResolution; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "getImageBase64", function() { return getImageBase64; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "getEnumValues", function() { return getEnumValues; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "safelyRunWindowOpen", function() { return safelyRunWindowOpen; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "dxSearchEditor", function() { return _dxSearchEditor_dxSearchEditor; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "SearchResultNavigator", function() { return _searchResultNavigator_SearchResultNavigator; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "SearchViewModel", function() { return _searchViewModel_SearchViewModel; });
__webpack_require__.d(reporting_viewer_internal_namespaceObject, "formatSearchResult", function() { return formatSearchResult; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile.js
var reporting_viewer_mobile_namespaceObject = {};
__webpack_require__.r(reporting_viewer_mobile_namespaceObject);
__webpack_require__.d(reporting_viewer_mobile_namespaceObject, "MobileReportPreview", function() { return mobilePreview_MobileReportPreview; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile-internal.js
var reporting_viewer_mobile_internal_namespaceObject = {};
__webpack_require__.r(reporting_viewer_mobile_internal_namespaceObject);
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "editorTemplates", function() { return _editorTemplates_editorTemplates; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "slowdownDisctanceFactor", function() { return slowdownDisctanceFactor; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "minScale", function() { return minScale; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "EventProcessor", function() { return _eventProcessor_EventProcessor; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "MobilePreviewPage", function() { return _mobilePage_MobilePreviewPage; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "MobilePreviewModel", function() { return _mobilePreviewModel_MobilePreviewModel; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "MobilePreviewParameterHelper", function() { return _mobilePreviewParameterHelper_MobilePreviewParameterHelper; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "MobileSearchViewModel", function() { return _mobileSearch_MobileSearchViewModel; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "SearchBarModel", function() { return _mobileSearch_SearchBarModel; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "MobilePaginator", function() { return _paginator_MobilePaginator; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "ParametersPopupModelBase", function() { return _parametersPopup_ParametersPopupModelBase; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "ParametersPopupModel", function() { return _parametersPopup_ParametersPopupModel; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "DateRangeParemeterPopupModel", function() { return _parametersPopup_DateRangeParemeterPopupModel; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "updatePreviewContentSizeMobile", function() { return updatePreviewContentSizeMobile; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "dxGalleryReportPreview", function() { return _galleryComponent_dxGalleryReportPreview; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "GalleryModel", function() { return _galleryModel_GalleryModel; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "MobileActionList", function() { return _mobileActionList_MobileActionList; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "getPreviewActionsMobile", function() { return getPreviewActionsMobile; });
__webpack_require__.d(reporting_viewer_mobile_internal_namespaceObject, "createMobilePreview", function() { return createMobilePreview; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-parameters.js
var reporting_viewer_parameters_namespaceObject = {};
__webpack_require__.r(reporting_viewer_parameters_namespaceObject);
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "MultiValuesHelper", function() { return multiValuesHelper_MultiValuesHelper; });
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "getEditorType", function() { return getEditorType; });
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "ParameterHelper", function() { return parameterHelper_ParameterHelper; });
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "ParameterPanelItemBase", function() { return parameterPanelItemBase_ParameterPanelItemBase; });
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "PreviewParameter", function() { return previewParameter_PreviewParameter; });
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "PreviewParameterHelper", function() { return previewParameterHelper_PreviewParameterHelper; });
__webpack_require__.d(reporting_viewer_parameters_namespaceObject, "PreviewParametersViewModel", function() { return previewParametersViewModel_PreviewParametersViewModel; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-settings.js
var reporting_viewer_settings_namespaceObject = {};
__webpack_require__.r(reporting_viewer_settings_namespaceObject);
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "EditablePreviewEnabled", function() { return EditablePreviewEnabled; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "SearchAvailable", function() { return SearchAvailable; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "ReportServerInvokeUri", function() { return ReportServerInvokeUri; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "ReportServerExportUri", function() { return ReportServerExportUri; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "AsyncExportApproach", function() { return AsyncExportApproach; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "MessageHandler", function() { return MessageHandler; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "HandlerUri", function() { return HandlerUri; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "previewDefaultResolution", function() { return previewDefaultResolution; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "ReportServerDownloadUri", function() { return ReportServerDownloadUri; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "PollingDelay", function() { return PollingDelay; });
__webpack_require__.d(reporting_viewer_settings_namespaceObject, "TimeOut", function() { return TimeOut; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-utils.js
var reporting_viewer_utils_namespaceObject = {};
__webpack_require__.r(reporting_viewer_utils_namespaceObject);

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets.js
var reporting_viewer_widgets_namespaceObject = {};
__webpack_require__.r(reporting_viewer_widgets_namespaceObject);
__webpack_require__.d(reporting_viewer_widgets_namespaceObject, "viewerEditorTemplates", function() { return viewerEditorTemplates; });
__webpack_require__.d(reporting_viewer_widgets_namespaceObject, "predefinedDateRanges", function() { return predefinedDateRanges; });
__webpack_require__.d(reporting_viewer_widgets_namespaceObject, "DateRangeEditor", function() { return dateRangeEditor_DateRangeEditor; });
__webpack_require__.d(reporting_viewer_widgets_namespaceObject, "PictureEditMode", function() { return PictureEditMode; });

// NAMESPACE OBJECT: ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets-internal.js
var reporting_viewer_widgets_internal_namespaceObject = {};
__webpack_require__.r(reporting_viewer_widgets_internal_namespaceObject);
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "MultiValueEditorOptions", function() { return _multiValueEditor_MultiValueEditorOptions; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "ParametersGroupEditor", function() { return _groupEditor_ParametersGroupEditor; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "ImagePainter", function() { return _imagePainter_ImagePainter; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "Painter", function() { return _painter_Painter; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "PictureEditorActionId", function() { return PictureEditorActionId; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "PictureEditorActionProvider", function() { return _pictureEditorActionProvider_PictureEditorActionProvider; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "PictureEditorModel", function() { return _pictureEditorModel_PictureEditorModel; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "PictureEditorToolbarItem", function() { return PictureEditorToolbarItem; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "PictureEditorToolbarItemWithPopup", function() { return _pictureEditorToolbarItem_PictureEditorToolbarItemWithPopup; });
__webpack_require__.d(reporting_viewer_widgets_internal_namespaceObject, "SignaturePainter", function() { return _signaturePainter_SignaturePainter; });

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/customTypes.js


// EXTERNAL MODULE: external "DevExpress.Analytics.Internal"
var external_DevExpress_Analytics_Internal_ = __webpack_require__(3);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/imageSource.js

class imageSource_ImageSource {
    constructor(sourceType, data) {
        this.sourceType = sourceType;
        this.data = data;
    }
    getDataUrl() {
        switch (this.sourceType) {
            case 'svg':
                return 'data:image/svg+xml;charset=UTF-8;base64,' + encodeURI(this.data);
            case 'img':
                return 'data:image/x;base64,' + this.data;
        }
        if (this.sourceType === 'png' || this.sourceType === 'jpg' || this.sourceType === 'jpeg')
            return 'data:image/' + this.sourceType + ';base64,' + this.data;
    }
    static parse(val) {
        var sourceType, data;
        [sourceType, data] = (val || '').split(',');
        return sourceType && new imageSource_ImageSource(sourceType, data);
    }
    static toString(val) {
        return Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])('{0},{1}', val.sourceType, val.data);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/types.js
function convertMapToKeyValuePair(object) {
    var result = [];
    if (object) {
        Object.keys(object).forEach(key => {
            result.push({ Key: key, Value: object[key] });
        });
    }
    return result;
}

// EXTERNAL MODULE: external "DevExpress.Analytics.Localization"
var external_DevExpress_Analytics_Localization_ = __webpack_require__(16);

// EXTERNAL MODULE: external "DevExpress.localization"
var external_DevExpress_localization_ = __webpack_require__(17);

// EXTERNAL MODULE: external "DevExpress.Analytics.Elements"
var external_DevExpress_Analytics_Elements_ = __webpack_require__(18);

// EXTERNAL MODULE: external "DevExpress.Analytics.Utils"
var external_DevExpress_Analytics_Utils_ = __webpack_require__(2);

// EXTERNAL MODULE: external "ko"
var external_ko_ = __webpack_require__(1);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/metadata.js



var previewBackColor = { propertyName: 'backColor', modelName: '@BackColor', from: external_DevExpress_Analytics_Utils_["colorFromString"], toJsonObject: external_DevExpress_Analytics_Utils_["colorToString"] };
var previewSides = { propertyName: 'borders', modelName: '@Sides' };
var previewBorderColor = { propertyName: 'borderColor', modelName: '@BorderColor', from: external_DevExpress_Analytics_Utils_["colorFromString"], toJsonObject: external_DevExpress_Analytics_Utils_["colorToString"] };
var previewBorderStyle = { propertyName: 'borderStyle', modelName: '@BorderStyle' };
var previewBorderDashStyle = { propertyName: 'borderDashStyle', modelName: '@BorderDashStyle' };
var previewBorderWidth = { propertyName: 'borderWidth', modelName: '@BorderWidthSerializable', from: external_DevExpress_Analytics_Utils_["floatFromModel"] };
var previewForeColor = { propertyName: 'foreColor', modelName: '@ForeColor', from: external_DevExpress_Analytics_Utils_["colorFromString"], toJsonObject: external_DevExpress_Analytics_Utils_["colorToString"] };
var previewFont = { propertyName: 'font', modelName: '@Font' };
var previewPadding = { propertyName: 'padding', modelName: '@Padding', from: external_DevExpress_Analytics_Elements_["PaddingModel"].from };
var previewTextAlignment = { propertyName: 'textAlignment', modelName: '@TextAlignment' };
var brickStyleSerializationsInfo = [
    previewBackColor,
    previewSides,
    previewBorderColor,
    previewBorderStyle,
    previewBorderDashStyle,
    previewBorderWidth,
    previewForeColor,
    previewFont,
    previewPadding,
    previewTextAlignment
];
var defaultCulture = 'Default';
var availableCultures = external_ko_["observable"]({
    'Default': '(Default)'
});

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/binding/exportOptionsEventArgs.js

class exportOptionsEventArgs_CustomizeExportOptionsEventArgs {
    constructor(options) {
        this._options = options;
    }
    HideExportOptionsPanel() { this._options.panelVisible = false; }
    HideFormat(format) { delete this._options.exportOptions[format.propertyName || format.format]; }
    HideProperties(format, ...paths) {
        var patchPropName = (propName, obj) => {
            var info = obj.getInfo && obj.getInfo();
            if (info) {
                var p = info.filter(x => x.modelName === propName || x.modelName === '@' + propName)[0];
                if (p)
                    return p.propertyName;
            }
            return propName;
        };
        var addPredicate = (obj, propName) => {
            propName = patchPropName(propName, obj);
            var oldPredicate = obj.isPropertyVisible;
            obj.isPropertyVisible =
                oldPredicate
                    ? ((x) => oldPredicate(x) && x !== propName)
                    : ((x) => x !== propName);
        };
        if (paths.length == 0) {
            addPredicate(this._options.exportOptions, format.format);
        }
        else {
            paths.forEach(property => {
                var path = Array.isArray(property)
                    ? property
                    : property.split('.');
                var obj = this._options.exportOptions[format.format];
                while (path.length > 1) {
                    obj = external_ko_["unwrap"](obj[patchPropName(path[0], obj)]);
                    path.splice(0, 1);
                }
                addPredicate(obj, path[0]);
            });
        }
    }
    GetExportOptionsModel(format) { return this._options.exportOptions[format.format]; }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/binding/eventGenerator.js





class eventGenerator_EventGenerator {
    static generateCustomizeLocalizationCallback(fireEvent) {
        return function (localizationCallbacks) {
            fireEvent('CustomizeLocalization', {
                LoadMessages: (messages) => {
                    if (!messages)
                        return;
                    if (typeof messages.then === 'function') {
                        localizationCallbacks.push(messages);
                    }
                    else {
                        Object(external_DevExpress_Analytics_Localization_["loadMessages"])(messages);
                    }
                },
                SetAvailableCultures: (customCultures) => {
                    var newCultures = {};
                    newCultures[defaultCulture] = availableCultures()[defaultCulture];
                    Object(external_DevExpress_Analytics_Internal_["extend"])(newCultures, customCultures);
                    availableCultures(newCultures);
                },
                WidgetLocalization: external_DevExpress_localization_
            });
        };
    }
    static generateDesignerEvents(fireEvent) {
        var customizeActionsEvent = { publicName: 'CustomizeMenuActions', privateName: 'customizeActions' };
        var reportTabClosingEvent = { publicName: 'ReportTabClosing', privateName: 'reportTabClosing' };
        var reportTabClosedEvent = { publicName: 'ReportTabClosed', privateName: 'reportTabClosed' };
        var customizeParameterEditorsEvent = { publicName: 'CustomizeParameterEditors', privateName: 'customizeParameterEditors' };
        var customizeParameterLookUpSourceEvent = { publicName: 'CustomizeParameterLookUpSource', privateName: 'customizeParameterLookUpSource' };
        var exitDesignerEvent = { publicName: 'ExitDesigner', privateName: 'exitDesigner' };
        var reportSavingEvent = { publicName: 'ReportSaving', privateName: 'reportSaving' };
        var reportSavedEvent = { publicName: 'ReportSaved', privateName: 'reportSaved' };
        var reportOpeningEvent = { publicName: 'ReportOpening', privateName: 'reportOpening' };
        var reportOpenedEvent = { publicName: 'ReportOpened', privateName: 'reportOpened' };
        var tabChangedEvent = { publicName: 'TabChanged', privateName: 'tabChanged' };
        var onServerErrorEvent = { publicName: 'OnServerError', privateName: 'onServerError' };
        var customizePartsEvent = { publicName: 'CustomizeElements', privateName: 'customizeParts' };
        var componentAddedEvent = { publicName: 'ComponentAdded', privateName: 'componentAdded' };
        var customizeSaveDialogEvent = { publicName: 'CustomizeSaveDialog', privateName: 'customizeSaveDialog' };
        var customizeSaveAsDialogEvent = { publicName: 'CustomizeSaveAsDialog', privateName: 'customizeSaveAsDialog' };
        var customizeOpenDialogEvent = { publicName: 'CustomizeOpenDialog', privateName: 'customizeOpenDialog' };
        var customizeToolboxEvent = { publicName: 'CustomizeToolbox', privateName: 'customizeToolbox' };
        var customizeLocalizationEvent = { publicName: 'CustomizeLocalization', privateName: 'customizeLocalization' };
        var customizeFieldListActionsEvent = { publicName: 'CustomizeFieldListActions', privateName: 'customizeFieldListActions' };
        var beforeRenderEvent = { publicName: 'BeforeRender', privateName: 'beforeRender' };
        var customizeWizardEvent = { publicName: 'CustomizeWizard', privateName: 'customizeWizard' };
        customizeLocalizationEvent['callback'] = eventGenerator_EventGenerator.generateCustomizeLocalizationCallback(fireEvent);
        customizeActionsEvent['callback'] = function customizeActions(actions) {
            fireEvent(customizeActionsEvent.publicName, {
                Actions: actions,
                GetById: (actionId) => {
                    return actionId ? actions.filter(function (item) { return actionId === item.id; })[0] : null;
                }
            });
        };
        beforeRenderEvent['callback'] = function beforeRender(designerModel) {
            fireEvent(beforeRenderEvent.publicName, designerModel);
        };
        customizeParameterEditorsEvent['callback'] = function customizeParameterEditors(parameter, info) {
            fireEvent(customizeParameterEditorsEvent.publicName, {
                parameter: parameter,
                info: info
            });
        };
        customizeParameterLookUpSourceEvent['callback'] = function customizeParameterLookUpSource(parameter, items) {
            var arg = {
                parameter,
                items,
                dataSource: null
            };
            fireEvent(customizeParameterLookUpSourceEvent.publicName, arg);
            return arg.dataSource;
        };
        exitDesignerEvent['callback'] = function exitDesigner() {
            fireEvent(exitDesignerEvent.publicName);
        };
        reportSavingEvent['callback'] = function reportSaving(args) {
            var arg = {
                Url: args.url,
                Report: args.report,
                Cancel: args.cancel
            };
            fireEvent(reportSavingEvent.publicName, arg);
            args.cancel = arg.Cancel;
        };
        reportSavedEvent['callback'] = function reportSaved(args) {
            var arg = {
                Url: args.url,
                Report: args.report
            };
            fireEvent(reportSavedEvent.publicName, arg);
        };
        reportOpenedEvent['callback'] = function reportOpened(args) {
            var arg = {
                Url: args.url,
                Report: args.report
            };
            fireEvent(reportOpenedEvent.publicName, arg);
        };
        reportOpeningEvent['callback'] = function reportOpening(args) {
            var arg = {
                Url: args.url,
                Report: args.report,
                Cancel: args.cancel
            };
            fireEvent(reportOpeningEvent.publicName, arg);
            args.cancel = arg.Cancel;
        };
        tabChangedEvent['callback'] = function tabChanged(tab) {
            fireEvent(tabChangedEvent.publicName, {
                Tab: tab
            });
        };
        onServerErrorEvent['callback'] = function onServerError(args) {
            fireEvent(onServerErrorEvent.publicName, { Error: args });
        };
        componentAddedEvent['callback'] = function componentAdded(args) {
            fireEvent(componentAddedEvent.publicName, { Model: args.model, Parent: args.parent });
        };
        customizePartsEvent['callback'] = function customizeParts(parts) {
            fireEvent(customizePartsEvent.publicName, {
                Elements: parts,
                GetById: id => {
                    return id
                        ? parts.filter(item => id === item.id)[0]
                        : null;
                }
            });
        };
        customizeSaveDialogEvent['callback'] = function customizeSaveDialog(popup) {
            fireEvent(customizeSaveDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeSaveAsDialogEvent['callback'] = function customizeSaveAsDialog(popup) {
            fireEvent(customizeSaveAsDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeOpenDialogEvent['callback'] = function customizeOpenDialog(popup) {
            fireEvent(customizeOpenDialogEvent.publicName, {
                Popup: popup,
                Customize: (template, model) => {
                    popup.customize(template, model);
                }
            });
        };
        customizeToolboxEvent['callback'] = function customizeToolbox(controlsFactory) {
            fireEvent(customizeToolboxEvent.publicName, {
                ControlsFactory: controlsFactory
            });
        };
        customizeFieldListActionsEvent['callback'] = function customizeFieldListActions(item, actions) {
            fireEvent(customizeFieldListActionsEvent.publicName, {
                Item: item,
                Actions: actions
            });
        };
        customizeWizardEvent['callback'] = function customizeWizard(type, wizard) {
            fireEvent(customizeWizardEvent.publicName, {
                Type: type,
                Wizard: wizard
            });
        };
        reportTabClosingEvent['callback'] = function reportTabClosing(tab, deffered) {
            var args = {
                Tab: tab,
                ReadyToClose: deffered,
                Handled: false
            };
            fireEvent(reportTabClosingEvent.publicName, args);
            return args.Handled;
        };
        reportTabClosedEvent['callback'] = function reportTabClosed(tab) {
            fireEvent(reportTabClosedEvent.publicName, {
                Tab: tab
            });
        };
        return [
            customizeActionsEvent,
            reportTabClosingEvent,
            reportTabClosedEvent,
            customizeParameterEditorsEvent,
            customizeParameterLookUpSourceEvent,
            exitDesignerEvent,
            reportSavingEvent,
            reportSavedEvent,
            reportOpeningEvent,
            reportOpenedEvent,
            tabChangedEvent,
            onServerErrorEvent,
            customizePartsEvent,
            componentAddedEvent,
            customizeSaveDialogEvent,
            customizeSaveAsDialogEvent,
            customizeOpenDialogEvent,
            customizeToolboxEvent,
            customizeLocalizationEvent,
            customizeFieldListActionsEvent,
            beforeRenderEvent,
            customizeWizardEvent
        ];
    }
    static generatePreviewEvents(fireEvent, prefix) {
        function generateBrickMethods(brick) {
            return {
                GetBrickText: function () { return brick() && brick().text(); },
                GetBrickValue: function (key = 'value') {
                    var contentValue = brick() && brick().content && brick().content.filter(function (x) { return x.Key === key; })[0];
                    return contentValue && contentValue.Value;
                },
            };
        }
        var previewClickEvent = { publicName: 'PreviewClick', privateName: 'previewClick' };
        var documentReadyEvent = { publicName: [prefix, 'DocumentReady'].join(''), privateName: 'documentReady' };
        var editingFieldChangedEvent = { publicName: [prefix, 'EditingFieldChanged'].join(''), privateName: 'editingFieldChanged' };
        var parametersSubmittedEvent = { publicName: [prefix, 'ParametersSubmitted'].join(''), privateName: 'parametersSubmitted' };
        var parametersInitializedEvent = { publicName: [prefix, 'ParametersInitialized'].join(''), privateName: 'parametersInitialized' };
        var parametersResetEvent = { publicName: [prefix, 'ParametersReset'].join(''), privateName: 'parametersReset' };
        var customizeParameterLookUpSourceEvent = { publicName: 'CustomizeParameterLookUpSource', privateName: 'customizeParameterLookUpSource' };
        var customizeParameterEditorsEvent = { publicName: 'CustomizeParameterEditors', privateName: 'customizeParameterEditors' };
        var customizeActionsEvent = { publicName: [prefix, 'CustomizeMenuActions'].join(''), privateName: 'customizeActions' };
        var customizePartsEvent = { publicName: [prefix, 'CustomizeElements'].join(''), privateName: 'customizeParts' };
        var customizeExportOptionsEvent = { publicName: [prefix, 'CustomizeExportOptions'].join(''), privateName: 'customizeExportOptions' };
        var onServerErrorEvent = { publicName: 'OnServerError', privateName: 'onServerError' };
        var onExportEvent = { publicName: [prefix, 'OnExport'].join(''), privateName: 'onExport' };
        customizeParameterEditorsEvent['callback'] = function customizeParameterEditors(parameter, info) {
            fireEvent(customizeParameterEditorsEvent.publicName, { parameter, info });
        };
        customizePartsEvent['callback'] = function customizeParts(parts) {
            fireEvent(customizePartsEvent.publicName, {
                Elements: parts,
                GetById: (templateId) => {
                    return templateId ? parts.filter(function (item) { return templateId === item.templateName; })[0] : null;
                }
            });
        };
        customizeActionsEvent['callback'] = function customizeActions(actions) {
            fireEvent(customizeActionsEvent.publicName, {
                Actions: actions,
                GetById: (actionId) => {
                    return actionId ? actions.filter(function (item) { return actionId === item.id; })[0] : null;
                }
            });
        };
        customizeParameterLookUpSourceEvent['callback'] = function customizeParameterLookUpSource(parameter, items) {
            var arg = {
                parameter,
                items,
                dataSource: null
            };
            fireEvent(customizeParameterLookUpSourceEvent.publicName, arg);
            return arg.dataSource;
        };
        previewClickEvent['callback'] = function previewClick(pageIndex, brick, defaultHandler) {
            var arg = Object.assign(Object.assign({ PageIndex: pageIndex, Brick: brick, DefaultHandler: defaultHandler }, generateBrickMethods(() => brick)), { Handled: false });
            fireEvent(previewClickEvent.publicName, arg);
            return arg.Handled;
        };
        parametersResetEvent['callback'] = function parametersReset(model, parameters) {
            fireEvent(parametersResetEvent.publicName, {
                ParametersViewModel: model,
                Parameters: parameters
            });
        };
        parametersSubmittedEvent['callback'] = function parametersSubmitted(model, parameters) {
            fireEvent(parametersSubmittedEvent.publicName, {
                ParametersViewModel: model,
                Parameters: parameters
            });
        };
        parametersInitializedEvent['callback'] = function parametersInitialized(model, info, submit, shouldRequestParameters) {
            fireEvent(parametersInitializedEvent.publicName, {
                ParametersModel: model,
                ActualParametersInfo: info,
                Submit: submit,
                ShouldRequestParameters: shouldRequestParameters
            });
        };
        editingFieldChangedEvent['callback'] = function editingFieldChanged(field, oldValue, newValue) {
            var arg = Object.assign({ Field: field, OldValue: oldValue, NewValue: newValue }, generateBrickMethods(() => field.brick));
            fireEvent(editingFieldChangedEvent.publicName, arg);
            return arg.NewValue;
        };
        documentReadyEvent['callback'] = function documentReady(documentId, reportId, pageCount) {
            fireEvent(documentReadyEvent.publicName, {
                ReportId: reportId,
                DocumentId: documentId,
                PageCount: pageCount
            });
        };
        onServerErrorEvent['callback'] = function onServerError(args) {
            fireEvent(onServerErrorEvent.publicName, { Error: args });
        };
        onExportEvent['callback'] = function onExport(args) {
            fireEvent(onExportEvent.publicName, args);
        };
        customizeExportOptionsEvent['callback'] = function customizeExportOptions(options) {
            var arg = new exportOptionsEventArgs_CustomizeExportOptionsEventArgs(options);
            fireEvent(customizeExportOptionsEvent.publicName, arg);
        };
        var result = [
            previewClickEvent,
            documentReadyEvent,
            editingFieldChangedEvent,
            parametersSubmittedEvent,
            parametersInitializedEvent,
            parametersResetEvent,
            customizeParameterLookUpSourceEvent,
            customizeParameterEditorsEvent,
            customizeActionsEvent,
            customizePartsEvent,
            customizeExportOptionsEvent,
            onServerErrorEvent,
            onExportEvent,
        ];
        if (!prefix) {
            var beforeRenderEvent = { publicName: 'BeforeRender', privateName: 'beforeRender' };
            beforeRenderEvent['callback'] = function beforeRender(designerModel) {
                fireEvent(beforeRenderEvent.publicName, designerModel);
            };
            result.push(beforeRenderEvent);
            var customizeLocalizationEvent = { publicName: 'CustomizeLocalization', privateName: 'customizeLocalization' };
            customizeLocalizationEvent['callback'] = eventGenerator_EventGenerator.generateCustomizeLocalizationCallback(fireEvent);
            result.push(customizeLocalizationEvent);
        }
        return result;
    }
}

// EXTERNAL MODULE: external "DevExpress.Analytics.Internal.dxversions"
var external_DevExpress_Analytics_Internal_dxversions_ = __webpack_require__(14);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/dx-reporting-version.js
const version = '22.2.3';

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/versions.js


(external_DevExpress_Analytics_Internal_dxversions_["dxversions"] || external_DevExpress_Analytics_Internal_dxversions_)['reporting'] = version;

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting.js













// EXTERNAL MODULE: external "DevExpress.Analytics.Widgets.Internal"
var external_DevExpress_Analytics_Widgets_Internal_ = __webpack_require__(0);

// EXTERNAL MODULE: external "jQuery"
var external_jQuery_ = __webpack_require__(5);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/pictureEditMode.js
var PictureEditMode;
(function (PictureEditMode) {
    PictureEditMode[PictureEditMode["Image"] = 0] = "Image";
    PictureEditMode[PictureEditMode["Signature"] = 1] = "Signature";
    PictureEditMode[PictureEditMode["ImageAndSignature"] = 2] = "ImageAndSignature";
})(PictureEditMode || (PictureEditMode = {}));

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorTypes.js
var PictureEditorActionId;
(function (PictureEditorActionId) {
    PictureEditorActionId[PictureEditorActionId["OpenFile"] = 0] = "OpenFile";
    PictureEditorActionId[PictureEditorActionId["PickImage"] = 1] = "PickImage";
    PictureEditorActionId[PictureEditorActionId["Alignment"] = 2] = "Alignment";
    PictureEditorActionId[PictureEditorActionId["Brush"] = 3] = "Brush";
    PictureEditorActionId[PictureEditorActionId["Clear"] = 4] = "Clear";
    PictureEditorActionId[PictureEditorActionId["Reset"] = 5] = "Reset";
})(PictureEditorActionId || (PictureEditorActionId = {}));

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/utils/editingFieldExtensions.js






var Categories = {
    Image: () => 'Image',
    Numeric: () => 'Numeric',
    DateTime: () => 'Date-Time',
    Letters: () => 'Letters'
};
class editingFieldExtensions_EditingFieldExtensions {
    constructor() {
        this._editors = {};
    }
    static instance() {
        if (!editingFieldExtensions_EditingFieldExtensions._instance) {
            editingFieldExtensions_EditingFieldExtensions._instance = new editingFieldExtensions_EditingFieldExtensions();
            editingFieldExtensions_EditingFieldExtensions._instance._registerStandartEditors();
        }
        return editingFieldExtensions_EditingFieldExtensions._instance;
    }
    _registerStandartEditors() {
        var getLocalizedString = external_DevExpress_Analytics_Utils_["getLocalization"];
        editingFieldExtensions_EditingFieldExtensions.registerRegExpEditor('Integer', getLocalizedString('Integer', 'PreviewStringId.EditingFieldEditors_Integer'), Categories.Numeric(), /^-?\d*$/, /^-?\d+$/, '0');
        editingFieldExtensions_EditingFieldExtensions.registerRegExpEditor('IntegerPositive', getLocalizedString('Integer Positive', 'PreviewStringId.EditingFieldEditors_IntegerPositive'), Categories.Numeric(), /^\d+$/, /^\d+$/, '0');
        editingFieldExtensions_EditingFieldExtensions.registerRegExpEditor('FixedPoint', getLocalizedString('Fixed-Point', 'PreviewStringId.EditingFieldEditors_FixedPoint'), Categories.Numeric(), /^-?(\d+([\.,]?\d*)?)?$/, /^-?\d+([\.,]?\d*)?$/, '0');
        editingFieldExtensions_EditingFieldExtensions.registerRegExpEditor('FixedPointPositive', getLocalizedString('Fixed-Point Positive', 'PreviewStringId.EditingFieldEditors_FixedPointPositive'), Categories.Numeric(), /^\d+([\.,]?\d*)?$/, /^\d+([\.,]?\d*)?$/, '0');
        var dateEditorOptions = {
            onPreRender: (data) => {
                if (!(data.options.value() instanceof Date)) {
                    data.options.value(Object(external_DevExpress_Analytics_Internal_["parseDate"])(data.options.value(), false) || new Date(Date.now()));
                }
            },
            onHideEditor: (field) => {
                field.editValue(Object(external_DevExpress_Analytics_Internal_["formatDate"])(field._editorValue()));
            }
        };
        editingFieldExtensions_EditingFieldExtensions.registerEditor('Date', getLocalizedString('Date', 'PreviewStringId.EditingFieldEditors_Date'), Categories.DateTime(), dateEditorOptions, 'dxrp-editing-field-datetime');
        editingFieldExtensions_EditingFieldExtensions.registerImageEditor({
            name: 'Image',
            displayName: getLocalizedString('Image', 'PreviewStringId.EditingFieldEditors_Image'),
            drawingEnabled: false,
            imageLoadEnabled: true
        });
        editingFieldExtensions_EditingFieldExtensions.registerImageEditor({
            name: 'Signature',
            displayName: getLocalizedString('Signature', 'PreviewStringId.EditingFieldEditors_Signature'),
            drawingEnabled: true,
            imageLoadEnabled: false
        });
        editingFieldExtensions_EditingFieldExtensions.registerImageEditor({
            name: 'ImageAndSignature',
            displayName: getLocalizedString('Image And Signature', 'PreviewStringId.EditingFieldEditors_ImageAndSignature'),
            drawingEnabled: true,
            imageLoadEnabled: true
        });
        editingFieldExtensions_EditingFieldExtensions.registerRegExpEditor('OnlyLatinLetters', getLocalizedString('Only Latin Letters', 'PreviewStringId.EditingFieldEditors_OnlyLatinLetters'), Categories.Letters(), /^[a-zA-Z]*$/, /^[a-zA-Z]*$/, '');
    }
    static enableImageEditorShading() {
        ['Image', 'ImageAndSignature', 'Signature'].forEach(editorType => {
            var editor = editingFieldExtensions_EditingFieldExtensions.instance()._editors[editorType];
            Object(external_DevExpress_Analytics_Internal_["extend"])(true, editor, { options: { registrationOptions: { shadingEnabled: true } } });
        });
    }
    static registerImageEditor(imageRegistrationOptions) {
        imageRegistrationOptions.imageLoadEnabled = imageRegistrationOptions.imageLoadEnabled === undefined ? !imageRegistrationOptions.images : imageRegistrationOptions.imageLoadEnabled;
        imageRegistrationOptions.drawingEnabled = imageRegistrationOptions.drawingEnabled === undefined ? false : imageRegistrationOptions.drawingEnabled;
        var editMode = PictureEditMode.ImageAndSignature;
        if (!imageRegistrationOptions.imageLoadEnabled)
            editMode = PictureEditMode.Signature;
        if (!imageRegistrationOptions.drawingEnabled)
            editMode = PictureEditMode.Image;
        var options = {
            editMode: editMode,
            registrationOptions: imageRegistrationOptions
        };
        options['callbacks'] = {
            customizeActions: (s, actions) => {
                if (imageRegistrationOptions.images) {
                    var imagePickerAction = s.actionsProvider.createImagePickerAction(imageRegistrationOptions.images, imageRegistrationOptions.searchEnabled, (base64) => {
                        s.painter.image(base64);
                        s.painter.refresh();
                    });
                    actions.splice(0, 0, imagePickerAction);
                    if (!imageRegistrationOptions.sizeOptionsEnabled) {
                        var alignmentAction = actions.filter(x => x.id === PictureEditorActionId.Alignment)[0];
                        alignmentAction && actions.splice(actions.indexOf(alignmentAction), 1);
                    }
                }
                if (!imageRegistrationOptions.imageLoadEnabled) {
                    var openFile = actions.filter((x => x.id === PictureEditorActionId.OpenFile))[0];
                    openFile && actions.splice(actions.indexOf(openFile), 1);
                }
                if (imageRegistrationOptions.sizeOptionsEnabled !== undefined && !imageRegistrationOptions.sizeOptionsEnabled) {
                    var alignmentAction = actions.filter(x => x.id === PictureEditorActionId.Alignment)[0];
                    alignmentAction && actions.splice(actions.indexOf(alignmentAction), 1);
                }
                if (imageRegistrationOptions.clearEnabled !== undefined && !imageRegistrationOptions.clearEnabled) {
                    var clearAction = actions.filter(x => x.id === PictureEditorActionId.Clear)[0];
                    clearAction && actions.splice(actions.indexOf(clearAction), 1);
                }
                if (imageRegistrationOptions.customizeActions) {
                    imageRegistrationOptions.customizeActions(s, actions);
                    return;
                }
            }
        };
        editingFieldExtensions_EditingFieldExtensions.registerEditor(imageRegistrationOptions.name, imageRegistrationOptions.displayName, Categories.Image(), options, 'dxrp-editing-field-image');
    }
    static registerEditor(name, displayName, category, options, template, validate, defaultVal = '') {
        var initValue;
        var extendOptions = {
            onInitialized: e => {
                if (validate) {
                    external_DevExpress_Analytics_Widgets_Internal_["ValueEditorHelper"].validateWidgetValue(e, validate, defaultVal);
                }
                initValue = e.component.option('value');
            },
            onKeyUp: e => {
                var editor = e.component;
                Object(external_DevExpress_Analytics_Internal_["processTextEditorHotKeys"])(e.event, {
                    esc: () => {
                        editor.blur();
                        editor.option('value', initValue);
                    },
                    ctrlEnter: () => {
                        editor.blur();
                    }
                });
            }
        };
        editingFieldExtensions_EditingFieldExtensions.instance()._editors[name] = {
            name: name,
            displayName: displayName,
            category: category,
            options: external_jQuery_["extend"]({}, options, extendOptions),
            template: template
        };
    }
    static registerMaskEditor(editorID, displayName, category, mask) {
        editingFieldExtensions_EditingFieldExtensions.registerEditor(editorID, displayName, category, { mask: mask });
    }
    static registerRegExpEditor(editorID, displayName, category, regExpEditing, regExpFinal, defaultVal) {
        var validate = (val) => { return regExpFinal.test(val); };
        editingFieldExtensions_EditingFieldExtensions.registerEditor(editorID, displayName, category, external_DevExpress_Analytics_Widgets_Internal_["ValueEditorHelper"].getValueEditorOptions(regExpEditing, validate, defaultVal), null, validate, defaultVal);
    }
    static unregisterEditor(editorID) {
        delete editingFieldExtensions_EditingFieldExtensions.instance()._editors[editorID];
    }
    categories(excludeCategories = []) {
        var categories = [];
        Object.keys(this._editors).forEach(p => {
            var category = this._editors[p].category;
            if (excludeCategories.indexOf(category) === -1 && categories.indexOf(category) === -1) {
                categories.push(category);
            }
        });
        return categories;
    }
    editors() {
        return Object.keys(this._editors).map(key => this._editors[key]);
    }
    editorsByCategories(categories = []) {
        var editors = [];
        Object.keys(this._editors).forEach(p => {
            if (categories.indexOf(this._editors[p].category) != -1) {
                editors.push(this._editors[p]);
            }
        });
        return editors;
    }
    editor(editorID) {
        return this._editors[editorID];
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-editing.js



// EXTERNAL MODULE: external "DevExpress.Analytics.Widgets"
var external_DevExpress_Analytics_Widgets_ = __webpack_require__(4);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/utils/_utils.js



var cultureInfo = {};
var generateGuid = () => {
    var getNewQuartet = function (i) {
        return Math.floor((1 + Math.random()) * Math.pow(0x10000, i)).toString(16).substring(1);
    };
    return getNewQuartet(2) + '-' + getNewQuartet(1) + '-' + getNewQuartet(1) + '-' + getNewQuartet(1) + '-' + getNewQuartet(3);
};
var commonBlur = HTMLElement.prototype.blur;
var fullscreenEventsList = ['fullscreenchange', 'mozfullscreenchange', 'webkitfullscreenchange', 'MSFullscreenChange'];
function createFullscreenComputed(element, parent) {
    var _fullscreen = external_ko_["observable"](false);
    var func = () => {
        var isFullscreen = document.fullscreen || !!document['msFullscreenElement'] || !!document['webkitFullscreenElement'];
        if (element['msRequestFullscreen']) {
            HTMLElement.prototype.blur = isFullscreen ? function () {
                try {
                    commonBlur.apply(this);
                }
                catch (e) {
                    document.body.blur();
                }
            } : commonBlur;
        }
        _fullscreen(isFullscreen);
    };
    var fullscreen = external_ko_["computed"]({
        read: () => _fullscreen(),
        write: (newVal) => {
            _fullscreen(newVal);
            toggleFullscreen(element, newVal);
        }
    });
    addFullscreenListener(document, func);
    parent._disposables.push({
        dispose: () => {
            removeFullscreenListener(document, func);
            commonBlur = null;
            func = null;
        }
    }, fullscreen);
    return fullscreen;
}
function processZoomFactor(accessibilityCompliant) {
    if (!accessibilityCompliant)
        return;
    var defaultFontSize = 16;
    var zoomFactor = (parseInt(window.getComputedStyle(document.documentElement).getPropertyValue('font-size')) || defaultFontSize) / defaultFontSize;
    if (zoomFactor !== Object(external_DevExpress_Analytics_Internal_["accessibilityFontSizeZoomFactor"])()) {
        Object(external_DevExpress_Analytics_Widgets_Internal_["propertiesGridEditorsPaddingLeft"])(zoomFactor * Object(external_DevExpress_Analytics_Widgets_Internal_["propertiesGridEditorsPaddingLeft"])());
        Object(external_DevExpress_Analytics_Internal_["accessibilityFontSizeZoomFactor"])(zoomFactor);
    }
}
function addFullscreenListener(element, func) {
    fullscreenEventsList.forEach((eventName) => {
        element.addEventListener(eventName, func);
    });
}
function removeFullscreenListener(element, func) {
    fullscreenEventsList.forEach((eventName) => {
        element.removeEventListener(eventName, func);
    });
}
function showFullscreen(element) {
    if (element.requestFullscreen)
        element.requestFullscreen();
    else if (element['mozRequestFullScreen'])
        element['mozRequestFullScreen']();
    else if (element['webkitRequestFullscreen'])
        element['webkitRequestFullscreen']();
    else if (element['msRequestFullscreen']) {
        element['msRequestFullscreen']();
    }
}
function exitFullscreen() {
    if (document.exitFullscreen)
        document.exitFullscreen();
    else if (document['mozCancelFullScreen'])
        document['mozCancelFullScreen']();
    else if (document['webkitExitFullscreen'])
        document['webkitExitFullscreen']();
    else if (document['msExitFullscreen']) {
        HTMLElement.prototype.blur = commonBlur;
        document['msExitFullscreen']();
    }
}
function toggleFullscreen(element, value) {
    if (!element)
        return;
    if (value)
        showFullscreen(element);
    else
        exitFullscreen();
}
function transformNewLineCharacters(value) {
    return value.replace(/(\r\n|\n|\r)/g, '\r\n');
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/widgets/_editorTemplates.js



var editorTemplates = {
    csvSeparator: { header: 'dx-text',
        extendedOptions: { placeholder: external_ko_["pureComputed"](() => (cultureInfo['csvTextSeparator'] || '') + ' ' + Object(external_DevExpress_Analytics_Utils_["getLocalization"])('(Using System Separator)', 'PreviewStringId.ExportOption_CsvSeparator_UsingSystem')) }
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/metadata.js




var pageBorderColor = { propertyName: 'pageBorderColor', modelName: '@PageBorderColor', from: external_DevExpress_Analytics_Utils_["colorFromString"], toJsonObject: external_DevExpress_Analytics_Utils_["colorToString"], displayName: 'Page Border Color', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.PageBorderColor', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('customColorEditor'), defaultVal: 'Black' };
var pageBorderWidth = { propertyName: 'pageBorderWidth', modelName: '@PageBorderWidth', displayName: 'Page Border Width', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.PageBorderWidth', from: external_DevExpress_Analytics_Utils_["floatFromModel"], editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('numeric'), defaultVal: 1 };
var pageRange = { propertyName: 'pageRange', modelName: '@PageRange', displayName: 'Page Range', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.PageRange', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text'), defaultVal: '' };
var expotOptionsTitle = { propertyName: 'title', modelName: '@Title', displayName: 'Title', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.Title', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text'), defaultVal: 'Document' };
var htmlTableLayout = { propertyName: 'tableLayout', modelName: '@TableLayout', displayName: 'Table Layout', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.TableLayout', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], defaultVal: true };
var docxTableLayout = { propertyName: 'tableLayout', modelName: '@TableLayout', displayName: 'Table Layout', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.TableLayout', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], defaultVal: false };
var allowURLsWithJSContent = { propertyName: 'allowURLsWithJSContent', modelName: '@AllowURLsWithJSContent', displayName: 'Allow URLs with JS Content', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.AllowURLsWithJSContent', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], defaultVal: false };
var rasterizationResolution = { propertyName: 'rasterizationResolution', modelName: '@RasterizationResolution', displayName: 'Rasterization Resolution', localizationId: 'DevExpress.XtraPrinting.PageByPageExportOptionsBase.RasterizationResolution', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('numeric'), defaultVal: 96 };
var rasterizeImages = { propertyName: 'rasterizeImages', modelName: '@RasterizeImages', displayName: 'Rasterize Images', localizationId: 'DevExpress.XtraPrinting.PageByPageExportOptionsBase.RasterizeImages', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] };
var useHRefHyperlinks = { propertyName: 'useHRefHyperlinks', modelName: '@UseHRefHyperlinks', displayName: 'Use HRef Hyperlinks', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.UseHRefHyperlinks', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], defaultVal: false };
var exportWatermarks = { propertyName: 'exportWatermarks', modelName: '@ExportWatermarks', displayName: 'Export Watermarks', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.ExportWatermarks', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] };
var inlineCss = { propertyName: 'inlineCss', modelName: '@InlineCss', displayName: 'Inline CSS', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.InlineCss', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] };
var removeSecondarySymbols = { propertyName: 'removeSecondarySymbols', modelName: '@RemoveSecondarySymbols', displayName: 'Remove Secondary Symbols', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.RemoveSecondarySymbols', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], defaultVal: false };
var characterSet = {
    propertyName: 'characterSet', modelName: '@CharacterSet', displayName: 'Character Set', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.CharacterSet', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'utf-8',
    valuesArray: [{ value: 'windows-1256', displayValue: 'Arabic (Windows)' }, { value: 'iso-8859-4', displayValue: 'Baltic (ISO)' }, { value: 'windows-1257', displayValue: 'Baltic (Windows)' }, { value: 'iso-8859-2', displayValue: 'Central European (ISO)' }, { value: 'windows-1250', displayValue: 'Central European (Windows)' }, { value: 'iso-8859-5', displayValue: 'Cyrillic (ISO)' }, { value: 'koi8-r', displayValue: 'Cyrillic (KOI8-r)' }, { value: 'windows-1251', displayValue: 'Cyrillic (Windows)' }, { value: 'iso-8859-15', displayValue: 'Latin 9 (ISO)' }, { value: 'utf-7', displayValue: 'Unicode (UTF-7)' }, { value: 'utf-8', displayValue: 'Unicode (UTF-8)' }, { value: 'iso-8859-1', displayValue: 'Western European (ISO)' }, { value: 'windows-1252', displayValue: 'Western European (Windows)' }]
};
function getExportModeValues(format = 'Html', preview, merged) {
    var singleFile = { value: 'SingleFile', displayValue: 'Single File', localizationId: Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])('PreviewStringId.ExportOption_{0}ExportMode_SingleFile', format) };
    var singleFilePageByPage = { value: 'SingleFilePageByPage', displayValue: 'Single File PageByPage', localizationId: Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])('PreviewStringId.ExportOption_{0}ExportMode_SingleFilePageByPage', format) };
    var differentFiles = { value: 'DifferentFiles', displayValue: 'Different Files', localizationId: Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])('PreviewStringId.ExportOption_{0}ExportMode_DifferentFiles', format) };
    if (merged) {
        return [singleFilePageByPage];
    }
    else if (preview) {
        return [singleFile, singleFilePageByPage];
    }
    else {
        return [singleFile, singleFilePageByPage, differentFiles];
    }
}
var exportPageBreaks = { propertyName: 'exportPageBreaks', modelName: '@ExportPageBreaks', displayName: 'Export Page Breaks', localizationId: 'DevExpress.XtraPrinting.FormattedTextExportOptions.ExportPageBreaks', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] };
var rtfExportMode = {
    propertyName: 'rtfExportMode', modelName: '@ExportMode', defaultVal: 'SingleFilePageByPage',
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions.ExportMode',
    valuesArray: getExportModeValues('Rtf', true)
};
var docxExportMode = {
    propertyName: 'docxExportMode', modelName: '@ExportMode', defaultVal: 'SingleFilePageByPage',
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.ExportMode',
    valuesArray: getExportModeValues('Docx', true)
};
var htmlExportMode = {
    propertyName: 'htmlExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptionsBase.ExportMode',
    valuesArray: getExportModeValues('Html')
};
var embedImagesInHTML = {
    propertyName: 'embedImagesInHTML', modelName: '@EmbedImagesInHTML', defaultVal: false,
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], displayName: 'Embed Images In HTML', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions.EmbedImagesInHTML'
};
var imageExportMode = {
    propertyName: 'imageExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.ExportMode',
    valuesArray: getExportModeValues('Image')
};
var xlsExportMode = {
    propertyName: 'xlsExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.ExportMode',
    valuesArray: getExportModeValues('Xls')
};
var xlsxExportMode = {
    propertyName: 'xlsxExportMode', modelName: '@ExportMode', defaultVal: 'SingleFile',
    editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Export Mode', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions.ExportMode',
    valuesArray: getExportModeValues('Xlsx')
};
function getTextExportModeValues() {
    return [
        { value: 'Text', displayValue: 'Text', localizationId: 'DevExpress.XtraPrinting.TextExportMode.Text' },
        { value: 'Value', displayValue: 'Value', localizationId: 'DevExpress.XtraPrinting.TextExportMode.Value' }
    ];
}
var textExportMode = {
    propertyName: 'textExportMode', modelName: '@TextExportMode', displayName: 'Text Export Mode', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.TextExportMode', defaultVal: 'Text', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'),
    valuesArray: getTextExportModeValues()
};
var xlsTextExportMode = {
    propertyName: 'textExportMode', modelName: '@TextExportMode', displayName: 'Text Export Mode', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.TextExportMode', defaultVal: 'Value', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'),
    valuesArray: getTextExportModeValues()
};
var csvTextSeparator = { propertyName: 'separator', modelName: '@Separator', defaultVal: '', displayName: 'Separator', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.Separator', editor: editorTemplates.csvSeparator };
var useCustomSeparator = { propertyName: 'useCustomSeparator', displayName: 'Use Custom Separator', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions.UseCustomSeparator', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool') };
var textEncodingType = {
    propertyName: 'encodingType', modelName: '@EncodingType', displayName: 'Encoding', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.Encoding', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'Default', from: external_DevExpress_Analytics_Utils_["fromEnum"],
    valuesArray: [
        { value: 'Default', displayValue: 'Windows-1252', localizationId: 'DevExpress.XtraPrinting.EncodingType.Default' },
        { value: 'ASCII', displayValue: 'us-ascii', localizationId: 'DevExpress.XtraPrinting.EncodingType.ASCII' },
        { value: 'Unicode', displayValue: 'utf-16', localizationId: 'DevExpress.XtraPrinting.EncodingType.Unicode' },
        { value: 'BigEndianUnicode', displayValue: 'utf-16BE', localizationId: 'DevExpress.XtraPrinting.EncodingType.BigEndianUnicode' },
        { value: 'UTF7', displayValue: 'utf-7', localizationId: 'DevExpress.XtraPrinting.EncodingType.UTF7' },
        { value: 'UTF8', displayValue: 'utf-8', localizationId: 'DevExpress.XtraPrinting.EncodingType.UTF8' },
        { value: 'UTF32', displayValue: 'utf-32', localizationId: 'DevExpress.XtraPrinting.EncodingType.UTF32' }
    ]
};
var xlsExportHyperlinks = {
    propertyName: 'exportHyperlinks', modelName: '@ExportHyperlinks', displayName: 'Export Hyperlinks', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.ExportHyperlinks', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"]
};
var xlsRawDataMode = {
    propertyName: 'rawDataMode', modelName: '@RawDataMode', displayName: 'Raw Data Mode', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.RawDataMode', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"]
};
var xlsShowGridLines = {
    propertyName: 'showGridLines', modelName: '@ShowGridLines', displayName: 'Show Grid Lines', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.ShowGridLines', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"]
};
var xlsExportOptionsSheetName = {
    propertyName: 'sheetName', modelName: '@SheetName', displayName: 'Sheet Name', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.SheetName', defaultVal: 'Sheet', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text')
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/csvMetaData.js



var csvExportOptionsSerializationInfo = [
    textEncodingType,
    textExportMode,
    { propertyName: 'quoteStringsWithSeparators', modelName: '@QuoteStringsWithSeparators', displayName: 'Quote Strings with Separators', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.QuoteStringsWithSeparators', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    useCustomSeparator, csvTextSeparator,
    { propertyName: 'skipEmptyRows', modelName: '@SkipEmptyRows', displayName: 'Skip Empty Rows', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions.SkipEmptyRows', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'skipEmptyColumns', modelName: '@SkipEmptyColumns', displayName: 'Skip Empty Columns', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions.SkipEmptyColumns', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/csvExportOptions.js



class csvExportOptions_CsvExportOptions {
    constructor(model, serializer) {
        this.defaultSeparatorValue = '';
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
        this.useCustomSeparator = external_ko_["observable"](this.separator && this.separator() !== this.defaultSeparatorValue);
        var separatorValue = external_ko_["observable"](this.separator());
        this.useCustomSeparator.subscribe((newValue) => {
            if (!newValue)
                separatorValue(this.defaultSeparatorValue);
        });
        this.separator = external_ko_["computed"]({
            read: () => { return separatorValue(); },
            write: (newValue) => {
                separatorValue(newValue);
                if (this.useCustomSeparator)
                    this.useCustomSeparator(newValue !== this.defaultSeparatorValue);
            }
        });
    }
    static from(model, serializer) {
        return new csvExportOptions_CsvExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, csvExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return csvExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return (name === 'separator') && !(this.useCustomSeparator && this.useCustomSeparator());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/options/docxExportDocumentOptions.js


class docxExportDocumentOptions_DocxExportDocumentOptions {
    static from(model, serializer) {
        return new docxExportDocumentOptions_DocxExportDocumentOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, docxExportDocumentOptionsSerializationInfo, refs);
    }
    getInfo() {
        return docxExportDocumentOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
}
var docxExportDocumentOptionsSerializationInfo = [
    { propertyName: 'title', modelName: '@Title', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Title', displayName: 'Title', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'subject', modelName: '@Subject', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Subject', displayName: 'Subject', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'keywords', modelName: '@Keywords', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Keywords', displayName: 'Keywords', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'category', modelName: '@Category', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Category', displayName: 'Category', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'comments', modelName: '@Comments', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Comments', displayName: 'Comments', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'author', modelName: '@Author', localizationId: 'DevExpress.XtraPrinting.DocxDocumentOptions.Author', displayName: 'Author', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/rtfMetaData.js



var rtfExportOptionsSerializationInfoBase = [
    pageRange,
    rasterizationResolution,
    exportPageBreaks,
    exportWatermarks
];
var emptyFirstPageHeaderFooter = { propertyName: 'emptyFirstPageHeaderFooter', modelName: '@EmptyFirstPageHeaderFooter', displayName: 'Empty First Page Header/Footer', localizationId: 'DevExpress.XtraPrinting.FormattedTextExportOptions.EmptyFirstPageHeaderFooter', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] };
var keepRowHeight = { propertyName: 'keepRowHeight', modelName: '@KeepRowHeight', displayName: 'Keep Row Height', localizationId: 'DevExpress.XtraPrinting.FormattedTextExportOptions.KeepRowHeight', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] };
var rtfExportOptionsSerializationInfo = [
    emptyFirstPageHeaderFooter,
    keepRowHeight,
    rtfExportMode
].concat(rtfExportOptionsSerializationInfoBase);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/docxMetaData.js





var docxDocumentOptions = { propertyName: 'documentOptions', modelName: 'DocumentOptions', displayName: 'Document Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.DocumentOptions', from: docxExportDocumentOptions_DocxExportDocumentOptions.from, toJsonObject: docxExportDocumentOptions_DocxExportDocumentOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') };
var docxExportOptionsSerializationInfo = [
    docxExportMode,
    exportWatermarks,
    pageRange,
    rasterizeImages,
    rasterizationResolution,
    emptyFirstPageHeaderFooter,
    keepRowHeight,
    exportPageBreaks,
    docxTableLayout,
    { propertyName: 'allowFloatingPictures', modelName: '@AllowFloatingPictures', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions.AllowFloatingPictures', displayName: 'Allow Floating Pictures', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"], defaultVal: false },
    docxDocumentOptions,
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/docxExportOptions.js



class docxExportOptions_DocxExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new docxExportOptions_DocxExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, docxExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return docxExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        var exportMode = this.docxExportMode ? this.docxExportMode() : docxExportMode.defaultVal;
        if (name === 'pageRange' || name === 'tableLayout')
            return exportMode === 'SingleFile';
        else if (name === 'emptyFirstPageHeaderFooter' || name === 'exportPageBreaks') {
            return exportMode === 'SingleFilePageByPage';
        }
        else if (name === 'keepRowHeight') {
            return exportMode === 'SingleFilePageByPage' && !this.tableLayout();
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/emailExportOptions.js


class emailExportOptions_AdditionalRecipientModel {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    getInfo() {
        return additionalRecipientSerializationsInfo;
    }
}
emailExportOptions_AdditionalRecipientModel.createNew = () => {
    return new emailExportOptions_AdditionalRecipientModel({});
};
var additionalRecipientSerializationsInfo = [
    { propertyName: 'ContactName', modelName: '@ContactName', displayName: 'ContactName', localizationId: 'DevExpress.XtraPrinting.Recipient.ContactName', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'Address', modelName: '@Address', displayName: 'Address', localizationId: 'DevExpress.XtraPrinting.Recipient.Address', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'Prefix', modelName: '@Prefix', displayName: 'Prefix', localizationId: 'DevExpress.XtraPrinting.Recipient.Prefix', defaultVal: 'SMTP:', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    {
        propertyName: 'fieldType', modelName: '@FieldType', displayName: 'Field Type', localizationId: 'DevExpress.XtraPrinting.Recipient.FieldType', defaultVal: 'TO', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), from: external_DevExpress_Analytics_Utils_["fromEnum"],
        valuesArray: [
            { value: 'TO', displayValue: 'TO', localizationId: 'DevExpress.XtraPrinting.RecipientFieldType.TO' },
            { value: 'CC', displayValue: 'CC', localizationId: 'DevExpress.XtraPrinting.RecipientFieldType.CC' },
            { value: 'BCC', displayValue: 'BCC', localizationId: 'DevExpress.XtraPrinting.RecipientFieldType.BCC' }
        ]
    },
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/emailMetaData.js



var nativeFormatOptionsSerializationInfo = [
    { propertyName: 'compressed', modelName: '@Compressed', displayName: 'Compressed', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.Compressed', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'showOptionsBeforeSave', modelName: '@ShowOptionsBeforeSave', displayName: 'Show Options Before Save', localizationId: 'DevExpress.XtraPrinting.NativeFormatOptions.ShowOptionsBeforeSave', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] }
];
var additionalRecipients = { propertyName: 'additionalRecipients', modelName: 'AdditionalRecipients', displayName: 'Additional Recipients', localizationId: 'DevExpress.XtraPrinting.EmailOptions.AdditionalRecipients', array: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('commonCollection'), addHandler: emailExportOptions_AdditionalRecipientModel.createNew, template: '#dxrd-commonCollectionItem' };
var emailOptionsSerializationInfo = [
    { propertyName: 'recipientName', modelName: '@RecipientName', displayName: 'Recipient Name', localizationId: 'DevExpress.XtraPrinting.EmailOptions.RecipientName', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'recipientAddress', modelName: '@RecipientAddress', displayName: 'Recipient Address', localizationId: 'DevExpress.XtraPrinting.EmailOptions.RecipientAddress', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'recipientAddressPrefix', modelName: '@RecipientAddressPrefix', displayName: 'Recipient Address Prefix', localizationId: 'DevExpress.XtraPrinting.EmailOptions.RecipientAddressPrefix', defaultVal: 'SMTP:', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'subject', modelName: '@Subject', displayName: 'Subject', localizationId: 'DevExpress.XtraPrinting.EmailOptions.Subject', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'body', modelName: '@Body', displayName: 'Body', localizationId: 'DevExpress.XtraPrinting.EmailOptions.Body', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    additionalRecipients
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/htmlMetaData.js

var htmlExportOptionsSerializationInfoBase = [
    pageBorderColor,
    pageBorderWidth,
    pageRange,
    rasterizationResolution,
    expotOptionsTitle,
    htmlTableLayout,
    useHRefHyperlinks,
    allowURLsWithJSContent,
    removeSecondarySymbols,
    exportWatermarks,
    characterSet
];
var htmlExportOptionsSerializationInfo = [htmlExportMode, embedImagesInHTML, inlineCss].concat(htmlExportOptionsSerializationInfoBase);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/htmlExportOptions.js



class htmlExportOptions_HtmlExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new htmlExportOptions_HtmlExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, htmlExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return htmlExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return ((name === 'pageRange') || (name === 'pageBorderWidth') || (name === 'exportWatermarks')) && ((this.htmlExportMode ? this.htmlExportMode() : htmlExportMode.defaultVal) === 'SingleFile');
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/imageMetaData.js



var imageExportOptionsSerializationInfoBase = [
    pageBorderColor,
    pageBorderWidth,
    pageRange,
    { propertyName: 'resolution', modelName: '@Resolution', displayName: 'Resolution', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.Resolution', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('numeric'), defaultVal: 96 },
    {
        propertyName: 'format', modelName: '@Format', displayName: 'Format', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.Format', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'Png', from: external_DevExpress_Analytics_Utils_["fromEnum"],
        valuesArray: [
            { value: 'Bmp', displayValue: 'BMP' },
            { value: 'Gif', displayValue: 'GIF' },
            { value: 'Jpeg', displayValue: 'JPEG' },
            { value: 'Png', displayValue: 'PNG' },
            { value: 'Emf', displayValue: 'EMF' },
            { value: 'Wmf', displayValue: 'WMF' },
            { value: 'Tiff', displayValue: 'TIFF' }
        ]
    }
];
var imageExportOptionsSerializationInfo = [imageExportMode, { propertyName: 'retainBackgroundTransparency', modelName: '@RetainBackgroundTransparency', displayName: 'Retain Background Transparency', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.RetainBackgroundTransparency', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    {
        propertyName: 'textRenderingMode', modelName: '@TextRenderingMode', displayName: 'Text Rendering Mode', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions.TextRenderingMode', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'SystemDefault', from: external_DevExpress_Analytics_Utils_["fromEnum"],
        valuesArray: [
            { value: 'SystemDefault', displayValue: 'SystemDefault', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.SystemDefault' },
            { value: 'SingleBitPerPixelGridFit', displayValue: 'SingleBitPerPixelGridFit', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.SingleBitPerPixelGridFit' },
            { value: 'SingleBitPerPixel', displayValue: 'SingleBitPerPixel', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.SingleBitPerPixel' },
            { value: 'AntiAliasGridFit', displayValue: 'AntiAliasGridFit', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.AntiAliasGridFit' },
            { value: 'AntiAlias', displayValue: 'AntiAlias', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.AntiAlias' },
            { value: 'ClearTypeGridFit', displayValue: 'ClearTypeGridFit', localizationId: 'DevExpress.XtraPrinting.TextRenderingMode.ClearTypeGridFit' }
        ]
    }
].concat(imageExportOptionsSerializationInfoBase);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/imageExportOptions.js



class imageExportOptions_ImageExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new imageExportOptions_ImageExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, imageExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return imageExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return ((name === 'pageRange') || (name === 'pageBorderWidth')) && ((this.imageExportMode ? this.imageExportMode() : imageExportMode.defaultVal) === 'SingleFile');
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/mhtMetaData.js

var mhtExportOptionsSerializationInfoBase = [
    pageBorderColor,
    pageBorderWidth,
    pageRange,
    rasterizationResolution,
    expotOptionsTitle,
    characterSet,
    htmlTableLayout,
    useHRefHyperlinks,
    allowURLsWithJSContent,
    removeSecondarySymbols,
    exportWatermarks
];
var mhtExportOptionsSerializationInfo = [htmlExportMode, inlineCss].concat(mhtExportOptionsSerializationInfoBase);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/mhtExportOptions.js



class mhtExportOptions_MhtExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new mhtExportOptions_MhtExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, mhtExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return mhtExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return ((name === 'pageRange') || (name === 'pageBorderWidth')) && ((this.htmlExportMode ? this.htmlExportMode() : htmlExportMode.defaultVal) === 'SingleFile');
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/options/pdfExportDocumentOptions.js


class pdfExportDocumentOptions_PdfExportDocumentOptions {
    static from(model, serializer) {
        return new pdfExportDocumentOptions_PdfExportDocumentOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportDocumentOptionsSerializationInfo, refs);
    }
    getInfo() {
        return pdfExportDocumentOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
}
var author = { propertyName: 'author', modelName: '@Author', displayName: 'Author', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Author', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') };
var application = { propertyName: 'application', modelName: '@Application', displayName: 'Application', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Application', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') };
var title = { propertyName: 'title', modelName: '@Title', displayName: 'Title', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Title', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') };
var subject = { propertyName: 'subject', modelName: '@Subject', displayName: 'Subject', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Subject', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') };
var pdfExportDocumentOptionsSerializationInfo = [
    author, application, title, subject,
    { propertyName: 'keywords', modelName: '@Keywords', displayName: 'Keywords', localizationId: 'DevExpress.XtraPrinting.PdfDocumentOptions.Keywords', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/options/pdfPermissionsOptions.js


class pdfPermissionsOptions_PdfPermissionsOptions {
    static from(model, serializer) {
        return new pdfPermissionsOptions_PdfPermissionsOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportPermissionsOptionsSerializationInfo, refs);
    }
    getInfo() {
        return pdfExportPermissionsOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
}
var pdfExportPermissionsOptionsSerializationInfo = [
    {
        propertyName: 'printingPermissions', modelName: '@PrintingPermissions', displayName: 'Printing Permissions', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.PrintingPermissions', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'),
        valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.PrintingPermissions.None' },
            { value: 'LowResolution', displayValue: 'LowResolution', localizationId: 'DevExpress.XtraPrinting.PrintingPermissions.LowResolution' },
            { value: 'HighResolution', displayValue: 'HighResolution', localizationId: 'DevExpress.XtraPrinting.PrintingPermissions.HighResolution' }
        ]
    },
    {
        propertyName: 'changingPermissions', modelName: '@ChangingPermissions', displayName: 'Changing Permissions', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.ChangingPermissions', defaultVal: 'None', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'),
        valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.None' },
            { value: 'InsertingDeletingRotating', displayValue: 'InsertingDeletingRotating', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.InsertingDeletingRotating' },
            { value: 'FillingSigning', displayValue: 'FillingSigning', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.FillingSigning' },
            { value: 'CommentingFillingSigning', displayValue: 'CommentingFillingSigning', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.CommentingFillingSigning' },
            { value: 'AnyExceptExtractingPages', displayValue: 'AnyExceptExtractingPages', localizationId: 'DevExpress.XtraPrinting.ChangingPermissions.AnyExceptExtractingPages' }
        ]
    },
    { propertyName: 'enableCopying', modelName: '@EnableCopying', displayName: 'Enable Copying', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.EnableCopying', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'enableScreenReaders', modelName: '@EnableScreenReaders', displayName: 'Enable Screen Readers', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions.EnableScreenReaders', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/options/pdfPasswordSecurityOptions.js




class pdfPasswordSecurityOptions_PdfPasswordSecurityOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new pdfPasswordSecurityOptions_PdfPasswordSecurityOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportPasswordSecurityOptionsSerializationInfo, refs);
    }
    getInfo() {
        return pdfExportPasswordSecurityOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        if (!(this.permissionsPassword && this.permissionsPassword())) {
            if (name === 'permissionsOptions')
                return true;
            if (name === pdfEncryptionLevel.propertyName)
                return !(this.openPassword && this.openPassword());
            return false;
        }
    }
    hasSensitiveData() {
        return !!(this.openPassword && this.openPassword() || this.permissionsPassword && this.permissionsPassword());
    }
}
var pdfEncryptionLevel = {
    propertyName: 'encryptionLevel', modelName: '@EncryptionLevel', displayName: 'Encryption Level', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions.EncryptionLevel', defaultVal: 'AES128', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'),
    valuesArray: [
        { value: 'ARC4', displayValue: 'ARC4', localizationId: 'DevExpress.XtraPrinting.PdfEncryptionLevel.ARC4' },
        { value: 'AES128', displayValue: 'AES128', localizationId: 'DevExpress.XtraPrinting.PdfEncryptionLevel.AES128' },
        { value: 'AES256', displayValue: 'AES256', localizationId: 'DevExpress.XtraPrinting.PdfEncryptionLevel.AES256' },
    ]
};
var pdfExportPasswordSecurityOptionsSerializationInfo = [
    Object(external_DevExpress_Analytics_Internal_["createPasswordSerializationInfo"])({ propertyName: 'openPassword', modelName: '@OpenPassword', displayName: 'Open Password', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions.OpenPassword', defaultVal: '' }),
    pdfEncryptionLevel,
    Object(external_DevExpress_Analytics_Internal_["createPasswordSerializationInfo"])({ propertyName: 'permissionsPassword', modelName: '@PermissionsPassword', displayName: 'Permissions Password', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions.PermissionsPassword', defaultVal: '' }),
    { propertyName: 'permissionsOptions', modelName: 'PermissionsOptions', displayName: 'Pdf Permissions Options', localizationId: 'DevExpress.XtraPrinting.PdfPermissionsOptions', from: pdfPermissionsOptions_PdfPermissionsOptions.from, toJsonObject: pdfPermissionsOptions_PdfPermissionsOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/pdfMetaData.js





var pdfACompatibilityValues = { None: 'None', PdfA1b: 'PdfA1b', PdfA2b: 'PdfA2b', PdfA3b: 'PdfA3b' };
var pdfACompatibility = {
    propertyName: 'pdfACompatibility', modelName: '@PdfACompatibility', displayName: 'PDF A Compatibility', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.PdfACompatibility', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: pdfACompatibilityValues.None, from: external_DevExpress_Analytics_Utils_["fromEnum"],
    valuesArray: [
        { value: pdfACompatibilityValues.None, displayValue: pdfACompatibilityValues.None, localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.None' },
        { value: pdfACompatibilityValues.PdfA1b, displayValue: pdfACompatibilityValues.PdfA1b, localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA1b' },
        { value: pdfACompatibilityValues.PdfA2b, displayValue: pdfACompatibilityValues.PdfA2b, localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA2b' },
        { value: pdfACompatibilityValues.PdfA3b, displayValue: pdfACompatibilityValues.PdfA3b, localizationId: 'DevExpress.XtraPrinting.PdfACompatibility.PdfA3b' }
    ]
};
var pdfUACompatibilityValues = { None: 'None', PdfUA1: 'PdfUA1' };
var pdfUACompatibility = {
    propertyName: 'pdfUACompatibility', modelName: '@PdfUACompatibility', displayName: 'PDF UA Compatibility', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.PdfUACompatibility', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: pdfUACompatibilityValues.None, from: external_DevExpress_Analytics_Utils_["fromEnum"],
    valuesArray: [
        { value: pdfUACompatibilityValues.None, displayValue: pdfACompatibilityValues.None, localizationId: 'DevExpress.XtraPrinting.PdfUACompatibility.None' },
        { value: pdfUACompatibilityValues.PdfUA1, displayValue: pdfUACompatibilityValues.PdfUA1, localizationId: 'DevExpress.XtraPrinting.PdfUACompatibility.PdfUA1' }
    ]
};
var pdfExportOptionsSerializationInfo = [
    { propertyName: 'convertImagesToJpeg', modelName: '@ConvertImagesToJpeg', displayName: 'Convert Images to Jpeg', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ConvertImagesToJpeg', defaultVal: true, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'showPrintDialogOnOpen', modelName: '@ShowPrintDialogOnOpen', displayName: 'Show Print Dialog on Open', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ShowPrintDialogOnOpen', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'neverEmbeddedFonts', modelName: '@NeverEmbeddedFonts', displayName: 'Never Embedded Fonts', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.NeverEmbeddedFonts', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'exportEditingFieldsToAcroForms', modelName: '@ExportEditingFieldsToAcroForms', displayName: 'Export Editing Fields To AcroForms', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ExportEditingFieldsToAcroForms', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    {
        propertyName: 'imageQuality', modelName: '@ImageQuality', displayName: 'Image Quality', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.ImageQuality', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'Highest', from: external_DevExpress_Analytics_Utils_["fromEnum"],
        valuesArray: [
            { value: 'Lowest', displayValue: 'Lowest', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Lowest' },
            { value: 'Low', displayValue: 'Low', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Low' },
            { value: 'Medium', displayValue: 'Medium', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Medium' },
            { value: 'High', displayValue: 'High', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.High' },
            { value: 'Highest', displayValue: 'Highest', localizationId: 'DevExpress.XtraPrinting.PdfJpegImageQuality.Highest' }
        ]
    },
    pdfACompatibility,
    pdfUACompatibility,
    pageRange,
    rasterizationResolution,
    rasterizeImages,
    { propertyName: 'documentOptions', modelName: 'DocumentOptions', displayName: 'Document Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions.DocumentOptions', from: pdfExportDocumentOptions_PdfExportDocumentOptions.from, toJsonObject: pdfExportDocumentOptions_PdfExportDocumentOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'pdfPasswordSecurityOptions', modelName: 'PasswordSecurityOptions', displayName: 'Pdf Password Security Options', localizationId: 'DevExpress.XtraPrinting.PdfPasswordSecurityOptions', from: pdfPasswordSecurityOptions_PdfPasswordSecurityOptions.from, toJsonObject: pdfPasswordSecurityOptions_PdfPasswordSecurityOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/pdfExportOptions.js


class pdfExportOptions_PdfExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new pdfExportOptions_PdfExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, pdfExportOptionsSerializationInfo, refs);
    }
    isPropertyDisabled(propertyName) {
        var _pdfACompatibility = this.pdfACompatibility ? this.pdfACompatibility() : pdfACompatibility.defaultVal;
        var _pdfUACompatibility = this.pdfUACompatibility ? this.pdfUACompatibility() : pdfUACompatibility.defaultVal;
        if (propertyName === 'exportEditingFieldsToAcroForms')
            return _pdfACompatibility === pdfACompatibilityValues.PdfA1b;
        else if (propertyName === 'neverEmbeddedFonts')
            return _pdfACompatibility != pdfACompatibilityValues.None || _pdfUACompatibility != pdfUACompatibilityValues.None;
        else if (propertyName === 'pdfPasswordSecurityOptions' || propertyName === 'showPrintDialogOnOpen')
            return _pdfACompatibility != pdfACompatibilityValues.None;
    }
    getInfo() {
        return pdfExportOptionsSerializationInfo;
    }
    hasSensitiveData() {
        return this.pdfPasswordSecurityOptions && this.pdfPasswordSecurityOptions.hasSensitiveData();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/printPreviewMetaData.js

var printPreviewOptionsSerializationInfo = [
    { propertyName: 'defaultFileName', modelName: '@DefaultFileName', displayName: 'Default File Name', localizationId: 'DevExpress.XtraPrinting.PrintPreviewOptions.DefaultFileName', defaultVal: 'Document', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/printPreviewOptions.js


class printPreviewOptions_PrintPreviewOptions {
    static from(model, serializer) {
        return new printPreviewOptions_PrintPreviewOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, printPreviewOptionsSerializationInfo, refs);
    }
    getInfo() {
        return printPreviewOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/rtfExportOptions.js



class rtfExportOptions_RtfExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new rtfExportOptions_RtfExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, rtfExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return rtfExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        var exportMode = this.rtfExportMode ? this.rtfExportMode() : rtfExportMode.defaultVal;
        if (name === 'pageRange')
            return exportMode === 'SingleFile';
        else if (name === 'emptyFirstPageHeaderFooter' || name === 'exportPageBreaks' || name === 'keepRowHeight') {
            return exportMode === 'SingleFilePageByPage';
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/textMetaData.js



var textExportOptionsSerializationInfo = [
    textEncodingType,
    { propertyName: 'quoteStringsWithSeparators', modelName: '@QuoteStringsWithSeparators', displayName: 'Quote Strings with Separators', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.QuoteStringsWithSeparators', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'separator', modelName: '@Separator', displayName: 'Separator', localizationId: 'DevExpress.XtraPrinting.TextExportOptionsBase.Separator', defaultVal: 'TAB', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    textExportMode
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/textExportOptions.js


class textExportOptions_TextExportOptions {
    static from(model, serializer) {
        return new textExportOptions_TextExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, textExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return textExportOptionsSerializationInfo;
    }
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/xlsMetaData.js





var documentOptionsSerializationsInfo = [
    author, application, title, subject,
    { propertyName: 'tags', modelName: '@Tags', displayName: 'Tags', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Tags', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'category', modelName: '@Category', displayName: 'Category', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Category', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'comments', modelName: '@Comments', displayName: 'Comments', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Comments', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') },
    { propertyName: 'company', modelName: '@Company', displayName: 'Company', localizationId: 'DevExpress.XtraPrinting.XlDocumentOptions.Company', defaultVal: '', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('text') }
];
var documentOptions = { propertyName: 'documentOptions', modelName: 'DocumentOptions', displayName: 'Document Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.DocumentOptions', info: documentOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') };
var encryptionOptionsSerializationsInfo = [
    {
        propertyName: 'type', modelName: '@Type', displayName: 'Type', localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Type', defaultVal: 'Strong', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), from: external_DevExpress_Analytics_Utils_["fromEnum"],
        valuesArray: [
            { value: 'Strong', displayValue: 'Strong', localizationId: 'DevExpress.XtraPrinting.XlEncryptionType.Strong' },
            { value: 'Compatible', displayValue: 'Compatible', localizationId: 'DevExpress.XtraPrinting.XlEncryptionType.Compatible' }
        ]
    },
    Object(external_DevExpress_Analytics_Internal_["createPasswordSerializationInfo"])({ propertyName: 'password', modelName: '@Password', displayName: 'Password', localizationId: 'DevExpress.XtraPrinting.XlEncryptionOptions.Password', defaultVal: '' })
];
var encryptionOptions = { propertyName: 'encryptionOptions', modelName: 'EncryptionOptions', displayName: 'Encryption Options', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.EncryptionOptions', info: encryptionOptionsSerializationsInfo, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') };
var xlsExportOptionsSerializationInfoCommon = [
    xlsExportHyperlinks,
    pageRange,
    xlsRawDataMode,
    xlsExportOptionsSheetName,
    xlsShowGridLines,
    xlsTextExportMode,
    rasterizeImages,
    rasterizationResolution,
    { propertyName: 'fitToPrintedPageWidth', modelName: '@FitToPrintedPageWidth', displayName: 'Fit To Printed Page Width', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.FitToPrintedPageWidth', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'fitToPrintedPageHeight', modelName: '@FitToPrintedPageHeight', displayName: 'Fit To Printed Page Height', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.FitToPrintedPageHeight', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    {
        propertyName: 'ignoreErrors', modelName: '@IgnoreErrors', displayName: 'Ignore Errors', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.IgnoreErrors', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'None', from: external_DevExpress_Analytics_Utils_["fromEnum"], valuesArray: [
            { value: 'None', displayValue: 'None', localizationId: 'DevExpress.XtraPrinting.XlIgnoreErrors.None' },
            { value: 'NumberStoredAsText', displayValue: 'Number Stored As Text', localizationId: 'DevExpress.XtraPrinting.XlIgnoreErrors.NumberStoredAsText' }
        ]
    },
    {
        propertyName: 'rightToLeftDocument', modelName: '@RightToLeftDocument', displayName: 'Right To Left Document', localizationId: 'DevExpress.XtraPrinting.XlExportOptionsBase.RightToLeftDocument', defaultVal: 'Default', from: external_DevExpress_Analytics_Utils_["fromEnum"], editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), valuesArray: [
            { value: 'True', displayValue: 'True', localizationId: 'DevExpress.Utils.DefaultBoolean.True' },
            { value: 'False', displayValue: 'False', localizationId: 'DevExpress.Utils.DefaultBoolean.False' },
            { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.Utils.DefaultBoolean.Default' }
        ]
    },
    documentOptions,
    encryptionOptions
];
var xlsExportOptionsSerializationInfoBase = [
    { propertyName: 'suppress256ColumnsWarning', modelName: '@Suppress256ColumnsWarning', displayName: 'Suppress 256 Columns Warning', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.Suppress256ColumnsWarning', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    { propertyName: 'suppress65536RowsWarning', modelName: '@Suppress65536RowsWarning', displayName: 'Suppress 65536 Rows Warning', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.Suppress65536RowsWarning', defaultVal: false, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('bool'), from: external_DevExpress_Analytics_Utils_["parseBool"] },
    {
        propertyName: 'workbookColorPaletteCompliance', modelName: '@WorkbookColorPaletteCompliance', displayName: 'Workbook Color Palette Compliance', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions.WorkbookColorPaletteCompliance', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), defaultVal: 'ReducePaletteForExactColors', from: external_DevExpress_Analytics_Utils_["fromEnum"],
        valuesArray: [
            { value: 'ReducePaletteForExactColors', displayValue: 'ReducePaletteForExactColors', localizationId: 'DevExpress.XtraPrinting.WorkbookColorPaletteCompliance.ReducePaletteForExactColors' },
            { value: 'AdjustColorsToDefaultPalette', displayValue: 'AdjustColorsToDefaultPalette', localizationId: 'DevExpress.XtraPrinting.WorkbookColorPaletteCompliance.AdjustColorsToDefaultPalette' }
        ]
    }
];
var xlsExportOptionsSerializationInfo = [xlsExportMode].concat(xlsExportOptionsSerializationInfoCommon, xlsExportOptionsSerializationInfoBase);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/xlsExportOptions.js



class xlsExportOptions_XlsExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new xlsExportOptions_XlsExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, xlsExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return xlsExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return name === 'pageRange' && (this.xlsExportMode ? this.xlsExportMode() : xlsExportMode.defaultVal) === 'SingleFile';
    }
    hasSensitiveData() {
        return !!(this.encryptionOptions && this.encryptionOptions.password());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/xlsxMetaData.js


var xlsxExportOptionsSerializationInfo = [xlsxExportMode].concat(xlsExportOptionsSerializationInfoCommon);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/xlsxExportOptions.js



class xlsxExportOptions_XlsxExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new xlsxExportOptions_XlsxExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, xlsxExportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return xlsxExportOptionsSerializationInfo;
    }
    isPropertyDisabled(name) {
        return name === 'pageRange' && (this.xlsxExportMode ? this.xlsxExportMode() : xlsxExportMode.defaultVal) === 'SingleFile';
    }
    hasSensitiveData() {
        return !!(this.encryptionOptions && this.encryptionOptions.password());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/exportOptionsMetaData.js













var exportOptionsSerializationInfo = [
    { propertyName: 'csv', modelName: 'Csv', displayName: 'CSV Export Options', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions', from: csvExportOptions_CsvExportOptions.from, toJsonObject: csvExportOptions_CsvExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'email', modelName: 'Email', displayName: 'E-mail Options', localizationId: 'DevExpress.XtraPrinting.EmailOptions', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor'), info: emailOptionsSerializationInfo },
    { propertyName: 'html', modelName: 'Html', displayName: 'HTML Export Options', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions', from: htmlExportOptions_HtmlExportOptions.from, toJsonObject: htmlExportOptions_HtmlExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'image', modelName: 'Image', displayName: 'Image Export Options', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions', from: imageExportOptions_ImageExportOptions.from, toJsonObject: imageExportOptions_ImageExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'mailMessage', modelName: 'MailMessage', displayName: 'Mail Message Export Options', localizationId: 'DevExpress.XtraPrinting.MailMessageExportOptions', from: mhtExportOptions_MhtExportOptions.from, toJsonObject: mhtExportOptions_MhtExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'mht', modelName: 'Mht', displayName: 'MHT Export Options', localizationId: 'DevExpress.XtraPrinting.MhtExportOptions', from: mhtExportOptions_MhtExportOptions.from, toJsonObject: mhtExportOptions_MhtExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'nativeFormat', modelName: 'NativeFormat', displayName: 'Native Format Options', localizationId: 'DevExpress.XtraPrinting.NativeFormatOptions', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor'), info: nativeFormatOptionsSerializationInfo },
    { propertyName: 'pdf', modelName: 'Pdf', displayName: 'PDF Export Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions', from: pdfExportOptions_PdfExportOptions.from, toJsonObject: pdfExportOptions_PdfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'printPreview', modelName: 'PrintPreview', displayName: 'Print Preview Options', localizationId: 'DevExpress.XtraPrinting.PrintPreviewOptions', from: printPreviewOptions_PrintPreviewOptions.from, toJsonObject: printPreviewOptions_PrintPreviewOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'rtf', modelName: 'Rtf', displayName: 'RTF Export Options', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions', from: rtfExportOptions_RtfExportOptions.from, toJsonObject: rtfExportOptions_RtfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'textExportOptions', modelName: 'Text', displayName: 'Text Export Options', localizationId: 'DevExpress.XtraPrinting.TextExportOptions', from: textExportOptions_TextExportOptions.from, toJsonObject: textExportOptions_TextExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'xls', modelName: 'Xls', displayName: 'XLS Export Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions', from: xlsExportOptions_XlsExportOptions.from, toJsonObject: xlsExportOptions_XlsExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'xlsx', modelName: 'Xlsx', displayName: 'XLSx Export Options', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions', from: xlsxExportOptions_XlsxExportOptions.from, toJsonObject: xlsxExportOptions_XlsxExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
    { propertyName: 'docx', modelName: 'Docx', displayName: 'Docx Export Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions', from: docxExportOptions_DocxExportOptions.from, toJsonObject: docxExportOptions_DocxExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') }
];

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/exportOptions/exportOptions.js


class exportOptions_ExportOptions {
    constructor(model, serializer) {
        serializer = serializer || new external_DevExpress_Analytics_Utils_["ModelSerializer"]();
        serializer.deserialize(this, model);
    }
    static from(model, serializer) {
        return new exportOptions_ExportOptions(model || {}, serializer);
    }
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, exportOptionsSerializationInfo, refs);
    }
    getInfo() {
        return exportOptionsSerializationInfo;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-export.js



































// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-export-metadata.js





























// CONCATENATED MODULE: ./node_modules/devexpress-reporting/common/utils/_locker.js
class Locker {
    constructor() {
        this.lock = (action) => {
            if (!this.isUpdate) {
                this.isUpdate = true;
                action();
                this.isUpdate = false;
            }
        };
        this.isUpdate = false;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-internal.js







// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-metadata.js



// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/constants.js
var ActionId = {
    Design: 'dxxrp-design',
    FirstPage: 'dxxrp-first-page',
    PrevPage: 'dxxrp-prev-page',
    Pagination: 'dxxrp-pagination',
    NextPage: 'dxxrp-next-page',
    LastPage: 'dxxrp-last-page',
    MultipageToggle: 'dxxrp-multipage-toggle',
    HighlightEditingFields: 'dxxrp-highlight-editing-fields',
    ZoomOut: 'dxxrp-zoom-out',
    ZoomSelector: 'dxxrp-zoom-selector',
    ZoomIn: 'dxxrp-zoom-in',
    Print: 'dxxrp-print',
    PrintPage: 'dxxrp-print-page',
    ExportTo: 'dxxrp-export-menu',
    Search: 'dxxrp-search',
    FullScreen: 'dxrd-fullscreen'
};
var ExportFormatID = {
    PDF: { text: 'PDF', textId: 'ASPxReportsStringId.ExportName_pdf', format: 'pdf' },
    XLS: { text: 'XLS', textId: 'ASPxReportsStringId.ExportName_xls', format: 'xls' },
    XLSX: { text: 'XLSX', textId: 'ASPxReportsStringId.ExportName_xlsx', format: 'xlsx' },
    RTF: { text: 'RTF', textId: 'ASPxReportsStringId.ExportName_rtf', format: 'rtf' },
    MHT: { text: 'MHT', textId: 'ASPxReportsStringId.ExportName_mht', format: 'mht' },
    HTML: { text: 'HTML', textId: 'ASPxReportsStringId.ExportName_html', format: 'html' },
    Text: { text: 'Text', textId: 'ASPxReportsStringId.ExportName_txt', format: 'txt', propertyName: 'textExportOptions' },
    CSV: { text: 'CSV', textId: 'ASPxReportsStringId.ExportName_csv', format: 'csv' },
    Image: { text: 'Image', textId: 'ASPxReportsStringId.ExportName_png', format: 'image' },
    DOCX: { text: 'DOCX', textId: 'ASPxReportsStringId.ExportName_docx', format: 'docx' }
};
var PreviewElements = {
    Toolbar: 'dxrd-preview-toolbar-scrollable',
    Surface: 'dxrdp-surface',
    RightPanel: 'dxrd-right-panel-template-base',
    ExportTool: 'dxrd-export-tool'
};
var ZoomAutoBy = {
    None: 1,
    WholePage: 0,
    PageWidth: -1
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/accessibility/_previewBricksKeyboardHelper.js


class _previewBricksKeyboardHelper_PreviewBricksKeyboardHelper extends external_DevExpress_Analytics_Internal_["KeyboardHelperWithArrowButtonBase"] {
    constructor(viewModel) {
        super();
        this.controlElementClassName = 'dx-accessibility-page-item';
        this.liveRegionId = 'dxrd-preview-bricks-live-region';
        this._needFocusNext = false;
        this._firstSelectedBrickIndex = 0;
        this._lastSelectedBrickIndex = 0;
        this._resetBricksIndexes = () => {
            this._firstSelectedBrickIndex = 0;
            this._lastSelectedBrickIndex = 0;
        };
        this._resetBricks = () => {
            return this._currentPage.selectBrick('');
        };
        this.delayedInit = () => {
            this._initTimeout && clearTimeout(this._initTimeout);
            this._initTimeout = setTimeout(() => {
                this.initialize();
            }, 20);
        };
        this.reset = () => {
            this._resetBricks();
            this._resetBricksIndexes();
        };
        this.active = false;
        this._getSelectedContent = viewModel.getSelectedContent;
        this._pages = viewModel.pages;
        this._goToPage = viewModel.goToPage.bind(viewModel);
        this._usePageKeyboardNavigation = viewModel.showMultipagePreview;
        this._disposables.push(viewModel.currentPage.subscribe(newPage => {
            if (newPage) {
                this._currentPage = newPage;
                this.delayedInit();
            }
        }));
    }
    dispose() {
        this._activeBricksSubscription && this._activeBricksSubscription.dispose();
        this._afterInitializeCallback = null;
        this._initTimeout && clearTimeout(this._initTimeout);
        super.dispose();
    }
    initialize() {
        if (!this._currentPage)
            return;
        this._bricks = this._currentPage.bricks;
        if (this._usePageKeyboardNavigation()) {
            this.startIndex = this._pages().indexOf(this._currentPage);
        }
        else {
            this.startIndex = 0;
        }
        super.initialize();
        this._afterInitializeCallback && this._afterInitializeCallback();
        this._afterInitializeCallback = null;
        if (this._needFocusNext) {
            this.controlElements[this.startIndex].element.focus();
            this.lastFocusItem().setAttribute('tabindex', '-1');
            this._needFocusNext = false;
        }
        this._activeBricksSubscription && this._activeBricksSubscription.dispose();
        this._activeBricksSubscription = this._currentPage.activeBricks.subscribe(activeBricks => {
            this._liveRegionTimeout && clearTimeout(this._liveRegionTimeout);
            if (!activeBricks.length)
                return;
            this._liveRegionTimeout = this.liveRegion().changeText(this._getSelectedContent(','));
            var _bricks = this._bricks();
            for (var i = 0; i < _bricks.length; i++) {
                const brick = _bricks[i];
                if (brick === activeBricks[0])
                    this._firstSelectedBrickIndex = i;
                if (brick === activeBricks[activeBricks.length - 1]) {
                    this._lastSelectedBrickIndex = i;
                    break;
                }
            }
        });
    }
    clickHandler() { }
    itemHandleEscKey(e, index) {
        if (!this.active)
            return false;
        this.controlElements[index].element.classList.remove('dx-accessibility-active-state');
        this.active = false;
        this._resetBricks();
        return true;
    }
    _actionExecute(brick, e) {
        if (brick.navigation) {
            brick.onClick(e);
        }
        else if (brick.efIndex) {
            var editField = this._currentPage.editingFields()[brick.efIndex - 1];
            var efItems = Array.prototype.slice.call(e.target.querySelectorAll('.dx-accessibility-editing-field-item'));
            var efItem = Object(external_DevExpress_Analytics_Internal_["findFirstItemMatchesCondition"])(efItems, (item) => external_ko_["dataFor"](item) === editField);
            if (efItem && editField.activateEditor) {
                editField.activateEditor(editField, { target: efItem, currentTarget: efItem });
                var subscription = editField.active.subscribe(value => {
                    if (!value) {
                        if (document.activeElement === document.body) {
                            e.target.focus();
                        }
                        brick.active(true);
                        this.active = true;
                        e.target.classList.add('dx-accessibility-active-state');
                        subscription.dispose();
                    }
                });
                this._disposables.push(subscription);
            }
            else if (editField.onClick) {
                editField.onClick(editField, e);
            }
        }
    }
    _getNonEmptyBrick(index, reverse) {
        var nextIndex = index + (reverse ? -1 : 1);
        var _bricks = this._bricks();
        var brick = _bricks[nextIndex];
        if (reverse && nextIndex < 0 || nextIndex > _bricks.length - 1) {
            brick = this._getNonEmptyBrick(reverse ? _bricks.length : -1, reverse);
        }
        if (brick.efIndex && brick.efIndex > 0)
            return brick;
        else if (brick.accessibleDescription || brick.text() || brick.efIndex || brick.navigation)
            return brick;
        return this._getNonEmptyBrick(nextIndex, reverse);
    }
    _pageChangeHandle(action, newIndex, reverse = false) {
        this._needFocusNext = true;
        this.reset();
        if (!this.active) {
            if (this._usePageKeyboardNavigation())
                return action();
            else {
                var lastFocusItem = this.lastFocusItem();
                lastFocusItem.setAttribute('tabindex', '0');
                lastFocusItem.focus();
                return false;
            }
        }
        this._getNonEmptyBrick(newIndex, reverse).active(true);
        return true;
    }
    _activatePage(e, index) {
        if (this._bricks().length) {
            var page = this.controlElements[index];
            this.active = true;
            page.element.classList.add('dx-accessibility-active-state');
            var lastBrick = this._getNonEmptyBrick(this._lastSelectedBrickIndex - 1, false);
            lastBrick && lastBrick.active(true);
        }
    }
    itemHandleHomeKey(e, index) {
        return this._pageChangeHandle(() => super.itemHandleHomeKey(e, index), -1);
    }
    itemHandleEndKey(e, index) {
        return this._pageChangeHandle(() => super.itemHandleEndKey(e, index), this._bricks().length, true);
    }
    itemHandleLeftArrowKey(e, index) {
        return this._pageChangeHandle(() => {
            this.setFocusToPrevious(index);
            return true;
        }, this._firstSelectedBrickIndex, true);
    }
    itemHandleRightArrowKey(e, index) {
        return this._pageChangeHandle(() => {
            this.setFocusToNext(index);
            return true;
        }, this._lastSelectedBrickIndex);
    }
    itemHandleEnterKey(e, index) {
        if (this.active) {
            if (this._lastSelectedBrickIndex !== this._firstSelectedBrickIndex)
                return false;
            var brick = this._bricks()[this._lastSelectedBrickIndex];
            if (brick && brick.active()) {
                this._actionExecute(brick, e);
            }
        }
        else if (this._usePageKeyboardNavigation() && this._currentPage !== this._pages()[index]) {
            this._goToPage(index);
            this._afterInitializeCallback = () => {
                this._activatePage(e, index);
            };
        }
        else {
            this._activatePage(e, index);
        }
        return true;
    }
    itemHandleSpaceKey(e, index) {
        return this.itemHandleEnterKey(e, index);
    }
    setFocusToPrevious(currentIndex) {
        return super.setFocusToPrevious(currentIndex);
    }
    setFocusToNext(currentIndex) {
        return super.setFocusToNext(currentIndex);
    }
    createControlElement(element, index) {
        return new _previewBricksKeyboardHelper_PreviewPageControlsElement(element, this);
    }
}
class _previewBricksKeyboardHelper_PreviewPageControlsElement extends external_DevExpress_Analytics_Internal_["AccessibilityControlElementBase"] {
    constructor(element, _keyboardHelper) {
        super(element);
        this.element = element;
        this._keyboardHelper = _keyboardHelper;
        this._focusHandler = () => {
            this._keyboardHelper.liveRegion().changeText(Object(external_DevExpress_Analytics_Internal_["getLocalization"])('Press Enter or Space to switch to the document reading mode.', 'ASPxReportsStringId.WebDocumentViewer_AriaSwitchToDocumentReadingMode'));
            this.element.classList.remove('dx-accessibility-active-state');
            if (this._keyboardHelper.active) {
                this._keyboardHelper.reset();
            }
            this._keyboardHelper.active = false;
        };
        element.addEventListener('focus', this._focusHandler);
    }
    dispose() {
        this.element.removeEventListener('focus', this._focusHandler);
        super.dispose();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/settings.js


var EditablePreviewEnabled = external_ko_["observable"](true);
var SearchAvailable = external_ko_["observable"](true);
var ReportServerInvokeUri = '/RSWebDocumentViewerApi/Invoke';
var ReportServerExportUri = '/RSWebDocumentViewerApi/Download';
var AsyncExportApproach = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])(false);
var MessageHandler = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])({
    processError: (message, showForUser, prefix = '', element) => {
        showForUser && Object(external_DevExpress_Analytics_Internal_["ShowMessage"])(message.substr(prefix.length), undefined, undefined, undefined, undefined, element);
        Object(external_DevExpress_Analytics_Internal_["NotifyAboutWarning"])(message, false);
    },
    processMessage: (message, showForUser, element) => { showForUser && Object(external_DevExpress_Analytics_Internal_["ShowMessage"])(message, external_DevExpress_Analytics_Internal_["NotifyType"].success, 10000, undefined, undefined, element); },
    processWarning: (message, showForUser, element) => { showForUser && Object(external_DevExpress_Analytics_Internal_["ShowMessage"])(message, undefined, undefined, undefined, undefined, element); }
});
var HandlerUri = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])('DXXRDV.axd');
var previewDefaultResolution = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])(96);
var ReportServerDownloadUri = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])('');
var PollingDelay = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])(300);
var TimeOut = Object(external_DevExpress_Analytics_Internal_["createGlobalModuleVariableFunc"])(105000);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/editing/models/textEditingField.js






class textEditingField_TextEditingFieldViewModelBase {
    keypressAction(data, event) {
        Object(external_DevExpress_Analytics_Internal_["processTextEditorHotKeys"])(event, {
            esc: () => {
                this.hideEditor(false);
            },
            ctrlEnter: () => {
                this.hideEditor(true);
            }
        });
    }
}
class textEditingField_TextEditingFieldViewModel extends textEditingField_TextEditingFieldViewModelBase {
    constructor(field, pageWidth, pageHeight, zoom, bounds) {
        super();
        this.template = 'dxrp-editing-field-container';
        this.htmlValue = () => this.field.htmlValue();
        this.wordWrap = true;
        this.active = external_ko_["observable"](false);
        var brickStyle = field.model().brickOptions;
        var style = { rtl: () => brickStyle.rtl };
        new external_DevExpress_Analytics_Utils_["ModelSerializer"]().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        var cssCalculator = new external_DevExpress_Analytics_Internal_["CssCalculator"](style, external_ko_["observable"](!!brickStyle.rtlLayout));
        var padding = cssCalculator.paddingsCss();
        var verticalPadding = parseInt(padding['paddingTop']) + parseInt(padding['paddingBottom']);
        if (cssCalculator.borderCss()['borderTop'] !== 'none') {
            verticalPadding += style['borderWidth']();
        }
        if (cssCalculator.borderCss()['borderBottom'] !== 'none') {
            verticalPadding += style['borderWidth']();
        }
        this.breakOffsetStyle = () => {
            return {
                top: bounds.offset.y * -100 / bounds.height + '%',
                left: bounds.offset.x * -100 / bounds.width + '%'
            };
        };
        this.textStyle = () => external_jQuery_["extend"]({}, cssCalculator.fontCss(), cssCalculator.foreColorCss(), cssCalculator.textAlignmentCss());
        this.zoom = zoom;
        this.field = field;
        if (brickStyle.wordWrap != undefined) {
            this.wordWrap = brickStyle.wordWrap;
        }
        this.hideEditor = (shouldCommit) => {
            setTimeout(() => {
                if (shouldCommit) {
                    if (editorOptions.onHideEditor) {
                        editorOptions.onHideEditor(field);
                    }
                    else {
                        field.editValue(field._editorValue());
                    }
                }
                else {
                    field._editorValue(field.editValue());
                }
                this.active(false);
            }, 1);
        };
        var editor = editingFieldExtensions_EditingFieldExtensions.instance().editor(field.editorName());
        var editorOptions = external_jQuery_["extend"](true, {}, editor && editor.options || {});
        this.data = {
            value: field._editorValue,
            hideEditor: this.hideEditor,
            keypressAction: this.keypressAction,
            textStyle: this.textStyle,
            options: editorOptions,
            getOptions: (templateOptions) => { return external_jQuery_["extend"]({}, this.data.options, templateOptions); }
        };
        var isCustomEditor = !!(editor && editor.template && editor.template !== 'dxrp-editing-field-datetime');
        if (!isCustomEditor) {
            var self = this;
            this.data.options = external_jQuery_["extend"](true, {}, editorOptions, {
                value: field._editorValue,
                onFocusOut: (e) => {
                    self.hideEditor(true);
                }
            });
        }
        if (editor) {
            this.editorTemplate = editor.template || 'dxrp-editing-field-mask';
        }
        else {
            this.editorTemplate = 'dxrp-editing-field-text';
        }
        this.containerStyle = external_ko_["pureComputed"](() => {
            return external_jQuery_["extend"]({
                width: bounds.width + 'px',
                height: bounds.height + 'px',
                'line-height': (bounds.height - verticalPadding) + 'px',
                top: bounds.top * 100 / pageHeight + '%',
                left: bounds.left * 100 / pageWidth + '%',
                cursor: this.field.readOnly() ? 'auto' : 'text'
            }, this.active() || !this.htmlValue() ? cssCalculator.borderCss() : { border: 'none' }, isCustomEditor && this.active() || (!!this.htmlValue() && !this.active()) ? { padding: 0 } : cssCalculator.paddingsCss(), { 'border-color': 'transparent' });
        });
        this.borderStyle = external_ko_["pureComputed"](() => {
            if (style['borderWidth']() > 0 && style['borders']() !== 'None') {
                return {
                    left: '-' + style['borderWidth']() + 'px',
                    top: '-' + style['borderWidth']() + 'px',
                    paddingRight: (style['borderWidth']() * 2 - 2) + 'px',
                    paddingBottom: (style['borderWidth']() * 2 - 2) + 'px'
                };
            }
        });
    }
    activateEditor(viewModel, e) {
        if (this.field.readOnly() || this.active()) {
            return;
        }
        var data = viewModel.data;
        if (data && data.options && data.options.onPreRender) {
            data.options.onPreRender(this.data);
        }
        this.active(true);
        var elementFocused = false;
        if (viewModel.options && viewModel.options.onEditorShown) {
            elementFocused = viewModel.options.onEditorShown(this.data, external_jQuery_["fn"].constructor(e && e.currentTarget).first().get(0));
        }
        if (!elementFocused) {
            focusTextElement(e && e.currentTarget);
        }
    }
}
function focusTextElement(target) {
    var element = external_jQuery_["fn"].constructor(target).find('input').eq(0)[0];
    if (!element)
        element = external_jQuery_["fn"].constructor(target).find('textarea').eq(0)[0];
    element.focus();
    if (element['setSelectionRange']) {
        element['setSelectionRange'](element['value'].length, element['value'].length);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/editing/models/characterCombEditingField.js






class characterCombEditingField_CharacterCombEditingFieldViewModel extends textEditingField_TextEditingFieldViewModelBase {
    constructor(field, pageWidth, pageHeight, zoom, bounds) {
        super();
        this.field = field;
        this.template = 'dxrp-character-comb-editing-field';
        this.active = external_ko_["observable"](false);
        var brickStyle = field.model().brickOptions;
        var style = { rtl: () => brickStyle.rtl };
        new external_DevExpress_Analytics_Utils_["ModelSerializer"]().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        var cssCalculator = new external_DevExpress_Analytics_Internal_["CssCalculator"](style, external_ko_["observable"](!!brickStyle.rtlLayout));
        var verticalPadding = parseInt(cssCalculator.paddingsCss()['paddingTop']) + parseInt(cssCalculator.paddingsCss()['paddingBottom']);
        var borderCss = cssCalculator.borderCss();
        if (borderCss['borderTop'] !== 'none') {
            verticalPadding += style['borderWidth']();
        }
        if (borderCss['borderBottom'] !== 'none') {
            verticalPadding += style['borderWidth']();
        }
        this.textStyle = () => external_jQuery_["extend"]({}, cssCalculator.fontCss(), cssCalculator.foreColorCss(), cssCalculator.textAlignmentCss());
        this.hideEditor = (shouldCommit) => {
            setTimeout(() => {
                if (shouldCommit) {
                    field.editValue(field._editorValue());
                }
                else {
                    field._editorValue(field.editValue());
                }
                this.active(false);
            });
        };
        this.containerStyle = external_ko_["pureComputed"](() => {
            return external_jQuery_["extend"]({
                width: bounds.width + 'px',
                height: bounds.height + 'px',
                'line-height': (bounds.height - verticalPadding) + 'px',
                top: bounds.top * 100 / pageHeight + '%',
                left: bounds.left * 100 / pageWidth + '%'
            }, cssCalculator.fontCss(), cssCalculator.foreColorCss());
        });
        var cellVerticalPadding = 0;
        var borderCellStyle = 'none';
        ['Left', 'Top', 'Right', 'Bottom'].forEach((item) => {
            if (borderCss['border' + item] !== 'none') {
                borderCellStyle = borderCss['border' + item];
                cellVerticalPadding = style['borderWidth']() * 2;
            }
        });
        var cellStyle = {
            'border': borderCellStyle,
            'text-align': 'center',
            'position': 'absolute',
            'box-sizing': 'border-box',
            'border-color': 'transparent'
        };
        var characterCombBounds = field.model().brickOptions.characterCombBounds;
        this.cells = [];
        var rowTops = {};
        for (var i = 0; i < characterCombBounds.length; i++) {
            this.cells.push({
                style: external_jQuery_["extend"]({
                    width: characterCombBounds[i].width + 'px',
                    height: characterCombBounds[i].height + 'px',
                    'line-height': (characterCombBounds[i].height - cellVerticalPadding) + 'px',
                    top: characterCombBounds[i].top + 'px',
                    left: characterCombBounds[i].left + 'px'
                }, cellStyle),
                text: ''
            });
            rowTops[characterCombBounds[i].top] = i;
        }
        var rowsCount = Object.keys(rowTops).length;
        var colsCount = this.cells.length / rowsCount;
        characterCombEditingField_CharacterCombEditingFieldViewModel.setText(this.cells, style['textAlignment'](), style.rtl(), field.editValue.peek(), rowsCount, colsCount);
        field.editValue.subscribe(newValue => {
            characterCombEditingField_CharacterCombEditingFieldViewModel.setText(this.cells, style['textAlignment'](), style.rtl(), newValue, rowsCount, colsCount);
        });
        this.zoom = zoom;
    }
    activateEditor(viewModel, e) {
        if (!this.field.readOnly() && !this.active()) {
            this.active(true);
            focusTextElement(e && e.currentTarget);
        }
    }
    static setText(cells, textAlignment, rtl, text, rowsCount, colsCount) {
        for (var j = 0; j < cells.length; j++) {
            cells[j].text = '';
        }
        var textRowsCount = Math.ceil(text.length / colsCount);
        var textLastRowColCount = text.length % colsCount;
        var startRow = -1;
        if (textAlignment.indexOf('Bottom') === 0) {
            startRow = rowsCount - textRowsCount;
        }
        else if (textAlignment.indexOf('Middle') === 0) {
            startRow = Math.floor((rowsCount - textRowsCount) / 2);
        }
        else {
            startRow = 0;
        }
        var lastRowStartCol = -1;
        if (textAlignment.indexOf('Right') > 0) {
            lastRowStartCol = rtl ? 0 : (colsCount - textLastRowColCount);
        }
        else if (textAlignment.indexOf('Center') > 0) {
            lastRowStartCol = Math.floor((colsCount - textLastRowColCount) / 2);
        }
        else {
            lastRowStartCol = rtl ? (colsCount - textLastRowColCount) : 0;
        }
        var j = startRow * colsCount;
        var i = 0;
        for (; i < text.length - textLastRowColCount; i++, j++) {
            if (j >= 0 && j < cells.length) {
                cells[j].text = text[i];
            }
        }
        for (; i < text.length; i++, j++) {
            if (j >= 0 && j < cells.length) {
                cells[j + lastRowStartCol].text = text[i];
            }
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/editing/models/checkEditingField.js






var GlyphStyle;
(function (GlyphStyle) {
    GlyphStyle[GlyphStyle["StandardBox1"] = 0] = "StandardBox1";
    GlyphStyle[GlyphStyle["StandardBox2"] = 1] = "StandardBox2";
    GlyphStyle[GlyphStyle["YesNoBox"] = 2] = "YesNoBox";
    GlyphStyle[GlyphStyle["YesNoSolidBox"] = 3] = "YesNoSolidBox";
    GlyphStyle[GlyphStyle["YesNo"] = 4] = "YesNo";
    GlyphStyle[GlyphStyle["RadioButton"] = 5] = "RadioButton";
    GlyphStyle[GlyphStyle["Smiley"] = 6] = "Smiley";
    GlyphStyle[GlyphStyle["Thumb"] = 7] = "Thumb";
    GlyphStyle[GlyphStyle["Toggle"] = 8] = "Toggle";
    GlyphStyle[GlyphStyle["Star"] = 9] = "Star";
    GlyphStyle[GlyphStyle["Heart"] = 10] = "Heart";
})(GlyphStyle || (GlyphStyle = {}));
var CheckState;
(function (CheckState) {
    CheckState[CheckState["Unchecked"] = 0] = "Unchecked";
    CheckState[CheckState["Checked"] = 1] = "Checked";
    CheckState[CheckState["Indeterminate"] = 2] = "Indeterminate";
})(CheckState || (CheckState = {}));
function createCustomGlyphStyleCss(imageSource) {
    var backgroundResult = {};
    if (imageSource) {
        var urlContent = imageSource.getDataUrl();
        if (urlContent) {
            backgroundResult = { background: 'url(' + urlContent + ') no-repeat' };
            backgroundResult['backgroundPosition'] = 'center center';
            backgroundResult['backgroundSize'] = 'cover';
        }
    }
    return backgroundResult;
}
function getCheckBoxTemplate(style, state, customGlyph) {
    if (!external_jQuery_["isEmptyObject"](customGlyph)) {
        return 'dxrd-checkboxcustomglyph';
    }
    else {
        return external_DevExpress_Analytics_Widgets_Internal_["SvgTemplatesEngine"].getExistingTemplate('dxrd-svg-checkboxglyphs-' + style + '_' + state);
    }
}
class checkEditingField_CheckEditingFieldViewModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(field, pageWidth, pageHeight, zoom, editingFieldsProvider) {
        super();
        this.focused = external_ko_["observable"](false);
        this._editingFieldsProvider = editingFieldsProvider;
        this.template = 'dxrp-editing-field-checkbox';
        this.field = field;
        this.zoom = zoom;
        var bounds = this.field.model().bounds;
        var checkBounds = this.field.model().brickOptions.checkBoxBounds;
        var rtl = this.field.model().brickOptions.rtlLayout;
        this.containerStyle = () => {
            return {
                height: bounds.height + 'px',
                width: bounds.width + 'px',
                top: bounds.top * 100 / pageHeight + '%',
                left: bounds.left * 100 / pageWidth + '%',
                cursor: this.field.readOnly() ? 'auto' : 'pointer'
            };
        };
        this.checkStyle = () => {
            var result = {
                height: checkBounds.height + 'px',
                width: checkBounds.width + 'px',
                top: checkBounds.top + 'px',
                left: (rtl ? (bounds.width - checkBounds.left - checkBounds.width) : checkBounds.left) + 'px'
            };
            return result;
        };
        this._disposables.push(this.customGlyphStyleCss = external_ko_["pureComputed"](() => {
            var imageSourceData = field.model().brickOptions.checkBoxGlyphOptions.customGlyphs.filter(item => item.key === this.field.editValue())[0];
            if (!imageSourceData.value)
                return {};
            var imageSource = new imageSource_ImageSource(imageSourceData.value.imageType, imageSourceData.value.image);
            return createCustomGlyphStyleCss(imageSource);
        }));
        this._disposables.push(this.checkStateStyleIcon = external_ko_["pureComputed"](() => {
            return getCheckBoxTemplate(GlyphStyle[field.model().brickOptions.checkBoxGlyphOptions.glyphStyle], CheckState[this.field.editValue()], this.customGlyphStyleCss());
        }));
    }
    _toggleCheckState() {
        if (this.field.editValue() === CheckState.Checked) {
            this.field.editValue(CheckState.Unchecked);
        }
        else {
            this.field.editValue(CheckState.Checked);
        }
    }
    onKeyDown(_, e) {
        if (e.key == external_DevExpress_Analytics_Internal_["KeyboardEnum"].Space) {
            this.toggleCheckState();
        }
        else {
        }
    }
    onBlur() {
        this.focused(false);
    }
    onFocus() {
        this.focused(true);
    }
    onClick(_, e) {
        e.target.focus();
        this.toggleCheckState();
        e.stopPropagation();
    }
    checked() {
        if (this.field.editValue() === CheckState.Checked) {
            return true;
        }
        if (this.field.editValue() === CheckState.Unchecked) {
            return false;
        }
    }
    toggleCheckState() {
        if (this.field.readOnly())
            return;
        if (!this.field.groupID()) {
            this._toggleCheckState();
        }
        else if (this.checked() === false) {
            this._editingFieldsProvider().forEach(value => {
                if (value.groupID() === this.field.groupID()) {
                    value.editValue(CheckState.Unchecked);
                }
            });
            this._toggleCheckState();
        }
    }
}

// EXTERNAL MODULE: external "DevExpress.ui.dxPopup"
var external_DevExpress_ui_dxPopup_ = __webpack_require__(9);
var external_DevExpress_ui_dxPopup_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxPopup_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_previewSelection.js




function rectIntersection(r1, r2) {
    return !(r2.left > r1.right ||
        r2.right < r1.left ||
        r2.top > r1.bottom ||
        r2.bottom < r1.top);
}
class _previewSelection_PreviewSelection {
    constructor(_element, _page, _click) {
        this._element = _element;
        this._page = _page;
        this._click = _click;
        this._bodyEvents = {
            move: null,
            up: null
        };
        this.dispose = () => this._dispose && this._dispose();
        this._$element = external_jQuery_["fn"].constructor(this._element);
        var mousemove = event => this._mouseMove(event);
        var mouseup = event => this._mouseUp(event);
        var mousedown = event => this._mouseDown(event);
        this._element.addEventListener('mousemove', mousemove);
        this._element.addEventListener('mouseup', mouseup);
        this._element.addEventListener('mousedown', mousedown);
        this._dispose = () => {
            this._element.removeEventListener('mousemove', mousemove);
            this._element.removeEventListener('mouseup', mouseup);
            this._element.removeEventListener('mousedown', mousedown);
            this._dispose = null;
            this._click = null;
            this._page = null;
            this._element = null;
            mousemove = null;
            mouseup = null;
            mousedown = null;
        };
    }
    _getBodyScrollTop() {
        return document.documentElement && document.documentElement.scrollTop || (document.body && document.body.scrollTop);
    }
    _getBodyScrollLeft() {
        return document.documentElement && document.documentElement.scrollLeft || (document.body && document.body.scrollLeft);
    }
    _updateSelectionContent(event) {
        if (this._startRect.left > event.clientX) {
            this._$selectionContent.css('left', event.clientX);
        }
        else {
            this._$selectionContent.css('right', document.documentElement.clientWidth - event.clientX);
        }
        if (this._startRect.top > event.clientY) {
            this._$selectionContent.css('top', event.clientY);
        }
        else {
            this._$selectionContent.css('bottom', document.documentElement.clientHeight - event.clientY);
        }
        var offset = this._$element.offset();
        var currentRect = {
            left: (parseInt(this._$selectionContent.css('left')) - offset.left + this._getBodyScrollLeft()) / this._$element.width() * 100,
            width: this._$selectionContent.width() / this._$element.width() * 100,
            top: (parseInt(this._$selectionContent.css('top')) - offset.top + this._getBodyScrollTop()) / this._$element.height() * 100,
            height: this._$selectionContent.height() / this._$element.height() * 100
        };
        currentRect['right'] = currentRect.left + currentRect.width;
        currentRect['bottom'] = currentRect.top + currentRect.height;
        var bricks = this._page.bricks();
        for (var i = 0; i < bricks.length; i++) {
            if (!bricks[i].bricks) {
                bricks[i].active(rectIntersection({
                    left: parseFloat(bricks[i].leftP),
                    top: parseFloat(bricks[i].topP),
                    right: parseFloat(bricks[i].leftP) + parseFloat(bricks[i].widthP),
                    bottom: parseFloat(bricks[i].topP) + parseFloat(bricks[i].heightP),
                }, currentRect));
            }
        }
    }
    _mouseMove(event) {
        if (!this._startRect || !this._page.active() || _previewSelection_PreviewSelection.disabled)
            return;
        var leftButtonPressed = event.which === 1;
        if (leftButtonPressed) {
            if (!this._$selectionContainer) {
                if (Math.abs(this._startRect.left - event.clientX) >= 2 || Math.abs(this._startRect.top - event.clientY) >= 2) {
                    _previewSelection_PreviewSelection.started = true;
                    this._$selectionContainer = external_jQuery_["fn"].constructor('<div style="position: fixed; top: 0; bottom: 0; left: 0; right: 0">').appendTo(document.body);
                    this._$selectionContent = external_jQuery_["fn"].constructor('<div>').appendTo(this._$selectionContainer);
                    this._$selectionContent.css(this._startRect);
                    this._$selectionContent.addClass('dxrd-selection-content ui-selectable-helper');
                    if (external_DevExpress_ui_dxPopup_default.a.prototype._zIndexInitValue)
                        this._$selectionContent.css('z-index', external_DevExpress_ui_dxPopup_default.a.prototype._zIndexInitValue() + 100);
                    this._updateSelectionContent(event);
                    this._bodyEvents.move = event => this._mouseMove(event);
                    this._bodyEvents.up = event => this._mouseUp(event);
                    document.body.addEventListener('mousemove', this._bodyEvents.move);
                    document.body.addEventListener('mouseup', this._bodyEvents.up);
                }
            }
            else {
                this._updateSelectionContent(event);
            }
        }
    }
    _mouseUp(event) {
        this._$selectionContainer && this._$selectionContainer.remove();
        this._$selectionContainer = null;
        this._bodyEvents.move && document.body.removeEventListener('mousemove', this._bodyEvents.move);
        this._bodyEvents.up && document.body.removeEventListener('mouseup', this._bodyEvents.up);
        this._startRect = null;
        setTimeout(() => {
            _previewSelection_PreviewSelection.started = false;
        }, 1);
    }
    _mouseDown(event) {
        if (_previewSelection_PreviewSelection.disabled) {
            return;
        }
        this._startRect = {
            left: event.clientX,
            top: event.clientY,
            right: document.documentElement.clientWidth - event.clientX,
            bottom: document.documentElement.clientHeight - event.clientY
        };
        this._click(this._page.pageIndex);
    }
}
_previewSelection_PreviewSelection.started = false;
_previewSelection_PreviewSelection.disabled = false;
external_ko_["bindingHandlers"]['brick-selection-prog'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var values = valueAccessor(), unwrappedValues = external_ko_["unwrap"](values);
        var selection = new _previewSelection_PreviewSelection(element, unwrappedValues.page, unwrappedValues.click);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, () => {
            selection.dispose();
        });
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/editing/models/imageEditingField.js







class imageEditingField_ImageEditingFieldViewModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(field, pageWidth, pageHeight, zoom, bounds) {
        var _a;
        super();
        this.field = field;
        this.zoom = zoom;
        this.bounds = bounds;
        this.popupTarget = '.dx-designer';
        this.popupOptions = {
            target: this.popupTarget,
            boundary: this.popupTarget,
            container: this.popupTarget
        };
        this.template = 'dxrp-editing-field-image';
        this.active = external_ko_["observable"](false);
        this.shadingEnabled = external_ko_["observable"](true);
        var brickStyle = field.model().brickOptions;
        var style = { rtl: () => brickStyle.rtl };
        new external_DevExpress_Analytics_Utils_["ModelSerializer"]().deserialize(style, JSON.parse(brickStyle.style), brickStyleSerializationsInfo);
        var cssCalculator = new external_DevExpress_Analytics_Internal_["CssCalculator"](style, external_ko_["observable"](!!brickStyle.rtlLayout));
        this._disposables.push(this.alignment = external_ko_["computed"](() => {
            return field.editValue().alignment;
        }), this.sizeMode = external_ko_["computed"](() => {
            return field.editValue().sizeMode;
        }));
        var editor = editingFieldExtensions_EditingFieldExtensions.instance().editor(field.editorName()) || editingFieldExtensions_EditingFieldExtensions.instance().editor('ImageAndSignature');
        var options = editor.options;
        this.shadingEnabled(!!((_a = options.registrationOptions) === null || _a === void 0 ? void 0 : _a.shadingEnabled));
        this.editMode = options.editMode;
        this.containerStyle = () => {
            return external_jQuery_["extend"]({
                height: this.bounds.height * zoom() + 'px',
                width: this.bounds.width * zoom() + 'px',
                zIndex: this.active() ? 10 : 0,
                top: this.bounds.top * 100 / pageHeight + '%',
                left: this.bounds.left * 100 / pageWidth + '%'
            }, cssCalculator.borderCss(), cssCalculator.paddingsCss());
        };
        this.callbacks = external_jQuery_["extend"]({
            onDraw: (s) => this.onDraw(s),
            onFocusIn: (s) => this.onFocusIn(s),
            onFocusOut: (s) => this.onBlur(s)
        }, options.callbacks);
    }
    getImage() {
        return this.field.editValue().image;
    }
    getImageType() {
        return this.field.editValue().imageType;
    }
    getPictureEditorOptions() {
        return {
            image: this.getImage(),
            imageType: this.getImageType(),
            imageMode: external_ko_["observable"](this.editMode),
            alignment: this.alignment,
            sizeMode: this.sizeMode,
            callbacks: this.callbacks,
            active: this.active,
            zoom: this.zoom,
            popupOptions: this.popupOptions,
            shadingEnabled: this.shadingEnabled
        };
    }
    onKeyDown(_, e) {
        if (e.key == external_DevExpress_Analytics_Internal_["KeyboardEnum"].Space) {
        }
        else {
        }
    }
    onFocusIn(s) {
        _previewSelection_PreviewSelection.disabled = true;
    }
    onDraw(s) {
        _previewSelection_PreviewSelection.disabled = true;
    }
    onBlur(s) {
        var options = s.getCurrentOptions();
        var result = external_jQuery_["extend"]({}, this.field.editValue(), options);
        if (!!result.imageType) {
            result.imageType = result.imageType === 'svg' ? 'svg' : imageEditingField_ImageEditingFieldViewModel.__DefaultImageType;
        }
        var currentVal = this.field.editValue();
        var isNotEqual = Object.keys(currentVal).some(x => {
            if (!result[x] && !currentVal[x])
                return false;
            return result[x] !== currentVal[x];
        });
        if (isNotEqual)
            this.field.editValue(result);
        _previewSelection_PreviewSelection.disabled = false;
    }
}
imageEditingField_ImageEditingFieldViewModel.__DefaultImageType = 'img';

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/editing/models/popupImageEditingField.js



class popupImageEditingField_PopupImageEditingFieldViewModel extends imageEditingField_ImageEditingFieldViewModel {
    constructor() {
        super(...arguments);
        this.parentPopupClass = 'dxrp-editing-field-popup-container';
        this._popupInitializedClass = 'dxrp-editing-field-popup-container-initialized';
        this._getPopupContainer = (element) => external_jQuery_["fn"].constructor(element).closest('.' + this.parentPopupClass);
        this._getPainterModel = (element) => {
            var $painter = this._getPopupContainer(element).find('.dx-painter');
            return $painter.length ? external_ko_["dataFor"]($painter[0]) : null;
        };
        this._getPictureEditorModel = (element) => {
            var $popupEditing = external_jQuery_["fn"].constructor(element).find('.dx-picture-editing');
            return $popupEditing.length ? external_ko_["dataFor"]($popupEditing[0]) : null;
        };
        this._resetPictureEditor = (pictureEditorModel) => {
            pictureEditorModel.reset(this.painterData.imageSource, this.painterData.alignment, this.painterData.sizeMode, this.painterData.imageType);
            this._resetPainter(pictureEditorModel.painter);
        };
        this._resetPainter = (painter) => {
            painter.imagePainter.format(painter.imageFormatByType(this.getImageType()));
            painter.imagePainter.sizeMode(this.sizeMode());
            painter.imagePainter.alignment(this.alignment());
            painter.imagePainter.image(this.getImage());
            painter.refresh();
        };
        this.template = 'dxrp-popup-editing-field-image';
    }
    isPopupActive(element) {
        return this.active() && this._getPopupContainer(element).hasClass(this._popupInitializedClass);
    }
    getPainter() {
        if (this.painterData == null) {
            this.painterData = {
                imageSource: this.getImage(),
                imageType: this.getImageType(),
                alignment: this.alignment(),
                sizeMode: this.sizeMode(),
                zoom: this.zoom,
                canDraw: external_ko_["observable"](false)
            };
        }
        return this.painterData;
    }
    getPopupData() {
        var _showContent = external_ko_["observable"](false);
        this.popupData = {
            contentData: this,
            paintData: this.painterData,
            contentTemplate: 'dxrp-editing-field-image-editor',
            isVisible: (element) => this.isPopupActive(element),
            getContainer: () => this.popupTarget,
            getPositionTarget: (element) => this._getPopupContainer(element),
            shading: this.shadingEnabled,
            showContent: _showContent,
            onShown: (e) => {
                _showContent(true);
            },
            onHiding: (e) => {
                this._getPictureEditorModel(e.component._$popupContent[0]).painter.signaturePainter.resetLastPosition();
                this._resetPainter(this._getPainterModel(e.element));
                document.activeElement['blur']();
                this.active(false);
            },
            onContentReady: (e) => {
                this._resetPainter(this._getPainterModel(e.element));
                e.component && e.component.registerKeyHandler('tab', (_) => {
                    this.popupData.onHiding(e);
                });
            },
            renderedHandler: (element, model) => {
                this._resetPictureEditor(this._getPictureEditorModel(element));
            }
        };
        return this.popupData;
    }
    activateEditor(viewModel, e) {
        if (!this.field.readOnly()) {
            var _parentPopup = this._getPopupContainer(e.target);
            if (!_parentPopup.hasClass(this._popupInitializedClass))
                _parentPopup.addClass(this._popupInitializedClass);
            this.active(true);
        }
    }
}
var DefaultImageEditingFieldViewModel = popupImageEditingField_PopupImageEditingFieldViewModel;

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/editing/editingField.js









var ImageAlignment;
(function (ImageAlignment) {
    ImageAlignment[ImageAlignment["TopLeft"] = 1] = "TopLeft";
    ImageAlignment[ImageAlignment["TopCenter"] = 2] = "TopCenter";
    ImageAlignment[ImageAlignment["TopRight"] = 3] = "TopRight";
    ImageAlignment[ImageAlignment["MiddleLeft"] = 4] = "MiddleLeft";
    ImageAlignment[ImageAlignment["MiddleCenter"] = 5] = "MiddleCenter";
    ImageAlignment[ImageAlignment["MiddleRight"] = 6] = "MiddleRight";
    ImageAlignment[ImageAlignment["BottomLeft"] = 7] = "BottomLeft";
    ImageAlignment[ImageAlignment["BottomCenter"] = 8] = "BottomCenter";
    ImageAlignment[ImageAlignment["BottomRight"] = 9] = "BottomRight";
})(ImageAlignment || (ImageAlignment = {}));
var ImageSizeMode;
(function (ImageSizeMode) {
    ImageSizeMode[ImageSizeMode["Normal"] = 0] = "Normal";
    ImageSizeMode[ImageSizeMode["StretchImage"] = 1] = "StretchImage";
    ImageSizeMode[ImageSizeMode["ZoomImage"] = 4] = "ZoomImage";
    ImageSizeMode[ImageSizeMode["Squeeze"] = 5] = "Squeeze";
    ImageSizeMode[ImageSizeMode["Cover"] = 7] = "Cover";
})(ImageSizeMode || (ImageSizeMode = {}));
var sizing = {
    propertyName: 'sizing', modelName: '@Sizing', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Sizing', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.Sizing', defaultVal: 'Normal', from: external_DevExpress_Analytics_Utils_["fromEnum"], valuesArray: [
        { value: 'Normal', displayValue: 'Normal', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Normal' },
        { value: 'StretchImage', displayValue: 'Stretch Image', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.StretchImage' },
        { value: 'AutoSize', displayValue: 'Auto-Size', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.AutoSize' },
        { value: 'CenterImage', displayValue: 'Center Image', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.CenterImage' },
        { value: 'ZoomImage', displayValue: 'Zoom Image', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.ZoomImage' },
        { value: 'Squeeze', displayValue: 'Squeeze', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Squeeze' },
        { value: 'Tile', displayValue: 'Tile', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Tile' },
        { value: 'Cover', displayValue: 'Cover', localizationId: 'DevExpress.XtraPrinting.ImageSizeMode.Cover' }
    ]
};
var imageAlignment = {
    propertyName: 'imageAlignment', modelName: '@ImageAlignment', editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('combobox'), displayName: 'Alignment', localizationId: 'DevExpress.XtraReports.UI.XRPictureBox.Alignment', defaultVal: 'Default', from: external_DevExpress_Analytics_Utils_["fromEnum"], valuesArray: [
        { value: 'Default', displayValue: 'Default', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.Default' },
        { value: 'TopLeft', displayValue: 'Top Left', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.TopLeft' },
        { value: 'TopCenter', displayValue: 'Top Center', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.TopCenter' },
        { value: 'TopRight', displayValue: 'Top Right', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.TopRight' },
        { value: 'MiddleLeft', displayValue: 'Middle Left', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.MiddleLeft' },
        { value: 'MiddleCenter', displayValue: 'Middle Center', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.MiddleCenter' },
        { value: 'MiddleRight', displayValue: 'Middle Right', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.MiddleRight' },
        { value: 'BottomLeft', displayValue: 'Bottom Left', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.BottomLeft' },
        { value: 'BottomCenter', displayValue: 'Bottom Center', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.BottomCenter' },
        { value: 'BottomRight', displayValue: 'Bottom Right', localizationId: 'DevExpress.XtraPrinting.ImageAlignment.BottomRight' }
    ]
};
class editingField_EditingField extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(model, index, htmlProvider) {
        super();
        this._needToUseHtml = false;
        this._index = -1;
        this._model = model;
        this._index = index;
        this._readOnly = external_ko_["observable"](model.readOnly);
        this._disposables.push(this.readOnly = external_ko_["pureComputed"]({
            read: () => {
                return this._readOnly() || !EditablePreviewEnabled();
            },
            write: (newVal) => {
                this._readOnly(newVal);
            }
        }));
        this.modelValue = external_ko_["observable"](model.editValue);
        this.editValue = external_ko_["computed"]({
            read: () => {
                return this.modelValue();
            },
            write: (newVal) => {
                var oldVal = this.modelValue();
                this.modelValue(newVal);
                var val = this.editingFieldChanged(this, oldVal, newVal);
                val = val == null ? newVal : val;
                if (val !== oldVal) {
                    this._refreshHtmlValue(val);
                }
                if (val !== newVal) {
                    this.modelValue(val);
                    this._editorValue(val);
                }
            }
        });
        this._editorValue = external_ko_["observable"](model.editValue);
        this.htmlValue = external_ko_["observable"](model.htmlValue);
        this._htmlProvider = htmlProvider;
    }
    _refreshHtmlValue(newValue) {
        this.htmlValue(null);
        if (this._needToUseHtml) {
            this._htmlProvider.getEditingFieldHtml(newValue, this._index).done((html) => {
                this.htmlValue(html);
            });
        }
    }
    editingFieldChanged(field, oldVal, newVal) {
        return newVal;
    }
    editorName() { return this._model.editorName; }
    id() { return this._model.id; }
    groupID() { return this._model.groupID; }
    pageIndex() { return this._model.pageIndex; }
    type() { return this._model.type; }
    model() {
        return external_jQuery_["extend"]({}, this._model, {
            readOnly: this.readOnly.peek(),
            editValue: this.editValue.peek(),
            htmlValue: this.htmlValue.peek(),
        });
    }
    createViewModel(zoom, pageWidth, pageHeight, editingFieldsProvider, bounds) {
        if (this._model.type === 'check') {
            return new checkEditingField_CheckEditingFieldViewModel(this, pageWidth, pageHeight, zoom, editingFieldsProvider);
        }
        else if (this._model.type === 'text') {
            this._needToUseHtml = bounds.height !== this._model.bounds.height || !!this._model.brickOptions.formatString;
            if (!this._needToUseHtml) {
                this.htmlValue(null);
            }
            return new textEditingField_TextEditingFieldViewModel(this, pageWidth, pageHeight, zoom, bounds);
        }
        else if (this._model.type === 'charactercomb') {
            return new characterCombEditingField_CharacterCombEditingFieldViewModel(this, pageWidth, pageHeight, zoom, bounds);
        }
        else if (this._model.type === 'image') {
            return new DefaultImageEditingFieldViewModel(this, pageWidth, pageHeight, zoom, bounds);
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/csvExportOptionsPreview.js


class csvExportOptionsPreview_CsvExportOptionsPreview extends csvExportOptions_CsvExportOptions {
    static from(model, serializer) {
        return new csvExportOptionsPreview_CsvExportOptionsPreview(model || {}, serializer);
    }
    isPropertyVisible(name) {
        return name !== useCustomSeparator.propertyName;
    }
    isPropertyDisabled(name) {
        return false;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/metadata.js



var rtfExportModeMergedPreview = external_jQuery_["extend"]({}, rtfExportMode, {
    valuesArray: getExportModeValues('Rtf', true, true)
});
var docxExportModeMergedPreview = external_jQuery_["extend"]({}, docxExportMode, {
    valuesArray: getExportModeValues('Docx', true, true)
});
function excludeModesForMergedDocuments(val) {
    return external_ko_["observable"]('SingleFilePageByPage');
}
function excludeDifferentFilesMode(val) {
    return external_ko_["observable"](val === 'DifferentFiles' ? 'SingleFile' : val);
}
var htmlExportModePreviewBase = {
    propertyName: htmlExportMode.propertyName, modelName: htmlExportMode.modelName, defaultVal: htmlExportMode.defaultVal,
    editor: htmlExportMode.editor, displayName: htmlExportMode.displayName, localizationId: htmlExportMode.localizationId
};
var htmlExportModePreview = external_jQuery_["extend"]({}, htmlExportModePreviewBase, {
    from: excludeDifferentFilesMode,
    valuesArray: getExportModeValues('Html', true)
});
var htmlExportModeMergedPreview = external_jQuery_["extend"]({}, htmlExportModePreviewBase, {
    valuesArray: getExportModeValues('Html', true, true)
});
var xlsExportModePreviewBase = {
    propertyName: xlsExportMode.propertyName, modelName: xlsExportMode.modelName, defaultVal: xlsExportMode.defaultVal,
    editor: xlsExportMode.editor, displayName: xlsExportMode.displayName, localizationId: xlsExportMode.localizationId
};
var xlsExportModePreview = external_jQuery_["extend"]({}, xlsExportModePreviewBase, {
    from: excludeDifferentFilesMode,
    valuesArray: getExportModeValues('Xls', true)
});
var xlsExportModeMergedPreview = external_jQuery_["extend"]({}, xlsExportModePreviewBase, {
    valuesArray: getExportModeValues('Xls', true, true)
});
var imageExportModePreviewBase = {
    propertyName: imageExportMode.propertyName, modelName: imageExportMode.modelName, defaultVal: imageExportMode.defaultVal,
    editor: imageExportMode.editor, displayName: imageExportMode.displayName, localizationId: imageExportMode.localizationId
};
var imageExportModePreview = external_jQuery_["extend"]({}, imageExportModePreviewBase, {
    from: excludeDifferentFilesMode,
    valuesArray: getExportModeValues('Image', true)
});
var imageExportModeMergedPreview = external_jQuery_["extend"]({}, imageExportModePreviewBase, {
    valuesArray: getExportModeValues('Image', true, true)
});
var xlsxExportModePreviewBase = {
    propertyName: xlsxExportMode.propertyName, modelName: xlsxExportMode.modelName, defaultVal: xlsxExportMode.defaultVal,
    editor: xlsxExportMode.editor, displayName: xlsxExportMode.displayName, localizationId: xlsxExportMode.localizationId
};
var xlsxExportModePreview = external_jQuery_["extend"]({}, xlsxExportModePreviewBase, {
    from: excludeDifferentFilesMode,
    valuesArray: getExportModeValues('Xlsx', true)
});
var xlsxExportModeMergedPreview = external_jQuery_["extend"]({}, xlsxExportModePreviewBase, {
    valuesArray: getExportModeValues('Xlsx', true, true)
});

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/htmlExportOptionsPreview.js



var htmlExportOptionsSerializationInfoPreview = [].concat(htmlExportOptionsSerializationInfoBase);
class htmlExportOptionsPreview_HtmlExportOptionsPreview extends htmlExportOptions_HtmlExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(htmlExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [htmlExportModePreview];
    }
}
class htmlExportOptionsPreview_HtmlExportOptionsMergedPreview extends htmlExportOptionsPreview_HtmlExportOptionsPreview {
    _getVariableInfo() {
        return [htmlExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === htmlExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.htmlExportMode(excludeModesForMergedDocuments(this.htmlExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/imageExportOptionsPreview.js



var imageExportOptionsSerializationInfoPreview = [].concat(imageExportOptionsSerializationInfoBase);
class imageExportOptionsPreview_ImageExportOptionsPreview extends imageExportOptions_ImageExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(imageExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [imageExportModePreview];
    }
}
class imageExportOptionsPreview_ImageExportOptionsMergedPreview extends imageExportOptionsPreview_ImageExportOptionsPreview {
    _getVariableInfo() {
        return [imageExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === imageExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.imageExportMode(excludeModesForMergedDocuments(this.imageExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/mhtExportOptionsPreview.js



var mhtExportOptionsSerializationInfoPreview = [].concat(mhtExportOptionsSerializationInfoBase);
class mhtExportOptionsPreview_MhtExportOptionsPreview extends mhtExportOptions_MhtExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(mhtExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [htmlExportModePreview];
    }
}
class mhtExportOptionsPreview_MhtExportOptionsMergedPreview extends mhtExportOptionsPreview_MhtExportOptionsPreview {
    _getVariableInfo() {
        return [htmlExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === htmlExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.htmlExportMode(excludeModesForMergedDocuments(this.htmlExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/rtfExportOptionsPreview.js




var rtfExportOptionsSerializationInfoPreview = [].concat(rtfExportOptionsSerializationInfoBase);
class rtfExportOptionsPreview_RtfExportOptionsPreview extends rtfExportOptions_RtfExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(rtfExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [rtfExportMode];
    }
}
class rtfExportOptionsPreview_RtfExportOptionsMergedPreview extends rtfExportOptionsPreview_RtfExportOptionsPreview {
    _getVariableInfo() {
        return [rtfExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === rtfExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.rtfExportMode(excludeModesForMergedDocuments(this.rtfExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/xlsExportOptionsPreview.js



var xlsExportOptionsSerializationInfoPreview = [].concat(xlsExportOptionsSerializationInfoBase, xlsExportOptionsSerializationInfoCommon);
class xlsExportOptionsPreview_XlsExportOptionsPreview extends xlsExportOptions_XlsExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(xlsExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [xlsExportModePreview];
    }
}
class xlsExportOptionsPreview_XlsExportOptionsMergedPreview extends xlsExportOptionsPreview_XlsExportOptionsPreview {
    _getVariableInfo() {
        return [xlsExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === xlsExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.xlsExportMode(excludeModesForMergedDocuments(this.xlsExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/xlsxExportOptionsPreview.js



var xlsxExportOptionsSerializationInfoPreview = [].concat(xlsExportOptionsSerializationInfoCommon);
class xlsxExportOptionsPreview_XlsxExportOptionsPreview extends xlsxExportOptions_XlsxExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(xlsxExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [xlsxExportModePreview];
    }
}
class xlsxExportOptionsPreview_XlsxExportOptionsMergedPreview extends xlsxExportOptionsPreview_XlsxExportOptionsPreview {
    _getVariableInfo() {
        return [xlsxExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === xlsxExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.xlsxExportMode(excludeModesForMergedDocuments(this.xlsxExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/docxExportOptionsPreview.js





var docxExportOptionsSerializationInfoPreview = [
    pageRange,
    docxTableLayout,
    keepRowHeight,
    rasterizeImages,
    rasterizationResolution,
    exportPageBreaks,
    exportWatermarks,
    docxDocumentOptions,
];
class docxExportOptionsPreview_DocxExportOptionsPreview extends docxExportOptions_DocxExportOptions {
    static toJson(value, serializer, refs) {
        return serializer.serialize(value, value.getInfo(), refs);
    }
    getInfo() {
        var variableInfo = this._getVariableInfo();
        return variableInfo.concat(docxExportOptionsSerializationInfoPreview);
    }
    _getVariableInfo() {
        return [docxExportMode];
    }
}
class docxExportOptionsPreview_DocxExportOptionsMergedPreview extends docxExportOptionsPreview_DocxExportOptionsPreview {
    _getVariableInfo() {
        return [docxExportModeMergedPreview];
    }
    isPropertyDisabled(name) {
        return super.isPropertyDisabled(name) || name === docxExportModeMergedPreview.propertyName;
    }
    constructor(model, serializer) {
        super(model, serializer);
        this.docxExportMode(excludeModesForMergedDocuments(this.docxExportMode())());
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/exportOptionsPreview.js












class exportOptionsPreview_ExportOptionsPreview extends exportOptions_ExportOptions {
    _generateFromFunction(exportType) {
        return (model, serializer) => {
            return new exportType(model || {}, serializer);
        };
    }
    _generateInfo() {
        return [
            { propertyName: 'csv', modelName: 'Csv', displayName: 'CSV Export Options', localizationId: 'DevExpress.XtraPrinting.CsvExportOptions', from: csvExportOptionsPreview_CsvExportOptionsPreview.from, toJsonObject: csvExportOptionsPreview_CsvExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'html', modelName: 'Html', displayName: 'HTML Export Options', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions', from: this._generateFromFunction(htmlExportOptionsPreview_HtmlExportOptionsPreview), toJsonObject: htmlExportOptionsPreview_HtmlExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'image', modelName: 'Image', displayName: 'Image Export Options', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions', from: this._generateFromFunction(imageExportOptionsPreview_ImageExportOptionsPreview), toJsonObject: imageExportOptionsPreview_ImageExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'mht', modelName: 'Mht', displayName: 'MHT Export Options', localizationId: 'DevExpress.XtraPrinting.MhtExportOptions', from: this._generateFromFunction(mhtExportOptionsPreview_MhtExportOptionsPreview), toJsonObject: mhtExportOptionsPreview_MhtExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'pdf', modelName: 'Pdf', displayName: 'PDF Export Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions', from: pdfExportOptions_PdfExportOptions.from, toJsonObject: pdfExportOptions_PdfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'rtf', modelName: 'Rtf', displayName: 'RTF Export Options', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions', from: this._generateFromFunction(rtfExportOptionsPreview_RtfExportOptionsPreview), toJsonObject: rtfExportOptionsPreview_RtfExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'textExportOptions', modelName: 'Text', displayName: 'Text Export Options', localizationId: 'DevExpress.XtraPrinting.TextExportOptions', from: textExportOptions_TextExportOptions.from, toJsonObject: textExportOptions_TextExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'xls', modelName: 'Xls', displayName: 'XLS Export Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions', from: this._generateFromFunction(xlsExportOptionsPreview_XlsExportOptionsPreview), toJsonObject: xlsExportOptionsPreview_XlsExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'xlsx', modelName: 'Xlsx', displayName: 'XLSx Export Options', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions', from: this._generateFromFunction(xlsxExportOptionsPreview_XlsxExportOptionsPreview), toJsonObject: xlsxExportOptionsPreview_XlsxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'docx', modelName: 'Docx', displayName: 'Docx Export Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions', from: this._generateFromFunction(docxExportOptionsPreview_DocxExportOptionsPreview), toJsonObject: docxExportOptionsPreview_DocxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') }
        ];
    }
    hasSensitiveData() {
        return (this.xls && this.xls.hasSensitiveData())
            || (this.xlsx && this.xlsx.hasSensitiveData())
            || (this.pdf && this.pdf.hasSensitiveData());
    }
    getInfo() {
        return this._generateInfo();
    }
}
class exportOptionsPreview_ExportOptionsMergedPreview extends exportOptionsPreview_ExportOptionsPreview {
    _generateInfo() {
        return [
            { propertyName: 'html', modelName: 'Html', displayName: 'HTML Export Options', localizationId: 'DevExpress.XtraPrinting.HtmlExportOptions', from: this._generateFromFunction(htmlExportOptionsPreview_HtmlExportOptionsMergedPreview), toJsonObject: htmlExportOptionsPreview_HtmlExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'image', modelName: 'Image', displayName: 'Image Export Options', localizationId: 'DevExpress.XtraPrinting.ImageExportOptions', from: this._generateFromFunction(imageExportOptionsPreview_ImageExportOptionsMergedPreview), toJsonObject: imageExportOptionsPreview_ImageExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'mht', modelName: 'Mht', displayName: 'MHT Export Options', localizationId: 'DevExpress.XtraPrinting.MhtExportOptions', from: this._generateFromFunction(mhtExportOptionsPreview_MhtExportOptionsMergedPreview), toJsonObject: mhtExportOptionsPreview_MhtExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'pdf', modelName: 'Pdf', displayName: 'PDF Export Options', localizationId: 'DevExpress.XtraPrinting.PdfExportOptions', from: pdfExportOptions_PdfExportOptions.from, toJsonObject: pdfExportOptions_PdfExportOptions.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'rtf', modelName: 'Rtf', displayName: 'RTF Export Options', localizationId: 'DevExpress.XtraPrinting.RtfExportOptions', from: this._generateFromFunction(rtfExportOptionsPreview_RtfExportOptionsMergedPreview), toJsonObject: rtfExportOptionsPreview_RtfExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'xls', modelName: 'Xls', displayName: 'XLS Export Options', localizationId: 'DevExpress.XtraPrinting.XlsExportOptions', from: this._generateFromFunction(xlsExportOptionsPreview_XlsExportOptionsMergedPreview), toJsonObject: xlsExportOptionsPreview_XlsExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'xlsx', modelName: 'Xlsx', displayName: 'XLSx Export Options', localizationId: 'DevExpress.XtraPrinting.XlsxExportOptions', from: this._generateFromFunction(xlsxExportOptionsPreview_XlsxExportOptionsMergedPreview), toJsonObject: xlsxExportOptionsPreview_XlsxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') },
            { propertyName: 'docx', modelName: 'Docx', displayName: 'Docx Export Options', localizationId: 'DevExpress.XtraPrinting.DocxExportOptions', from: this._generateFromFunction(docxExportOptionsPreview_DocxExportOptionsMergedPreview), toJsonObject: docxExportOptionsPreview_DocxExportOptionsPreview.toJson, editor: external_DevExpress_Analytics_Widgets_["editorTemplates"].getEditor('objecteditor') }
        ];
    }
}

// EXTERNAL MODULE: external "DevExpress.utils.browser"
var external_DevExpress_utils_browser_ = __webpack_require__(7);
var external_DevExpress_utils_browser_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_utils_browser_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_previewRequestWrapper.js



var ColumnSortOrder;
(function (ColumnSortOrder) {
    ColumnSortOrder[ColumnSortOrder["None"] = 0] = "None";
    ColumnSortOrder[ColumnSortOrder["Ascending"] = 1] = "Ascending";
    ColumnSortOrder[ColumnSortOrder["Descending"] = 2] = "Descending";
})(ColumnSortOrder || (ColumnSortOrder = {}));
class _previewRequestWrapper_PreviewRequestWrapper {
    constructor(handlers, _callbacks) {
        this._callbacks = _callbacks;
        Object.keys(handlers || {}).forEach((name) => {
            this[name] = handlers[name];
        });
    }
    static getProcessErrorCallback(reportPreview, defaultErrorMessage, showMessage = true) {
        return function (message, jqXHR, textStatus) {
            if (jqXHR) {
                var statusCodeText = Object(external_DevExpress_Analytics_Utils_["getLocalization"])(jqXHR.statusText, 'ASPxReportsStringId.HttpResponseStatusCode_' + jqXHR.status);
                if (defaultErrorMessage) {
                    var stringFormat = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('{0} ({1} {2})', 'ASPxReportsStringId.Error_WithStatus');
                    var messageWithStatusCode = Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(stringFormat, defaultErrorMessage, jqXHR.status, statusCodeText);
                }
                else {
                    messageWithStatusCode = statusCodeText;
                }
            }
            if (!reportPreview) {
                var error = Object(external_DevExpress_Analytics_Internal_["getErrorMessage"])(jqXHR);
                MessageHandler().processError(error || messageWithStatusCode || defaultErrorMessage || 'Internal Server Error', showMessage);
            }
            else {
                reportPreview._processError(messageWithStatusCode || defaultErrorMessage, jqXHR, showMessage);
            }
        };
    }
    static getPage(url, ignoreError) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(url, undefined, undefined, _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(), ignoreError, { type: 'GET' });
    }
    initialize(reportPreview, parametersModel, searchModel) {
        this._reportPreview = reportPreview;
        this._parametersModel = parametersModel;
        this._searchModel = searchModel;
    }
    findTextRequest(text, ignore) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'findText', encodeURIComponent(JSON.stringify({
            text: text,
            documentId: this._reportPreview.documentId,
            matchCase: this._searchModel.matchCase(),
            wholeWord: this._searchModel.matchWholeWord(),
            searchUp: this._searchModel.searchUp()
        })), _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('An error occurred during search', 'ASPxReportsStringId.WebDocumentViewer_SearchError')), ignore);
    }
    stopBuild(id) {
        Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'stopBuild', encodeURIComponent(id), undefined, () => true);
    }
    sendCloseRequest(documentId, reportId) {
        Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'close', encodeURIComponent(JSON.stringify({
            reportId: reportId,
            documentId: documentId
        })), undefined, () => true);
    }
    startBuildRequest(shouldIgnoreError) {
        var parameters = this._parametersModel.serializeParameters();
        this._callbacks && this._callbacks.parametersSubmitted && this._callbacks.parametersSubmitted(this._parametersModel, parameters);
        return Object(external_DevExpress_Analytics_Internal_["ajax"])({
            uri: HandlerUri(),
            action: 'startBuild',
            arg: encodeURIComponent(JSON.stringify({
                reportId: this._reportPreview.reportId,
                reportUrl: this._reportPreview.reportUrl,
                drillDownKeys: this._reportPreview['_drillDownState'],
                sortingState: this._reportPreview['_sortingState'],
                timeZoneOffset: 0 - new Date().getTimezoneOffset(),
                parameters: parameters
            })),
            ignoreError: shouldIgnoreError,
            isError: (data) => !!data.error || !!(data.result && data.result.faultMessage),
            processErrorCallback: _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cannot create a document for the current report', 'ASPxReportsStringId.WebDocumentViewer_DocumentCreationError'))
        });
    }
    getBuildStatusRequest(documentId, shouldIgnoreError) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])({
            uri: HandlerUri(),
            action: 'getBuildStatus',
            arg: encodeURIComponent(JSON.stringify({
                documentId: documentId,
                timeOut: Math.max(5000, TimeOut())
            })),
            processErrorCallback: _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Error obtaining a build status', 'ASPxReportsStringId.WebDocumentViewer_GetBuildStatusError')),
            ignoreError: shouldIgnoreError,
            isError: (data) => !!data.error || !!(data.result && data.result.faultMessage) || !data.success,
            getErrorMessage: this._reportPreview._getErrorMessage
        });
    }
    getDocumentData(documentId, shouldIgnoreError) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'getDocumentData', encodeURIComponent(documentId), _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cannot obtain additional document data for the current document', 'ASPxReportsStringId.WebDocumentViewer_GetDocumentDataError')), shouldIgnoreError);
    }
    customDocumentOperation(documentId, serializedExportOptions, editindFields, customData, hideMessageFromUser) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'documentOperation', encodeURIComponent(JSON.stringify({
            documentId: documentId,
            customData: customData,
            exportOptions: serializedExportOptions,
            editingFieldValues: editindFields
        })), _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('The requested document operation cannot be performed.', 'ASPxReportsStringId.WebDocumentViewer_CustomDocumentOperationsDenied_Error'), !hideMessageFromUser));
    }
    openReport(reportName) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'openReport', encodeURIComponent(reportName), _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Could not open report', 'ASPxReportsStringId.WebDocumentViewer_OpenReportError') + " '" + reportName + "'"));
    }
    drillThrough(customData) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'drillThrough', encodeURIComponent(JSON.stringify({
            reportId: this._reportPreview.reportId,
            reportUrl: this._reportPreview.reportUrl,
            documentId: this._reportPreview.documentId,
            parameters: this._parametersModel.serializeParameters(),
            editingFields: this._reportPreview.editingFieldsProvider().map(field => field.model()),
            customData: customData
        })), _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Drill through operation failed', 'ASPxReportsStringId.WebDocumentViewer_DrillThroughError')));
    }
    getStartExportOperation(arg, shouldIgnoreError) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'startExport', arg, _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError')), shouldIgnoreError);
    }
    cancelExportRequest(operationId, shouldIgnoreError) {
        var arg = encodeURIComponent(JSON.stringify({
            id: operationId
        }));
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'cancelExport', arg, _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError')), shouldIgnoreError);
    }
    getExportStatusRequest(operationId) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])({
            uri: HandlerUri(),
            action: 'getExportStatus',
            arg: encodeURIComponent(JSON.stringify({
                id: operationId,
                timeOut: Math.max(5000, TimeOut())
            })),
            processErrorCallback: _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(this._reportPreview, Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Error obtaining an export status', 'ASPxReportsStringId.WebDocumentViewer_GetExportStatusError')),
            isError: (data) => !!data.error || !!(data.result && data.result.faultMessage) || !data.success,
            getErrorMessage: this._reportPreview._getErrorMessage
        });
    }
    getEditingFieldHtml(value, editingFieldIndex) {
        return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'getEditingFieldHtmlValue', encodeURIComponent(JSON.stringify({
            documentId: this._reportPreview.documentId,
            value: value,
            editingFieldIndex: editingFieldIndex
        })));
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_utils.js


function getCurrentResolution(zoom) {
    return Math.floor((zoom || 1) * previewDefaultResolution());
}
function getImageBase64(url) {
    var deferred = external_jQuery_["Deferred"]();
    var background = new Image();
    background.src = url;
    background.crossOrigin = 'anonymous';
    background.onload = () => {
        var canvas = document.createElement('canvas');
        canvas.width = background.width;
        canvas.height = background.height;
        canvas.getContext('2d').drawImage(background, 0, 0);
        try {
            deferred.resolve(canvas.toDataURL());
        }
        catch (e) {
            deferred.reject(e);
        }
    };
    return deferred.promise();
}
function getEnumValues(enumType) {
    return Object.keys(enumType).filter(key => !isNaN(Number(enumType[key])));
}
function safelyRunWindowOpen(url, target = '_blank') {
    var newWindow = window.open(url, target);
    target === '_blank' && newWindow && (newWindow.opener = newWindow);
    return newWindow;
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_exportHandler.js










class ExportResultRequestData {
    constructor() {
        this.RequestUrl = '';
        this.FormData = {};
        this.QueryParameters = {};
    }
}
class _exportHandler_ExportHandler extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(exportSetting, preview) {
        super();
        this.preview = preview;
        this.exportActionUri = external_ko_["observable"](null);
        this.exportFormData = external_ko_["observable"]([]);
        this.reportDisplayName = external_ko_["observable"](null);
        this.popupVisible = external_ko_["observable"](false);
        this.popupWidth = external_ko_["observable"](510);
        this.popupHeight = external_ko_["observable"](260);
        this.exportingFrameName = 'dxrd-exporting-frame' + generateGuid();
        this.popupButtons = [
            {
                toolbar: 'bottom', location: 'after', widget: 'dxButton',
                options: {
                    text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Ok', external_DevExpress_Analytics_Internal_["StringId"].DataAccessBtnOK), type: 'default', stylingMode: 'contained',
                    onClick: () => this.popupVisible(false)
                }
            }
        ];
        this.printingLinkCallback = () => { };
        this.printingTextPrefix = external_ko_["observable"]('');
        this.printingTextPostfix = external_ko_["observable"]('');
        this.getPopupTitle = () => this.reportDisplayName() || '';
        this._exportResultRequestData = new ExportResultRequestData();
        this._showPrintNotificationDialog = true;
        this._useSameTabExport = true;
        this._useAsynchronousExport = true;
        this._workerTicker = null;
        this._workerFunctionBlobUrl = null;
        this._workerTickerFunction = function () {
            var started, interval;
            self.onmessage = function (e) {
                if (e.data === 'stop') {
                    clearInterval(interval);
                    return;
                }
                if (started)
                    return;
                interval = setInterval(() => {
                    postMessage.apply(self, ['tick']);
                }, 10);
                started = true;
            };
        };
        this._window = null;
        this._timeouts = [];
        if (exportSetting) {
            if (exportSetting.useAsynchronousExport !== undefined)
                this._useAsynchronousExport = exportSetting.useAsynchronousExport;
            if (exportSetting.useSameTab !== undefined)
                this._useSameTabExport = exportSetting.useSameTab;
            if (exportSetting.showPrintNotificationDialog !== undefined)
                this._showPrintNotificationDialog = exportSetting.showPrintNotificationDialog;
        }
    }
    _getUrlObject() {
        return window.URL || window['webkitURL'] || window['mozURL'] || window['msURL'] || window['oURL'];
    }
    _createWorker() {
        this._terminateWorker();
        var blob = new Blob(['(' + this._workerTickerFunction.toString() + ')()'], { type: 'text/javascript' });
        var _url = this._getUrlObject();
        this._workerFunctionBlobUrl = _url.createObjectURL(blob);
        this._workerTicker = new Worker(this._workerFunctionBlobUrl);
        return this._workerTicker;
    }
    _terminateWorker() {
        if (this._workerTicker) {
            this._workerTicker.terminate();
            this._workerTicker = null;
        }
        if (this._workerFunctionBlobUrl) {
            var _url = this._getUrlObject();
            _url && _url.revokeObjectURL(this._workerFunctionBlobUrl);
            this._workerFunctionBlobUrl = null;
        }
    }
    _callPrint(_window) {
        var browserVersion = parseInt(external_DevExpress_utils_browser_default.a.version);
        if (_window && (external_DevExpress_utils_browser_default.a.chrome && 76 <= browserVersion)) {
            var worker = this._createWorker();
            var checkOnTick = () => {
                try {
                    if (_window.document && _window.document.contentType === 'application/pdf') {
                        _window.print();
                        worker.postMessage('stop');
                        this._terminateWorker();
                    }
                }
                catch (ex) {
                    this._terminateWorker();
                }
            };
            worker.onerror = (e) => { checkOnTick(); };
            worker.onmessage = (e) => { checkOnTick(); };
            worker.postMessage('start');
        }
    }
    _clearExportingFrame() {
        if (this._isNewBrowser()) {
            var iframe = this.exportingFrame.contentWindow;
            iframe && iframe.location.replace('about:blank');
        }
    }
    _initPrintingWindow() {
        var printingTextParts = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('If the operation fails, you can download the {0} and print it out from another application.', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Text').split('{0}');
        this.printingTextPrefix(printingTextParts[0]);
        this.printingTextPostfix(printingTextParts[1]);
        if (this._showPrintNotificationDialog) {
            var subscription = this.popupVisible.subscribe((newVal) => {
                if (!newVal) {
                    this.printingLinkCallback = () => { };
                    this._clearExportingFrame();
                    subscription.dispose();
                }
            });
            this._disposables.push(subscription);
            this.popupVisible(true);
        }
    }
    _setPrintingLinkCallback(printingLinkCallback) {
        if (this._showPrintNotificationDialog) {
            this.printingLinkCallback = printingLinkCallback;
        }
    }
    _formSubmit(_requestData, _formTarget) {
        if (this.postingForm) {
            this.postingForm.target = _formTarget;
            this.exportActionUri(_requestData.RequestUrl);
            var formData = [];
            for (var key in _requestData.FormData) {
                formData.push({ name: key, value: _requestData.FormData[key] });
            }
            this.exportFormData(formData);
            this.postingForm.submit();
        }
    }
    _doExportSync(_exportWindow, printable, useSameTab) {
        this.onExportCustomEvent && this.onExportCustomEvent(this._exportResultRequestData);
        var _requestData = this._exportResultRequestData;
        useSameTab && printable && this._initPrintingWindow();
        var formTarget = useSameTab ? this.exportingFrameName : '_blank';
        if (!printable || !this._isNewBrowser()) {
            this._useSameTabExport ? this._formSubmit(_requestData, formTarget) : this._replaceLocation(_exportWindow, _requestData);
        }
        else {
            if (!_exportWindow) {
                _exportWindow = (useSameTab && this.exportingFrame) ? this.exportingFrame.contentWindow : this._replaceLocation(null, null);
            }
            var method = this._useSameTabExport ? 'POST' : 'GET';
            this._printUsingBlob(_exportWindow, _requestData, method);
        }
    }
    _initExportWindow() {
        var message = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Do not close this tab to get the resulting file.', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportCloseWarning');
        var div = this._window.document.createElement('div');
        div.style['text-align'] = 'center';
        div.innerText = message;
        div.style.position = 'absolute';
        div.style.left = '0';
        div.style.top = '0';
        div.style.right = '0';
        div.style.fontSize = '20px';
        this._window.document.title = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Exporting...', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportTabTitle');
        this._window.document.body.appendChild(div);
        div = this._window.document.createElement('div');
        div.id = 'loading';
        div.style.position = 'absolute';
        div.style.left = '0';
        div.style.top = '0';
        div.style.bottom = '0';
        div.style.right = '0';
        div.style['text-align'] = 'center';
        div.style.margin = 'auto';
        div.style.height = '0';
        div.style.fontSize = '32px';
        this._window.document.body.appendChild(div);
    }
    _startExportAsync(args, useSameTabLocal, deferred, inlineResult, printable = false) {
        if (useSameTabLocal) {
            this._setPrintingLinkCallback(() => this._startExportAsync(args, false, deferred, inlineResult, printable));
        }
        else {
            if (!this._useSameTabExport) {
                this._window = window.open();
                this._window.onunload = () => {
                    this.preview.progressBar.stop();
                    this._terminateWorker();
                };
                this._initExportWindow();
            }
        }
        this.preview.progressBar.text(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Exporting the document...', 'PreviewStringId.Msg_ExportingDocument'));
        this.preview.progressBar.cancelText(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        var exportOperationIdDeferred = external_jQuery_["Deferred"]();
        var startExportOperationId = generateGuid();
        var shouldIgnoreError = (operationId) => () => this.preview.progressBar.wasCancelRequested(operationId || startExportOperationId);
        this.preview.progressBar.startProgress(startExportOperationId, (operationId) => {
            this.preview.requestWrapper.cancelExportRequest(operationId, shouldIgnoreError(operationId));
        }, exportOperationIdDeferred.promise());
        this.preview.requestWrapper.getStartExportOperation(args, shouldIgnoreError())
            .done((response) => {
            this.preview.previewHandlersHelper.doneStartExportHandler(deferred, inlineResult, response, exportOperationIdDeferred, startExportOperationId, useSameTabLocal, printable);
        })
            .fail((error) => {
            this.preview.previewHandlersHelper.errorStartExportHandler(deferred, startExportOperationId, error);
            exportOperationIdDeferred.reject();
            !this._useSameTabExport && error.responseJSON && error.responseJSON['error'] && this._showAsyncExportError(this._window, error.responseJSON['error']);
        });
    }
    export(args, actionUri, inlineResult, printable = false) {
        this._terminateWorker();
        var deferred = external_jQuery_["Deferred"]();
        var requestData = this._exportResultRequestData;
        requestData.RequestUrl = actionUri;
        if (this.preview._editingFields().length > 0 || AsyncExportApproach() || this._useAsynchronousExport || (this.preview.exportOptionsModel() && this.preview.exportOptionsModel().hasSensitiveData())) {
            setTimeout(() => {
                this._startExportAsync(args(), this._useSameTabExport, deferred, inlineResult, printable);
            });
        }
        else {
            deferred.resolve(true);
            if (this._useSameTabExport) {
                requestData.FormData['arg'] = args();
                requestData.FormData['actionKey'] = 'exportTo';
                this._setPrintingLinkCallback(() => this._doExportSync(null, true, false));
            }
            else {
                requestData.QueryParameters['arg'] = args();
                requestData.QueryParameters['actionKey'] = 'exportTo';
            }
            this._doExportSync(null, printable, this._useSameTabExport);
        }
        return deferred.promise();
    }
    _isNewBrowser() {
        var isNewChrome = external_DevExpress_utils_browser_default.a.chrome && (parseInt(external_DevExpress_utils_browser_default.a.version) >= 76);
        return (isNewChrome || external_DevExpress_utils_browser_default.a.mozilla || external_DevExpress_utils_browser_default.a['safari']);
    }
    _showAsyncExportError(window, message, status, statusText) {
        if (window) {
            var div = window.document.getElementById('loading');
            if (div) {
                if (status || statusText) {
                    var stringFormat = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('{0} ({1} {2})', 'ASPxReportsStringId.Error_WithStatus');
                    div.innerText = Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(stringFormat, message, status, statusText);
                }
                else
                    div.innerText = message;
            }
        }
    }
    _printUsingBlob(_exportWindow, _requestData, _method) {
        var _this = this;
        var xhr = new XMLHttpRequest();
        xhr.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                var _url = _this._getUrlObject();
                var blobUrl = _url.createObjectURL(this.response);
                _exportWindow && _exportWindow.location.replace(blobUrl);
                setTimeout(() => { _url.revokeObjectURL(blobUrl); }, 1);
                _this._callPrint(_exportWindow);
            }
            else if (this.readyState == 4 && this.status >= 400) {
                var message = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('An error occurred during the export', 'ASPxReportsStringId.WebDocumentViewer_ExportError');
                _previewRequestWrapper_PreviewRequestWrapper.getProcessErrorCallback(_this.preview, message, true)('', this, '');
                if (_exportWindow && _exportWindow.name != _this.exportingFrameName) {
                    _this._showAsyncExportError(_exportWindow, message, this.status, this.statusText);
                }
            }
        };
        var _exportUrl = (_method === 'GET') ? this._addQueryParamsToUri(_requestData.RequestUrl, _requestData.QueryParameters) : _requestData.RequestUrl;
        xhr.open(_method, _exportUrl);
        xhr.responseType = 'blob';
        var formData = new FormData();
        for (var key in _requestData.FormData) {
            formData.append(key, _requestData.FormData[key]);
        }
        xhr.send(formData);
    }
    _addQueryParamsToUri(_exportUri, _queryParameters) {
        var keys = Object.keys(_queryParameters || {});
        if (keys.length > 0) {
            _exportUri += '?';
            _exportUri += keys.map(x => x + '=' + _queryParameters[x]).join('&');
        }
        return _exportUri;
    }
    _replaceLocation(_exportWindow, _requestData) {
        if (!_requestData) {
            return safelyRunWindowOpen('');
        }
        var _exportUrl = this._addQueryParamsToUri(_requestData.RequestUrl, _requestData.QueryParameters);
        _exportWindow ? _exportWindow.location.replace(_exportUrl) : (_exportWindow = safelyRunWindowOpen(_exportUrl));
        return _exportWindow;
    }
    dispose() {
        super.dispose();
        (this._timeouts || []).forEach(tic => clearTimeout(tic));
        this.removeProperties();
    }
    updateExportStatus(progress, operationId) {
        this.preview.progressBar && this.preview.progressBar.progress(progress);
        if (this._window) {
            var div = this._window.document.getElementById('loading');
            div && (div.innerText = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Exporting the document...', 'PreviewStringId.Msg_ExportingDocument') + ' ' + progress + '%');
            this._window.document.title = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Exporting...', 'ASPxReportsStringId.WebDocumentViewer_AsyncExportTabTitle') + progress + '%';
        }
        if (progress >= 100) {
            this.preview.progressBar.complete(operationId);
        }
    }
    getExportStatus(operationId) {
        var deferred = external_jQuery_["Deferred"]();
        this._timeouts.push(setTimeout(() => {
            this.preview.requestWrapper.getExportStatusRequest(operationId)
                .done((response) => {
                this.preview.previewHandlersHelper.doneExportStatusHandler(deferred, operationId, response);
            })
                .fail((error) => {
                this.preview.previewHandlersHelper.errorExportStatusHandler(deferred, operationId, error);
                !this._useSameTabExport && error.responseJSON && error.responseJSON['error'] && this._showAsyncExportError(this._window, error.responseJSON['error']);
            });
        }, 250));
        return deferred.promise();
    }
    getExportResult(operationId, inlineDisposition, useSameTab, token, printable = false, uri = '') {
        var requestData = this._exportResultRequestData;
        if (uri) {
            requestData.RequestUrl = uri;
        }
        else if (token) {
            requestData.RequestUrl = ReportServerDownloadUri();
            requestData.QueryParameters['token'] = token;
            requestData.QueryParameters['printable'] = printable.toString();
        }
        else {
            var arg = encodeURIComponent(JSON.stringify({ id: operationId, inlineResult: !!inlineDisposition }));
            requestData.RequestUrl = HandlerUri();
            if (this._useSameTabExport) {
                requestData.FormData['actionKey'] = 'getExportResult';
                requestData.FormData['arg'] = arg;
            }
            else {
                requestData.QueryParameters['actionKey'] = 'getExportResult';
                requestData.QueryParameters['arg'] = arg;
            }
        }
        this._window && (this._window.onunload = null);
        this._doExportSync(this._window, printable, useSameTab);
        this._window = null;
    }
}
external_ko_["bindingHandlers"]['dxViewerExport'] = {
    init: function (element, valueAccessor) {
        var exportHandler = valueAccessor();
        var templateHtml = Object(external_DevExpress_Analytics_Widgets_["getTemplate"])('dxrd-export-tool-content');
        external_jQuery_["fn"].constructor(element).append(templateHtml);
        var exportFrame = document.createElement('iframe');
        exportFrame.name = exportHandler.exportingFrameName;
        element.querySelector('.dxrd-visually-hidden').appendChild(exportFrame);
        exportHandler.exportingFrame = exportFrame;
        exportHandler.postingForm = element.querySelector('form');
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/accessibility/_previewEditingFieldsKeyboardHelper.js


class _previewEditingFieldsKeyboardHelper_PreviewEditingFieldsKeyboardHelper extends external_DevExpress_Analytics_Internal_["AccessibilityKeyboardHelperBase"] {
    constructor() {
        super(...arguments);
        this.controlElementClassName = 'dx-accessibility-editing-field-item';
        this.accessibilityCompliantEnabled = true;
    }
    initialize() {
        super.initialize();
        this.setTabIndexes(0);
    }
    clickHandler() { }
    itemHandleEnterKey(e, index) {
        var item = this.controlElements[index];
        item.actionExecute(e);
        return true;
    }
    itemHandleSpaceKey(e, index) {
        return this.itemHandleEnterKey(e, index);
    }
    createControlElement(element, index) {
        return new _previewEditingFieldsKeyboardHelper_PreviewEditingFieldsElement(element, external_ko_["dataFor"](element));
    }
}
class _previewEditingFieldsKeyboardHelper_PreviewEditingFieldsElement extends external_DevExpress_Analytics_Internal_["AccessibilityControlElementBase"] {
    constructor(element, model) {
        super(element);
        this.element = element;
        this.model = model;
        this._processFocus = true;
        this._isClick = (e) => this._processFocus = false;
        this._activateHandler = (e) => {
            if (this.model.activateEditor && this._processFocus) {
                this.model.activateEditor(this.model, { target: this.element, currentTarget: this.element });
                this.element.setAttribute('tabindex', '-1');
                var subscription = this.model.active.subscribe(value => {
                    if (!value) {
                        this.element.setAttribute('tabindex', '0');
                        if (document.activeElement === document.body) {
                            this._processFocus = false;
                            this.element.focus();
                        }
                        subscription.dispose();
                    }
                });
                this._disposables.push(subscription);
            }
        };
        this._blur = (e) => {
            this._processFocus = true;
        };
        element.addEventListener('mousedown', this._isClick);
        element.addEventListener('focus', this._activateHandler);
        element.addEventListener('blur', this._blur);
    }
    dispose() {
        this.element.removeEventListener('mousedown', this._isClick);
        this.element.removeEventListener('focus', this._activateHandler);
        this.element.removeEventListener('blur', this._blur);
        super.dispose();
    }
    actionExecute(e) {
        if (this.model.activateEditor)
            this._activateHandler(e);
        else if (this.model.onClick)
            this.model.onClick(this.model, e);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_brickUtils.js

function convertToPercent(childSize, parentSize) {
    return childSize * 100 / parentSize + '%';
}
function getBrickValueForKey(brick, key = 'text') {
    var brickTextProperty = brick.content && brick.content.filter(x => x.Key === key)[0];
    return brickTextProperty && brickTextProperty.Value;
}
function brickText(brick, editingFieldsProvider) {
    var fields = editingFieldsProvider ? editingFieldsProvider() : [];
    if (brick.efIndex && brick.efIndex > 0 && brick.efIndex <= fields.length && fields[brick.efIndex - 1].type() === 'text') {
        return fields[brick.efIndex - 1].editValue();
    }
    else {
        return getBrickValueForKey(brick);
    }
}
function updateBricksPosition(brick, height, width) {
    if (!brick) {
        return;
    }
    brick[brick.rtl ? 'rightP' : 'leftP'] = convertToPercent(brick.left, width);
    brick.widthP = convertToPercent(brick.width, width);
    brick.topP = convertToPercent(brick.top, height);
    brick.heightP = convertToPercent(brick.height, height);
    brick.bricks && brick.bricks.forEach((childBrick) => {
        updateBricksPosition(childBrick, height, width);
    });
}
function initializeBrick(brick, processClick, zoom, editingFieldBricks) {
    if (!brick) {
        return;
    }
    !!brick.active ? brick.active(false) : (brick.active = external_ko_["observable"](false));
    brick['onClick'] = (e) => { processClick && processClick(brick, e); };
    brick.bricks && brick.bricks.forEach(childBrick => {
        if (!childBrick)
            return;
        childBrick.top += brick.top;
        childBrick.left += brick.left;
        initializeBrick(childBrick, processClick, zoom, editingFieldBricks);
    });
    if (brick.efIndex > 0) {
        editingFieldBricks.push(brick);
    }
    brick.text = () => brickText(brick);
    brick.accessibleDescription = getBrickValueForKey(brick, 'AccessibleDescription');
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_page.js










class _page_PreviewPage extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(preview, pageIndex, processClick, loading) {
        super();
        this.isClientVisible = external_ko_["observable"](false);
        this.originalHeight = external_ko_["observable"](0);
        this.originalWidth = external_ko_["observable"](0);
        this.loadingText = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Loading...', 'AnalyticsCoreStringId.Loading');
        this.realZoom = external_ko_["observable"](1);
        this.actualResolution = 0;
        this.currentScaleFactor = external_ko_["observable"](1);
        this.imageHeight = external_ko_["observable"](0);
        this.imageWidth = external_ko_["observable"](0);
        this.imageSrc = external_ko_["observable"]('').extend({ rateLimit: { timeout: 100, method: 'notifyWhenChangesStop' } });
        this.displayImageSrc = external_ko_["observable"]('');
        this.brick = external_ko_["observable"](null);
        this.brickLoading = external_ko_["observable"](true);
        this.bricks = external_ko_["computed"](() => {
            return this.getBricksFlatList(this.brick());
        });
        this.activeBricks = external_ko_["computed"](() => {
            return this.bricks().filter((x) => x.active());
        });
        this.clickableBricks = external_ko_["computed"](() => {
            return this.bricks().filter((x) => !!x.navigation);
        });
        this.active = external_ko_["observable"](false);
        this.maxZoom = 0;
        this.disableResolutionReduction = false;
        this._lastZoom = 0;
        this._selectedBrickPath = null;
        this.pageIndex = pageIndex;
        this.documentId = preview._currentDocumentId || external_ko_["observable"](null);
        this._disposables.push(this.imageSrc.subscribe((newVal) => {
            var documentId = this.documentId.peek();
            this._lastGetPageDeferred && this._lastGetPageDeferred.resolve(null);
            var currentGetPageDeferred = external_jQuery_["Deferred"]();
            currentGetPageDeferred
                .done((response) => {
                if (!response)
                    return;
                this.imageHeight(response.height);
                this.imageWidth(response.width);
                this.currentScaleFactor(this._currentScaleFactor);
                this.displayImageSrc('data:image/png;base64,' + response.base64string);
                this._onPageLoaded(response, processClick, preview._editingFields);
            }).fail((_e) => {
                this._onPageLoadFailed();
            });
            var ignoreError = preview._closeDocumentRequests && (() => preview._closeDocumentRequests[documentId] || currentGetPageDeferred.state() != 'pending');
            _previewRequestWrapper_PreviewRequestWrapper.getPage(newVal, ignoreError)
                .done((response) => {
                currentGetPageDeferred.resolve(response);
            }).fail((_e) => {
                currentGetPageDeferred.reject(_e);
            });
            this._lastGetPageDeferred = currentGetPageDeferred;
        }));
        var unifier = external_ko_["isObservable"](preview._unifier) ? preview._unifier : external_ko_["observable"](preview._unifier || generateGuid());
        this.pageLoading = loading || external_ko_["observable"](true);
        this.originalHeight(external_ko_["unwrap"](preview._pageHeight));
        this.originalWidth(external_ko_["unwrap"](preview._pageWidth));
        this.zoom = preview._zoom;
        this.imageWidth(this.originalWidth() * this._getPixelRatio());
        this.imageHeight(this.originalHeight() * this._getPixelRatio());
        this._disposables.push(this.isClientVisible.subscribe((newVal) => {
            if (newVal) {
                this._setPageImgSrc(this.documentId(), unifier(), this.zoom());
            }
        }));
        this.color = external_ko_["isObservable"](preview._pageBackColor) ? preview._pageBackColor.peek() : '';
        this.width = external_ko_["pureComputed"](() => {
            return this.imageWidth() * this.zoom() / this.currentScaleFactor() / this._getPixelRatio();
        }).extend({ deferred: true });
        this.height = external_ko_["pureComputed"](() => {
            return this.imageHeight() * this.zoom() / this.currentScaleFactor() / this._getPixelRatio();
        }).extend({ deferred: true });
        this.isEmpty = pageIndex === -1 && !this.brick() && !processClick;
        this.resetBrickRecusive = (brick) => {
            if (brick && brick.active) {
                brick.active(false);
                if (brick.bricks) {
                    brick.bricks.forEach((childBrick) => { this.resetBrickRecusive(childBrick); });
                }
            }
        };
        this.selectBrick = (path, ctrlKey) => {
            if (_previewSelection_PreviewSelection.started)
                return;
            processClick && processClick(null);
            var currentBrick = this.brick();
            !ctrlKey && this.resetBrickRecusive(currentBrick);
            if (!path) {
                return;
            }
            if (!currentBrick) {
                this._selectedBrickPath = path;
                return;
            }
            var pathElements = path.split(',');
            pathElements.forEach((el) => {
                currentBrick = currentBrick.bricks[parseInt(el)];
            });
            currentBrick.active(true);
        };
        this._disposables.push(external_ko_["computed"](() => {
            if (!this.active()) {
                this.resetBrickRecusive(this.brick());
                this._selectedBrickPath = null;
            }
        }));
        this.editingFieldsKeyboardHelper = new _previewEditingFieldsKeyboardHelper_PreviewEditingFieldsKeyboardHelper();
        this._disposables.push(this.editingFieldsKeyboardHelper);
    }
    _initializeEditingFields(editingFieldBricks, previewEditngFields, originalWidth, originalHeight) {
        if (this.editingFields) {
            var oldEditFields = external_ko_["unwrap"](this.editingFields());
            if (oldEditFields && oldEditFields.length > 0) {
                oldEditFields.forEach(field => field.dispose && field.dispose());
            }
            this.editingFields.dispose();
        }
        this.editingFields = external_ko_["pureComputed"](() => {
            if (!previewEditngFields || editingFieldBricks.length === 0) {
                return [];
            }
            var allEditingFields = previewEditngFields();
            var pageFieldViewModels = [];
            for (var i = 0; i < editingFieldBricks.length; i++) {
                var brick = editingFieldBricks[i];
                var editingField = allEditingFields[brick.efIndex - 1];
                if (!editingField)
                    return [];
                editingField.brick = brick;
                pageFieldViewModels.push(editingField.createViewModel(this.zoom, originalWidth, originalHeight, () => allEditingFields, brick.absoluteBounds));
                brick.text = (brick => (() => brickText(brick, () => allEditingFields)))(brick);
            }
            return pageFieldViewModels;
        });
    }
    _getPixelRatio() {
        return window['devicePixelRatio'] || 1;
    }
    _onPageLoaded(result, processClick, previewEditingFields) {
        if (this._isDisposed)
            return;
        this.pageLoading(false);
        try {
            if (!result || !result.brick) {
                return;
            }
            this.brickColumnWidthArray = result.columnWidthArray;
            this.originalWidth(result.brick.width);
            this.originalHeight(result.brick.height);
            var editignFieldBricks = [];
            this.initializeBrick(result.brick, processClick, this.zoom, editignFieldBricks);
            this._initializeEditingFields(editignFieldBricks, previewEditingFields, result.brick.width, result.brick.height);
            this._selectedBrickPath && this.selectBrick(this._selectedBrickPath);
        }
        finally {
            this.brickLoading(false);
        }
    }
    _onPageLoadFailed() {
        if (this._isDisposed)
            return;
        if (this.isClientVisible()) {
            this.pageLoading(false);
            this.pageIndex !== -1 && this.brickLoading(false);
        }
    }
    updateSize(zoom) {
        var newResolution = getCurrentResolution(zoom);
        this.realZoom(newResolution / previewDefaultResolution());
        return newResolution;
    }
    clearBricks() {
        this.brickLoading(true);
    }
    dispose() {
        super.dispose();
        this._isDisposed = true;
    }
    _setPageImgSrc(documentId, unifier, zoom) {
        if (!documentId || this.pageIndex === -1) {
            return;
        }
        if (this.maxZoom && this.maxZoom < zoom) {
            zoom = this.maxZoom;
        }
        if (this._lastZoom < zoom) {
            this._lastZoom = zoom;
        }
        else {
            if (this.actualResolution && this.disableResolutionReduction && this.imageSrc())
                return;
        }
        var newResolution = this.updateSize(zoom);
        if ((this.actualResolution === newResolution || newResolution < 9) && this.imageSrc()) {
            return;
        }
        this.actualResolution = newResolution;
        this._currentScaleFactor = zoom;
        var imageResolution = Math.floor(newResolution * this._getPixelRatio());
        this.imageSrc(HandlerUri() +
            '?actionKey=getPage&unifier=' + unifier +
            '&arg=' + encodeURIComponent(JSON.stringify({ pageIndex: this.pageIndex, documentId: documentId, resolution: imageResolution, includeBricks: this.brickLoading() })));
    }
    _clear() {
        this.pageIndex = -1;
        this.isClientVisible(false);
        this._setPageImgSrc(null, null, 1);
        this.actualResolution = 0;
    }
    initializeBrick(brick, processClick, zoom, editingFieldBricks) {
        initializeBrick(brick, processClick, this.zoom, editingFieldBricks);
        updateBricksPosition(brick, brick.height, brick.width);
        this.brick(brick);
    }
    clickToBrick(s, e) {
        var target = external_jQuery_["fn"].constructor(e.currentTarget);
        var offset = target.offset();
        var xPerc = (e.clientX - offset.left + window.scrollX) / target.width() * 100;
        var yPerc = (e.clientY - offset.top + window.scrollY) / target.height() * 100;
        var bricks = s.bricks();
        for (var i = 0; i < bricks.length; i++) {
            if (parseFloat(bricks[i].topP) < yPerc && parseFloat(bricks[i].topP) + parseFloat(bricks[i].heightP) > yPerc
                && parseFloat(bricks[i].leftP) < xPerc && parseFloat(bricks[i].leftP) + parseFloat(bricks[i].widthP) > xPerc) {
                bricks[i].onClick && bricks[i].onClick(e);
                break;
            }
        }
    }
    getBricksFlatList(brick) {
        if (brick) {
            var bricks = [];
            var innerBricksLength = brick.bricks && brick.bricks.length || 0;
            for (var i = 0; i < innerBricksLength; i++) {
                bricks = bricks.concat(this.getBricksFlatList(brick.bricks[i]));
            }
            bricks.push(brick);
            return bricks;
        }
        return [];
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_previewHandlersHelper.js


class _previewHandlersHelper_PreviewHandlersHelper {
    constructor(preview) {
        this._preview = preview;
    }
    doneStartExportHandler(deferred, inlineResult, response, exportOperationIdDeferred, startExportOperationId, useSameTab = false, printable = false) {
        try {
            if (!response) {
                exportOperationIdDeferred.reject();
                this._preview.progressBar.complete(startExportOperationId);
                return;
            }
            var exportOperationId = response;
            exportOperationIdDeferred.resolve(exportOperationId);
            var progress = 0;
            var doGetExportStatus = (operationId) => {
                var promise = this._preview.exportHandler.getExportStatus(operationId);
                promise.done((result) => {
                    if (result && result.requestAgain) {
                        if (progress < result.progress) {
                            progress = result.progress;
                            this._preview.exportHandler.updateExportStatus(result.progress, operationId);
                        }
                        var doStatusRequest = () => { doGetExportStatus(operationId); };
                        PollingDelay() ? setTimeout(doStatusRequest, PollingDelay()) : doStatusRequest();
                    }
                    else {
                        this._preview.progressBar.complete(operationId);
                        if (!result.requestAgain && result.completed && !this._preview._cancelExportRequests[operationId]) {
                            this._preview.exportHandler.updateExportStatus(result.progress, operationId);
                            this._preview.exportHandler.getExportResult(operationId, inlineResult, useSameTab, result.token, printable, result.uri);
                        }
                    }
                });
            };
            doGetExportStatus(exportOperationId);
        }
        finally {
            deferred.resolve(true);
            this._preview._startBuildOperationId = '';
        }
    }
    errorStartExportHandler(deferred, startExportOperationId, error) {
        this._preview.progressBar.complete(startExportOperationId);
        deferred.reject();
    }
    doneExportStatusHandler(deferred, operationId, response) {
        try {
            if (!response) {
                deferred.resolve({ requestAgain: false });
                this._preview.progressBar.complete(operationId);
                return;
            }
            this._preview.progressBar && this._preview.progressBar.progress() < response.progress && this._preview.progressBar.progress(response.progress);
            deferred.resolve(response);
        }
        finally {
            if (!deferred.state || deferred.state() === 'pending') {
                deferred.resolve({ requestAgain: false });
            }
        }
    }
    errorExportStatusHandler(deferred, operationId, error) {
        this._preview.progressBar.complete(operationId);
        deferred.resolve({ requestAgain: false, completed: false });
    }
    doneStartBuildHandler(deferred, response, startBuildOperationId, doucmentIdDeferred) {
        try {
            var removeAllEmptyPages = (all) => {
                all && this._preview.pages.removeAll();
                this._preview.removeEmptyPages();
            };
            if (!response || !response.documentId) {
                doucmentIdDeferred.reject();
                this._preview.progressBar.complete(startBuildOperationId);
                removeAllEmptyPages();
                return;
            }
            var documentId = response.documentId;
            var stopBuildRequest = this._preview._stopBuildRequests[startBuildOperationId];
            var closeDocumentRequest = this._preview._closeDocumentRequests[startBuildOperationId];
            if (startBuildOperationId && (stopBuildRequest || closeDocumentRequest)) {
                if (closeDocumentRequest) {
                    closeDocumentRequest && this._preview.closeDocument(documentId);
                }
                else {
                    stopBuildRequest && this._preview.stopBuild(documentId);
                }
                doucmentIdDeferred.reject();
                this._preview.progressBar.complete(startBuildOperationId);
                removeAllEmptyPages();
                return;
            }
            this._preview._currentDocumentId(documentId);
            doucmentIdDeferred.resolve(documentId);
            var doGetBuildStatus = this._preview.getDoGetBuildStatusFunc();
            doGetBuildStatus(documentId);
        }
        finally {
            deferred.resolve(true);
        }
    }
    errorStartBuildHandler(deferred, startBuildOperationId, error) {
        this._preview.pageLoading(false);
        this._preview.errorMessage(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Document creation was cancelled due to server error', 'WebDocumentViewer_DocumentCreationCancelled'));
        this._preview.progressBar.complete(startBuildOperationId);
        deferred.resolve(true);
        this._preview.removeEmptyPages();
    }
    errorGetBuildStatusHandler(deferred, error, ignoreError) {
        deferred.resolve({ requestAgain: false, completed: false });
    }
    processPages(pageCount, stopProcessingPredicate) {
        var wereNoPagesAndNewOnesExist = this._preview.pageIndex() === -1 && pageCount > 0;
        if (wereNoPagesAndNewOnesExist) {
            this._preview.pageIndex(0);
        }
        for (var i = 0; i < pageCount && !stopProcessingPredicate(); i++) {
            var createNewPage = (index) => {
                return this._preview.createPage(index, this._preview.createBrickClickProcessor(index));
            };
            if (i < this._preview.pages().length) {
                var page = this._preview.pages()[i];
                if (!page || page.isEmpty) {
                    page = createNewPage(i);
                    this._preview.pages.splice(i, 1, page);
                }
                if (page.pageIndex === -1) {
                    page.pageIndex = i;
                    if (this._preview.pageIndex.peek() === i) {
                        page.isClientVisible(true);
                    }
                }
            }
            else {
                var newPage = createNewPage(i);
                this._preview.pages.push(newPage);
            }
        }
        this._preview._raiseOnSizeChanged();
        if (wereNoPagesAndNewOnesExist) {
            var pageIndex = this._preview.pages().length ? 0 : -1;
            this._preview.goToPage(pageIndex, true);
        }
    }
    doneGetBuildStatusHandler(deferred, documentId, response, stopProcessingPredicate) {
        try {
            if (!response) {
                deferred.resolve({ requestAgain: false });
                return;
            }
            this._preview.progressBar.progress() < response.progress && !this._preview._stopBuildRequests[documentId] && !stopProcessingPredicate()
                && this._preview.progressBar.progress(response.progress);
            this.processPages(response.pageCount, stopProcessingPredicate);
            deferred.resolve(response);
        }
        finally {
            if (deferred.state() === 'pending') {
                deferred.resolve({ requestAgain: false });
            }
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_progressViewModel.js




class _progressViewModel_ProgressViewModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(enableKeyboardSupport) {
        super();
        this.progress = external_ko_["observable"](0);
        this._forceInvisible = external_ko_["observable"](false);
        this._cancelExportRequests = {};
        this.inProgress = external_ko_["observable"](false);
        this.cancelText = external_ko_["observable"](Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        this.operationId = external_ko_["observable"]();
        this.text = external_ko_["observable"]('');
        this.cssClasses = external_ko_["observable"]();
        this.cancelVisible = external_ko_["pureComputed"](() => !!this.operationId() && !this.isCancelling());
        this.isCancelling = external_ko_["observable"](false);
        this.visible = external_ko_["pureComputed"]({
            read: () => {
                if (this._forceInvisible()) {
                    return false;
                }
                return this.inProgress();
            },
            write: (visibleState) => {
                this._forceInvisible(!visibleState);
            }
        });
        if (enableKeyboardSupport) {
            this.progressBarAccessibility = new external_DevExpress_Analytics_Internal_["ListKeyboardHelper"]();
            this._disposables.push(this.progressBarAccessibility);
        }
        this._disposables.push(this.cancelVisible, this.visible);
    }
    wasCancelRequested(id) {
        return !!(id && this._cancelExportRequests[id]);
    }
    setPosition(position) {
        if (!position) {
            this.cssClasses({
                'dxrd-align-default': true
            });
        }
        else {
            this.cssClasses({
                'dxrd-align-bottom': position.bottom,
                'dxrd-align-top': position.top,
                'dxrd-align-left': position.left,
                'dxrd-align-right': position.right
            });
        }
    }
    complete(completeOperationId) {
        if (completeOperationId === this.operationId() || this._startOperationId === completeOperationId || !completeOperationId) {
            this.inProgress(false);
            this.progress(0);
            this._startOperationId = null;
            this.operationId(null);
            this._lastOperationDeferred && this._lastOperationDeferred.resolve(completeOperationId);
            this.rejectLastOperationIdDeferred();
            this.isCancelling(false);
        }
    }
    dispose() {
        this.rejectLastOperationIdDeferred();
        super.dispose();
    }
    rejectLastOperationIdDeferred() {
        this._lastOperationIdDeferred && this._lastOperationIdDeferred.reject();
    }
    rejectLastOperationDeferred() {
        this._lastOperationDeferred && this._lastOperationDeferred.reject();
    }
    startProgress(startOperationId, onStop, operationIdPromise) {
        if (this.inProgress()) {
            this.stop();
            this.rejectLastOperationDeferred();
            this.rejectLastOperationIdDeferred();
        }
        this._startOperationId = startOperationId;
        this.inProgress(true);
        this.progress(0);
        var newOperationDeferred = external_jQuery_["Deferred"]();
        var newOperationIdDeferred = external_jQuery_["Deferred"]();
        this._lastOperationDeferred = newOperationDeferred;
        this._lastOperationIdDeferred = newOperationIdDeferred;
        operationIdPromise
            .done(operationId => {
            newOperationIdDeferred.resolve(operationId);
        }).fail(() => {
            newOperationIdDeferred.reject();
            newOperationDeferred.reject();
            this.complete(startOperationId);
        });
        newOperationIdDeferred.done(operationId => {
            this.operationId(operationId);
        });
        this.stop = () => {
            this.isCancelling(true);
            this.text(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cancelling...', 'ASPxReportsStringId.WebDocumentViewer_Cancelling'));
            var operationId = this.operationId();
            var finalizeId = operationId || this._startOperationId;
            try {
                external_jQuery_["isFunction"](onStop) && onStop(finalizeId);
                if (operationId)
                    this._cancelExportRequests[operationId] = true;
                if (this._startOperationId)
                    this._cancelExportRequests[this._startOperationId] = true;
            }
            finally {
            }
        };
        return this._lastOperationDeferred.promise();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_sortingProcessor.js

class _sortingProcessor_SortingProcessor {
    constructor(_getSortingStage) {
        this._getSortingStage = _getSortingStage;
    }
    doSorting(sortData, shiftKey, ctrlKey) {
        if (!sortData)
            return;
        if (ctrlKey) {
            if (this._detachSorting(sortData))
                return;
        }
        else if (shiftKey)
            this._appendSorting(sortData);
        else
            this._applySorting(sortData);
        return true;
    }
    _applySorting(sortData) {
        var sortingStage = this._getSortingStage();
        for (var i = 0; i < sortingStage.length; i++) {
            if (sortingStage[i] && sortingStage[i].Key === sortData.target) {
                var value = sortingStage[i].Value || [];
                for (var index = 0; index < value.length; index++) {
                    if (value[index] && (value[index].fieldName === sortData.field)) {
                        if (index != 0) {
                            var x = value.splice(index, 1)[0];
                            this._changeSortOrder(x);
                            value.unshift(x);
                        }
                        else
                            this._changeSortOrder(value[index]);
                    }
                    else
                        value[index].sortOrder = ColumnSortOrder.None;
                }
                return;
            }
        }
    }
    _appendSorting(sortData) {
        var sortingStage = this._getSortingStage();
        for (var i = 0; i < sortingStage.length; i++) {
            if (sortingStage[i] && sortingStage[i].Key === sortData.target) {
                var value = sortingStage[i].Value || [];
                for (var index = 0; index < value.length; index++) {
                    if (value[index] && (value[index].fieldName === sortData.field)) {
                        if (index != value.length - 1) {
                            var x = value.splice(index, 1)[0];
                            this._changeSortOrder(x);
                            value.push(x);
                            return;
                        }
                        this._changeSortOrder(value[index]);
                        return;
                    }
                }
            }
        }
    }
    _detachSorting(sortData) {
        var skipProcessing = false;
        var sortingStage = this._getSortingStage();
        for (var i = 0; i < sortingStage.length; i++) {
            if (sortingStage[i] && sortingStage[i].Key === sortData.target) {
                (sortingStage[i].Value || []).forEach(f => {
                    if (f.sortOrder === ColumnSortOrder.None)
                        skipProcessing = true;
                    else
                        f.sortOrder = ColumnSortOrder.None;
                });
                return;
            }
        }
        return skipProcessing;
    }
    _changeSortOrder(fieldInfo) {
        fieldInfo.sortOrder = fieldInfo.sortOrder === ColumnSortOrder.Ascending ? ColumnSortOrder.Descending : ColumnSortOrder.Ascending;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/reportPreview.js

















class reportPreview_ReportPreview extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl = false, enableKeyboardSupport, exportSettings, element) {
        super();
        this.enableKeyboardSupport = enableKeyboardSupport;
        this.element = element;
        this.predefinedZoomLevels = external_ko_["observableArray"]([5, 2, 1.5, 1, 0.75, 0.5, 0.25]);
        this._pageWidth = external_ko_["observable"](818);
        this._pageHeight = external_ko_["observable"](1058);
        this._pageBackColor = external_ko_["observable"]('');
        this._currentReportId = external_ko_["observable"](null);
        this._currentReportUrl = external_ko_["observable"](null);
        this._currentDocumentId = external_ko_["observable"](null);
        this._unifier = external_ko_["observable"]('');
        this._stopBuildRequests = {};
        this._closeReportRequests = {};
        this._closeDocumentRequests = {};
        this._cancelExportRequests = {};
        this._editingFields = external_ko_["observable"]([]);
        this._startBuildOperationId = '';
        this._editingValuesSubscriptions = [];
        this._drillDownState = [];
        this._sortingState = [];
        this._sortingProcessor = new _sortingProcessor_SortingProcessor(() => this._sortingState || []);
        this._getBuildStatusDeferreds = [];
        this._timeouts = [];
        this._deferreds = [];
        this.getSelectedContent = (punctuationMark = '') => {
            var currentPage = this.pages()[this.pageIndex()];
            if (!currentPage || !currentPage.brickColumnWidthArray) {
                return '';
            }
            var activeBricks = [];
            var getActiveBricks = function (currentBrick, resultArray) {
                if (!currentBrick) {
                    return;
                }
                currentBrick.active() && currentBrick.genlIndex != -1 && activeBricks.push(currentBrick);
                currentBrick.bricks && currentBrick.bricks.length != 0 && currentBrick.bricks.forEach((innerBrick) => { getActiveBricks(innerBrick, resultArray); });
            };
            getActiveBricks(currentPage.brick(), activeBricks);
            if (!activeBricks) {
                return '';
            }
            var sortedActiveBricks = [];
            var extendWithSpaces = function (width, text) {
                var spaceCount = width - text.length;
                for (var i = 0; i <= spaceCount; i++) {
                    text += ' ';
                }
                return text;
            };
            var firstUsedColumn = currentPage.brickColumnWidthArray.length, lastUsedColumn = -1;
            activeBricks.forEach((activeBrick) => {
                var row = sortedActiveBricks[activeBrick.row];
                if (!row) {
                    row = [];
                    sortedActiveBricks[activeBrick.row] = row;
                }
                row[activeBrick.col] = activeBrick.accessibleDescription || activeBrick.text();
                if (firstUsedColumn > activeBrick.col) {
                    firstUsedColumn = activeBrick.col;
                }
                if (lastUsedColumn < activeBrick.col) {
                    lastUsedColumn = activeBrick.col;
                }
            });
            var result = '';
            sortedActiveBricks.forEach((row, index) => {
                for (var c = firstUsedColumn; c <= lastUsedColumn; c++) {
                    var rowText = row[c] ? row[c] + punctuationMark : '';
                    result += c == lastUsedColumn ? rowText : extendWithSpaces(currentPage.brickColumnWidthArray[c], rowText);
                }
                if (index != sortedActiveBricks.length - 1) {
                    result += '\r\n';
                }
            });
            return result;
        };
        this.rtlReport = external_ko_["observable"](false);
        this.currentPage = external_ko_["observable"](null);
        this.originalParametersInfo = external_ko_["observable"](null);
        this.pageIndex = external_ko_["observable"](-1);
        this.showMultipagePreview = external_ko_["observable"](false);
        this.documentMap = external_ko_["observable"]();
        this.exportOptionsModel = external_ko_["observable"]();
        this.pageLoading = external_ko_["observable"](false);
        this.errorMessage = external_ko_["observable"]('');
        this.documentBuilding = external_ko_["observable"](false);
        this.reportOpening = external_ko_["observable"](false);
        this.pages = external_ko_["observableArray"]([]).extend({ rateLimit: { timeout: 20, method: 'notifyWhenChangesStop' } });
        this.isAutoFit = external_ko_["observable"](true);
        this.autoFitBy = external_ko_["observable"](ZoomAutoBy.WholePage);
        this.exportDisabled = external_ko_["pureComputed"](() => {
            var inProgress = this.progressBar.inProgress();
            var documentBuilding = this.documentBuilding();
            return this.pageIndex() === -1 || inProgress || documentBuilding;
        });
        this._zoom = external_ko_["observable"](1);
        this.zoom = external_ko_["pureComputed"]({
            read: () => {
                var autoFitBy = this.autoFitBy();
                if (autoFitBy != ZoomAutoBy.None || this._zoom() === 0) {
                    return autoFitBy;
                }
                return this._zoom();
            },
            write: (val) => {
                if (val > 0) {
                    this.autoFitBy(ZoomAutoBy.None);
                    this._zoom(val);
                }
                else {
                    this.autoFitBy(val);
                }
            }
        });
        this.editingFieldsProvider = () => this._editingFields();
        this._currentPageText = external_ko_["pureComputed"](() => {
            if (this.pageIndex() === -1) {
                return Object(external_DevExpress_Analytics_Utils_["getLocalization"])('0 pages', 'ASPxReportsStringId.WebDocumentViewer_0Pages');
            }
            else {
                var ofText = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('of', 'ASPxReportsStringId.ToolBarItemText_OfLabel');
                return (this.pageIndex() + 1) + ' ' + ofText + ' ' + this.pages().length;
            }
        });
        this._raiseOnSizeChanged = () => { this.onSizeChanged() && this.onSizeChanged()(); };
        this.previewSize = external_ko_["observable"](0);
        this.onSizeChanged = external_ko_["observable"]();
        this.previewVisible = external_ko_["observable"](false);
        this.editingFieldsHighlighted = external_ko_["observable"](false);
        this.canSwitchToDesigner = true;
        this.allowURLsWithJSContent = false;
        this.zoomStep = external_ko_["observable"](0.05);
        this._progressFirstTime = false;
        this.emptyDocumentCaption = external_ko_["pureComputed"](() => {
            var parametersInfo = this.originalParametersInfo();
            var parametersExist = parametersInfo && parametersInfo.parameters.some(x => x.Visible);
            var newCaption = '';
            if (this.documentBuilding()) {
                if (this.currentPage()) {
                    if (!this._progressFirstTime)
                        newCaption = Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Progress {0}%', 'ASPxReportsStringId.WebDocumentViewer_AriaDocumentProgress'), this.progressBar.progress().toString());
                    else
                        newCaption = this.progressBar.progress() + '%';
                    this._progressFirstTime = true;
                }
                else {
                    newCaption = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Creating the document...', 'PreviewStringId.Msg_CreatingDocument');
                }
            }
            else if (parametersExist && !this.documentId) {
                newCaption = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Waiting for parameter values...', 'PreviewStringId.Msg_WaitingForParameterValues');
            }
            else if (this.documentId) {
                this._progressFirstTime = false;
                if (this.pageIndex() !== -1 && !this.progressBar.inProgress()) {
                    newCaption = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Document is ready', 'ASPxReportsStringId.WebDocumentViewer_AriaDocumentReady');
                }
                else {
                    newCaption = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('The document does not contain any pages.', 'PreviewStringId.Msg_EmptyDocument');
                }
            }
            else if (this.reportOpening()) {
                this._progressFirstTime = false;
                newCaption = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Loading...', 'AnalyticsCoreStringId.Loading');
            }
            else if (this.errorMessage()) {
                newCaption = this.errorMessage();
            }
            return newCaption;
        }).extend({ rateLimit: { timeout: 1000 } });
        this.exportOptionsTabVisible = external_ko_["observable"](true);
        HandlerUri(handlerUri || HandlerUri());
        this.progressBar = new _progressViewModel_ProgressViewModel(enableKeyboardSupport);
        this.editingFieldChanged = callbacks && callbacks.editingFieldChanged;
        this.previewHandlersHelper = previewHandlersHelper || new _previewHandlersHelper_PreviewHandlersHelper(this);
        this.requestWrapper = previewRequestWrapper || new _previewRequestWrapper_PreviewRequestWrapper(null, callbacks);
        this.rtlViewer = rtl;
        this.exportHandler = new _exportHandler_ExportHandler(exportSettings, this);
        if (callbacks) {
            this.customProcessBrickClick = callbacks.previewClick;
            this.customizeExportOptions = callbacks.customizeExportOptions;
            this.exportHandler.onExportCustomEvent = callbacks.onExport;
            this._onGetBuildStatus = callbacks._onGetBuildStatus;
            this._onGetDocumentDetails = callbacks._onGetDocumentDetails;
        }
        this._disposables.push(EditablePreviewEnabled.subscribe((newValue) => !newValue && this.editingFieldsHighlighted(false)));
        this._disposables.push(this.documentBuilding.subscribe((newVal) => {
            if (!newVal) {
                this._unifier(generateGuid());
                var documentId = this._currentDocumentId();
                var pageCount = this.pages().length;
                for (var i = 0; i < pageCount; i++) {
                    var page = this.pages()[i];
                    if (!page.pageLoading()) {
                        page.clearBricks();
                    }
                    page.updateSize(this._zoom());
                    page.actualResolution = 0;
                    page.isClientVisible() && page._setPageImgSrc(documentId, this._unifier(), this._zoom());
                }
                if (callbacks && callbacks.documentReady && documentId) {
                    var self = this;
                    this._timeouts.push(setTimeout(function () {
                        callbacks.documentReady(documentId, self._currentReportId(), pageCount);
                    }));
                }
            }
        }));
        this._disposables.push(this._currentDocumentId.subscribe((newVal) => {
            this._unifier(newVal ? generateGuid() : '');
        }));
        this._disposables.push(this.previewSize.subscribe(() => this._raiseOnSizeChanged()));
        this._disposables.push(this.zoom);
        this._disposables.push(this.exportDisabled);
        this._disposables.push(this._currentPageText);
        this._disposables.push(this.progressBar);
        this._disposables.push(this.emptyDocumentCaption);
        this._disposables.push(this.showMultipagePreview.subscribe(() => {
            if (!this.showMultipagePreview()) {
                var currentPage = this.pages()[this.pageIndex()];
                currentPage && currentPage.isClientVisible(true);
            }
        }));
        this._disposables.push(this._zoom.subscribe(() => {
            if (this.showMultipagePreview()) {
                this.pages().forEach((page) => {
                    page.updateSize(page.zoom());
                    page.isClientVisible(false);
                });
                this._raiseOnSizeChanged();
            }
            else {
                var currentPage = this.pages()[this.pageIndex()];
                currentPage && currentPage.isClientVisible.notifySubscribers(currentPage.isClientVisible.peek());
            }
        }));
        this._disposables.push(external_ko_["computed"](() => {
            var pagesArray = this.pages();
            var pageIndex = this.pageIndex();
            if (!pagesArray || pageIndex >= pagesArray.length)
                return;
            var currentPage = null;
            if (pageIndex >= 0)
                currentPage = pagesArray[pageIndex];
            if (currentPage != this.currentPage.peek())
                this.currentPage(currentPage);
        }));
        if (enableKeyboardSupport) {
            this.previewBrickKeyboardHelper = new _previewBricksKeyboardHelper_PreviewBricksKeyboardHelper(this);
            this._disposables.push(this.previewBrickKeyboardHelper);
        }
    }
    _doDrillDown(drillDownKey) {
        this._drillDownState.forEach((x) => x.Key === drillDownKey && (x.Value = !x.Value));
        var documentId = this._currentDocumentId();
        this.closeDocument();
        this.progressBar.complete(documentId);
        this.documentMap(null);
        for (var i = this.pages().length - 1; i >= 0; i--) {
            var page = this.pages()[i];
            if (i > this.pageIndex()) {
                this.pages.remove(page);
            }
            else {
                page._clear();
            }
        }
        this._startBuildRequest();
    }
    _doSorting(sortData, shiftKey, ctrlKey) {
        if (!this._sortingProcessor.doSorting(sortData, shiftKey, ctrlKey))
            return;
        this.closeDocument();
        this.documentMap(null);
        this.pages().forEach(page => page._clear());
        this._startBuildRequest();
    }
    dispose() {
        super.dispose();
        (this._timeouts || []).forEach(tic => clearTimeout(tic));
        (this._deferreds || []).forEach(deferred => deferred.reject());
        this.exportHandler && this.exportHandler.dispose();
        this.removeProperties();
        this._sortingProcessor = null;
    }
    removeEmptyPages(all) {
        all && this.pages.removeAll();
        for (var idx = this.pages().length - 1; idx >= 0; idx--) {
            var tempPage = this.pages()[idx];
            (tempPage.isEmpty || tempPage.pageIndex === -1) && this.pages.remove(tempPage);
        }
    }
    _initialize() {
        this._drillDownState = [];
        this._sortingState = [];
        this.closeDocument();
        this._editingFields([]);
        this._editingValuesSubscriptions.forEach(item => item.dispose());
        this._editingValuesSubscriptions = [];
        this.documentMap(null);
        this.pageIndex(-1);
        this.pageLoading(true);
        this.errorMessage('');
        this.progressBar.complete(null);
        this._getBuildStatusDeferreds.forEach(a => a.reject());
        this._getBuildStatusDeferreds = [];
        this.pages().forEach(x => x.dispose());
        this.pages([this.createPage(-1, undefined, this.pageLoading)]);
        this.exportHandler.reportDisplayName(null);
    }
    createPage(pageIndex, processClick, loading) {
        return new _page_PreviewPage(this, pageIndex, processClick, loading);
    }
    _cleanTabInfo() {
        this.exportOptionsModel(null);
        this.documentMap(null);
    }
    _clearReportInfo() {
        this._cleanTabInfo();
        this.closeReport();
        this.originalParametersInfo(null);
    }
    createBrickClickProcessor(cyclePageIndex) {
        var _self = this;
        return (brick, e) => {
            _self.goToPage(cyclePageIndex, true);
            if (!brick)
                return;
            var page = _self.pages()[cyclePageIndex];
            if (!page)
                return;
            page.selectBrick('');
            var shiftKey = !!(e && e.shiftKey);
            var ctrlKey = !!(e && e.ctrlKey);
            var brickNavigation = brick && brick.navigation;
            var defaultHandler = () => {
                if (brickNavigation) {
                    if (brickNavigation.drillDownKey && _self.reportId && _self._doDrillDown && _self._drillDownState.length > 0) {
                        if (_self._startBuildOperationId)
                            return;
                        _self._doDrillDown(brickNavigation.drillDownKey);
                    }
                    else if (brickNavigation.sortData && _self.reportId && _self._doSorting && _self._sortingState.length > 0) {
                        if (_self._startBuildOperationId)
                            return;
                        _self._doSorting(brickNavigation.sortData, shiftKey, ctrlKey);
                    }
                    if (brickNavigation.pageIndex >= 0) {
                        var targetPage = _self.pages().filter(page => page.pageIndex === brickNavigation.pageIndex)[0];
                        if (targetPage) {
                            _self.goToPage(brickNavigation.pageIndex);
                            targetPage.selectBrick(brickNavigation.indexes);
                            _self.brickClickDocumentMapHandler && _self.brickClickDocumentMapHandler(brickNavigation);
                        }
                    }
                    else {
                        var validateUrl = function (url) {
                            var isUrlString = typeof url === 'string';
                            if (isUrlString) {
                                url = url.toLowerCase();
                            }
                            if (url === 'empty') {
                                return false;
                            }
                            return _self.allowURLsWithJSContent || (isUrlString && (url.indexOf('javascript:') === -1));
                        };
                        if (brickNavigation.url && validateUrl(brickNavigation.url)) {
                            safelyRunWindowOpen(brickNavigation.url, brickNavigation.target || '_blank');
                        }
                    }
                }
            };
            if (_self.customProcessBrickClick && _self.customProcessBrickClick(cyclePageIndex, brick, defaultHandler))
                return;
            defaultHandler();
        };
    }
    delayedInit() {
        this.previewBrickKeyboardHelper && this.previewBrickKeyboardHelper.delayedInit();
    }
    openReport(reportName) {
        this._clearReportInfo();
        var deferred = external_jQuery_["Deferred"]();
        this._deferreds.push(deferred);
        this._openReportOperationDeferred = deferred;
        this.requestWrapper.openReport(reportName).done((response) => {
            deferred.resolve(response);
        }).fail((error) => {
            deferred.reject(error);
        });
        return this.initialize(deferred.promise());
    }
    drillThrough(customData, closeCurrentReport = true) {
        var deferred = external_jQuery_["Deferred"]();
        this.requestWrapper.drillThrough(customData).done(response => {
            if (closeCurrentReport) {
                this._clearReportInfo();
                this.initialize(deferred.promise());
            }
            deferred.resolve(response);
        }).fail((error) => {
            deferred.reject(error);
        });
        return deferred.promise();
    }
    initialize(initializeDataPromise) {
        this.reportOpening(true);
        this._currentReportId(null);
        this._currentReportUrl(null);
        this._currentDocumentId(null);
        this._initialize();
        var _initializeDeferred = external_jQuery_["Deferred"]();
        this._deferreds.push(_initializeDeferred);
        _initializeDeferred.done(() => {
            initializeDataPromise.done((previewInitialize) => {
                this.reportOpening(false);
                if (previewInitialize && !previewInitialize.error && (previewInitialize.reportId || previewInitialize.documentId)) {
                    this._currentReportId(previewInitialize.reportId);
                    this._currentReportUrl(previewInitialize.reportUrl);
                    this._currentDocumentId(previewInitialize.documentId);
                    this.rtlReport(previewInitialize.rtlReport);
                    var pageSettings = previewInitialize.pageSettings;
                    if (pageSettings) {
                        if (pageSettings.height)
                            this._pageHeight(pageSettings.height);
                        if (pageSettings.width)
                            this._pageWidth(pageSettings.width);
                        this._pageBackColor((pageSettings.color && this.readerMode) ? 'rgba(' + pageSettings.color + ')' : '');
                    }
                    var deserializedExportOptions = this._deserializeExportOptions(previewInitialize.exportOptions, !this.reportId && (!previewInitialize.documentData || !previewInitialize.documentData.canPerformContinuousExport));
                    var customizeExportOptionsArgs = { exportOptions: deserializedExportOptions, panelVisible: true };
                    this.customizeExportOptions && this.customizeExportOptions(customizeExportOptionsArgs);
                    this.exportOptionsTabVisible(customizeExportOptionsArgs.panelVisible);
                    this.exportOptionsModel(deserializedExportOptions);
                    this.originalParametersInfo(previewInitialize.parametersInfo);
                    if (previewInitialize.documentId) {
                        var documentIdPromise = external_jQuery_["Deferred"]().resolve(previewInitialize.documentId).promise();
                        this.progressBar.startProgress(null, () => { this.stopBuild(); }, documentIdPromise)
                            .always(() => { this.documentBuilding(false); });
                        this.documentBuilding(true);
                        var doGetBuildStatusFunc = this.getDoGetBuildStatusFunc();
                        doGetBuildStatusFunc(previewInitialize.documentId);
                    }
                }
                else {
                    this.pageLoading(false);
                    this._processError(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('The report preview initialization has failed', 'ASPxReportsStringId.WebDocumentViewer_InitializationError'), previewInitialize && previewInitialize.error);
                }
            }).fail((error) => {
                this.reportOpening(false);
                this.removeEmptyPages();
            });
        }).resolve();
        return initializeDataPromise;
    }
    _deserializeExportOptions(exportOptionsString, isMerged) {
        var jsonModel = exportOptionsString && JSON.parse(exportOptionsString);
        return isMerged ? new exportOptionsPreview_ExportOptionsMergedPreview(jsonModel) : new exportOptionsPreview_ExportOptionsPreview(jsonModel);
    }
    deactivate() {
        this._initialize();
        this._cleanTabInfo();
        this.closeReport();
        this._currentDocumentId(null);
        this._currentReportId(null);
        this._currentReportUrl(null);
        this.originalParametersInfo(null);
    }
    startBuild() {
        this._initialize();
        return this._startBuildRequest();
    }
    customDocumentOperation(customData, hideMessageFromUser) {
        var documentId = this._currentDocumentId();
        if (this.documentBuilding() || !documentId)
            return;
        var serializedExportOptions = this.exportOptionsModel() ? JSON.stringify(new external_DevExpress_Analytics_Utils_["ModelSerializer"]().serialize(this.exportOptionsModel())) : null;
        var editingFields = () => this._editingFields && this._editingFields().map(item => item.editValue());
        var deferred = external_jQuery_["Deferred"]();
        setTimeout(() => this.requestWrapper.customDocumentOperation(documentId, serializedExportOptions, editingFields(), customData, hideMessageFromUser)
            .done((response) => {
            try {
                if (response && response.message) {
                    if (response.succeeded) {
                        MessageHandler().processMessage(response.message, !hideMessageFromUser, this._getToastMessageContainer());
                    }
                    else {
                        MessageHandler().processError(response.message, !hideMessageFromUser, undefined, this._getToastMessageContainer());
                    }
                }
            }
            finally {
                deferred.resolve(response);
            }
        })
            .fail(error => {
            var response = { message: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('The requested document operation cannot be performed.', 'ASPxReportsStringId.WebDocumentViewer_CustomDocumentOperationsDenied_Error') };
            deferred.reject(response);
        }));
        return deferred.promise();
    }
    _initializeStartBuild(documentIdPromise) {
        if (this.documentBuilding() || this._startBuildOperationId) {
            return false;
        }
        this._startBuildOperationId = generateGuid();
        this._currentDocumentId(null);
        this.progressBar.text(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Creating the document...', 'PreviewStringId.Msg_CreatingDocument'));
        this.progressBar.cancelText(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'));
        this.progressBar.startProgress(this._startBuildOperationId, () => { this.stopBuild(); }, documentIdPromise)
            .always(() => { this.documentBuilding(false); });
        this.documentBuilding(true);
        return true;
    }
    _startBuildRequest() {
        var docuemntIdDeferred = external_jQuery_["Deferred"]();
        if (!this._initializeStartBuild(docuemntIdDeferred)) {
            return null;
        }
        var deferred = external_jQuery_["Deferred"]();
        var currentReportId = this._currentReportId();
        var startBuildOperationId = this._startBuildOperationId;
        var shouldIgnoreError = () => this._closeReportRequests[currentReportId];
        this.requestWrapper.startBuildRequest(shouldIgnoreError)
            .done((response) => {
            this.previewHandlersHelper && this.previewHandlersHelper.doneStartBuildHandler(deferred, response, startBuildOperationId, docuemntIdDeferred);
        })
            .fail((error) => {
            this.previewHandlersHelper && this.previewHandlersHelper.errorStartBuildHandler(deferred, startBuildOperationId, error);
            docuemntIdDeferred.reject();
        });
        deferred.always(() => this._startBuildOperationId = '');
        return deferred.promise();
    }
    getBuildStatus(documentId) {
        var deferred = external_jQuery_["Deferred"]();
        this._deferreds.push(deferred);
        var sessionDeferred = external_jQuery_["Deferred"]();
        this._getBuildStatusDeferreds.push(sessionDeferred);
        this._timeouts.push(setTimeout(() => {
            var ignorePredicate = () => this._closeDocumentRequests[documentId];
            this.requestWrapper.getBuildStatusRequest(documentId, ignorePredicate)
                .done((response) => {
                sessionDeferred.resolve(response);
            })
                .fail((error) => {
                sessionDeferred.reject(error);
            });
            sessionDeferred.done((response) => {
                this._onGetBuildStatus && this._onGetBuildStatus(response);
                this.previewHandlersHelper && this.previewHandlersHelper.doneGetBuildStatusHandler(deferred, documentId, response, ignorePredicate);
            }).fail((error) => {
                this.previewHandlersHelper && this.previewHandlersHelper.errorGetBuildStatusHandler(deferred, error, ignorePredicate);
            });
        }, 250));
        return deferred.promise();
    }
    getDoGetBuildStatusFunc() {
        var preview = this;
        var doGetBuildStatus = (documentId) => {
            var promise = preview.getBuildStatus(documentId);
            promise.done((result) => {
                if (documentId !== preview._currentDocumentId())
                    return;
                if (result && result.requestAgain && !preview._closeDocumentRequests[documentId]) {
                    var doStatusRequest = () => {
                        if (!preview._closeDocumentRequests[documentId]) {
                            doGetBuildStatus(documentId);
                        }
                    };
                    PollingDelay() ? this._timeouts.push(setTimeout(doStatusRequest, PollingDelay())) : doStatusRequest();
                }
                else {
                    try {
                        if (result.error || !result.requestAgain && !result.pageCount) {
                            preview.pageLoading(false);
                            preview.removeEmptyPages(!result.pageCount);
                            if (!preview.pages().length)
                                preview.pageIndex(-1);
                            return;
                        }
                        if (!result.completed) {
                            return;
                        }
                        else if (result.pageCount < preview.pages().length) {
                            preview.pageIndex(Math.min(result.pageCount - 1, preview.pageIndex()));
                            preview.pages.splice(result.pageCount, preview.pages().length);
                        }
                        preview.getDocumentData(documentId);
                    }
                    finally {
                        preview.progressBar.complete(documentId);
                        this._timeouts.push(setTimeout(preview._raiseOnSizeChanged, 1000));
                    }
                }
            });
        };
        return doGetBuildStatus;
    }
    getDocumentData(documentId) {
        var ignoreErrorPredicate = () => this._closeDocumentRequests[documentId];
        var documentDataDeferred = external_jQuery_["Deferred"]();
        this._deferreds.push(documentDataDeferred);
        documentDataDeferred.done((response) => {
            if (!response) {
                return;
            }
            this.previewHandlersHelper.processPages(response.pageCount, () => false);
            this._onGetDocumentDetails && this._onGetDocumentDetails(response);
            this.exportHandler.reportDisplayName(response.displayName);
            this._drillDownState = response.drillDownKeys || [];
            this._sortingState = response.sortingState || [];
            if (response.canPerformContinuousExport === false && this.reportId) {
                var deserializedExportOptions = this._deserializeExportOptions(response.exportOptions || {}, true);
                var customizeExportOptionsArgs = { exportOptions: deserializedExportOptions, panelVisible: true };
                this.customizeExportOptions && this.customizeExportOptions(customizeExportOptionsArgs);
                this.exportOptionsTabVisible(customizeExportOptionsArgs.panelVisible);
                this.exportOptionsModel(deserializedExportOptions);
            }
            this.documentMap(response.documentMap);
            this._editingValuesSubscriptions.forEach(item => item.dispose());
            this._editingValuesSubscriptions = [];
            this._editingFields((response.editingFields || []).map((item, index) => {
                var field = this.createEditingField(item, index);
                if (this.editingFieldChanged) {
                    field.editingFieldChanged = this.editingFieldChanged;
                }
                this._editingValuesSubscriptions.push(field.editValue);
                return field;
            }));
        });
        this.requestWrapper.getDocumentData(documentId, ignoreErrorPredicate)
            .done(response => {
            documentDataDeferred.resolve(response);
        })
            .fail(error => {
            documentDataDeferred.reject(error);
        });
    }
    exportDocumentTo(format, inlineResult) {
        if (!this._currentDocumentId())
            return;
        var serializedExportOptions = this.exportOptionsModel() ? JSON.stringify(new external_DevExpress_Analytics_Utils_["ModelSerializer"]().serialize(this.exportOptionsModel())) : null;
        var args = () => encodeURIComponent(JSON.stringify({
            documentId: this._currentDocumentId(),
            exportOptions: serializedExportOptions,
            format: format,
            inlineResult: inlineResult,
            editingFieldValues: this._editingFields && this._editingFields().map(item => {
                var editValue = item.editValue();
                if (typeof editValue === 'string')
                    return transformNewLineCharacters(editValue);
                return editValue;
            })
        }));
        this.exportHandler.export(args, HandlerUri(), inlineResult);
    }
    printDocument(pageIndex) {
        if (!this._currentDocumentId())
            return;
        var exportOptions = new exportOptionsPreview_ExportOptionsPreview({});
        exportOptions.pdf['showPrintDialogOnOpen'] = true;
        pageIndex = parseInt(pageIndex);
        if ((!!pageIndex && pageIndex > 0 || pageIndex === 0) && (this.pages().length > pageIndex)) {
            (exportOptions.pdf['pageRange'] = pageIndex + 1);
        }
        var serializedExportOptions = JSON.stringify(new external_DevExpress_Analytics_Utils_["ModelSerializer"]().serialize(exportOptions));
        var args = () => encodeURIComponent(JSON.stringify({
            documentId: this._currentDocumentId(),
            exportOptions: serializedExportOptions,
            format: 'printpdf',
            inlineResult: true,
            editingFieldValues: this._editingFields && this._editingFields().map(item => item.editValue())
        }));
        this.exportHandler.export(args, HandlerUri(), true, true);
    }
    stopBuild(documentId) {
        var id = documentId || this._currentDocumentId();
        if (!id) {
            this._startBuildOperationId && (this._stopBuildRequests[this._startBuildOperationId] = true);
            return;
        }
        this._stopBuildRequests[id] = true;
        this.requestWrapper.stopBuild(id);
    }
    closeDocument(documentId) {
        var _documentId = documentId || this._currentDocumentId();
        if (!_documentId) {
            this._startBuildOperationId && (this._closeDocumentRequests[this._startBuildOperationId] = true);
            return;
        }
        this._closeDocumentRequests[_documentId] = true;
        this.progressBar.complete(documentId);
        this.requestWrapper.sendCloseRequest(_documentId);
    }
    closeReport() {
        this._openReportOperationDeferred && this._openReportOperationDeferred.reject();
        var currentReportId = this._currentReportId();
        if (!currentReportId) {
            return;
        }
        this._closeReportRequests[currentReportId] = true;
        this.requestWrapper.sendCloseRequest(null, currentReportId);
    }
    goToPage(pageIndex, forcePageChanging, throttle) {
        if (!forcePageChanging && this.pageIndex.peek() === pageIndex || this.pages.peek().length === 0 || pageIndex < 0 || pageIndex >= this.pages.peek().length) {
            return;
        }
        if (this._goToPageTimer !== undefined) {
            clearTimeout(this._goToPageTimer);
        }
        var updateActivePage = (activePageIndex) => {
            this.pages.peek().forEach((page) => {
                var visible = page.pageIndex === activePageIndex;
                page.active(visible);
                page.isClientVisible(visible);
            });
            this._goToPageTimer = undefined;
        };
        if (throttle)
            this._timeouts.push(this._goToPageTimer = setTimeout(() => updateActivePage(this.pageIndex()), throttle));
        else
            updateActivePage(pageIndex);
        this.pageIndex(pageIndex);
    }
    createEditingField(item, index) {
        return new editingField_EditingField(item, index, this.requestWrapper);
    }
    currentPageAriaLabelImgAlt(index) {
        return Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Report Preview page {0} of {1}', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPreviewPage'), index + 1, this.pages().length);
    }
    _getErrorMessage(jqXHR) {
        var serverError = Object(external_DevExpress_Analytics_Internal_["getErrorMessage"])(jqXHR);
        if (!serverError)
            return jqXHR && jqXHR.responseJSON && jqXHR.responseJSON.result && jqXHR.responseJSON.result.faultMessage ?
                jqXHR.responseJSON.result.faultMessage :
                serverError;
        return serverError;
    }
    _processError(error, jqXHR, showForUser = true) {
        var prefix = error + ': ';
        var serverError = this._getErrorMessage(jqXHR);
        serverError && (error = prefix + serverError);
        MessageHandler().processError(error, showForUser, serverError && prefix, this._getToastMessageContainer());
    }
    _getToastMessageContainer() {
        var _a;
        return (_a = this.element) === null || _a === void 0 ? void 0 : _a.getElementsByClassName('dx-designer-viewport')[0];
    }
    get reportId() {
        return this._currentReportId();
    }
    get reportUrl() {
        return this._currentReportUrl();
    }
    get documentId() {
        return this._currentDocumentId();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/binding/jsReportViewer.js

class jsReportViewer_JSReportViewer {
    constructor(_previewModel) {
        this._previewModel = _previewModel;
    }
    get previewModel() {
        return this._previewModel();
    }
    set previewModel(newVal) {
        this._previewModel(newVal);
    }
    previewExists() {
        return this.previewModel && this.previewModel.reportPreview;
    }
    GetReportPreview() {
        return this.previewExists();
    }
    GetPreviewModel() {
        return this.previewModel;
    }
    GetParametersModel() {
        return this.previewModel && this.previewModel.GetParametersModel();
    }
    PerformCustomDocumentOperation(customData, hideMessageFromUser) {
        return this.previewExists() && this.previewModel.PerformCustomDocumentOperation(customData, hideMessageFromUser);
    }
    OpenReport(reportName) {
        return this.previewExists() && this.previewModel.OpenReport(reportName);
    }
    Print(pageIndex) {
        return this.previewExists() && this.previewModel.Print(pageIndex);
    }
    ExportTo(format, inlineResult) {
        this.previewExists() && this.previewModel.ExportTo(format, inlineResult);
    }
    GetCurrentPageIndex() {
        return this.previewExists() && this.previewModel.GetCurrentPageIndex();
    }
    GoToPage(pageIndex) {
        this.previewExists() && this.previewModel.GoToPage(pageIndex);
    }
    Close() {
        this.previewExists() && this.previewModel.Close();
    }
    ResetParameters() {
        this.previewModel && this.previewModel.ResetParameters();
    }
    StartBuild() {
        return this.previewModel && this.previewModel.StartBuild();
    }
    UpdateLocalization(localization) {
        Object(external_DevExpress_Analytics_Utils_["updateLocalization"])(localization);
    }
    AdjustControlCore() {
        this.previewModel && this.previewModel.updateSurfaceSize && this.previewModel.updateSurfaceSize();
    }
}

// EXTERNAL MODULE: external "DevExpress.config"
var external_DevExpress_config_ = __webpack_require__(19);
var external_DevExpress_config_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_config_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/documentMap/_documentMapItemsProvider.js

class _documentMapItemsProvider_DocumentMapItemsProvider {
    constructor(bookmark) {
        this.bookmarkDict = {};
        this.getItems = (pathRequest) => {
            var result = external_jQuery_["Deferred"]();
            if (bookmark) {
                if (pathRequest.fullPath) {
                    var nodes = this._selectNode(bookmark, pathRequest.fullPath);
                    result.resolve(nodes);
                }
                else {
                    var root = this._getRootNode(bookmark);
                    result.resolve(root);
                }
            }
            else {
                result.reject();
            }
            return result.promise();
        };
    }
    _selectNode(root, path) {
        if (!!this.bookmarkDict[path]) {
            return this.bookmarkDict[path];
        }
        var pathComponents = path.split('.'), currentNode = root;
        if (pathComponents[0] !== '0') {
            return null;
        }
        for (var i = 1, index = pathComponents[i]; i < pathComponents.length; i++, index = pathComponents[i]) {
            if (currentNode && currentNode.nodes && currentNode.nodes[index]) {
                currentNode = currentNode.nodes[index];
            }
            else {
                return null;
            }
        }
        var result = _documentMapItemsProvider_DocumentMapItemsProvider.fillNode(currentNode);
        if (result && result.length !== 0) {
            this.bookmarkDict[path] = result;
        }
        return result;
    }
    static fillNode(bookmark) {
        if (!bookmark || !bookmark.nodes || bookmark.nodes.length <= 0) {
            return null;
        }
        return bookmark.nodes.map((node, i) => { return { name: i + '', displayName: node.text, isList: node.nodes && node.nodes.length > 0, bookmark: node, specifics: 'node' }; });
    }
    _getRootNode(bookmark) {
        return [{ name: '0', displayName: bookmark.text, isList: bookmark.nodes && bookmark.nodes.length > 0, bookmark: bookmark, specifics: 'node' }];
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/documentMap/_documentMapTreeListController.js

class _documentMapTreeListController_DocumentMapTreeListController {
    constructor() {
        this.selectedItem = external_ko_["observable"](null);
        this.clickHandler = (item) => void 0;
    }
    itemsFilter(item) {
        return true;
    }
    hasItems(item) {
        return item.isList === true;
    }
    canSelect(value) {
        return true;
    }
    select(value) {
        if (this.canSelect(value) && value !== this.selectedItem.peek()) {
            this.selectedItem.peek() && this.selectedItem.peek().isSelected(false);
            this.selectedItem(value);
            value.isSelected(true);
        }
    }
    showIconsForChildItems() {
        return false;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/documentMap/_documentMapModel.js





class _documentMapModel_DocumentMapModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(reportPreview) {
        super();
        this._selectedPath = external_ko_["observable"]('0');
        this._setSelectedPathByNavigationNode = (nodes, brickNavigation, path = '0') => {
            nodes.forEach((item, index) => {
                if (item.indexes === brickNavigation.indexes && item.pageIndex === brickNavigation.pageIndex) {
                    this._selectedPath(path + '.' + index.toString());
                }
                else if (item.nodes) {
                    this._selectedPath(this._setSelectedPathByNavigationNode(item.nodes, brickNavigation, path + '.' + index.toString()));
                }
            });
            return this._selectedPath();
        };
        var treeListController = new _documentMapTreeListController_DocumentMapTreeListController();
        this.isEmpty = external_ko_["pureComputed"](() => {
            return !(reportPreview.documentMap() && reportPreview.documentMap().nodes && (reportPreview.documentMap().nodes.length !== 0));
        });
        treeListController.clickHandler = (item) => {
            var bookmark = item.data.bookmark;
            if (bookmark) {
                var pageIndex = bookmark.pageIndex < 0 ? 0 : bookmark.pageIndex;
                reportPreview.pages.peek()[pageIndex].selectBrick(bookmark.indexes);
            }
        };
        reportPreview.brickClickDocumentMapHandler = (brickNavigation) => {
            if (reportPreview.documentMap && reportPreview.documentMap())
                this._setSelectedPathByNavigationNode(reportPreview.documentMap().nodes, brickNavigation);
        };
        this._disposables.push({ dispose: () => delete reportPreview.brickClickDocumentMapHandler });
        var documentMapTabVisible = external_ko_["pureComputed"](() => !this.isEmpty());
        this.tabInfo = new external_DevExpress_Analytics_Utils_["TabInfo"]({
            text: 'Document Map',
            template: 'dxrd-preview-document-map',
            model: this,
            keyboardHelper: new external_DevExpress_Analytics_Internal_["TreeListKeyboardHelper"](),
            localizationId: 'DevExpress.XtraPrinting.PrintingSystemCommand.DocumentMap',
            imageClassName: 'reportexplorer',
            imageTemplateName: 'dxrd-svg-tabs-reportexplorer',
            visible: documentMapTabVisible
        });
        this.documentMapOptions = external_ko_["pureComputed"](() => {
            return {
                itemsProvider: new _documentMapItemsProvider_DocumentMapItemsProvider(reportPreview.documentMap()),
                expandRootItems: true,
                selectedPath: this._selectedPath,
                treeListController: treeListController,
                onItemsVisibilityChanged: () => { var _a, _b; return (_b = (_a = this.tabInfo) === null || _a === void 0 ? void 0 : _a.keyboardHelper) === null || _b === void 0 ? void 0 : _b.initialize(); }
            };
        });
        this._disposables.push(this.tabInfo, documentMapTabVisible, this.documentMapOptions, this.isEmpty);
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/exportOptions/exportOptionsModel.js




class exportOptionsModel_ExportOptionsModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(reportPreview, enableKeyboardSupport) {
        super();
        this.actions = [];
        this._reportPreview = reportPreview;
        var tabPanelVisible = external_ko_["pureComputed"](() => !!reportPreview.exportOptionsModel() && (!reportPreview.exportOptionsTabVisible || reportPreview.exportOptionsTabVisible()));
        this.tabInfo = new external_DevExpress_Analytics_Utils_["TabInfo"]({
            text: 'Export Options',
            template: 'dxrd-preview-export-options',
            model: reportPreview.exportOptionsModel,
            keyboardHelper: enableKeyboardSupport ? new external_DevExpress_Analytics_Internal_["AccordionKeyboardHelper"]() : undefined,
            localizationId: 'DevExpress.XtraPrinting.ExportOptions',
            imageClassName: 'properties',
            imageTemplateName: 'dxrd-svg-tabs-properties',
            visible: tabPanelVisible
        });
        var actionExportTo = {
            id: ActionId.ExportTo,
            text: 'Export To',
            textId: 'ASPxReportsStringId.WebDocumentViewer_ExportToText',
            disabled: reportPreview.exportDisabled,
            visible: true,
            clickAction: (model) => {
                if (reportPreview.exportDisabled())
                    return;
                this._exportDocumentByFormat(model.itemData.format);
            },
            templateName: 'dxrd-preview-export-to',
            imageTemplateName: 'dxrd-svg-preview-export-export-to',
            eventHandlers: new ExportOptionsEventHandlers()
        };
        var exportItems = external_ko_["pureComputed"](() => {
            var result = this._getExportFormatItems();
            return [{
                    text: 'Export To',
                    textId: 'ASPxReportsStringId.WebDocumentViewer_ExportToText',
                    imageClassName: 'dxrd-image-export-to',
                    imageTemplateName: actionExportTo.imageTemplateName,
                    items: result
                }];
        });
        actionExportTo['items'] = exportItems;
        this.actions.push(actionExportTo);
        this._disposables.push(tabPanelVisible, this.tabInfo, exportItems);
    }
    _getExportFormatItems() {
        var result = [];
        var exportOptionsModel = this._reportPreview.exportOptionsModel();
        if (exportOptionsModel) {
            exportOptionsModel.pdf && result.push(ExportFormatID.PDF);
            exportOptionsModel.xls && result.push(ExportFormatID.XLS);
            exportOptionsModel.xlsx && result.push(ExportFormatID.XLSX);
            exportOptionsModel.rtf && result.push(ExportFormatID.RTF);
            exportOptionsModel.docx && result.push(ExportFormatID.DOCX);
            exportOptionsModel.mht && result.push(ExportFormatID.MHT);
            exportOptionsModel.html && result.push(ExportFormatID.HTML);
            exportOptionsModel.textExportOptions && result.push(ExportFormatID.Text);
            exportOptionsModel.csv && result.push(ExportFormatID.CSV);
            exportOptionsModel.image && result.push(ExportFormatID.Image);
        }
        return result;
    }
    _exportDocumentByFormat(format) {
        format && this._reportPreview.exportDocumentTo(format);
    }
    getActions(context) {
        return this.actions;
    }
    dispose() {
        super.dispose();
        this.disposeArray(this.actions);
        this.removeProperties();
    }
}
class ExportOptionsEventHandlers {
    onSubmenuShowing(popupContainer, element) {
        return (e) => {
            e.submenu._overlay.option('container', popupContainer);
            e.submenu._overlay.option('focusStateEnabled', false);
            e.submenu._overlay.option('position', { my: 'left top', at: 'left bottom', of: element, collision: 'none', boundary: popupContainer });
            this._menuButton = e.component.option('focusedElement');
            e.submenu._attachHoverEvents();
        };
    }
    onSubmenuShown(e) {
        var submenu = e.submenu;
        submenu.registerKeyHandler('escape', (e) => submenu.hide());
        submenu.registerKeyHandler('leftArrow', (e) => submenu.hide());
        submenu.registerKeyHandler('rightArrow', (e) => submenu.hide());
    }
    onSubmenuHiding(e) {
        if (e.model.eventHandlers._menuButton) {
            e.component.option('focusedElement', e.model.eventHandlers._menuButton);
            e.component.focus();
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobilePage.js

class _mobilePage_MobilePreviewPage extends _page_PreviewPage {
    constructor(preview, pageIndex, processClick, loading) {
        super(preview, pageIndex, processClick, loading);
        this.maxZoom = 1;
        this.selectBrick = (path, ctrlKey) => {
            var currentBrick = this.brick();
            !ctrlKey && this.resetBrickRecusive(currentBrick);
            if (!path) {
                return;
            }
            if (!currentBrick) {
                this['_selectedBrickPath'] = path;
                return;
            }
            this.bricks().forEach((brick) => { brick.indexes === path && brick.active(true); });
        };
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/mobilePreview.js




class mobilePreview_MobileReportPreview extends reportPreview_ReportPreview {
    constructor(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl = false, mobileSettings = { readerMode: true, animationEnabled: true }) {
        super(handlerUri, previewRequestWrapper, previewHandlersHelper, callbacks, rtl);
        this.availablePages = external_ko_["observable"](null);
        this.visiblePages = external_ko_["computed"](() => {
            if (!this.availablePages()) {
                return this.pages();
            }
            else {
                return this.pages().filter((x) => { return this.availablePages().indexOf(x.pageIndex) !== -1; });
            }
        });
        this.topOffset = external_ko_["observable"](0);
        this.previewWrapperSize = external_ko_["observable"]({ width: 0, height: 0 });
        this.searchPanelVisible = external_ko_["observable"](false);
        this.actionsVisible = external_ko_["observable"](false);
        this.scrollReachedLeft = external_ko_["observable"](false);
        this.scrollReachedRight = external_ko_["observable"](false);
        this.scrollReachedTop = external_ko_["observable"](true);
        this.scrollReachedBottom = external_ko_["observable"](true);
        this.zoomUpdating = external_ko_["observable"](false);
        this.mobileZoom = external_ko_["computed"]({
            read: () => {
                var currentZoom = this.zoom();
                return currentZoom > 0 ? currentZoom : this._zoom();
            },
            write: (newVal) => {
                this.zoom(newVal);
            }
        });
        this.readerMode = mobileSettings.readerMode;
        var globalAnimationEnabled = mobileSettings.animationEnabled;
        this.animationSettings = { zoomEnabled: external_ko_["observable"](globalAnimationEnabled), swipeEnabled: external_ko_["observable"](globalAnimationEnabled) };
        this.canSwitchToDesigner = false;
        this.autoFitBy(ZoomAutoBy.PageWidth);
        this.showMultipagePreview(true);
        this._disposables.push(this.interactionDisabled = external_ko_["pureComputed"](() => this.pages().length === 0), this.searchPanelVisible.subscribe((newVal) => {
            if (newVal) {
                this.actionsVisible(false);
            }
        }));
    }
    createPage(pageIndex, processClick, loading) {
        return new _mobilePage_MobilePreviewPage(this, pageIndex, processClick, loading);
    }
    createBrickClickProcessor(cyclePageIndex) {
        var _clickHandler = super.createBrickClickProcessor(cyclePageIndex);
        var func = (brick) => {
            if (this.zoomUpdating())
                return;
            if (cyclePageIndex !== this.pageIndex()) {
                this.actionsVisible(false);
                var supscription = this.actionsVisible.subscribe((newVal) => {
                    supscription.dispose();
                    this.actionsVisible(false);
                });
            }
            _clickHandler(brick);
        };
        return func;
    }
    _hasActiveEditingFields() {
        return this.visiblePages().some(p => {
            var pageEditFields = external_ko_["unwrap"](p.editingFields);
            return pageEditFields && pageEditFields.some(x => external_ko_["unwrap"](x.active));
        });
    }
    showActions(s) {
        if (s.zoomUpdating() || s.interactionDisabled())
            return;
        var searchVisible = s.searchPanelVisible();
        if (!searchVisible) {
            if (!this._hasActiveEditingFields()) {
                s.actionsVisible(!s.actionsVisible());
            }
        }
        else {
            s.searchPanelVisible(!searchVisible);
        }
    }
    onSlide(e) {
        this.scrollReachedLeft(true);
        this.scrollReachedRight(true);
        if (this.autoFitBy() === ZoomAutoBy.None && e.removedItems && e.removedItems[0].blocks().length === 1 && e.addedItems && e.addedItems[0].blocks().length === 1)
            this.autoFitBy(ZoomAutoBy.PageWidth);
    }
    goToPage(pageIndex, forcePage) {
        super.goToPage(pageIndex, forcePage);
    }
    getScrollViewOptions() {
        var options = {
            onUpdated: (e) => { this.setScrollReached(e); },
            direction: 'both',
            pushBackValue: 0,
            bounceEnabled: false,
            disabled: this.zoomUpdating
        };
        return options;
    }
    setScrollReached(e) {
        this.scrollReachedLeft(e.reachedLeft);
        this.scrollReachedRight(e.reachedRight);
        this.scrollReachedTop(e.reachedTop);
        this.scrollReachedBottom(e.reachedBottom);
    }
    dispose() {
        this.mobileZoom.dispose();
        this.visiblePages.dispose();
        super.dispose();
    }
}

// EXTERNAL MODULE: external "DevExpress.data.DataSource"
var external_DevExpress_data_DataSource_ = __webpack_require__(10);
var external_DevExpress_data_DataSource_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_DataSource_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/accessibility/_searchKeyboardHelper.js

class _searchKeyboardHelper_SearchKeyboardHelper extends external_DevExpress_Analytics_Internal_["ListKeyboardHelper"] {
    constructor(searchModel) {
        super();
        this.liveRegionId = 'dxrd-preview-search-live-region';
        this._disposables.push(searchModel.searchResult.subscribe(result => {
            if (result.length > 0)
                this.liveRegion().changeText(Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(Object(external_DevExpress_Analytics_Internal_["getLocalization"])('{0} results are available', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchResultsAvailable'), result.length));
            else if (!searchModel.loading() && !!searchModel.searchText())
                this.liveRegion().changeText(searchModel.noResultText());
        }));
        this._disposables.push(searchModel.searchText.subscribe(inputValue => {
            if (!!inputValue)
                this.liveRegion().changeText(Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(Object(external_DevExpress_Analytics_Internal_["getLocalization"])('You searched for {0}', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchString'), '"' + inputValue + '"'));
        }));
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/search/_searchResultNavigator.js


class _searchResultNavigator_SearchResultNavigator extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(searchModel, reportPreview) {
        super();
        this.currentResult = external_ko_["observable"](null);
        var goToMatchedResult = (foundResult) => {
            if (!foundResult) {
                return;
            }
            reportPreview.goToPage && reportPreview.goToPage(foundResult.pageIndex);
            var page = reportPreview.pages.peek()[foundResult.pageIndex];
            page && page.selectBrick(foundResult.indexes);
        };
        this.getFirstMatchFromPage = (pageIndex, up, thisPageOnly) => {
            if (!searchModel.searchResult() || searchModel.searchResult().length === 0) {
                return null;
            }
            var firstMatch;
            var sortOutResult = (index) => {
                searchModel.searchResult().forEach((m) => {
                    if (thisPageOnly && m.pageIndex === index) {
                        if (!firstMatch || (m.id < firstMatch.id && !up || m.id > firstMatch.id && up)) {
                            firstMatch = m;
                        }
                    }
                    else {
                        if (m.pageIndex >= index && !up && (!firstMatch || m.id < firstMatch.id) || m.pageIndex <= index && up && (!firstMatch || m.id > firstMatch.id)) {
                            firstMatch = m;
                        }
                    }
                });
            };
            sortOutResult(pageIndex);
            !firstMatch && sortOutResult(up ? reportPreview.pages().length : 0);
            return firstMatch;
        };
        var _setCurrentResult = (highlight, resultId, thisPageOnly) => {
            if (searchModel.searchResult() && searchModel.searchResult().length !== 0) {
                var currentResult = (resultId >= 0 && searchModel.searchResult().length > resultId) ?
                    searchModel.searchResult()[resultId] :
                    this.getFirstMatchFromPage(reportPreview.pageIndex.peek(), searchModel.searchUp.peek(), thisPageOnly);
                this.currentResult(currentResult);
                highlight && goToMatchedResult(this.currentResult.peek());
            }
            else {
                reportPreview.pages() && reportPreview.pages()[reportPreview.pageIndex()] && reportPreview.pages()[reportPreview.pageIndex()].selectBrick('');
            }
        };
        this.goToResult = (id) => {
            if (id !== 0 && !id) {
                return null;
            }
            _setCurrentResult(true, id);
        };
        this._disposables.push(reportPreview.pageIndex.subscribe((newPageIndex) => {
            if (this.currentResult() && newPageIndex === this.currentResult().pageIndex)
                return;
            this.currentResult(null);
        }));
        this._disposables.push(searchModel.searchResult.subscribe(() => {
            _setCurrentResult(true);
        }));
        this.next = (up) => {
            if (!searchModel.searchResult()) {
                return false;
            }
            if (!this.currentResult()) {
                var prevPageIndex = (reportPreview.pageIndex() === 0 ? reportPreview.pages.length : reportPreview.pageIndex()) - 1;
                var pageIndexToSearchFrom = up ? prevPageIndex : reportPreview.pageIndex();
                var firstResult = this.getFirstMatchFromPage(pageIndexToSearchFrom, up);
                this.currentResult(firstResult);
                if (firstResult) {
                    goToMatchedResult(firstResult);
                    return true;
                }
                else {
                    return false;
                }
            }
            var id, currentId = this.currentResult().id;
            if (up) {
                id = (currentId === 0) ? searchModel.searchResult().length - 1 : (currentId - 1);
            }
            else {
                id = (currentId === searchModel.searchResult().length - 1) ? 0 : (currentId + 1);
            }
            this.currentResult(searchModel.searchResult()[id]);
            goToMatchedResult(this.currentResult());
            return true;
        };
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/search/_searchViewModel.js








class _searchViewModel_SearchViewModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(reportPreview, enableKeyboardSupport) {
        super();
        this._searchIgnoreObs = external_ko_["observable"](false);
        this.itemClickAction = (e) => {
            this.goToResult(e.data);
        };
        this.actions = [];
        this.focusRequested = external_ko_["observable"](true);
        this.matchWholeWord = external_ko_["observable"](false);
        this.matchCase = external_ko_["observable"](false);
        this.searchUp = external_ko_["observable"](false);
        this.searchText = external_ko_["observable"]();
        this.searchResult = external_ko_["observable"]();
        this.loading = external_ko_["observable"](false);
        this._renderedSearchResult = external_ko_["observable"]([]);
        this.resetSearchResult();
        this._resultNavigator = _searchViewModel_SearchViewModel.createResultNavigator(this, reportPreview);
        this.clean = () => { this.searchText(''); };
        this._disposables.push(reportPreview._currentDocumentId.subscribe((newVal) => {
            this.resetSearchResult();
        }));
        this._disposables.push(reportPreview._currentReportId.subscribe((newVal) => {
            this.resetSearchResult();
        }));
        this.findUp = () => { this.searchUp(true); this.findNext(); };
        this.findDown = () => { this.searchUp(false); this.findNext(); };
        this.goToResult = (result) => { this._resultNavigator.goToResult(result.id); };
        var newSearch = (text, matchCase, matchWholeWord) => {
            this._searchTimeout && clearTimeout(this._searchTimeout);
            this._searchTimeout = setTimeout(() => {
                this._resultNavigator.currentResult(null);
                if (!text) {
                    reportPreview.pages() && reportPreview.pages()[reportPreview.pageIndex()] && reportPreview.pages()[reportPreview.pageIndex()].selectBrick('');
                    this.searchResult([]);
                    return;
                }
                var mCase = this.matchCase();
                text = mCase ? this.searchText() : this.searchText().toLocaleLowerCase();
                var cache = this.matchWholeWord()
                    ? mCase ? this._cachedWholeWordWithCaseRequests : this._cachedWholeWordRequests
                    : mCase ? this._cachedCaseSensitiveRequests : this._cachedRequests;
                if (cache[text]) {
                    this.loading(false);
                    this.searchResult(cache[text]);
                    return;
                }
                this.loading(true);
                this._searchIgnoreObs(true);
                this._searchIgnoreObs = external_ko_["observable"](false);
                var self = this;
                ((ignore) => {
                    reportPreview.requestWrapper.findTextRequest(text, ignore).done(function (result) {
                        if (!ignore())
                            self.findTextRequestDone(result, cache[text]);
                    }).fail(function (error) {
                        if (!ignore()) {
                            self.searchResult([]);
                            self.loading(false);
                        }
                    });
                })(this._searchIgnoreObs);
            }, 100);
        };
        this.findNext = () => {
            if (this.loading()) {
                return;
            }
            this._resultNavigator.next(this.searchUp()) || newSearch(this.searchText(), this.matchCase(), this.matchWholeWord());
        };
        this._disposables.push(this.searchText.subscribe(newVal => { newSearch(newVal, this.matchCase(), this.matchWholeWord()); }), this.matchCase.subscribe(newVal => { newSearch(this.searchText(), newVal, this.matchWholeWord()); }), this.matchWholeWord.subscribe(newVal => { newSearch(this.searchText(), this.matchCase(), newVal); }));
        var disabled = external_ko_["pureComputed"](() => {
            var documentId = reportPreview['_currentDocumentId']();
            var pageIndex = reportPreview.pageIndex();
            return reportPreview.documentBuilding() || !documentId || pageIndex === -1;
        });
        var visible = external_ko_["pureComputed"](() => SearchAvailable());
        this._disposables.push(disabled, visible);
        this.actions.push({
            id: ActionId.Search,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Search', 'ASPxReportsStringId.SearchDialog_Header'),
            imageClassName: 'dxrd-image-search',
            imageTemplateName: 'dxrd-svg-preview-search',
            disabled: disabled,
            visible: visible,
            hasSeparator: true,
            hotKey: { ctrlKey: false, keyCode: 70 },
            clickAction: () => {
                if (!this.tabInfo.active()) {
                    this.tabInfo.active(true);
                }
                else {
                    this.tabInfo.active.notifySubscribers(true);
                }
            }
        });
        this.tabInfo = new external_DevExpress_Analytics_Utils_["TabInfo"]({
            text: 'Search',
            template: 'dxrd-preview-search',
            model: this,
            keyboardHelper: enableKeyboardSupport ? new _searchKeyboardHelper_SearchKeyboardHelper(this) : undefined,
            localizationId: 'ASPxReportsStringId.SearchDialog_Header',
            imageClassName: 'search',
            imageTemplateName: 'dxrd-svg-preview-search',
            visible: external_ko_["pureComputed"](() => !disabled() && SearchAvailable())
        });
        this._disposables.push(this.searchResult.subscribe((newVal) => {
            if (newVal) {
                this._renderedSearchResult(newVal.map((item) => { return { data: item }; }));
            }
        }));
        this._disposables.push(this.tabInfo);
        var dataSource = null;
        this._disposables.push(this.searchResultDataSource = external_ko_["pureComputed"](() => {
            dataSource && dataSource.dispose();
            dataSource = new external_DevExpress_data_DataSource_default.a({
                store: this._renderedSearchResult(),
                paginate: this._renderedSearchResult().length > 20,
                pageSize: 20
            });
            return dataSource;
        }));
    }
    resetSearchResult() {
        this._cachedRequests = {};
        this._cachedWholeWordRequests = {};
        this._cachedCaseSensitiveRequests = {};
        this._cachedWholeWordWithCaseRequests = {};
        this.searchResult([]);
        this.searchText('');
    }
    findTextRequestDone(result, cache) {
        this.loading(false);
        if (!result) {
            this.searchResult([]);
            return;
        }
        cache = (result.success ? result.matches : []) || [];
        this.searchResult(cache);
    }
    dispose() {
        this._searchTimeout && clearTimeout(this._searchTimeout);
        super.dispose();
    }
    onItemRendered(e) {
        this._timeoutItemRendered && clearTimeout(this._timeoutItemRendered);
        this._timeoutItemRendered = setTimeout(() => {
            this.tabInfo.keyboardHelper && this.tabInfo.keyboardHelper.initialize();
        }, 100);
    }
    getActions(context) {
        return this.actions;
    }
    noResultText() {
        return Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('No results found for {0}', 'ASPxReportsStringId.WebDocumentViewer_AriaSearchNoResults'), '"' + this.searchText() + '"');
    }
    get disabled() { return this.loading(); }
}
_searchViewModel_SearchViewModel.createResultNavigator = (seacrhModel, reportPreview) => {
    return new _searchResultNavigator_SearchResultNavigator(seacrhModel, reportPreview);
};

// EXTERNAL MODULE: external "DevExpress.ui.dxTextBox"
var external_DevExpress_ui_dxTextBox_ = __webpack_require__(11);
var external_DevExpress_ui_dxTextBox_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxTextBox_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobileSearch.js







class _mobileSearch_MobileSearchViewModel extends _searchViewModel_SearchViewModel {
    constructor(reportPreview, gallery) {
        super(reportPreview);
        this.height = external_ko_["observable"](0);
        this['_resultNavigator']['_disposables'].forEach((x) => { x.dispose(); });
        var _galleryCurrentItemBlocksSubscription;
        var currentBlocksSubscribe = (selectedIndex) => {
            this._killSubscription(_galleryCurrentItemBlocksSubscription);
            _galleryCurrentItemBlocksSubscription = gallery.items()[selectedIndex].blocks.subscribe((newBlocks) => this.updatePagesInBlocks(newBlocks));
            this.updatePagesInBlocks(gallery.items()[selectedIndex].blocks());
        };
        var _gallerySelectedIndexSubscription;
        var currentIndexSubscribe = () => {
            this._killSubscription(_gallerySelectedIndexSubscription);
            _gallerySelectedIndexSubscription = gallery.selectedIndex.subscribe((newSelectedIndex) => currentBlocksSubscribe(newSelectedIndex));
            currentBlocksSubscribe(gallery.selectedIndex());
        };
        this._disposables.push(gallery.items.subscribe((newItems) => currentIndexSubscribe()));
        currentIndexSubscribe();
        this._disposables.push(this.searchResult.subscribe((newResult) => {
            if (!newResult || newResult.length === 0) {
                reportPreview.availablePages(null);
                reportPreview.pages().forEach(page => page.resetBrickRecusive(page.brick()));
            }
            else {
                reportPreview.availablePages(newResult.map(x => x.pageIndex));
            }
            var blocks = gallery.items()[gallery.selectedIndex()].blocks();
            blocks.forEach(block => {
                block.page && block.page.resetBrickRecusive(block.page.brick());
                this._updateBricks(block.page, this.searchResult());
            });
        }));
        this.searchPanelVisible = reportPreview.searchPanelVisible;
        this.editorVisible = external_ko_["observable"](false);
        this._disposables.push(this.searchPanelVisible.subscribe((newVal) => {
            if (!newVal || !SearchAvailable()) {
                this.stopSearching();
            }
            else {
                this.height(_mobileSearch_MobileSearchViewModel.maxHeight);
            }
        }));
        this.enabled = SearchAvailable;
    }
    focusEditor(event) {
        if (this.searchPanelVisible()) {
            this.editorVisible(true);
            var previewSearch = external_jQuery_["fn"].constructor('.dxrdp-search-editor');
            var searchEditor = external_DevExpress_ui_dxTextBox_default.a['getInstance'](previewSearch.get(0));
            searchEditor.focus();
            setTimeout(() => {
                event.currentTarget.blur();
                searchEditor.focus();
            }, 1);
        }
    }
    _killSubscription(subscription) {
        var index = this._disposables.indexOf(subscription);
        if (index == -1)
            return;
        subscription && subscription.dispose();
        this._disposables.splice(index, 1);
    }
    _updateBricks(page, searchResult) {
        if (page.brick() && searchResult && searchResult.length > 0) {
            var results = searchResult.filter((x) => { return x.pageIndex === page.pageIndex; });
            for (var i = 0; i < results.length; i++) {
                page.selectBrick(results[i].indexes, true);
            }
        }
        else {
            var subscription = page.brick.subscribe((newVal) => {
                subscription.dispose();
                this._updateBricks(page, this.searchResult());
            });
        }
    }
    updatePagesInBlocks(blocks) {
        blocks.forEach(block => {
            if (block.page && this.searchResult() && this.searchResult().length > 0) {
                this._updateBricks(block.page, this.searchResult());
            }
        });
    }
    stopSearching() {
        this.height(0);
        this.editorVisible(false);
        this.searchResult(null);
    }
    startSearch() {
        if (this.searchResult() === null)
            this.findNext();
    }
}
_mobileSearch_MobileSearchViewModel.maxHeight = 80;
class _mobileSearch_SearchBarModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(viewModel, element, $searchText) {
        super();
        this.viewModel = viewModel;
        this._disposables.push(viewModel.height.subscribe((newValue) => {
            if (!newValue) {
                element.style.display = 'none';
            }
            else {
                element.style.display = 'block';
            }
            $searchText.css({
                'opacity': Math.min((newValue / _mobileSearch_MobileSearchViewModel.maxHeight), 1)
            });
        }));
    }
    dispose() {
        super.dispose();
        this.viewModel.stopSearching();
    }
}
external_ko_["bindingHandlers"]['dxrdSearchBar'] = {
    init: function (element, valueAccessor) {
        var viewModel = external_ko_["unwrap"](valueAccessor());
        var $element = external_jQuery_["fn"].constructor(element);
        element.style.display = 'none';
        var $searchText = $element.find('.dxrdp-taptosearch-text');
        var searchBarModel = new _mobileSearch_SearchBarModel(viewModel, element, $searchText);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            searchBarModel.dispose();
        });
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/gallery/_galleryModel.js





class _galleryModel_GalleryModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(preview, previewWrapperSize) {
        super();
        this.preview = preview;
        this.previewWrapperSize = previewWrapperSize;
        this._spacing = 1;
        this._animationTimeout = null;
        this.repaint = external_ko_["observable"]({});
        this.repaintTimeout = external_ko_["observable"]();
        this.horizontal = external_ko_["observable"](1);
        this.vertical = external_ko_["observable"](1);
        this.pageCount = 0;
        this.isAnimated = external_ko_["observable"](false);
        this.items = external_ko_["observableArray"]([{ blocks: external_ko_["observableArray"]([]) }, { blocks: external_ko_["observableArray"]([]) }, { blocks: external_ko_["observableArray"]([]) }]);
        this.currentBlockText = external_ko_["observable"]('');
        this.selectedIndexReal = external_ko_["observable"](0);
        this.selectedIndex = external_ko_["observable"](0);
        var oldIndex = this.selectedIndex();
        this._disposables.push(this.contentSize = external_ko_["pureComputed"](() => {
            var blocks = this.items()[this.selectedIndex()].blocks();
            var width, height;
            if (blocks.length === 1) {
                var block = blocks[0];
                var position = block.position();
                width = Math.max(position.width, block.page.width());
                height = Math.max(position.height, block.page.height());
            }
            return { width: width ? width + 'px' : 'auto', height: height ? height + 'px' : 'auto' };
        }));
        this.animationEnabled = preview.animationSettings.swipeEnabled;
        var _calcHorizontalVertical = () => {
            var _zoom = preview._zoom();
            var pageHeight = Math.ceil(preview._pageHeight() * getCurrentResolution(_zoom) / previewDefaultResolution());
            var pageWidth = Math.ceil(preview._pageWidth() * getCurrentResolution(_zoom) / previewDefaultResolution());
            var _containerSize = previewWrapperSize();
            var horizontal = (preview.autoFitBy() != ZoomAutoBy.PageWidth && (Math.floor(_containerSize.width / (pageWidth + 2 * this._spacing)))) || 1;
            var vertical = Math.floor(_containerSize.height / (pageHeight + 2 * this._spacing)) || 1;
            this.horizontal(horizontal);
            this.vertical(vertical);
        };
        var updateGalleryContent = () => {
            _calcHorizontalVertical();
            this.pageCount = this.horizontal() * this.vertical();
            this.updateContent(preview, this.pageCount);
        };
        this._disposables.push(previewWrapperSize.subscribe(() => {
            this.items().forEach(item => item.blocks().forEach(block => block.repaint = true));
            updateGalleryContent();
            var currentGalleryItem = this.items()[this.selectedIndex()];
            this.updateBlocks(currentGalleryItem, this.pageCount, preview, this.selectedIndexReal(), preview.animationSettings.zoomEnabled());
            this.repaint.valueHasMutated();
        }));
        this._disposables.push(preview.visiblePages.subscribe(() => {
            for (var i = 0; i < this.items().length; i++) {
                this.items()[i].blocks([]);
                this.items()[i].realIndex = -1;
            }
            updateGalleryContent();
        }));
        this._disposables.push(preview.pageIndex.subscribe(updateGalleryContent));
        this._disposables.push(preview.zoomUpdating.subscribe((newVal) => {
            if (newVal)
                return;
            clearTimeout(this.repaintTimeout());
            this.repaintTimeout(setTimeout(() => this.repaint.valueHasMutated(), 410));
        }));
        this._disposables.push(preview._zoom.subscribe(() => {
            _calcHorizontalVertical();
            var pageCount = this.horizontal() * this.vertical();
            if (this.pageCount !== pageCount) {
                this.pageCount = pageCount;
                this.items().forEach(item => item.blocks().forEach(block => block.repaint = true));
                this.updateContent(preview, pageCount);
            }
            else if (this.pageCount === 1) {
                var block = this.items()[this.selectedIndex()].blocks()[0];
                this.items().forEach((item, index) => {
                    if (index != this.selectedIndex())
                        item.blocks().forEach(block => block.repaint = true);
                });
                setTimeout(() => {
                    block.position({
                        left: block.position().left,
                        top: block.position().top,
                        height: Math.max(this.previewWrapperSize().height, block.page.height()),
                        width: Math.max(this.previewWrapperSize().width, block.page.width())
                    });
                });
            }
        }));
        this._disposables.push(this.selectedIndexReal.subscribe((newVal) => {
            if (newVal >= 0) {
                this.changePage(preview);
            }
            else if (newVal < 0) {
                this.selectedIndexReal(0);
            }
        }));
        this._disposables.push(this.selectedIndex.subscribe((newVal) => {
            var result = newVal - oldIndex;
            if (result === -2 || result === 1) {
                this.selectedIndexReal(this.selectedIndexReal() + 1);
            }
            else if (result === 2 || result === -1) {
                this.selectedIndexReal(this.selectedIndexReal() - 1);
            }
            oldIndex = newVal;
        }));
        this._disposables.push(this.swipeLeftEnable = external_ko_["computed"](() => {
            return this.selectedIndexReal() !== 0;
        }));
        this._disposables.push(this.swipeRightEnable = external_ko_["computed"](() => {
            return this.selectedIndexReal() != (Math.ceil(preview.visiblePages().length / (this.horizontal() * this.vertical())) - 1);
        }));
    }
    _createBlock(previewPage, className, visible) {
        previewPage.disableResolutionReduction = true;
        previewPage.maxZoom = 1;
        var classSet = {};
        if (this.animationEnabled() && this.pageCount > 1) {
            className && (classSet[className] = true);
            classSet['dxrdp-animation'] = true;
        }
        return {
            page: previewPage,
            visible: visible,
            classSet: classSet,
            position: external_ko_["observable"]({ top: 0, left: 0, width: 0, height: 0 })
        };
    }
    dispose() {
        clearTimeout(this.repaintTimeout());
        super.dispose();
    }
    updatePagesVisible(preview) {
        if (this.items()[this.selectedIndex()]) {
            var someActive = false;
            var pages = this.items()[this.selectedIndex()].blocks();
            if (pages.length > 0) {
                for (var i = 0; i < pages.length; i++) {
                    if (pages[i].page) {
                        pages[i].page.isClientVisible(true);
                        if (pages[i].page.active()) {
                            someActive = true;
                        }
                    }
                }
                if (!someActive) {
                    pages[0].page && preview.goToPage(pages[0].page.pageIndex);
                }
            }
        }
    }
    updateCurrentBlock() {
        if (this.items()[this.selectedIndex()]) {
            var blocks = this.items()[this.selectedIndex()].blocks();
            if (blocks.length > 0) {
                if (blocks.length > 1) {
                    this.currentBlockText([blocks[0].page.pageIndex + 1, blocks[blocks.length - 1].page.pageIndex + 1].join(' - '));
                }
                else {
                    if (blocks[0].page) {
                        this.currentBlockText((this.preview.pageIndex() + 1).toString());
                    }
                }
            }
        }
    }
    updateContent(preview, pagesCount) {
        var itemsCount = Math.ceil(preview.visiblePages().length / pagesCount);
        var pageIndex = 0;
        var isCurrentBlock = false;
        var realIndex = 0;
        for (var i = 0; i < itemsCount; i++) {
            for (var j = 0; j < pagesCount; j++) {
                if (preview.visiblePages()[pageIndex].active()) {
                    isCurrentBlock = true;
                    realIndex = i;
                    break;
                }
                pageIndex++;
                if (preview.visiblePages().length === pageIndex) {
                    break;
                }
            }
            if (isCurrentBlock)
                break;
        }
        if (this.selectedIndexReal() !== realIndex) {
            this.selectedIndexReal(realIndex);
        }
        else {
            this.changePage(preview);
        }
    }
    updateBlockPositions(blocks, visible) {
        var height = this.previewWrapperSize().height / this.vertical();
        var width = this.previewWrapperSize().width / this.horizontal();
        for (var i = 0; i < blocks.length; i++) {
            var vertical = Math.floor((i) / this.horizontal());
            var horizontal = i - (this.horizontal() * vertical);
            var left = horizontal * width;
            if (blocks[i].visible === visible || blocks[i].visible === true) {
                blocks[i].position({
                    top: vertical * height,
                    left: left,
                    width: width,
                    height: height
                });
                blocks[i].visible = true;
            }
            else {
                blocks[i].position({
                    top: vertical * height,
                    left: blocks[i].classSet['left'] ? ((this.previewWrapperSize().width + left) * -1) : this.previewWrapperSize().width + left,
                    width: width,
                    height: height
                });
            }
        }
    }
    updateStartBlocks(galleryItem, pages) {
        var currentBlockPages = galleryItem.blocks().map(x => x.page);
        var firstPage = pages.indexOf(currentBlockPages[0]);
        if (firstPage !== -1) {
            for (var i = 0; i < firstPage; i++) {
                galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], 'left', false));
            }
        }
        else {
            firstPage = currentBlockPages.indexOf(pages[0]);
            if (firstPage !== -1) {
                galleryItem.blocks.splice(0, firstPage);
            }
        }
        return firstPage;
    }
    updateLastBlocks(galleryItem, pages) {
        var currentBlockPages = galleryItem.blocks().map(x => x.page);
        var lastPage = pages.indexOf(currentBlockPages[currentBlockPages.length - 1]);
        if (lastPage === pages.length - 1) {
            return 0;
        }
        if (lastPage !== -1) {
            for (var i = lastPage + 1; i < pages.length; i++) {
                galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], 'right', false));
            }
        }
        else {
            lastPage = currentBlockPages.indexOf(pages[pages.length - 1]);
            galleryItem.blocks.splice(lastPage + 1, currentBlockPages.length - lastPage);
        }
        return lastPage;
    }
    updateBlocks(galleryItem, pagesCount, preview, index, useAnimation = false) {
        var blocks = galleryItem.blocks();
        if (galleryItem.realIndex !== index
            || (blocks.length !== pagesCount || blocks[0].page.pageIndex === -1)
            || blocks.some(x => x.repaint)) {
            galleryItem.realIndex = index;
            clearTimeout(this._animationTimeout);
            var startIndex = pagesCount * index;
            if (startIndex < 0 || startIndex >= preview.visiblePages().length) {
                galleryItem.blocks([]);
                return;
            }
            var pages = [];
            for (var i = startIndex; i < startIndex + pagesCount; i++) {
                if (i >= preview.visiblePages().length) {
                    break;
                }
                pages.push(preview.visiblePages()[i]);
            }
            var first = this.updateStartBlocks(galleryItem, pages);
            var last = this.updateLastBlocks(galleryItem, pages);
            if (first === -1 && last === -1) {
                galleryItem.blocks([]);
                for (var i = 0; i < pages.length; i++) {
                    galleryItem.blocks.splice(i, 0, this._createBlock(pages[i], null, true));
                }
            }
            this.updateBlockPositions(galleryItem.blocks(), true);
            var self = this;
            if (useAnimation) {
                this._animationTimeout = setTimeout(() => {
                    self.updateBlockPositions(galleryItem.blocks(), false);
                }, 400);
            }
            else {
                self.updateBlockPositions(galleryItem.blocks(), false);
            }
        }
    }
    changePage(preview) {
        var pagesCount = this.horizontal() * this.vertical();
        var itemsCount = Math.ceil(preview.visiblePages().length / pagesCount);
        if (this.selectedIndex() === this.items().length - 1) {
            this.updateBlocks(this.items()[0], pagesCount, preview, this.selectedIndexReal() + 1);
            this.updateBlocks(this.items()[1], pagesCount, preview, this.selectedIndexReal() - 1);
        }
        else if (this.selectedIndex() === 0) {
            this.updateBlocks(this.items()[2], pagesCount, preview, this.selectedIndexReal() - 1);
            this.updateBlocks(this.items()[1], pagesCount, preview, this.selectedIndexReal() + 1);
        }
        else {
            this.updateBlocks(this.items()[0], pagesCount, preview, this.selectedIndexReal() - 1);
            this.updateBlocks(this.items()[2], pagesCount, preview, this.selectedIndexReal() + 1);
        }
        var currentGalleryItem = this.items()[this.selectedIndex()];
        this.updateBlocks(currentGalleryItem, pagesCount, preview, this.selectedIndexReal(), preview.animationSettings.zoomEnabled());
        if (!this.isAnimated()) {
            this.updatePagesVisible(preview);
        }
        this.updateCurrentBlock();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_paginator.js



class _paginator_MobilePaginator extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(reportPreview, gallery) {
        super();
        this.visible = external_ko_["observable"](false).extend({ notify: 'always' });
        this._disposables.push(this.text = external_ko_["computed"](() => {
            setTimeout(() => { this.visible(true); }, 1);
            if (reportPreview.pageIndex() === -1) {
                return Object(external_DevExpress_Analytics_Utils_["getLocalization"])('0 pages', 'ASPxReportsStringId.WebDocumentViewer_0Pages');
            }
            else {
                var ofText = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('of', 'ASPxReportsStringId.ToolBarItemText_OfLabel');
                var pageText = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Page', 'ASPxReportsStringId.ToolBarItemText_PageLabel');
                return pageText + ' ' + gallery.currentBlockText() + ' ' + ofText + ' ' + reportPreview.pages().length;
            }
        }));
    }
}
external_ko_["bindingHandlers"]['dxrdMobilePaginator'] = {
    init: function (element, valueAccessor) {
        var values = valueAccessor();
        var $element = external_jQuery_["fn"].constructor(element);
        var timeoutId = null;
        var hideAnimationTimeoutId = null;
        values.visible.subscribe((newVal) => {
            if (newVal) {
                $element.removeClass('dxrdp-hide').addClass('dxrdp-show');
                timeoutId && clearTimeout(timeoutId);
                timeoutId = setTimeout(() => { values.visible(false); }, 2000);
            }
            else {
                $element.removeClass('dxrdp-show').addClass('dxrdp-hide');
                hideAnimationTimeoutId && clearTimeout(hideAnimationTimeoutId);
                hideAnimationTimeoutId = setTimeout(() => {
                    $element.removeClass('dxrdp-hide');
                }, 500);
            }
        });
    }
};

// EXTERNAL MODULE: external "DevExpress.data.ArrayStore"
var external_DevExpress_data_ArrayStore_ = __webpack_require__(12);
var external_DevExpress_data_ArrayStore_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_data_ArrayStore_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/parameters/multiValuesHelper.js


class multiValuesHelper_MultiValuesHelper {
    constructor(value, items, selectAllValues) {
        this.items = items;
        this.selectedItems = external_ko_["observableArray"]([]);
        this.value = value;
        this.dataSource = items;
        var allValues;
        this.maxDisplayedTags = Math.min(((items && items.length) || 1) - 1, multiValuesHelper_MultiValuesHelper.maxDisplayedTags);
        this.isSelectedAll = external_ko_["pureComputed"]({
            read: () => this.value().length == items.length,
            write: (selectAll) => {
                var newValue = selectAll ? (allValues || (allValues = items.map(x => x.value))) : [];
                if (!Object(external_DevExpress_Analytics_Internal_["compareArrays"])(this.value.peek(), newValue))
                    this.value(newValue);
            }
        });
        if (selectAllValues)
            this.isSelectedAll(true);
    }
}
multiValuesHelper_MultiValuesHelper.maxDisplayedTags = 3;

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/_groupEditor.js

class _groupEditor_ParametersGroupEditor extends external_DevExpress_Analytics_Widgets_["PropertyGridEditor"] {
    constructor(info, level, parentDisabled, textToSearch) {
        super(info, level, parentDisabled, textToSearch);
        this.isGroupLabel = true;
    }
    _setPadding(position, value) {
        var padding = super._setPadding(position, value);
        padding['padding-' + position] = 10;
        padding['padding-bottom'] = 6;
        return padding;
    }
    createObjectProperties() {
        this.collapsed(!this.editorOptions.expanded && this.editorOptions.titleVisible);
        this.hideEditorHeader = !this.editorOptions.titleVisible;
        this.hideCollapsingImage = !this.editorOptions.showExpandButton;
        this.hideBorder = this.editorOptions.borderVisible === false;
        this.showHorizontally = this.editorOptions.orientation === 'Horizontal';
        this.level = -1;
        this.editorCreated(true);
        return super.createObjectProperties();
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/editorTemplates.js



var viewerEditorTemplates = {
    multiValue: {
        header: 'dxrd-multivalue', extendedOptions: {
            onMultiTagPreparing: (args) => {
                var selectedItemsLength = args.selectedItems.length, totalCount = args.model.items.length;
                if (selectedItemsLength === totalCount) {
                    var stringFormat = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('All selected ({0})', 'ASPxReportsStringId.WebDocumentViewer_MultiValueEditor_AllSelected');
                    args.text = Object(external_DevExpress_Analytics_Internal_["formatUnicorn"])(stringFormat, selectedItemsLength);
                }
            }
        }
    },
    groupEditor: { header: 'dx-emptyHeader', custom: 'dxrd-parameters-property-editor', content: 'dxrd-parameters-editor-content', editorType: _groupEditor_ParametersGroupEditor },
    rangeEditor: { header: 'dxrv-range-parameter' },
    multiValueEditable: { custom: 'dxrd-multivalue-editable' },
    selectBox: { header: 'dx-selectbox' },
    separatorEditor: { header: 'dx-emptyHeader', custom: 'dxrd-parameters-separator' }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/parameters/parameterHelper.js








function getEditorType(typeString) {
    if (typeString === 'multiValueWithLookUp') {
        return viewerEditorTemplates.multiValue;
    }
    if (typeString === 'multiValue') {
        return viewerEditorTemplates.multiValueEditable;
    }
    if (typeString === 'Enum') {
        return viewerEditorTemplates.selectBox;
    }
    return undefined;
}
class parameterHelper_ParameterHelper {
    constructor() {
        this._customizeParameterEditors = external_ko_["observable"]();
        this.getUnspecifiedDisplayText = () => { return Object(external_DevExpress_Analytics_Utils_["getLocalization"])('(none)', 'PreviewStringId.NoneString'); };
    }
    _isKnownEnumType(type) {
        return !!this._knownEnums && this._knownEnums.some((knownEnumType) => { return knownEnumType.enumType === type; });
    }
    static getSerializationValue(value, dateConverter) {
        if (value instanceof Array) {
            return value.map((item) => {
                var itemValue = external_ko_["isObservable"](item === null || item === void 0 ? void 0 : item.value) ? item.value() : item;
                return (itemValue instanceof Date) ? dateConverter(itemValue) : itemValue;
            });
        }
        return (value instanceof Date) ? dateConverter(value) : value;
    }
    static createDefaultDataSource(store) {
        return new external_DevExpress_data_DataSource_default.a({
            store: store,
            paginate: true,
            pageSize: 100
        });
    }
    initialize(knownEnums, callbacks) {
        if (arguments.length > 0) {
            this._knownEnums = knownEnums;
            if (callbacks) {
                callbacks.customizeParameterEditors && this._customizeParameterEditors(callbacks.customizeParameterEditors);
                callbacks.customizeParameterLookUpSource && (this.customizeParameterLookUpSource = callbacks.customizeParameterLookUpSource);
            }
        }
    }
    createInfo(parameter) {
        var parameterDescriptor = parameter.getParameterDescriptor();
        var typeString = this.isEnumType(parameter) ? 'Enum' : external_ko_["unwrap"](parameterDescriptor.type);
        var editorType = getEditorType(typeString);
        var info = {
            propertyName: 'value',
            displayName: parameterDescriptor['displayName'],
            localizationId: parameterDescriptor['localizationId'],
            editor: editorType || Object(external_DevExpress_Analytics_Internal_["getEditorType"])(typeString),
            editorOptions: {}
        };
        if (parameterDescriptor.type === 'System.Guid') {
            info.editorOptions.isNullable = parameterDescriptor.allowNull;
        }
        this.assignValueStore(info, parameter);
        return info;
    }
    addShowCleanButton(info, parameter) {
        info.editorOptions.showClearButton = parameter.allowNull;
        info.editorOptions.placeholder = external_ko_["computed"](() => {
            if (external_ko_["unwrap"](parameter.allowNull))
                return this.getUnspecifiedDisplayText();
            return external_ko_["unwrap"](parameter.isMultiValue) ? Object(external_DevExpress_Analytics_Internal_["selectPlaceholder"])() : '';
        });
    }
    assignValueStore(info, parameter) {
        var items = this.getEnumCollection(parameter);
        info['valueStore'] = this.getItemsSource(parameter.getParameterDescriptor(), items, true);
    }
    createMultiValue(parameter, value) {
        var newValue = external_ko_["observable"]();
        if (value !== null && value !== void 0) {
            newValue(value);
        }
        return { value: newValue, getInfo: () => { return [parameter.multiValueInfo()]; } };
    }
    createMultiValueArray(fromArray, parameter, convertSingleValue) {
        var converter = convertSingleValue ? convertSingleValue : this.getValueConverter(external_ko_["unwrap"](parameter.type));
        return external_ko_["observableArray"](fromArray.map((item) => {
            return this.createMultiValue(parameter, converter(item));
        }));
    }
    isEnumType(parameter) {
        return this._isKnownEnumType(external_ko_["unwrap"](parameter.type));
    }
    getItemsSource(parameterDescriptor, items, sort) {
        if (items) {
            var newItems;
            if (this.customizeParameterLookUpSource)
                newItems = this.customizeParameterLookUpSource(parameterDescriptor, items.slice(0));
            return newItems ? newItems : parameterHelper_ParameterHelper.createDefaultDataSource(sort ? new external_DevExpress_Analytics_Internal_["SortedArrayStore"](items, 'displayValue') : new external_DevExpress_data_ArrayStore_default.a(items));
        }
        return items;
    }
    getEnumCollection(parameter) {
        var type = external_ko_["unwrap"](parameter.type);
        if (this._isKnownEnumType(type)) {
            var currentKnownEnumInfo = this._knownEnums.filter((knownEnumType) => { return knownEnumType.enumType === type; })[0];
            if (currentKnownEnumInfo && currentKnownEnumInfo.values && currentKnownEnumInfo.values.length !== 0) {
                return currentKnownEnumInfo.values.map((val) => { return { value: val.value, displayValue: val.displayName }; });
            }
        }
    }
    getParameterInfo(parameter) {
        var valueInfo = this.createInfo(parameter);
        parameter.multiValueInfo(external_jQuery_["extend"](true, {}, valueInfo, { propertyName: 'value' }));
        if (parameter.allowNull !== undefined) {
            this.addShowCleanButton(valueInfo, parameter);
        }
        if (external_ko_["unwrap"](parameter.isMultiValue)) {
            valueInfo.editor = getEditorType(parameter['isMultiValueWithLookUp'] ? 'multiValueWithLookUp' : 'multiValue');
            valueInfo['addHandler'] = () => { return this.createMultiValue(parameter); };
        }
        valueInfo.editor.custom = valueInfo.editor.custom || 'dxrd-parameters-property-editor';
        if (this._customizeParameterEditors()) {
            this._customizeParameterEditors()(parameter.getParameterDescriptor(), valueInfo);
        }
        return valueInfo;
    }
    getValueConverter(type) {
        return (val => { return val; });
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/parameters/previewParameterHelper.js





class previewParameterHelper_PreviewParameterHelper extends parameterHelper_ParameterHelper {
    constructor(knownEnums, callbacks) {
        super();
        this.callbacks = callbacks;
        this.initialize(knownEnums, callbacks);
    }
    mapLookUpValues(type, lookUpValues) {
        var converter = this.getValueConverter(type);
        return external_jQuery_["map"](lookUpValues || [], (lookUpValue) => { return { value: converter(lookUpValue.Value), displayValue: lookUpValue.Description }; });
    }
    static fixPropertyName(propertyName) {
        return propertyName.replace(/\./g, '_');
    }
    static getPrivatePropertyName(propertyName) {
        return '_' + previewParameterHelper_PreviewParameterHelper.fixPropertyName(propertyName);
    }
    createInfo(parameter) {
        var info = super.createInfo(parameter);
        info.propertyName = previewParameterHelper_PreviewParameterHelper.getPrivatePropertyName(parameter.path);
        if (!parameter.isMultiValue && (parameter.lookUpValues() || this.isEnumType(parameter))) {
            info.editorOptions.searchEnabled = true;
            if (!parameter.allowNull)
                info.editorOptions.allowClearing = false;
        }
        if (parameter.isRange) {
            info.editor = this.getRangeEditor();
            return info;
        }
        if ((parameter.type === 'System.DateTime' || parameter.isTypesCurrentType(parameter.intTypes.concat(parameter.floatTypes), parameter.type)) && !parameter.allowNull && !parameter.isMultiValue && !parameter.isMultiValueWithLookUp) {
            info.validationRules = external_DevExpress_Analytics_Widgets_Internal_["requiredValidationRules"];
        }
        else if (parameter.type === 'System.Guid') {
            info.editorOptions.displayCustomValue = false;
        }
        return info;
    }
    assignValueStore(info, parameter) {
        var _helper = this;
        if (!parameter.isMultiValueWithLookUp) {
            Object.defineProperty(info, 'valueStore', {
                get: () => {
                    var items = [];
                    var needSorting = false;
                    if (parameter.isFilteredLookUpSettings || parameter.lookUpValues() && parameter.lookUpValues().length !== 0) {
                        items = parameter.lookUpValues();
                    }
                    else {
                        items = _helper.getEnumCollection(parameter);
                        needSorting = true;
                    }
                    if (parameter.valueStoreCache)
                        return parameter.valueStoreCache;
                    var itemsSource = _helper.getItemsSource(parameter.getParameterDescriptor(), items, needSorting);
                    if (itemsSource)
                        parameter.valueStoreCache = itemsSource;
                    return itemsSource;
                },
                set: (values) => {
                    parameter.lookUpValues(values);
                }
            });
        }
    }
    isEnumType(parameter) {
        return parameter.isFilteredLookUpSettings || !!parameter.lookUpValues() || super.isEnumType(parameter);
    }
    getValueConverter(type) {
        if (type === 'System.DateTime') {
            return (dateString) => { return Object(external_DevExpress_Analytics_Internal_["parseDate"])(dateString); };
        }
        else if (['System.Int16', 'System.Int32', 'System.Int64'].indexOf(type) > -1) {
            return val => Object(external_DevExpress_Analytics_Internal_["integerValueConverter"])(val, '0');
        }
        else if (['System.Single', 'System.Double', 'System.Decimal'].indexOf(type) > -1) {
            return val => Object(external_DevExpress_Analytics_Internal_["floatValueConverter"])(val, '0');
        }
        return super.getValueConverter(type);
    }
    getRangeEditor() {
        return viewerEditorTemplates.rangeEditor;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/parameters/previewParameter.js








class previewParameter_PreviewParameter extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(parameterInfo, parameterHelper) {
        super();
        this.hasVerticalLabel = external_ko_["observable"](false);
        this.valueInfo = external_ko_["observable"]();
        this.lookUpValues = external_ko_["observableArray"]();
        this.valueStoreCache = null;
        this.multiValueInfo = external_ko_["observable"]();
        this.intTypes = ['System.Int16', 'System.Int32', 'System.Int64'];
        this.floatTypes = ['System.Single', 'System.Double', 'System.Decimal'];
        this.isTypesCurrentType = (types, type) => types.indexOf(type) > -1;
        this.tag = parameterInfo.Tag;
        this.type = parameterInfo.TypeName;
        this.isRange = parameterInfo.Value && parameterInfo.Value.Start !== undefined && parameterInfo.Value.End !== undefined;
        this.path = parameterInfo.Path;
        this.visible = external_ko_["observable"](parameterInfo.Visible);
        this.enabled = external_ko_["observable"](parameterInfo.Enabled);
        this.isFilteredLookUpSettings = parameterInfo.IsFilteredLookUpSettings;
        this.hasBindedExpressions = !!(parameterInfo.EnabledExpression || parameterInfo.VisibleExpression);
        this.hasVisibleExpression = !!parameterInfo.VisibleExpression;
        this._originalLookUpValues = parameterInfo.LookUpValues ? parameterHelper.mapLookUpValues(this.type, parameterInfo.LookUpValues || []) : null;
        this.lookUpValues(this._originalLookUpValues);
        this.lookUpValues.subscribe(() => { this.valueStoreCache = null; });
        this.isMultiValue = parameterInfo.MultiValue;
        this.selectAllValues = parameterInfo.SelectAllValues;
        this.allowNull = parameterInfo.AllowNull;
        this.isMultiValueWithLookUp = this.isMultiValue && !!this.lookUpValues();
        this._originalValue = parameterInfo.Value;
        if (parameterInfo.ValueInfo && this.isTypesCurrentType(this.intTypes.concat(this.floatTypes), this.type) && !this.isMultiValueWithLookUp) {
            this._originalValue = parameterInfo.ValueInfo;
        }
        this.getParameterDescriptor = () => {
            return {
                description: parameterInfo.Description,
                displayName: parameterInfo.Description || parameterInfo.Name,
                name: parameterInfo.Name,
                tag: parameterInfo.Tag,
                type: parameterInfo.TypeName,
                value: this._originalValue,
                multiValue: parameterInfo.MultiValue,
                selectAllValues: parameterInfo.SelectAllValues,
                allowNull: parameterInfo.AllowNull,
                hasLookUpValues: !!this.lookUpValues() || parameterHelper.isEnumType(this),
                visible: parameterInfo.Visible,
                enabled: parameterInfo.Enabled
            };
        };
        this._disposables.push(external_ko_["computed"](() => {
            var info = parameterHelper.getParameterInfo(this);
            info.propertyName = previewParameterHelper_PreviewParameterHelper.getPrivatePropertyName(parameterInfo.Path);
            info.editor.editorType = info.editor.editorType || external_DevExpress_Analytics_Widgets_["Editor"];
            info.editorOptions.hasVerticalLabel = this.hasVerticalLabel();
            this.valueInfo(info);
        }));
        this.initialize(this._originalValue, parameterHelper);
    }
    static _compareValues(value1, value2) {
        if (value1 instanceof Date && value2 instanceof Date) {
            return value1 - value2 === 0;
        }
        return value1 === value2;
    }
    safeAssignObservable(name, value) {
        if (this[name]) {
            if (previewParameter_PreviewParameter._compareValues(this[name](), value()))
                this[name](null);
            var isEqual = false;
            if (value() instanceof multiValuesHelper_MultiValuesHelper && Array.isArray(value().items))
                isEqual = Object(external_DevExpress_Analytics_Internal_["compareArrays"])(this[name]().items, value().items);
            else if (Array.isArray(value()))
                isEqual = Object(external_DevExpress_Analytics_Internal_["compareArrays"])(this[name](), value());
            if (!isEqual) {
                this[name](value());
            }
        }
        else {
            this[name] = value;
        }
    }
    initialize(value, parameterHelper) {
        var resultValue;
        if (this.isMultiValueWithLookUp) {
            this.safeAssignObservable('_value', external_ko_["observableArray"]((value || []).map((arrayItem) => {
                return parameterHelper.getValueConverter(this.type)(arrayItem);
            })));
            var multiValuesHelper = new multiValuesHelper_MultiValuesHelper(this._value, this.lookUpValues(), this.selectAllValues);
            var newItems;
            if (parameterHelper.customizeParameterLookUpSource)
                newItems = parameterHelper.customizeParameterLookUpSource(this.getParameterDescriptor(), multiValuesHelper.dataSource);
            if (newItems) {
                multiValuesHelper.dataSource = newItems;
            }
            else {
                var store = new external_DevExpress_data_ArrayStore_default.a({
                    data: multiValuesHelper.dataSource,
                    key: 'value',
                });
                multiValuesHelper.dataSource = parameterHelper_ParameterHelper.createDefaultDataSource(store);
            }
            resultValue = external_ko_["observable"](multiValuesHelper);
        }
        else if (this.isMultiValue) {
            resultValue = value ? parameterHelper.createMultiValueArray(value, this) : external_ko_["observableArray"]();
        }
        else if (this.allowNull && !value && value !== false) {
            resultValue = external_ko_["observable"](null);
        }
        else if (this.isRange) {
            var converter = parameterHelper.getValueConverter(this.type);
            resultValue = external_ko_["observableArray"]([this._originalValue.Start, this._originalValue.End].map(x => external_ko_["unwrap"](converter(x))));
        }
        else {
            resultValue = external_ko_["observable"](parameterHelper.getValueConverter(this.type)(value));
        }
        this.safeAssignObservable('value', resultValue);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/parameters/parameterPanelItemBase.js






class parameterPanelItemBase_ParameterPanelItemBase extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(parameterHelper, layoutInfo) {
        super();
        this.parameterHelper = parameterHelper;
        this.layoutInfo = layoutInfo;
        this._parameters = [];
        this._separatorNames = [];
        this._groupLayoutItems = [];
        this.isEmpty = external_ko_["observable"](true);
        this.getInfo = external_ko_["observable"]([]);
        this.parameterHelper = parameterHelper || new previewParameterHelper_PreviewParameterHelper();
    }
    _fixGroupPropertyName(name) {
        return Object(external_DevExpress_Analytics_Internal_["getUniqueName"])(Object.keys(this), name.toLocaleLowerCase().replace(/\s/g, '_'));
    }
    _proceedLayoutInfo(layoutInfo, previewParameters) {
        this.getInfo([]);
        this._groupLayoutItems = [];
        layoutInfo.layoutItems.forEach(itemInfo => {
            if (itemInfo.type === 'Group') {
                var groupItemInfo = itemInfo;
                var name = this._fixGroupPropertyName(groupItemInfo.title);
                var info = {
                    propertyName: name,
                    displayName: groupItemInfo.title,
                    editor: viewerEditorTemplates.groupEditor,
                    editorOptions: {
                        expanded: groupItemInfo.expanded,
                        titleVisible: groupItemInfo.titleVisible,
                        showExpandButton: groupItemInfo.showExpandButton,
                        borderVisible: itemInfo.borderVisible,
                        orientation: groupItemInfo.orientation
                    }
                };
                var item = new parameterPanelItemBase_ParameterPanelItemBase(this.parameterHelper, groupItemInfo);
                this[name] = item;
                this._groupLayoutItems.push(item);
                this.getInfo(this.getInfo().concat(info));
            }
            else if (itemInfo.type === 'Parameter') {
                var parameterLayoutInfo = itemInfo;
                var previewParameter = previewParameters.filter(x => x.path === parameterLayoutInfo.path)[0];
                previewParameter && this._add(previewParameter, parameterLayoutInfo);
            }
            else if (itemInfo.type === 'Separator') {
                var generatedName = this._fixGroupPropertyName('Separator');
                this[generatedName] = { name: external_ko_["observable"](generatedName) };
                info = {
                    propertyName: generatedName,
                    editor: viewerEditorTemplates.separatorEditor
                };
                this.getInfo(this.getInfo().concat(info));
                this._separatorNames.push(generatedName);
            }
        });
    }
    _add(parameter, parameterInfo) {
        if (this._parameters.indexOf(parameter) === -1) {
            this._parameters.push(parameter);
        }
        if (!parameter.visible() && !parameter.hasVisibleExpression) {
            return parameter;
        }
        parameter.hasVerticalLabel(parameterInfo.labelOrientation === 'Vertical');
        this[previewParameterHelper_PreviewParameterHelper.getPrivatePropertyName(parameter.path)] = parameter.value;
        var parameterPropertyName = previewParameterHelper_PreviewParameterHelper.fixPropertyName(parameter.path);
        if (parameter.isMultiValue || !parameter.isTypesCurrentType(parameter.intTypes.concat(parameter.floatTypes), parameter.type)) {
            this[parameterPropertyName] = parameter.value;
        }
        else {
            this[parameterPropertyName] = external_ko_["pureComputed"]({
                read: () => {
                    var parseValue = parameter.value();
                    if (parseValue === null || parseValue === undefined) {
                        return parseValue;
                    }
                    if (parameter.isTypesCurrentType(parameter.intTypes, parameter.type)) {
                        parseValue = parseInt(parseValue);
                    }
                    else if (parameter.isTypesCurrentType(parameter.floatTypes, parameter.type)) {
                        parseValue = parseFloat(parseValue);
                    }
                    return parseValue;
                },
                write: (newVal) => {
                    var expandValue = newVal;
                    if (parameter.allowNull && (expandValue === '' || expandValue === undefined)) {
                        expandValue = null;
                    }
                    else if (parameter.isTypesCurrentType(parameter.intTypes, parameter.type)) {
                        expandValue = Object(external_DevExpress_Analytics_Internal_["integerValueConverter"])(expandValue, '0');
                    }
                    else if (parameter.isTypesCurrentType(parameter.floatTypes, parameter.type)) {
                        expandValue = Object(external_DevExpress_Analytics_Internal_["floatValueConverter"])(expandValue, '0');
                    }
                    parameter.value(expandValue);
                }
            });
        }
        this.getInfo(this.getInfo().concat(parameter.valueInfo()));
        return parameter;
    }
    isPropertyDisabled(name) {
        var parameter = this._parameters.filter(parameter => previewParameterHelper_PreviewParameterHelper.getPrivatePropertyName(parameter.path) === name)[0];
        return parameter && !parameter.enabled();
    }
    isPropertyVisible(name) {
        var parameter = this._parameters.filter(parameter => previewParameterHelper_PreviewParameterHelper.getPrivatePropertyName(parameter.path) === name)[0];
        return !parameter || parameter.visible();
    }
    initialize(originalParametersInfo, parameters) {
        this._parameters.forEach((usedParameter) => {
            delete this[previewParameterHelper_PreviewParameterHelper.fixPropertyName(usedParameter.path)];
            delete this[previewParameterHelper_PreviewParameterHelper.getPrivatePropertyName(usedParameter.path)];
        });
        this._parameters = [];
        if (!originalParametersInfo) {
            this.isEmpty(true);
            this.getInfo([]);
            return;
        }
        parameters = parameters || (originalParametersInfo.parameters || []).map((parameter) => {
            var previewParameter = new previewParameter_PreviewParameter(parameter, this.parameterHelper);
            this._parameters.push(previewParameter);
            return previewParameter;
        });
        var layoutInfo = originalParametersInfo.parameterPanelLayout || this.layoutInfo;
        layoutInfo && this._proceedLayoutInfo(layoutInfo, parameters);
        this._groupLayoutItems.forEach(item => item.initialize({}, parameters));
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/parameters/previewParametersViewModel.js







class previewParametersViewModel_PreviewParametersViewModel extends parameterPanelItemBase_ParameterPanelItemBase {
    constructor(reportPreview, parameterHelper, enableKeyboardSupport) {
        super(parameterHelper);
        this._getParametersStateRequest = (argsObject) => {
            return Object(external_DevExpress_Analytics_Internal_["ajax"])(HandlerUri(), 'getParametersState', encodeURIComponent(JSON.stringify(argsObject)), (message, jqXHR, textStatus) => this._reportPreview._processError(Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cannot supply filtered lookup values to a report parameter editor', 'ASPxReportsStringId.WebDocumentViewer_GetLookUpValuesError'), jqXHR));
        };
        this._getDoneGetParametersStateHandler = (changedParameter) => {
            var parametersViewModel = this;
            return (response) => {
                try {
                    if (!response || !response.parameters) {
                        return;
                    }
                    response.parameters.forEach((parametersInfoCollection) => {
                        var matchedParameter = parametersViewModel._parameters.filter((p) => { return p.path === parametersInfoCollection.Key; })[0];
                        if (!parametersViewModel._shouldProcessParameter(matchedParameter))
                            return;
                        matchedParameter.visible(parametersInfoCollection.Value.visible);
                        matchedParameter.enabled(parametersInfoCollection.Value.enabled);
                        if (parametersViewModel._parameters.indexOf(changedParameter) < parametersViewModel._parameters.indexOf(matchedParameter)) {
                            parametersViewModel._setLookUpValues(matchedParameter, parametersInfoCollection.Value.lookUpValues, matchedParameter.visible() && !matchedParameter.allowNull);
                        }
                    });
                }
                finally {
                    parametersViewModel.parametersLoading(false);
                }
            };
        };
        this._getFailGetParametersStateHandler = () => {
            var parametersViewModel = this;
            return (jqXHRError) => {
                parametersViewModel.parametersLoading(false);
            };
        };
        this.restore = () => {
            if (this.parametersLoading()) {
                return;
            }
            try {
                this.parametersLoading(true);
                this._parameters.forEach((parameter) => {
                    if (!this._shouldProcessParameter(parameter))
                        return;
                    parameter.lookUpValues(parameter._originalLookUpValues);
                    parameter.initialize(parameter._originalValue, this.parameterHelper);
                });
            }
            finally {
                this.parameterHelper.callbacks && this.parameterHelper.callbacks.parametersReset && this.parameterHelper.callbacks.parametersReset(this, this._parameters);
                this.parametersLoading(false);
            }
        };
        this.getInfo = external_ko_["observable"](null);
        this.needToUpdateParameter = external_ko_["observable"](false);
        this.processInvisibleParameters = false;
        this.parametersLoading = external_ko_["observable"](false);
        this._reportPreview = reportPreview;
        this.validateAndSubmit = (params) => {
            var result = params && params.validationGroup && params.validationGroup.validate && params.validationGroup.validate();
            if (!result || result.isValid)
                this.submit();
        };
        this.submit = () => {
            if (this.parametersLoading())
                return;
            this.parametersLoading(true);
            var promise = reportPreview.startBuild();
            promise && promise.done((val) => { this.parametersLoading(false); });
        };
        this._disposables.push(reportPreview.originalParametersInfo.subscribe((originalParametersInfo) => {
            this.initialize(originalParametersInfo);
        }));
        this.initialize(reportPreview.originalParametersInfo());
        var notEmpty = external_ko_["pureComputed"](() => !this.isEmpty());
        this.tabInfo = new external_DevExpress_Analytics_Utils_["TabInfoWithPropertyGrid"]({
            text: 'Parameters',
            template: 'dxrd-preview-parameters',
            model: this,
            keyboardHelper: enableKeyboardSupport ? new external_DevExpress_Analytics_Internal_["AccordionKeyboardHelper"]() : undefined,
            localizationId: 'PreviewStringId.RibbonPreview_Parameters_Caption',
            imageClassName: 'parameters',
            imageTemplateName: 'dxrd-svg-tabs-parameters',
            visible: notEmpty
        });
        var popupVisibleSwitch = external_ko_["observable"](false);
        var popupVisible = external_ko_["pureComputed"]({
            read: () => {
                return notEmpty() && popupVisibleSwitch();
            },
            write: (newVal) => {
                return popupVisibleSwitch(newVal);
            }
        });
        this.popupInfo = { visible: popupVisible, notEmpty: notEmpty };
        this._disposables.push(this.popupInfo);
    }
    get _visibleParameters() {
        return this._parameters.filter((p) => { return p.visible(); });
    }
    _shouldProcessParameter(param) {
        return this.processInvisibleParameters || (param && (param.visible() || param.hasVisibleExpression || param.isFilteredLookUpSettings));
    }
    _convertLocalDateToUTC(localDate) {
        return new Date(Date.UTC(localDate.getFullYear(), localDate.getMonth(), localDate.getDate(), localDate.getHours(), localDate.getMinutes(), localDate.getSeconds()));
    }
    subscribeParameter(parameter) {
        var needToUpdateParameter = this.needToUpdateParameter() || (this._shouldProcessParameter(parameter)) &&
            (parameter.isFilteredLookUpSettings || parameter.hasBindedExpressions);
        this.needToUpdateParameter(needToUpdateParameter);
        if (this._shouldProcessParameter(parameter)) {
            this._disposables.push((parameter.isMultiValueWithLookUp ? parameter._value : parameter.value).subscribe((newValue) => {
                if (!this.parametersLoading() && this.needToUpdateParameter()) {
                    this.updateParameters(parameter);
                }
            }));
        }
    }
    _setLookUpValues(parameter, lookUpValues, assignFirstLookUpValue) {
        if (!lookUpValues) {
            parameter.lookUpValues([]);
            return;
        }
        parameter.lookUpValues(this.parameterHelper.mapLookUpValues(parameter.type, lookUpValues));
        var _parameterValuesContainedInLookUps = this._getParameterValuesContainedInLookups(lookUpValues, parameter);
        if (parameter.isMultiValue) {
            parameter.initialize(_parameterValuesContainedInLookUps.length > 0 ? _parameterValuesContainedInLookUps : [], this.parameterHelper);
        }
        else {
            parameter.initialize(_parameterValuesContainedInLookUps[0] && _parameterValuesContainedInLookUps[0].Value || (assignFirstLookUpValue && lookUpValues.length > 0 ? lookUpValues[0].Value : null), this.parameterHelper);
        }
    }
    _getParameterValuesContainedInLookups(parameterLookUpValues, parameter) {
        if (parameterLookUpValues) {
            if (parameter.isMultiValue) {
                var selectedItems = parameter.value().value();
                return selectedItems.filter((item) => this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, item).length > 0);
            }
            else {
                return this._filterParameterValuesContainsInLookups(parameterLookUpValues, parameter.type, parameter.value());
            }
        }
        return [];
    }
    _filterParameterValuesContainsInLookups(parameterLookUpValues, parameterType, value) {
        return parameterLookUpValues.filter((x) => previewParameter_PreviewParameter._compareValues(this.parameterHelper.getValueConverter(parameterType)(x.Value), value));
    }
    initialize(originalParametersInfo) {
        originalParametersInfo && this.parameterHelper.initialize(originalParametersInfo.knownEnums);
        super.initialize(originalParametersInfo);
        if (!originalParametersInfo)
            return;
        var layout = originalParametersInfo.parameterPanelLayout;
        if ((!layout || layout.layoutItems.length === 0) && originalParametersInfo.parameters) {
            this._parameters.forEach(x => this._add(x, {}));
        }
        this.isEmpty(this._visibleParameters.length === 0);
        var actualParametersInfo = [];
        this._parameters.forEach(x => {
            this.subscribeParameter(x);
            actualParametersInfo.push({ value: x.value, parameterDescriptor: x.getParameterDescriptor(), lookUpValues: x.lookUpValues });
        });
        if (this.parameterHelper.callbacks && this.parameterHelper.callbacks.parametersInitialized) {
            this.parameterHelper.callbacks.parametersInitialized(this, actualParametersInfo, this.submit, originalParametersInfo.shouldRequestParameters);
        }
        if (this._reportPreview.documentId)
            return;
        if (!originalParametersInfo.shouldRequestParameters || this.isEmpty()) {
            this.submit();
        }
        else {
            this._reportPreview.removeEmptyPages();
            this.tabInfo.active(true);
            if (this.tabInfo.visible() && external_ko_["isWriteableObservable"](this.tabInfo.collapsed))
                this.tabInfo.collapsed(false);
            this.popupInfo.visible(true);
            this._reportPreview.pageLoading(false);
        }
    }
    getPathsAfterPath(parameterPath) {
        var startIndex = 0;
        for (var index = 0; index < this._parameters.length; index++) {
            if (this._parameters[index].path === parameterPath) {
                startIndex = index + 1;
                break;
            }
        }
        var paths = this._parameters
            .filter((param, index) => {
            return this._shouldProcessParameter(param) &&
                (param.hasBindedExpressions || param.isFilteredLookUpSettings && index >= startIndex);
        })
            .map((x) => x.path);
        return paths || [];
    }
    serializeParameters() {
        var params = [], self = this;
        this._parameters.forEach((parameter) => {
            var convertItem = (item) => {
                return (parameter.type === 'System.DateTime' && !!item && (item instanceof Date)) ? self._convertLocalDateToUTC(item) : item;
            };
            var value = parameter.isMultiValueWithLookUp ? parameter._value() : parameter.value();
            if (parameter.allowNull) {
                if ((parameter.isMultiValue && Array.isArray(value) && value.length === 0) || value === '') {
                    value = null;
                }
            }
            params.push({ Value: parameterHelper_ParameterHelper.getSerializationValue(value, convertItem), Key: parameter.path, TypeName: parameter.type });
        });
        return params;
    }
    updateParameters(changedParameter) {
        var requiredParameterPaths = this.getPathsAfterPath(changedParameter.path);
        if (!requiredParameterPaths || requiredParameterPaths.length === 0) {
            return;
        }
        var argsObject = {
            reportId: this._reportPreview.reportId,
            reportUrl: this._reportPreview.reportUrl,
            requiredParameterPaths: requiredParameterPaths,
            parameters: this.serializeParameters(),
            timeZoneOffset: 0 - new Date().getTimezoneOffset()
        };
        setTimeout(() => {
            this.parametersLoading(true);
            this._getParametersStateRequest(argsObject)
                .done(this._getDoneGetParametersStateHandler(changedParameter))
                .fail(this._getFailGetParametersStateHandler());
        }, 10);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_sizeUtils.js
function updatePreviewContentSizeMobile(previewWrapperSize, $root) {
    return () => {
        var height = $root.outerHeight();
        var width = $root.outerWidth();
        previewWrapperSize({ width, height });
    };
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_editorTemplates.js
var _editorTemplates_editorTemplates = {
    rangeEditor: { header: 'dxrv-range-parameter-mobile' },
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobilePreviewParameterHelper.js


class _mobilePreviewParameterHelper_MobilePreviewParameterHelper extends previewParameterHelper_PreviewParameterHelper {
    getRangeEditor() {
        return _editorTemplates_editorTemplates.rangeEditor;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/utils/_mobileActionList.js




class _mobileActionList_MobileActionList extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(actions) {
        super();
        this.actions = actions;
        this.visible = external_ko_["observable"](false);
    }
    dispose() {
        this.actions.forEach(action => {
            if (action.content && action.content.dispose) {
                action.content.dispose();
                delete action.content.dispose;
            }
        });
        super.dispose();
    }
}
function getPreviewActionsMobile(options) {
    var exportToModel = {
        visible: external_ko_["observable"](false),
        items: external_ko_["pureComputed"](() => {
            var allFormats = options.exportModel._getExportFormatItems();
            var availableFormats = options.exportTypes().filter(x => allFormats.indexOf(x) !== -1);
            if (availableFormats.length > 9) {
                availableFormats.splice(9, availableFormats.length - 9);
            }
            else if (availableFormats.length < 9) {
                var notUsedFormats = allFormats.filter(x => availableFormats.indexOf(x) === -1);
                availableFormats.push.apply(availableFormats, notUsedFormats.slice(0, 9 - availableFormats.length));
            }
            return availableFormats.map((item) => {
                item.action = (model) => { options.exportModel._exportDocumentByFormat(model && model.format); };
                return item;
            });
        })
    };
    var actions = [
        {
            clickAction: () => {
                options.searchModel.searchPanelVisible(true);
                options.searchModel.editorVisible(true);
                options.searchModel.focusEditor({ currentTarget: external_jQuery_["fn"].constructor('.dxrdp-taptosearch') });
                options.reportPreview.actionsVisible(false);
            },
            imageClassName: 'dxrd-image-search',
            imageTemplateName: 'dxrd-svg-preview-search',
            visible: SearchAvailable
        },
        {
            clickAction: () => { exportToModel.visible(!exportToModel.visible()); },
            imageClassName: 'dxrd-image-export-to',
            imageTemplateName: 'dxrd-svg-preview-export-export-to',
            visible: true,
            content: {
                name: 'dxrd-menu-export-content',
                data: exportToModel,
                dispose: () => {
                    exportToModel.items().forEach(item => {
                        delete item.action;
                    });
                    exportToModel.items.dispose();
                }
            }
        },
        {
            clickAction: () => {
                options.parametersModel.popupInfo.visible(!options.parametersModel.popupInfo.visible());
                options.reportPreview.actionsVisible(false);
            },
            imageClassName: 'dxrd-image-parameters',
            imageTemplateName: 'dxrd-svg-tabs-parameters',
            visible: options.parametersModel.popupInfo.notEmpty
        }
    ];
    options.callbacks && options.callbacks.customizeActions && options.callbacks.customizeActions(actions);
    return new _mobileActionList_MobileActionList(actions);
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_previewModel.js

class _previewModel_PreviewDisposableModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(options) {
        super();
        this.rootStyle = options.rootStyle;
        this.reportPreview = options.reportPreview;
        this.parametersModel = options.parametersModel;
        this.exportModel = options.exportModel;
        this.searchModel = options.searchModel;
        this.rtl = options.rtl;
        this._disposables.push(options.reportPreview);
        this._disposables.push(options.parametersModel);
        this._disposables.push(options.exportModel);
        this._disposables.push(options.searchModel);
    }
    _addDisposable(object) {
        this._disposables.push(object);
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    GetParametersModel() {
        return this.parametersModel;
    }
    OpenReport(reportName) {
        this.reportPreview.openReport(reportName);
    }
    Print(pageIndex) {
        this.reportPreview.printDocument(pageIndex);
    }
    ExportTo(format, inlineResult) {
        if (!this.reportPreview.exportDisabled()) {
            this.reportPreview.exportDocumentTo(format || 'pdf', inlineResult);
        }
    }
    GetCurrentPageIndex() {
        return this.reportPreview.pageIndex();
    }
    GoToPage(pageIndex) {
        this.reportPreview.goToPage(pageIndex);
    }
    Close() {
        this.reportPreview.deactivate();
    }
    ResetParameters() {
        this.parametersModel && this.parametersModel.restore();
    }
    StartBuild() {
        this.parametersModel && this.parametersModel.submit();
    }
    PerformCustomDocumentOperation(customData, hideMessageFromUser) {
        return this.reportPreview.customDocumentOperation(customData, hideMessageFromUser);
    }
}
class PreviewModel extends _previewModel_PreviewDisposableModel {
    constructor(options) {
        super(options);
        this.documentMapModel = options.documentMapModel;
        this.tabPanel = options.tabPanel;
        this.actionLists = options.actionLists;
        this.accessibilityCompliant = options.accessibilityCompliant;
        this._disposables.push(options.documentMapModel);
        this._disposables.push(options.tabPanel);
        this._disposables.push(options.actionLists);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobilePreviewModel.js


class _mobilePreviewModel_MobilePreviewModel extends _previewModel_PreviewDisposableModel {
    constructor(options) {
        super(options);
        this.slideOptions = options.slideOptions;
        this.gallery = options.gallery;
        this.paginator = options.paginator;
        this.brickEventsDisabled = options.brickEventsDisabled;
        this.availableFormats = options.availableFormats;
        this._disposables.push(options.gallery);
        if (external_ko_["isComputed"](options.brickEventsDisabled))
            this._disposables.push(options.brickEventsDisabled);
        if (options.slideOptions && external_ko_["isComputed"](options.slideOptions.scrollAvailable))
            this._disposables.push(options.slideOptions.scrollAvailable);
        if (options.slideOptions && external_ko_["isComputed"](options.slideOptions.swipeEnabled))
            this._disposables.push(options.slideOptions.swipeEnabled);
        this._disposables.push(options.paginator);
        this._disposables.push(options.searchModel);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_parametersPopup.js




class _parametersPopup_ParametersPopupModelBase extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(formModel) {
        super();
        this.formModel = formModel;
        this._submit = (params) => {
            var result = params.validationGroup && params.validationGroup.validate && params.validationGroup.validate();
            if (!result || result.isValid) {
                this.formModel.submit && this.formModel.submit();
                this.visible(false);
            }
        };
        this._reset = () => {
            this.formModel.reset && this.formModel.reset();
        };
        this._cancel = () => {
            this.formModel.cancel && this.formModel.cancel();
            this.visible(false);
        };
        this.showIcons = external_ko_["observable"](false);
        this.className = '';
        this.visible = formModel.visible;
        this.cancelDisabled = external_ko_["observable"](false);
        this.actionButtons = [
            { className: 'dxrdp-parameters-reset', text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Reset', 'ASPxReportsStringId.ParametersPanel_Reset'), action: this._reset, disabled: false, visible: !!formModel.reset, id: 'dxrv-mobile-reset' },
            { className: 'dxrdp-parameters-cancel', text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Cancel', 'AnalyticsCoreStringId.SearchDialog_Cancel'), action: this._cancel, disabled: this.cancelDisabled, visible: true, id: 'dxrv-mobile-cancel' },
            { className: 'dxrdp-parameters-submit', text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Submit', 'ASPxReportsStringId.ParametersPanel_Submit'), action: this._submit, disabled: false, visible: true, id: 'dxrv-mobile-submit' }
        ];
        this.actionIcons = [
            { className: 'dxrdp-parameters-reset dxrdp-image-parameters-reset', action: this._reset, disabled: false, visible: !!formModel.reset },
            { className: 'dxrdp-parameters-cancel dxrdp-image-parameters-cancel', action: this._cancel, disabled: this.cancelDisabled, visible: true },
            { className: 'dxrdp-parameters-submit dxrdp-image-parameters-submit', action: this._submit, disabled: false, visible: true }
        ];
    }
    cacheElementContent(element) {
        this._parametersButtonContaner = element;
        this.initVisibilityIcons();
    }
    dispose() {
        super.dispose();
        this._parametersButtonContaner = null;
    }
    initVisibilityIcons() {
        if (!this._parametersButtonContaner)
            return;
        var result = this.showIcons();
        var nodeTop = this._parametersButtonContaner.offset().top;
        this._parametersButtonContaner.find('.dxrdp-parameter-action').each((_, el) => {
            result = nodeTop !== el.getBoundingClientRect().top;
        });
        this.showIcons(result);
    }
}
class _parametersPopup_ParametersPopupModel extends _parametersPopup_ParametersPopupModelBase {
    constructor(model, _reportPreview) {
        super({ visible: model.popupInfo.visible, submit: model.submit, reset: model.restore });
        this.model = model;
        this._reportPreview = _reportPreview;
        this._disposables.push(external_ko_["computed"](() => {
            this.cancelDisabled(!this._reportPreview._currentDocumentId() || this._reportPreview.pages().length === 0);
        }));
        this.contentTemplate = 'dxrv-preview-parameters-mobile-content';
        this.title = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Parameters', 'DevExpress.XtraReports.UI.XtraReport.Parameters');
    }
}
class _parametersPopup_DateRangeParemeterPopupModel extends _parametersPopup_ParametersPopupModelBase {
    constructor(model) {
        super({
            visible: model._popupVisible, cancel: () => {
                this.model.startDate(this._oldStart);
                this.model.endDate(this._oldEnd);
                this.model.applyValue();
            }
        });
        this.model = model;
        this._dateEditorClassName = 'dxrv-daterange-editor-item';
        this._dateButtonEditorClassName = 'dxrv-daterange-editor-button';
        this.getStringDate = (value) => {
            return Object(external_DevExpress_Analytics_Internal_["formatDate"])(value());
        };
        this.focusButton = (e) => {
            var $element = external_jQuery_["fn"].constructor(e.element);
            var dateEditor = $element.siblings('.' + this._dateEditorClassName);
            var parent = $element.closest('.' + this.className);
            parent.find('.' + this._dateButtonEditorClassName).removeClass('dx-button-default');
            $element.addClass('dx-button-default');
            parent.find('.' + this._dateEditorClassName).css('zIndex', 1);
            dateEditor.css('zIndex', 2);
        };
        var submitAction = this.actionButtons.filter(action => action.id == 'dxrv-mobile-submit')[0];
        if (submitAction)
            submitAction.text = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('OK', external_DevExpress_Analytics_Internal_["StringId"].DataAccessBtnOK);
        this._disposables.push(this.textRangeValue = external_ko_["computed"]({
            read: () => { return this.model._displayText(); },
            write: (val) => { this.model.applyDate(val.range(), true); }
        }));
        this._oldStart = this.model.startDate();
        this._oldEnd = this.model.endDate();
        this.contentTemplate = 'dxrv-preview-date-range-mobile';
        this.title = Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Date Range Parameter', 'AnalyticsCoreStringId.Mobile_DateRange_Title');
        this.className = 'dxrv-preview-date-range-mobile-popup';
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/constants.js
var MobilePreviewElements = {
    Surface: 'dxrdp-surface-mobile',
    Search: 'dxrdp-search-mobile',
    Pages: 'dxrdp-pages-mobile',
    MobileActions: 'dxrdp-surface-mobile-bottom',
    Parameters: 'dxrd-menu-parameters-content'
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_sizeUtils.js




function stringToPosition(position) {
    var lowerCased = (position || '').toLowerCase();
    if (!lowerCased || lowerCased === 'default') {
        return null;
    }
    var top = lowerCased.indexOf('top') !== -1;
    var right = lowerCased.indexOf('right') !== -1;
    return { top: top, bottom: !top, right: right, left: !right };
}
function getDockedElementCallback($targetElement, $viewer, $window, selector, position = null) {
    if (!selector)
        return external_jQuery_["noop"];
    return (viewer) => {
        if ($viewer.length === 0)
            $viewer = external_jQuery_["fn"].constructor(viewer);
        if ($targetElement.length === 0)
            $targetElement = $viewer.find(selector);
        if ($window.length === 0)
            $window = external_jQuery_["fn"].constructor(window);
        if (!position || position.bottom) {
            var elementTop = parseInt($targetElement.css('bottom')) + $targetElement.height();
            var viewerTop = $viewer.offset().top;
            var viewerHeight = $viewer.height();
            var windowContentHeight = $window.height() + $window.scrollTop();
            var result = viewerTop + viewerHeight - windowContentHeight;
            if (result < viewerHeight - elementTop) {
                result = Math.max(0, result);
                var transform = 'translateY(-' + result * Object(external_DevExpress_Analytics_Internal_["accessibilityFontSizeZoomFactor"])() + 'px)';
                $targetElement.css({
                    '-webkit-transform': transform,
                    'transform': transform
                });
            }
        }
        else {
            var previewWrapper = $viewer.find('.dxrd-preview-wrapper')[0];
            var clientRect = previewWrapper && previewWrapper.getBoundingClientRect();
            if (!clientRect || clientRect.top < 0 && (clientRect.height + clientRect.top < $targetElement.outerHeight()))
                return;
            var translateY = clientRect.top < 0 ? -clientRect.top : 0;
            var transform = 'translateY(' + translateY * Object(external_DevExpress_Analytics_Internal_["accessibilityFontSizeZoomFactor"])() + 'px)';
            $targetElement.css({
                '-webkit-transform': transform,
                'transform': transform
            });
        }
    };
}
function _getRightAreaWidth($container) {
    var rightAreaWidth = ($container.find('.dxrd-right-panel:visible').outerWidth() || 0) + ($container.find('.dxrd-right-tabs:visible').outerWidth() || 0);
    return isNaN(rightAreaWidth) ? 0 : rightAreaWidth;
}
function updatePreviewContentSize(previewSize, root, rtl) {
    var _cashedSizeFactorClass = 'lg';
    return (tabPanelPosition) => {
        var $_root = external_jQuery_["fn"].constructor(root);
        var $root = $_root.find('.dxrd-preview');
        var $viewPort = external_jQuery_["fn"].constructor(root).children('.dx-designer-viewport');
        var sizeFactor = Object(external_DevExpress_Analytics_Internal_["getSizeFactor"])($_root.outerWidth());
        if (!!$viewPort.length && _cashedSizeFactorClass !== sizeFactor) {
            $viewPort.removeClass('dx-designer-viewport-' + _cashedSizeFactorClass);
            $viewPort.addClass('dx-designer-viewport-' + sizeFactor);
        }
        _cashedSizeFactorClass = sizeFactor;
        var rightAreaWidth = _getRightAreaWidth($root);
        var surfaceWidth = ($root.width() - rightAreaWidth - 10) * Object(external_DevExpress_Analytics_Internal_["accessibilityFontSizeZoomFactor"])();
        var cssStyleData = (tabPanelPosition === external_DevExpress_Analytics_Utils_["TabPanel"].Position.Left) ? { 'right': '', 'left': rightAreaWidth } : { 'right': rightAreaWidth, 'left': '' };
        $root.find('.dxrd-preview-wrapper').css(cssStyleData);
        previewSize(surfaceWidth);
    };
}
function updatePreviewZoomWithAutoFit(width, height, $element, autoFitBy = ZoomAutoBy.WholePage) {
    var $previewWrapper = $element.closest('.dxrd-preview-wrapper');
    var $preview = $element.closest('.dxrd-preview');
    if ($previewWrapper.length === 0 || $preview.length === 0) {
        return 1;
    }
    var surfaceWidth = $preview.width() - _getRightAreaWidth($preview) - 10;
    var topAreaHeight = parseFloat($previewWrapper.css('top').split('px')[0]);
    var designerHeight = $preview.outerHeight();
    var surfaceHeight = designerHeight - topAreaHeight;
    if (autoFitBy === ZoomAutoBy.PageWidth) {
        return (surfaceWidth - 12) / width;
    }
    var heightZoom = surfaceHeight / (height + 6);
    var widthZoom = surfaceWidth / width;
    return Math.min(heightZoom, widthZoom);
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_progressBarUtils.js



function getUpdateProgressBarCallback(progressBarSettings, designerModel, reportPreview, rootElement, $window = external_jQuery_["fn"].constructor(window)) {
    var keepProgressBarVisible = !progressBarSettings || progressBarSettings.keepOnVisibleArea !== false;
    var position = stringToPosition(progressBarSettings && progressBarSettings.position);
    reportPreview.progressBar.setPosition(position);
    if (!keepProgressBarVisible)
        return external_jQuery_["noop"];
    var $root = external_jQuery_["fn"].constructor(rootElement);
    var $progress = $root.find('.dxrd-preview-progress');
    var updateProgressBarPosition = getDockedElementCallback($progress, $root, $window, '.dxrd-preview-progress', position);
    designerModel._addDisposable(reportPreview.progressBar.visible.subscribe((isVisible) => {
        isVisible && updateProgressBarPosition(rootElement);
    }));
    var wrappedUpdateProgressPosition = () => {
        if (reportPreview.progressBar && external_ko_["unwrap"](reportPreview.progressBar.visible))
            updateProgressBarPosition(rootElement);
    };
    window.addEventListener('scroll', wrappedUpdateProgressPosition);
    designerModel._addDisposable({
        dispose: () => {
            window.removeEventListener('scroll', wrappedUpdateProgressPosition);
        }
    });
    return wrappedUpdateProgressPosition;
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/utils/_mobileInitializer.js



















function createMobilePreview(bindingSettings) {
    var callbacks = bindingSettings.callbacks;
    var bindingModel = bindingSettings.model;
    var bindingElement = bindingSettings.element;
    var previewWrapper = new _previewRequestWrapper_PreviewRequestWrapper(null, callbacks), reportPreview = new mobilePreview_MobileReportPreview(bindingModel.handlerUri, previewWrapper, undefined, callbacks, undefined, bindingModel.mobileModeSettings);
    var $root = external_jQuery_["fn"].constructor(bindingElement);
    var updatePreviewContentSize_ = updatePreviewContentSizeMobile(reportPreview.previewWrapperSize, $root);
    updatePreviewContentSize_();
    var gallery = new _galleryModel_GalleryModel(reportPreview, reportPreview.previewWrapperSize);
    var searchModel = new _mobileSearch_MobileSearchViewModel(reportPreview, gallery);
    var parametersModel = new previewParametersViewModel_PreviewParametersViewModel(reportPreview, new _mobilePreviewParameterHelper_MobilePreviewParameterHelper(bindingModel.parametersInfo && bindingModel.parametersInfo.knownEnums, callbacks));
    var exportModel = new exportOptionsModel_ExportOptionsModel(reportPreview);
    reportPreview.allowURLsWithJSContent = bindingModel.allowURLsWithJSContent;
    previewWrapper.initialize(reportPreview, parametersModel, searchModel);
    var exportTypes = external_ko_["observableArray"]([
        ExportFormatID.PDF, ExportFormatID.XLS, ExportFormatID.XLSX,
        ExportFormatID.RTF, ExportFormatID.DOCX, ExportFormatID.HTML,
        ExportFormatID.Text, ExportFormatID.CSV, ExportFormatID.Image
    ]);
    var mobileActions = getPreviewActionsMobile({ reportPreview, exportModel, parametersModel, searchModel, exportTypes, callbacks: callbacks });
    reportPreview.pageIndex.subscribe(function (newVal) { mobileActions.visible(false); });
    reportPreview.actionsVisible = mobileActions.visible;
    var designerModelOptions = {
        rootStyle: 'dxrd-preview dxrdp-mobile dxd-back-primary',
        reportPreview: reportPreview,
        parametersModel: parametersModel,
        exportModel: exportModel,
        searchModel: searchModel,
        rtl: reportPreview.rtlViewer,
        brickEventsDisabled: external_ko_["observable"](false),
        gallery: gallery,
        paginator: new _paginator_MobilePaginator(reportPreview, gallery),
        availableFormats: exportTypes
    };
    var designerModel = new _mobilePreviewModel_MobilePreviewModel(designerModelOptions);
    designerModel.slideOptions = {
        dispose: () => {
            var model = designerModel.slideOptions;
            if (external_ko_["isComputed"](model.swipeEnabled))
                model.swipeEnabled.dispose();
            if (external_ko_["isComputed"](model.scrollAvailable))
                model.scrollAvailable.dispose();
        },
        readerMode: reportPreview.readerMode,
        animationSettings: reportPreview.animationSettings,
        searchPanel: searchModel,
        topOffset: reportPreview.topOffset,
        previewWrapperSize: reportPreview.previewWrapperSize,
        reachedTop: reportPreview.scrollReachedTop,
        reachedLeft: reportPreview.scrollReachedLeft,
        reachedRight: reportPreview.scrollReachedRight,
        scrollAvailable: external_ko_["computed"](() => {
            return !(reportPreview.scrollReachedTop() && reportPreview.scrollReachedLeft()
                && reportPreview.scrollReachedRight() && reportPreview.scrollReachedBottom());
        }),
        disabled: reportPreview.interactionDisabled,
        swipeEnabled: external_ko_["computed"](() => {
            if (reportPreview.zoomUpdating()) {
                return false;
            }
            if (searchModel.height() > 0 && !searchModel.editorVisible()) {
                return false;
            }
            if (!reportPreview.scrollReachedLeft() && !reportPreview.scrollReachedRight()) {
                return false;
            }
            return true;
        }),
        autoFitBy: reportPreview.autoFitBy,
        galleryIsAnimated: gallery.isAnimated,
        repaintTimeout: gallery.repaintTimeout,
        zoomUpdating: reportPreview.zoomUpdating,
        brickEventsDisabled: designerModel.brickEventsDisabled
    };
    var parametersPopup = new _parametersPopup_ParametersPopupModel(parametersModel, reportPreview);
    designerModel.parts = [
        { id: MobilePreviewElements.Surface, templateName: MobilePreviewElements.Surface, model: designerModel.reportPreview },
        { id: MobilePreviewElements.Search, templateName: MobilePreviewElements.Search, model: designerModel.searchModel },
        { id: MobilePreviewElements.Pages, templateName: MobilePreviewElements.Pages, model: designerModel.paginator },
        { id: MobilePreviewElements.MobileActions, templateName: MobilePreviewElements.MobileActions, model: mobileActions },
        { id: MobilePreviewElements.Parameters, templateName: MobilePreviewElements.Parameters, model: parametersPopup },
        { id: PreviewElements.ExportTool, templateName: PreviewElements.ExportTool, model: designerModel.reportPreview.exportHandler }
    ];
    callbacks && callbacks.customizeParts && callbacks.customizeParts(designerModel.parts);
    var $actions = $root.find('.dxrdp-mobile-actions');
    var $window = external_jQuery_["fn"].constructor(window);
    var updateProgressPosition = getUpdateProgressBarCallback(bindingModel.progressBarSettings, designerModel, reportPreview, bindingElement, $window);
    var updateMobilePreviewActionsPosition_ = getDockedElementCallback($actions, $root, $window, '.dxrdp-mobile-actions');
    var updateSizesCallback = () => {
        updatePreviewContentSize_ && updatePreviewContentSize_();
        updateProgressPosition && updateProgressPosition();
    };
    designerModel.updateSurfaceSize = updateSizesCallback;
    designerModel.resizeCallback = () => {
        if (parametersModel.popupInfo.visible()) {
            parametersPopup.initVisibilityIcons();
        }
        updateSizesCallback();
        if (reportPreview.actionsVisible())
            updateMobilePreviewActionsPosition_(bindingElement);
    };
    window.addEventListener('resize', designerModel.resizeCallback);
    var onScroll = () => {
        if (reportPreview.actionsVisible())
            updateMobilePreviewActionsPosition_(bindingElement);
    };
    window.addEventListener('scroll', onScroll);
    designerModel._addDisposable({
        dispose: () => {
            window.removeEventListener('resize', designerModel.resizeCallback);
            window.removeEventListener('scroll', onScroll);
            designerModel.slideOptions.dispose();
            mobileActions.dispose();
        }
    });
    designerModel._addDisposable(reportPreview.actionsVisible.subscribe((newValue) => {
        if (newValue)
            updateMobilePreviewActionsPosition_(bindingElement);
    }));
    Object(external_DevExpress_Analytics_Internal_["appendStaticContextToRootViewModel"])(designerModel, external_DevExpress_Analytics_Internal_["staticContext"]);
    if (bindingElement && !reportPreview.canSwitchToDesigner && bindingSettings.applyBindings) {
        callbacks.beforeRender && callbacks.beforeRender(designerModel);
        external_jQuery_["fn"].constructor(bindingElement).children().remove();
        external_ko_["applyBindings"](designerModel, bindingElement);
    }
    return designerModel;
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/search/_utils.js

var formatSearchResult = function (value) { return value && (Object(external_DevExpress_Analytics_Utils_["getLocalization"])('page', 'ASPxReportsStringId.WebDocumentViewer_SearchPageNumberText') + ' ' + (value.pageIndex + 1)); };

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_actions.js






class _actions_PreviewDesignerActions extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(reportPreview, fullscreen) {
        super();
        this.actions = [];
        var designAction = {
            id: ActionId.Design,
            text: 'Design',
            displayText: () => Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Design', 'ASPxReportsStringId.ToolBarItemText_Design'),
            imageClassName: 'dxrd-image-design',
            imageTemplateName: 'dxrd-svg-preview-report_designer',
            templateName: reportPreview.canSwitchToDesigner ? 'dxrd-toolbar-two-way-switch' : undefined,
            disabled: external_ko_["observable"](false),
            visible: reportPreview.canSwitchToDesigner,
            hotKey: { ctrlKey: true, keyCode: 68 },
            clickAction: () => {
                reportPreview.previewVisible(false);
                reportPreview.deactivate();
            }
        };
        designAction.contentData = {
            items: [
                { itemData: designAction, active: false },
                { getDisplayText: () => Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Preview', 'ASPxReportsStringId.ToolBarItemText_Preview'), active: true }
            ]
        };
        this.actions.push(designAction);
        this.actions.push({
            id: ActionId.FullScreen,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Full Screen', 'ASPxReportsStringId.ToolBarItemText_FullScreen'),
            imageClassName: 'dxrd-image-fullscreen',
            imageTemplateName: () => fullscreen() ? 'dxrd-svg-toolbar-fullscreen-exit' : 'dxrd-svg-toolbar-fullscreen',
            disabled: external_ko_["observable"](false),
            visible: !reportPreview.canSwitchToDesigner,
            selected: fullscreen,
            clickAction: () => {
                fullscreen(!fullscreen());
            }
        });
        this._disposables.push(fullscreen);
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    getActions(context) {
        return this.actions;
    }
}
class _actions_ActionLists extends external_DevExpress_Analytics_Internal_["ActionListsBase"] {
    constructor(reportPreview, globalActionProviders, customizeActions, enabled) {
        super(enabled);
        this._reportPreview = reportPreview;
        this.globalActionProviders = globalActionProviders;
        this.toolbarItems = external_ko_["computed"](() => {
            var globalActions = [];
            globalActionProviders().forEach((actionProvider) => {
                globalActions.push.apply(globalActions, actionProvider.getActions(reportPreview));
            });
            customizeActions && customizeActions(globalActions);
            return globalActions;
        });
        this._disposables.push(this.toolbarItems);
    }
    processShortcut(actions, e) {
        if (this.shouldIgnoreProcessing(e))
            return;
        super.processShortcut(actions, e);
    }
    dispose() {
        super.dispose();
        this.resetObservableArray(this.globalActionProviders);
        this.removeProperties();
    }
}
class _actions_PreviewActions extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(reportPreview) {
        super();
        this.actions = [];
        var printDisabled = reportPreview.exportDisabled;
        this.actions.push({
            id: ActionId.FirstPage,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('First Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_FirstPage'),
            imageClassName: 'dxrd-image-preview-first',
            imageTemplateName: 'dxrd-svg-preview-first_page',
            disabled: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.pageIndex() < 1; })),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: true, keyCode: 37 },
            clickAction: () => {
                if (reportPreview.pageIndex() > 0) {
                    reportPreview.goToPage(0);
                }
            }
        });
        this.actions.push({
            id: ActionId.PrevPage,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Previous Page', 'ASPxReportsStringId.ToolBarItemText_PreviousPage'),
            imageClassName: 'dxrd-image-preview-prev',
            imageTemplateName: 'dxrd-svg-preview-previous_page',
            disabled: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.pageIndex() < 1; })),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: false, keyCode: 37 },
            clickAction: () => {
                if (reportPreview.pageIndex() >= 1) {
                    reportPreview.goToPage(reportPreview.pageIndex() - 1, false, 500);
                }
            },
        });
        var paginationSelectBoxViewModel = {
            id: ActionId.Pagination,
            text: 'Pagination',
            imageClassName: 'dxrd-image-pager',
            disabled: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.pages().length === 0 || reportPreview.pageIndex() === -1; })),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.previewVisible(); })),
            clickAction: external_jQuery_["noop"],
            selectedItem: this.wrapDisposable(external_ko_["pureComputed"]({
                read: () => {
                    if (reportPreview.pageIndex() < 0) {
                        return null;
                    }
                    var items = paginationSelectBoxViewModel.pageItems();
                    return items && items.store && (items.store.length > reportPreview.pageIndex()) && items.store[reportPreview.pageIndex()];
                },
                write: (newValue) => {
                    if (!!newValue && (newValue.index || newValue.index === 0)) {
                        reportPreview.goToPage(newValue.index);
                    }
                },
                deferEvaluation: true
            })),
            pageItems: this.wrapDisposable(external_ko_["pureComputed"](() => {
                var pageCount = reportPreview.pages().length;
                if (pageCount === 0 || reportPreview.pageIndex.peek() === -1) {
                    return [];
                }
                var pagesArray = new Array();
                for (var i = 0; i < pageCount;) {
                    pagesArray.push({ index: i, text: ++i });
                }
                return {
                    store: pagesArray,
                    paginate: pageCount > 200,
                    pageSize: 100
                };
            })),
            currentPage: reportPreview._currentPageText,
            focusOut: (e) => {
                if (!paginationSelectBoxViewModel._isPageChanged(e.component.option('text'))) {
                    reportPreview._currentPageText.notifySubscribers(reportPreview._currentPageText());
                }
            },
            keyUp: (e) => {
                if (e.event.which !== 13)
                    return;
                if (paginationSelectBoxViewModel._isPageChanged(e.component.option('text'))) {
                    paginationSelectBoxViewModel.opened(false);
                }
            },
            _isPageChanged: (value) => {
                var val = parseInt && parseInt(value);
                if (!!val && val-- > 0 && val < reportPreview.pages().length) {
                    reportPreview.goToPage(val);
                    return true;
                }
                return false;
            },
            displayExpr: function (value) {
                var pageIndex = reportPreview.pageIndex.peek();
                if (pageIndex === -1 || !value || pageIndex === value.index) {
                    return reportPreview._currentPageText.peek();
                }
                else {
                    return value.text;
                }
            },
            itemTemplate: function (value) { return value.text; },
            searchMode: 'startswith',
            searchEnabled: external_ko_["observable"](true),
            searchTimeout: 10,
            opened: external_ko_["observable"](false),
            templateName: 'dxrd-preview-pager'
        };
        this.actions.push(paginationSelectBoxViewModel);
        this.actions.push({
            id: ActionId.NextPage,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Next Page', 'ASPxReportsStringId.ToolBarItemText_NextPage'),
            imageClassName: 'dxrd-image-preview-next',
            imageTemplateName: 'dxrd-svg-preview-next_page',
            disabled: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.pageIndex() < 0 || reportPreview.pageIndex() >= reportPreview.pages().length - 1; })),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: false, keyCode: 39 },
            clickAction: () => {
                if (reportPreview.pageIndex() < reportPreview.pages().length - 1) {
                    reportPreview.goToPage(reportPreview.pageIndex() + 1, false, 500);
                }
            }
        });
        this.actions.push({
            id: ActionId.LastPage,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Last Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_LastPage'),
            imageClassName: 'dxrd-image-preview-last',
            imageTemplateName: 'dxrd-svg-preview-last_page',
            disabled: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.pageIndex() < 0 || reportPreview.pageIndex() >= reportPreview.pages().length - 1; })),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: true, keyCode: 39 },
            clickAction: () => {
                if (reportPreview.pageIndex() < reportPreview.pages().length - 1) {
                    reportPreview.goToPage(reportPreview.pages().length - 1);
                }
            }
        });
        this.actions.push({
            id: ActionId.MultipageToggle,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Toggle Multipage Mode', 'ASPxReportsStringId.WebDocumentViewer_ToggleMultipageMode'),
            imageClassName: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.showMultipagePreview() ? 'dxrd-image-preview-single-page' : 'dxrd-image-preview-multipage'; })),
            imageTemplateName: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.showMultipagePreview() ? 'dxrd-svg-preview-single_page' : 'dxrd-svg-preview-multi_page_preview'; })),
            disabled: external_ko_["observable"](false),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => { return reportPreview.previewVisible(); })),
            hotKey: { ctrlKey: true, keyCode: 77 },
            clickAction: () => {
                var zoom = reportPreview._zoom();
                reportPreview.showMultipagePreview(!reportPreview.showMultipagePreview());
                reportPreview.zoom(zoom);
            },
            hasSeparator: true
        });
        this.actions.push({
            id: ActionId.ZoomOut,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Zoom Out', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomOut'),
            imageClassName: 'dxrd-image-zoomout',
            imageTemplateName: 'dxrd-svg-toolbar-zoomout',
            disabled: external_ko_["observable"](false),
            visible: true,
            zoomStep: reportPreview.zoomStep,
            hotKey: { ctrlKey: false, keyCode: 109 },
            clickAction: () => {
                var currentZoom = reportPreview.zoom();
                var zoomLevel = currentZoom > 0 ? currentZoom : reportPreview._zoom();
                reportPreview.zoom(Math.max(zoomLevel - reportPreview.zoomStep(), 0.1));
            },
            hasSeparator: true
        });
        this.actions.push({
            id: ActionId.ZoomSelector,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Zoom to Whole Page', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomToWholePage'),
            imageClassName: 'dxrd-image-zoom',
            disabled: external_ko_["observable"](false),
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 187 },
            clickAction: () => {
                reportPreview.zoom(0);
            },
            templateName: 'dxrd-zoom-autofit-select-template',
            displayExpr: (val) => {
                if (val === ZoomAutoBy.PageWidth) {
                    return Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Page Width', 'DevExpress.XtraReports.UI.XtraReport.PageWidth');
                }
                else if (Math.round(val * 100) === 0) {
                    return Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Whole Page', 'PreviewStringId.MenuItem_ZoomWholePage');
                }
                else {
                    return Math.round((val || reportPreview.zoom.peek()) * 100) + '%';
                }
            },
            onCustomItemCreating: (e) => { e.customItem = Object(external_DevExpress_Analytics_Internal_["parseZoom"])(e.text); },
            zoom: reportPreview.zoom,
            zoomLevels: reportPreview.predefinedZoomLevels,
            zoomItems: this.wrapDisposable(external_ko_["pureComputed"](() => {
                var items = reportPreview.predefinedZoomLevels.slice(0);
                if (reportPreview.showMultipagePreview() === false && items.indexOf(0) === -1) {
                    items.push(ZoomAutoBy.PageWidth);
                    items.push(ZoomAutoBy.WholePage);
                }
                return items;
            }))
        });
        this.actions.push({
            id: ActionId.ZoomIn,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Zoom In', 'DevExpress.XtraPrinting.PrintingSystemCommand.ZoomIn'),
            imageClassName: 'dxrd-image-zoomin',
            imageTemplateName: 'dxrd-svg-toolbar-zoomin',
            disabled: external_ko_["observable"](false),
            visible: true,
            zoomStep: reportPreview.zoomStep,
            hotKey: { ctrlKey: false, keyCode: 107 },
            clickAction: () => {
                var currentZoom = reportPreview.zoom();
                var zoomLevel = currentZoom > 0 ? currentZoom : reportPreview._zoom();
                reportPreview.zoom(Math.min(zoomLevel + reportPreview.zoomStep(), 10));
            }
        });
        this.actions.push({
            id: ActionId.HighlightEditingFields,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Highlight Editing Fields', 'DevExpress.XtraPrinting.PrintingSystemCommand.HighlightEditingFields'),
            imageClassName: 'dxrp-image-hightlight-editing-fields',
            imageTemplateName: 'dxrd-svg-toolbar-hightlightEditingFields',
            disabled: this.wrapDisposable(external_ko_["pureComputed"](() => reportPreview.editingFieldsProvider().length < 1)),
            visible: this.wrapDisposable(external_ko_["pureComputed"](() => {
                var available = EditablePreviewEnabled();
                var viewerVisible = reportPreview.previewVisible();
                return available && viewerVisible;
            })),
            selected: this.wrapDisposable(external_ko_["pureComputed"](() => reportPreview.editingFieldsHighlighted())),
            hotKey: { ctrlKey: true, keyCode: 72 },
            clickAction: () => {
                reportPreview.editingFieldsHighlighted(!reportPreview.editingFieldsHighlighted());
            },
            hasSeparator: true
        });
        this.actions.push({
            id: ActionId.Print,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Print', 'ASPxReportsStringId.DocumentViewer_RibbonPrintGroupText'),
            imageClassName: 'dxrd-image-print',
            imageTemplateName: 'dxrd-svg-preview-print',
            hasSeparator: true,
            disabled: printDisabled,
            visible: true,
            hotKey: { ctrlKey: true, keyCode: 80 },
            clickAction: () => {
                if (printDisabled()) {
                    return;
                }
                reportPreview.printDocument();
            }
        });
        this.actions.push({
            id: ActionId.PrintPage,
            text: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Print Page', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_PrintPage'),
            imageClassName: 'dxrd-image-print-page',
            imageTemplateName: 'dxrd-svg-preview-print_page',
            disabled: printDisabled,
            visible: true,
            clickAction: () => {
                if (printDisabled()) {
                    return;
                }
                reportPreview.printDocument(reportPreview.pageIndex());
            }
        });
    }
    wrapDisposable(object) {
        this._disposables.push(object);
        return object;
    }
    dispose() {
        super.dispose();
        this.removeProperties();
    }
    getActions(context) {
        return this.actions;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_initializer.js





















function createDesktopPreview(bindingSettings) {
    processZoomFactor(bindingSettings.model.accessibilityCompliant);
    var enableKeyboardSupport = !!bindingSettings.model.accessibilityCompliant;
    var callbacks = bindingSettings.callbacks;
    var bindingModel = bindingSettings.model;
    var bindingElement = bindingSettings.element;
    var previewWrapper = new _previewRequestWrapper_PreviewRequestWrapper(null, callbacks), reportPreview = new reportPreview_ReportPreview(bindingModel.handlerUri, previewWrapper, undefined, callbacks, bindingModel.rtl, enableKeyboardSupport, bindingModel.exportSettings, bindingSettings.element), searchModel = new _searchViewModel_SearchViewModel(reportPreview, enableKeyboardSupport);
    var documentMapModel = new _documentMapModel_DocumentMapModel(reportPreview);
    var parametersModel = new previewParametersViewModel_PreviewParametersViewModel(reportPreview, new previewParameterHelper_PreviewParameterHelper(bindingModel.parametersInfo && bindingModel.parametersInfo.knownEnums, bindingSettings.callbacks), enableKeyboardSupport);
    var exportModel = new exportOptionsModel_ExportOptionsModel(reportPreview, enableKeyboardSupport);
    reportPreview.canSwitchToDesigner = !bindingModel.previewVisible;
    reportPreview.allowURLsWithJSContent = bindingModel.allowURLsWithJSContent;
    previewWrapper.initialize(reportPreview, parametersModel, searchModel);
    var tabPanel = new external_DevExpress_Analytics_Utils_["TabPanel"]({
        tabs: [
            parametersModel.tabInfo,
            exportModel.tabInfo,
            searchModel.tabInfo,
            documentMapModel.tabInfo
        ],
        width: 400,
        autoSelectTab: true,
        rtl: bindingModel.rtl
    });
    tabPanel.collapsed(true);
    var fullscreenEnabled = createFullscreenComputed(bindingElement, reportPreview);
    var previewActions = new _actions_PreviewActions(reportPreview);
    var designPreviewActions = new _actions_PreviewDesignerActions(reportPreview, fullscreenEnabled);
    var globalActionProviders = external_ko_["observableArray"]([previewActions, exportModel, searchModel, designPreviewActions]);
    var actionLists = new _actions_ActionLists(reportPreview, globalActionProviders, callbacks && callbacks.customizeActions, reportPreview.previewVisible);
    reportPreview.previewVisible(bindingModel.previewVisible);
    var designerModelOptions = {
        rootStyle: 'dxrd-preview dxd-back-primary-invariant' + (reportPreview.canSwitchToDesigner ? ' dxrd-designer-preview' : ''),
        reportPreview: reportPreview,
        parametersModel: parametersModel,
        exportModel: exportModel,
        searchModel: searchModel,
        documentMapModel: documentMapModel,
        tabPanel: tabPanel,
        actionLists: actionLists,
        rtl: reportPreview.rtlViewer,
        accessibilityCompliant: bindingModel.accessibilityCompliant
    };
    var designerModel = new PreviewModel(designerModelOptions);
    designerModel._addDisposable(previewActions);
    designerModel._addDisposable(designPreviewActions);
    designerModel.parts = [
        { id: PreviewElements.Toolbar, templateName: PreviewElements.Toolbar, model: { actionLists: actionLists, keyboardHelper: new external_DevExpress_Analytics_Internal_["ToolbarKeyboardHelper"](actionLists.toolbarItems), canSwitchToDesigner: reportPreview.canSwitchToDesigner } },
        { id: PreviewElements.Surface, templateName: PreviewElements.Surface, model: designerModel.reportPreview },
        { id: PreviewElements.RightPanel, templateName: PreviewElements.RightPanel, model: designerModel },
        { id: PreviewElements.ExportTool, templateName: PreviewElements.ExportTool, model: designerModel.reportPreview.exportHandler }
    ];
    callbacks && callbacks.customizeParts && callbacks.customizeParts(designerModel.parts);
    var $window = external_jQuery_["fn"].constructor(window);
    var timers = [];
    var updateProgressPosition = getUpdateProgressBarCallback(bindingModel.progressBarSettings, designerModel, reportPreview, bindingElement, $window);
    var updatePreviewContentSize_ = updatePreviewContentSize(reportPreview.previewSize, bindingElement, bindingModel.rtl);
    if (bindingModel.tabPanelSettings) {
        bindingModel.tabPanelSettings.width && tabPanel.width(parseInt(bindingModel.tabPanelSettings.width));
        bindingModel.tabPanelSettings.position && tabPanel.position(bindingModel.tabPanelSettings.position);
    }
    var updateSizesCallback = () => {
        updatePreviewContentSize_ && updatePreviewContentSize_(tabPanel.position());
        updateProgressPosition && updateProgressPosition();
    };
    designerModel.updateSurfaceSize = updateSizesCallback;
    designerModel.resizeCallback = updateSizesCallback;
    window.addEventListener('resize', designerModel.resizeCallback);
    designerModel._addDisposable(fullscreenEnabled);
    designerModel._addDisposable(fullscreenEnabled.subscribe(designerModel.resizeCallback));
    designerModel._addDisposable(tabPanel.width.subscribe(() => {
        timers.push(setTimeout(() => updatePreviewContentSize_(tabPanel.position()), 1));
    }));
    designerModel._addDisposable(tabPanel.position.subscribe((newVal) => {
        updatePreviewContentSize_(newVal);
    }));
    designerModel._addDisposable(tabPanel.isEmpty.subscribe(() => {
        timers.push(setTimeout(() => {
            updatePreviewContentSize_(tabPanel.position());
        }, 1));
    }));
    updateSizesCallback();
    designerModel._addDisposable({
        dispose: () => {
            window.removeEventListener('resize', designerModel.resizeCallback);
            designerModel.updateSurfaceSize = null;
            designerModel.resizeCallback = null;
            timers.forEach(x => clearTimeout(x));
            updatePreviewContentSize_ = null;
            updateProgressPosition = null;
        }
    });
    Object(external_DevExpress_Analytics_Internal_["appendStaticContextToRootViewModel"])(designerModel, {
        _static: Object.assign(Object.assign({}, external_DevExpress_Analytics_Internal_["staticContext"]._static), { formatSearchResult: formatSearchResult })
    }, 'dx-report-viewer');
    if (bindingElement && !reportPreview.canSwitchToDesigner && bindingSettings.applyBindings) {
        callbacks.beforeRender && callbacks.beforeRender(designerModel);
        external_jQuery_["fn"].constructor(bindingElement).children().remove();
        external_ko_["applyBindings"](designerModel, bindingElement);
    }
    return designerModel;
}
function _createPreview(bindingSettings) {
    var bindingModel = bindingSettings.model;
    bindingModel.previewVisible = bindingModel.previewVisible !== undefined ? bindingModel.previewVisible : true;
    bindingModel.allowURLsWithJSContent = bindingModel.allowURLsWithJSContent !== undefined ? bindingModel.allowURLsWithJSContent : false;
    bindingModel.accessibilityCompliant = bindingModel.accessibilityCompliant !== undefined ? bindingModel.accessibilityCompliant : false;
    bindingSettings.applyBindings = bindingSettings.applyBindings !== undefined ? bindingSettings.applyBindings : true;
    const disposableCallback = bindingSettings.callbacks && bindingSettings.callbacks.onServerError && Object(external_DevExpress_Analytics_Internal_["processErrorEvent"])(bindingSettings.callbacks.onServerError);
    external_DevExpress_config_default()({ rtlEnabled: !!bindingModel.rtl });
    if (bindingModel.remoteSettings && (bindingModel.remoteSettings.authToken || bindingModel.remoteSettings.serverUri)) {
        AsyncExportApproach(true);
        bindingModel.handlerUri = external_DevExpress_Analytics_Internal_["RequestHelper"].generateUri(bindingModel.remoteSettings.serverUri, ReportServerInvokeUri);
        SearchAvailable(false);
        EditablePreviewEnabled(false);
        ReportServerDownloadUri(external_DevExpress_Analytics_Internal_["RequestHelper"].generateUri(bindingModel.remoteSettings.serverUri, ReportServerExportUri));
        if (bindingModel.remoteSettings.authToken) {
            external_DevExpress_Analytics_Utils_["ajaxSetup"].ajaxSettings = {
                headers: {
                    'Authorization': 'Bearer ' + bindingModel.remoteSettings.authToken
                }
            };
        }
    }
    var designerModel;
    if (bindingModel.isMobile) {
        designerModel = createMobilePreview(bindingSettings);
    }
    else {
        designerModel = createDesktopPreview(bindingSettings);
    }
    if (disposableCallback) {
        designerModel._addDisposable(disposableCallback);
    }
    return designerModel;
}
function createPreview(bindingSettings) {
    if (bindingSettings.model && bindingSettings.model.localization) {
        Object(external_DevExpress_Analytics_Utils_["addCultureInfo"])({
            messages: bindingSettings.model.localization
        });
    }
    var localizationCallbacks = [];
    bindingSettings.callbacks && bindingSettings.callbacks.customizeLocalization && bindingSettings.callbacks.customizeLocalization(localizationCallbacks);
    return Object(external_DevExpress_Analytics_Internal_["resolveFromPromises"])(localizationCallbacks, () => {
        return _createPreview(bindingSettings);
    });
}
function createAndInitPreviewModel(viewerModel, element, callbacks, applyBindings) {
    return createPreviewModel(viewerModel, element, callbacks, applyBindings).done((previewModel) => {
        initPreviewModel(previewModel, viewerModel);
    });
}
function createPreviewModel(viewerModel, element, callbacks, applyBindings) {
    Object(external_DevExpress_Analytics_Internal_["initGlobalize"])(viewerModel);
    return createPreview({ model: viewerModel, element: element, callbacks: callbacks, applyBindings: applyBindings }).done(() => {
        external_jQuery_["extend"](true, cultureInfo, viewerModel.cultureInfoList);
    });
}
function initPreviewModel(previewModel, viewerModel) {
    if (viewerModel.reportId || viewerModel.documentId) {
        previewModel.reportPreview.initialize(external_jQuery_["Deferred"]().resolve(viewerModel).promise());
    }
    else {
        var unwrappedUrl = external_ko_["unwrap"](viewerModel.reportUrl);
        if (unwrappedUrl) {
            previewModel.OpenReport(unwrappedUrl);
        }
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/binding/jsReportViewerBinding.js








class jsReportViewerBinding_JSReportViewerBinding extends external_DevExpress_Analytics_Internal_["JSDesignerBindingCommon"] {
    constructor(_options, customEventRaiser) {
        super(_options, customEventRaiser);
        this._deferreds = [];
        _options.viewerModel = Object(external_DevExpress_Analytics_Internal_["_wrapModelInObservable"])(_options.viewerModel);
        this.sender = new jsReportViewer_JSReportViewer(_options.viewerModel);
        this._closeReportOnDisposing = !_options.keepReportOnComponentDisposal;
        _options.callbacks && _options.callbacks._eventSenderCreated && _options.callbacks._eventSenderCreated(this.sender);
    }
    dispose() {
        if (this._closeReportOnDisposing && this.sender && this.sender.Close)
            this.sender.Close();
        (this._deferreds || []).forEach((deferred) => {
            deferred.reject();
        });
        super.dispose();
    }
    _initializeCallbacks() {
        if (this._options.callbacks) {
            var previewEvents = eventGenerator_EventGenerator.generatePreviewEvents((eventName, args) => {
                this._fireEvent(eventName, args);
            });
            this._checkCallbackName(previewEvents);
            var availablePreviewEvents = this._generateCallbackDictionary(previewEvents);
            return availablePreviewEvents;
        }
    }
    _applyBindings(model, _$element) {
        this._disposables.push(model);
        _$element.children().remove();
        var child = _$element.append(this._templateHtml).children()[0];
        if (!child)
            return;
        external_ko_["cleanNode"](child);
        this._callbacks && this._callbacks.beforeRender && this._callbacks.beforeRender(model);
        external_ko_["applyBindings"](model, child);
        this._fireEvent('Init');
    }
    _createModel(element) {
        this._callbacks = this._initializeCallbacks();
        return createPreviewModel(this._options, element, this._callbacks, false);
    }
    applyBindings(element) {
        var _$element = external_jQuery_["fn"].constructor(element);
        _$element.addClass('dx-designer');
        if (this._options.reportPreview && this._options.parts) {
            this._applyBindings(this._options, _$element);
            return;
        }
        var requestOptions = this._options.requestOptions;
        var applyModel = () => {
            if (requestOptions && requestOptions.invokeAction) {
                this._options.handlerUri = this._getServerActionUrl(requestOptions.host, requestOptions.invokeAction);
            }
            this._deferreds.push(this._createModel(element)
                .done((previewModel) => {
                this.sender.previewModel = previewModel;
                if (this._options.reportUrl) {
                    if (external_ko_["isSubscribable"](this._options.reportUrl)) {
                        this._disposables.push(this._options.reportUrl.subscribe((newVal) => {
                            this.sender.OpenReport(newVal);
                        }));
                    }
                }
                this._createDisposeFunction(element);
                this._applyBindings(this.sender.previewModel, _$element);
                initPreviewModel(previewModel, this._options);
            }));
        };
        if (requestOptions) {
            this._getLocalizationRequest().done((localization) => {
                localization && Object(external_DevExpress_Analytics_Utils_["addCultureInfo"])(localization);
            }).always(() => {
                applyModel();
            });
        }
        else {
            applyModel();
        }
    }
}
const dxReportViewerBindingName = 'dxReportViewer';
class jsReportViewerBinding_DxReportViewer extends external_DevExpress_Analytics_Internal_["DxAnalyticsComponentCommon"] {
    getBindingName() {
        return dxReportViewerBindingName;
    }
}
Object(external_DevExpress_Analytics_Widgets_Internal_["registerBaseBinding"])(dxReportViewerBindingName, '$data');
external_ko_["bindingHandlers"][dxReportViewerBindingName] = {
    init: function (element, valueAccessor) {
        new jsReportViewerBinding_JSReportViewerBinding(external_ko_["unwrap"](valueAccessor()) || {}).applyBindings(element);
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/accessibility/_dateRangeKeyboardHelper.js

class _dateRangeKeyboardHelper_DateRangeDialogElementsKeyboardHelper extends external_DevExpress_Analytics_Internal_["AccessibilityKeyboardHelperBase"] {
    constructor(_hide, _visible) {
        super();
        this._hide = _hide;
        this._visible = _visible;
        this.controlElementClassName = 'dx-accessibility-daterange-item';
        this.predefinedDateRangesKeyboardHelper = new _dateRangeKeyboardHelper_PredefinedDateRangesKeyboardHelper(this);
        this._disposables.push(this.predefinedDateRangesKeyboardHelper, this._visible.subscribe(newVal => {
            var timeout = setTimeout(() => { newVal && this.predefinedDateRangesKeyboardHelper.focus(); }, 300);
            this._disposables.push({ dispose: () => clearTimeout(timeout) });
        }));
    }
    createControlElement(element, index) {
        return new external_DevExpress_Analytics_Internal_["ControlElementWithParentHighlight"](element, this.getContainer().getElementsByClassName('dxrv-daterange-editor-item')[index]);
    }
    itemHandleEscKey(e, index) {
        this._hide();
        return true;
    }
    itemHandleUpArrowKey(e, index) {
        if (!!(e && e.altKey)) {
            this._hide();
            return true;
        }
        return super.itemHandleUpArrowKey(e, index);
    }
    itemHandleTabKey(e, index) {
        var nextIndex = this.setFocusToNext(index);
        if (nextIndex == 0) {
            this.predefinedDateRangesKeyboardHelper.focus();
        }
        return true;
    }
    itemHandleShiftTabKey(e, index) {
        var nextIndex = this.setFocusToPrevious(index);
        if (nextIndex == 0) {
            this.predefinedDateRangesKeyboardHelper.focus();
        }
        return true;
    }
}
class _dateRangeKeyboardHelper_PredefinedDateRangesKeyboardHelper extends external_DevExpress_Analytics_Internal_["ListKeyboardHelper"] {
    constructor(owner) {
        super();
        this.owner = owner;
    }
    itemHandleEscKey(e, index) {
        this.owner.itemHandleEscKey.call(this.owner, e, 0);
        return true;
    }
    itemHandleTabKey(e, index) {
        this.owner.setFocusToNext(0);
        return true;
    }
    itemHandleShiftTabKey(e, index) {
        this.owner.setFocusToPrevious(0);
        return true;
    }
    itemHandleUpArrowKey(e, index) {
        if (!!(e && e.altKey)) {
            return this.owner.itemHandleUpArrowKey.call(this.owner, e);
        }
        return super.itemHandleUpArrowKey(e, index);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer.js



















// CONCATENATED MODULE: ./node_modules/devexpress-reporting/dx-reporting-svg-bindings.js

Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_field_to_column_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_column_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_field_to_data_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_data_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_field_to_filter_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_filter_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_field_to_row_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_field_to_row_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_group\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_group'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_parameter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_parameter'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-add_separator\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-add_separator'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_bottoms\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_bottoms'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_centers\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_centers'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_lefts\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_lefts'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_middles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_middles'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_rights\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_rights'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_tops\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_tops'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-align_to_grid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-align_to_grid'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-apply_localization_service\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-apply_localization_service'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-bottom_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-bottom_margin'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-bring_to_front\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-bring_to_front'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-center_horizontally\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-center_horizontally'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-center_vertically\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-center_vertically'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-convert\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-convert'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-convertation\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-convertation'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-decrease_horizontal_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-decrease_horizontal_spacing'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-decrease_vertical_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-decrease_vertical_spacing'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-delete_cell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-delete_cell'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-delete_column\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-delete_column'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-delete_row\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-delete_row'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-detail'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-detail_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-detail_report'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-distribute_columns_evenly\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-distribute_columns_evenly'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-distribute_rows_evenly\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-distribute_rows_evenly'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-fit_bounds_to_text\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-fit_bounds_to_text'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-fit_text_to_bounds\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-fit_text_to_bounds'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-fit_to_container\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-fit_to_container'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-group_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-group_footer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-group_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-group_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-increase_horizontal_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-increase_horizontal_spacing'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-increase_vertical_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-increase_vertical_spacing'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-insert_cell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_cell'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-insert_column_to_left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_column_to_left'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-insert_column_to_right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_column_to_right'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-insert_row_above\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_row_above'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-insert_row_below\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-insert_row_below'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-make_horizontal_spacing_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_horizontal_spacing_equal'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-make_same_height\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_same_height'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-make_same_sizes\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_same_sizes'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-make_same_width\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_same_width'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-make_vertical_spacing_equal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-make_vertical_spacing_equal'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-master_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-master_report'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-none\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-none'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-page_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-page_footer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-page_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-page_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-remove_horizontal_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-remove_horizontal_spacing'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-remove_vertical_spacing\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-remove_vertical_spacing'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-report_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-report_footer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-report_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-report_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-reset\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-reset'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-send_to_back\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-send_to_back'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-size_to_grid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-size_to_grid'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-subband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-subband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-top_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-top_margin'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-ungroup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-ungroup'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-vertical_detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-vertical_detail'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-vertical_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-vertical_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-actions-vertical_total\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-actions-vertical_total'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-bottom_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-bottom_margin'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-detail'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-detail_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-detail_report'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-group_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-group_footer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-group_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-group_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-master_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-master_report'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-page_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-page_footer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-page_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-page_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-report_footer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-report_footer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-report_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-report_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-sub_band\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-sub_band'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-top_margin\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-top_margin'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-vertical_detail\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-vertical_detail'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-vertical_header\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-vertical_header'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-bands-vertical_total\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-bands-vertical_total'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-axes\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-axes'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-axisx\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-axisx'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-axisy\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-axisy'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-chart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-chart'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-constantline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-constantline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-constantlines\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-constantlines'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-defaultpane\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-defaultpane'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-diagram\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-diagram'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-legend\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-legend'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-panes\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-panes'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-series\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-series'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-seriescollection\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-seriescollection'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-title\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-title'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-chartstructure-titles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-chartstructure-titles'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Heart_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Heart_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Heart_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Heart_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-RadioButton_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-RadioButton_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-RadioButton_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-RadioButton_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Smiley_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Smiley_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Smiley_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Smiley_Indeterminate'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Smiley_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Smiley_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-StandardBox1_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox1_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-StandardBox2_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox2_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Star_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Star_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Star_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Star_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Thumb_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Thumb_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Thumb_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Thumb_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Toggle_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Toggle_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-Toggle_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-Toggle_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNoBox_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoBox_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNo_Checked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNo_Checked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-checkboxglyphs-YesNo_Unchecked\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-checkboxglyphs-YesNo_Unchecked'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-color_gear\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-color_gear'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-errorPanel-collectErrors\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-collectErrors'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-errorPanel-error\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-error'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-errorPanel-information\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-information'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-errorPanel-notification\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-notification'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-errorPanel-notification_empty\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-notification_empty'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-errorPanel-warning\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-errorPanel-warning'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-bottommarginband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-bottommarginband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-calcbool\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcbool'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-calcdate\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcdate'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-calcdefault\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcdefault'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-calcfloat\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcfloat'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-calcinteger\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcinteger'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-calcstring\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-calcstring'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-component\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-component'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-components\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-components'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-detailband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-detailband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-detailreportband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-detailreportband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-formattingrule\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-formattingrule'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-formattingrules\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-formattingrules'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-groupfooterband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-groupfooterband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-groupheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-groupheaderband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-master_report\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-master_report'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-pagefooterband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-pagefooterband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-pageheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-pageheaderband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-parametergroup\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-parametergroup'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-parameterseparator\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-parameterseparator'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-reportfooterband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-reportfooterband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-reportheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-reportheaderband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-stylemodel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-stylemodel'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-styles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-styles'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-subband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-subband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-topmarginband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-topmarginband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-verticaldetailband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-verticaldetailband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-verticalheaderband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-verticalheaderband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-verticaltotalband\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-verticaltotalband'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrbarcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrbarcode'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrcharactercomb\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcharactercomb'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrchart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrchart'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrcheckbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcheckbox'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrcrossbandbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcrossbandbox'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrcrossbandline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcrossbandline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrcrosstab\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrcrosstab'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrgauge\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrgauge'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrlabel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrlabel'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpagebreak\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpagebreak'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpageinfo\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpageinfo'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpanel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpanel'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpdfcontent\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpdfcontent'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpdfsignature\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpdfsignature'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpicturebox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpicturebox'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrpivotgrid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrpivotgrid'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrrichtext\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrrichtext'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrshape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrshape'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrsparkline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrsparkline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrsubreport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrsubreport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrtable\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtable'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrtablecell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtablecell'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrtableofcontents\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtableofcontents'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrtablerow\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrtablerow'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-fieldlist-xrzipcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-fieldlist-xrzipcode'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-landscape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-landscape'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-add_datasource\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-add_datasource'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-back\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-back'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-exit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-exit'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-localization\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-localization'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-newreport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-newreport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-new_via_wizard\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-new_via_wizard'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-menu-run_wizard\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-menu-run_wizard'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-multi_select\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-multi_select'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-none\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-none'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_bottomcenter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_bottomcenter'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_bottomleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_bottomleft'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_bottomright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_bottomright'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_middlecenter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_middlecenter'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_middleleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_middleleft'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_middleright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_middleright'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_topcenter\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_topcenter'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_topleft\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_topleft'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-alignment_topright\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-alignment_topright'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-image_gallery\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-image_gallery'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-size_mode_cover\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_cover'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-size_mode_normal\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_normal'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-size_mode_squeeze\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_squeeze'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-size_mode_stretchimage\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_stretchimage'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-size_mode_zoomimage\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-size_mode_zoomimage'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-toolbar_brush_options\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_brush_options'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-toolbar_clear\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_clear'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-toolbar_open\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_open'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-toolbar_reset\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_reset'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-portrait\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-portrait'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-csv\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-csv'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-html\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-html'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-image\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-image'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-mht\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-mht'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-pdf\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-pdf'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-rtf\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-rtf'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-txt\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-txt'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-xls\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-xls'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to-xlsx\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to-xlsx'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-export-to\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-export-to'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-export-Export\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-export-Export'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-first_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-first_page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-last_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-last_page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-multi_page_preview\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-multi_page_preview'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-next_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-next_page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-previous_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-previous_page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-print\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-print'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-print_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-print_page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-print_preview\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-print_preview'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-report_designer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-report_designer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-search\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-search'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-single_page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-single_page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-sort_asc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-sort_asc'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-preview-sort_desc\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-preview-sort_desc'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-component\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-component'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-components\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-components'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-formatting_rule\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-formatting_rule'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-formatting_rules\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-formatting_rules'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-style\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-style'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-styles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-styles'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-tablecell\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-tablecell'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-reportexplorer-tablerow\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-reportexplorer-tablerow'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-bubbles\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-bubbles'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-candle_stick\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-candle_stick'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-doughnut\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-doughnut'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-doughnut3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-doughnut3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_bar3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_line3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_spline_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_spline_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-full_stacked_spline_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-full_stacked_spline_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-funnel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-funnel'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-funnel3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-funnel3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-gantt\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-gantt'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-line3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-manhattan_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-manhattan_bar3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-nested_doughnut\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-nested_doughnut'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-pie\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-pie'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-pie3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-pie3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-point\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-point'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-polar_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-polar_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-polar_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-polar_line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-polar_point\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-polar_point'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-radar_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-radar_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-radar_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-radar_line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-radar_point\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-radar_point'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-range_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-range_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-range_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-range_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-range_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-range_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-scatter_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-scatter_line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_bar3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_full_stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_full_stacked_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_full_stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_full_stacked_bar3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_gantt\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_gantt'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_range_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_range_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_stacked_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-side_by_side_stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-side_by_side_stacked_bar3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-spline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-spline3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-spline_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-spline_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-spline_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_bar3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_bar3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_line3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_spline_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_spline_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stacked_spline_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stacked_spline_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-step_area\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_area'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-step_area3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_area3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-step_line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-step_line3d\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-step_line3d'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-stock\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-stock'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-swift_plot\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-swift_plot'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-series-waterfall\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-series-waterfall'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-collapse\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-collapse'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-expand\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-expand'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-expressions\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-expressions'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-fieldlist\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-fieldlist'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-parameters\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-parameters'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-reportexplorer\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-reportexplorer'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-tabs-search\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-tabs-search'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-bottom_center\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-bottom_center'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-bottom_left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-bottom_left'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-bottom_right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-bottom_right'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-left_bottom_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-left_bottom_vertical'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-left_center_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-left_center_vertical'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-left_top_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-left_top_vertical'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-right_bottom_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-right_bottom_vertical'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-right_center_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-right_center_vertical'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-right_top_vertical\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-right_top_vertical'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-top_center\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-top_center'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-top_left\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-top_left'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-titles-top_right\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-titles-top_right'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-todo-chart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-chart'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-todo-pdfcontent\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pdfcontent'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-todo-pdfsignature\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pdfsignature'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-todo-pivotgrid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-pivotgrid'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-todo-sparkline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-todo-sparkline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbar-fullscreen-exit\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-fullscreen-exit'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbar-fullscreen\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-fullscreen'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbar-hightlightEditingFields\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-hightlightEditingFields'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbar-scripts\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-scripts'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbar-validateBindingMode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbar-validateBindingMode'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-barcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-barcode'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-charactercomb\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-charactercomb'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-chart\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-chart'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-checkbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-checkbox'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-crossbandbox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-crossbandbox'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-crossbandline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-crossbandline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-crosstab\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-crosstab'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-gauge\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-gauge'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-label\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-label'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-line\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-line'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-pagebreak\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pagebreak'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-pageinfo\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pageinfo'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-panel\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-panel'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-pdfcontent\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pdfcontent'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-pdfsignature\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pdfsignature'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-picturebox\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-picturebox'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-pivotgrid\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-pivotgrid'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-richtext\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-richtext'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-shape\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-shape'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-sparkline\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-sparkline'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-subreport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-subreport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-table\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-table'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-tableofcontents\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-tableofcontents'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-toolbox-zipcode\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-toolbox-zipcode'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-crosstab-columns\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-columns'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-crosstab-data\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-data'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-crosstab-fields\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-fields'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-crosstab-rows\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-crosstab-rows'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-CrossTabReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-CrossTabReport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-EmptyReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-EmptyReport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-LabelReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-LabelReport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-StandardReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-StandardReport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-UndefinedReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-UndefinedReport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-VerticalReport\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-VerticalReport'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-svg-wizard-warning\'', function ($context, $element) { return { 'template': function () { return 'dxrd-svg-wizard-warning'; } }; });

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/dx-reporting-svg-templates.js

external_DevExpress_Analytics_Widgets_Internal_["SvgTemplatesEngine"].addTemplates({
    'dxrd-svg-actions-add_field_to_column_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_2_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm0-6h4V0h-4v4zM6 16h4v-4H6v4zm0-6h4V6H6v4zm0-6h4V0H6v4z"/></g><path class="dxd-icon-fill" d="M0 0h4v16H0z"/></svg>',
    'dxrd-svg-actions-add_field_to_data_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_1_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M9 0C5.1 0 2 1.5 2 3.5v10C2 15.4 5.1 17 9 17s7-1.6 7-3.5v-10c0-2-3.1-3.5-7-3.5zm0 2c2.9 0 4.4 1.1 4.5 1.5C13.4 3.8 11.9 5 9 5S4.6 3.8 4.5 3.4C4.6 3.1 6.1 2 9 2z"/></svg>',
    'dxrd-svg-actions-add_field_to_filter_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="Parameters" class="dxd-icon-fill" d="M.2 3.2L7 10v9c0 .6.4 1 1 1h4c.6 0 1-.4 1-1v-9l6.8-6.8c.4-.4.1-1.2-.5-1.2H.7c-.6 0-.9.8-.5 1.2zm10.8 6V18H9V9.2L3.8 4h12.3L11 9.2z"/><path id="ZoomIn" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/></svg>',
    'dxrd-svg-actions-add_field_to_row_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_3_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M0 0h16v4H0z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm-6 6h4v-4H6v4zm0-6h4V6H6v4zm-6 6h4v-4H0v4zm0-6h4V6H0v4z"/></g></svg>',
    'dxrd-svg-actions-add_group': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M15.5 11H13V8.5c0-.3-.2-.5-.5-.5h-1c-.3 0-.5.2-.5.5V11H8.5c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5H11v2.5c0 .3.2.5.5.5h1c.3 0 .5-.2.5-.5V13h2.5c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5z"/><path class="dxd-icon-fill" d="M4 4h5.5c.3 0 .5.2.5.5v5c0 .3-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5V4zm-1-.5c0-.3.2-.5.5-.5H7V1.5c0-.3-.2-.5-.5-.5h-5c-.3 0-.5.2-.5.5v5c0 .3.2.5.5.5H3V3.5z"/></svg>',
    'dxrd-svg-actions-add_parameter': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9.5 10h-7c-.3 0-.5-.2-.5-.5v-7c0-.3.2-.5.5-.5h7c.3 0 .5.2.5.5v7c0 .3-.2.5-.5.5z"/><path class="dxd-icon-fill" d="M15.5 11H13V8.5c0-.3-.2-.5-.5-.5h-1c-.3 0-.5.2-.5.5V11H8.5c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5H11v2.5c0 .3.2.5.5.5h1c.3 0 .5-.2.5-.5V13h2.5c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-actions-add_separator': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M15.5 11H13V8.5c0-.3-.2-.5-.5-.5h-1c-.3 0-.5.2-.5.5V11H8.5c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5H11v2.5c0 .3.2.5.5.5h1c.3 0 .5-.2.5-.5V13h2.5c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5zM12.5 7h-11c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h11c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-actions-align_bottoms': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18H6c-.6 0-1-.5-1-1V3c0-.5.4-1 1-1h4c.6 0 1 .5 1 1v14c0 .5-.4 1-1 1zM18 18h-4c-.6 0-1-.5-1-1v-6c0-.6.4-1 1-1h4c.5 0 1 .4 1 1v6c0 .5-.5 1-1 1zM2 20h20v2H2z"/></svg>',
    'dxrd-svg-actions-align_centers': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 11H9c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h6c.6 0 1 .4 1 1v4c0 .6-.4 1-1 1zM19 19H5c-.6 0-1-.5-1-1v-4c0-.6.4-1 1-1h14c.5 0 1 .4 1 1v4c0 .5-.5 1-1 1z"/><path class="dxd-icon-fill" d="M11 2h2v20h-2z"/></svg>',
    'dxrd-svg-actions-align_lefts': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h2v20H2zM13 11H7c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h6c.6 0 1 .4 1 1v4c0 .6-.4 1-1 1zM21 19H7c-.6 0-1-.5-1-1v-4c0-.6.4-1 1-1h14c.5 0 1 .4 1 1v4c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-align_middles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 11h20v2H2z"/><path class="dxd-icon-fill" d="M18 20h-4c-.6 0-1-.5-1-1V5c0-.6.4-1 1-1h4c.5 0 1 .4 1 1v14c0 .5-.5 1-1 1zM10 16H6c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1h4c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1z"/></svg>',
    'dxrd-svg-actions-align_rights': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2h2v20h-2zM17 11h-6c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h6c.5 0 1 .4 1 1v4c0 .6-.5 1-1 1zM17 19H3c-.5 0-1-.5-1-1v-4c0-.6.5-1 1-1h14c.5 0 1 .4 1 1v4c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-align_tops': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 22H6c-.6 0-1-.5-1-1V7c0-.6.4-1 1-1h4c.6 0 1 .4 1 1v14c0 .5-.4 1-1 1zM18 14h-4c-.6 0-1-.4-1-1V7c0-.6.4-1 1-1h4c.5 0 1 .4 1 1v6c0 .6-.5 1-1 1zM2 2h20v2H2z"/></svg>',
    'dxrd-svg-actions-align_to_grid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 8V6h-5V1h-2v5H8V1H6v5H1v2h5v8H1v2h5v5h2v-5h8v5h2v-5h5v-2h-5V8h5zm-7 8H8v-2h6V8h2v8z"/></svg>',
    'dxrd-svg-actions-apply_localization_service': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6h-9V3c0-.6-.4-1-1-1s-1 .4-1 1v3H2c-.6 0-1 .4-1 1s.4 1 1 1h12c0 2.3-.7 4.5-2 6.3-.7-1.1-1.3-2.3-1.6-3.5-.2-.5-.5-.8-1-.8-.6 0-1.1.6-.9 1.2.4 1.7 1.2 3.3 2.3 4.6C8.7 17.8 6 19 3 19c-.6 0-1 .4-1 1s.4 1 1 1c3.5 0 6.7-1.4 9-3.6 2.3 2.3 5.5 3.6 9 3.6.6 0 1-.4 1-1s-.4-1-1-1c-3 0-5.7-1.2-7.7-3.1C15 13.7 16 11 16 8h6c.6 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-actions-bottom_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M21 16V3c0-.5-.5-1-1-1H4c-.5 0-1 .5-1 1v13h18z"/></g><path class="dxd-icon-fill" d="M3 18v3c0 .5.5 1 1 1h16c.5 0 1-.5 1-1v-3H3z"/></svg>',
    'dxrd-svg-actions-bring_to_front': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 8h-5V3c0-.5-.5-1-1-1H3c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h5v5c0 .5.5 1 1 1h12c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-1 12H10v-4h5c.5 0 1-.5 1-1v-5h4v10z"/></svg>',
    'dxrd-svg-actions-center_horizontally': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 22H2V2h2v20zM22 2h-2v20h2V2zm-7 16V6c0-.6-.4-1-1-1h-4c-.6 0-1 .4-1 1v12c0 .5.4 1 1 1h4c.6 0 1-.5 1-1z"/></svg>',
    'dxrd-svg-actions-center_vertically': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 20h20v2H2v-2zM2 2v2h20V2H2zm16 7H6c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h12c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-convert': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 10l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4l2.3-2.3H11c-.6 0-1-.4-1-1s.4-1 1-1h8.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L23 10zM1 14l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L4.8 15H13c.6 0 1-.4 1-1s-.4-1-1-1H4.8l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L1 14z"/></svg>',
    'dxrd-svg-actions-convertation': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 10l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4l2.3-2.3H11c-.6 0-1-.4-1-1s.4-1 1-1h8.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L23 10zM1 14l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L4.8 15H13c.6 0 1-.4 1-1s-.4-1-1-1H4.8l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L1 14z"/></svg>',
    'dxrd-svg-actions-decrease_horizontal_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L6.2 19H1c-.6 0-1-.4-1-1s.4-1 1-1h5.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L10 18zm4 0l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L17.8 19H23c.6 0 1-.4 1-1s-.4-1-1-1h-5.2l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L14 18zm1-11V5h-2v2h2zm-4 0V5H9v2h2zm6-5v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1h-4c-.5 0-1 .5-1 1zM1 2v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1z"/></svg>',
    'dxrd-svg-actions-decrease_vertical_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 10l4.7-4.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L19 6.2V1c0-.6-.4-1-1-1s-1 .4-1 1v5.2l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4L18 10zm0 4l4.7 4.7c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L19 17.8V23c0 .6-.4 1-1 1s-1-.4-1-1v-5.2l-2.3 2.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L18 14zM5 13h2v2H5v-2zm0-4h2v2H5V9zm6 9v4c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1v-4c0-.6.5-1 1-1h8c.5 0 1 .5 1 1zm0-16v4c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1V2c0-.6.5-1 1-1h8c.5 0 1 .5 1 1z"/></svg>',
    'dxrd-svg-actions-delete_cell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 8h4v4H8z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M14 12h4V8h-4v4zm0-6h4V2h-4v4zM8 18h4v-4H8v4zM8 6h4V2H8v4zM2 18h4v-4H2v4zm0-6h4V8H2v4zm0-6h4V2H2v4z"/></g><path class="dxd-icon-fill" d="M19.4 18l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L18 16.6l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.3-2.3 2.3 2.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L19.4 18z"/></svg>',
    'dxrd-svg-actions-delete_column': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M14 12h4V8h-4v4zm0-6h4V2h-4v4zM8 18h4v-4H8v4zm0-6h4V8H8v4zm0-6h4V2H8v4z"/></g><path class="dxd-icon-fill" d="M2 2h4v16H2zM19.4 18l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L18 16.6l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.3-2.3 2.3 2.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L19.4 18z"/></svg>',
    'dxrd-svg-actions-delete_row': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8 14h4v4H8v-4zm0-2h4V8H8v4zm0-6h4V2H8v4zM2 18h4v-4H2v4zm0-6h4V8H2v4zm0-6h4V2H2v4z"/></g><path class="dxd-icon-fill" d="M19.4 18l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L18 16.6l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l2.3-2.3 2.3 2.3c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L19.4 18zM14 2h4v10h-4z"/></svg>',
    'dxrd-svg-actions-detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2H4c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h16c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H5V4h14v16zM16 9H8V7h8v2zm0 4H8v-2h8v2zm0 4H8v-2h8v2z"/></svg>',
    'dxrd-svg-actions-detail_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v3h8V2h-2zm2 6H8v2h8V8zm0 6H8v-2h8v2zm0 4H8v-2h8v2z"/></svg>',
    'dxrd-svg-actions-distribute_columns_evenly': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 22H2c-.5 0-1-.5-1-1v-8c0-.6.5-1 1-1h8c.6 0 1 .4 1 1v8c0 .5-.4 1-1 1zm13-1v-8c0-.6-.5-1-1-1h-8c-.6 0-1 .4-1 1v8c0 .5.4 1 1 1h8c.5 0 1-.5 1-1zM21 2v3h-8V2h-2v3H3V2H1v8h2V7h8v3h2V7h8v3h2V2h-2z"/></svg>',
    'dxrd-svg-actions-distribute_rows_evenly': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 14v8c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-8c0-.5.5-1 1-1h8c.5 0 1 .5 1 1zM11 1H3c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm11 2V1h-8v2h3v8h-3v2h3v8h-3v2h8v-2h-3v-8h3v-2h-3V3h3z"/></svg>',
    'dxrd-svg-actions-fit_bounds_to_text': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3V1c0-.6-.4-1-1-1s-1 .4-1 1v4h4c.6 0 1-.4 1-1s-.4-1-1-1h-2zM3 3H1c-.6 0-1 .4-1 1s.4 1 1 1h4V1c0-.6-.4-1-1-1S3 .4 3 1v2zM21 21v2c0 .6-.4 1-1 1s-1-.4-1-1v-4h4c.6 0 1 .4 1 1s-.4 1-1 1h-2zM3 21H1c-.6 0-1-.4-1-1s.4-1 1-1h4v4c0 .6-.4 1-1 1s-1-.4-1-1v-2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 15h2v2H3v-2zm4 6h2v-2H7v2zm4 0h2v-2h-2v2zm4 0h2v-2h-2v2zM3 13h2v-2H3v2zm0-4h2V7H3v2zm4-4h2V3H7v2zm4 0h2V3h-2v2zm4 0h2V3h-2v2zm4 12h2v-2h-2v2zm0-4h2v-2h-2v2zm0-4h2V7h-2v2z"/></g><path class="dxd-icon-fill" d="M16.7 14.5h-.6l-2.9-7.3c0-.1-.2-.2-.3-.2H11c-.1 0-.2.1-.3.2l-2.9 7.3h-.5c-.2 0-.3.1-.3.3v.9c0 .2.1.3.3.3h3.4c.2 0 .3-.1.3-.3v-.9c0-.2-.1-.3-.3-.3H10l.4-1h3.2l.4 1h-.7c-.2 0-.3.1-.3.3v.9c0 .2.1.3.3.3h3.4c.2 0 .3-.1.3-.3v-.9c0-.2-.1-.3-.3-.3zM11 12l1-3.1 1 3.1h-2z"/></svg>',
    'dxrd-svg-actions-fit_text_to_bounds': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 22v-2c0-.6-.4-1-1-1s-1 .4-1 1v4h4c.6 0 1-.4 1-1s-.4-1-1-1H2zM22 22h-2c-.6 0-1 .4-1 1s.4 1 1 1h4v-4c0-.6-.4-1-1-1s-1 .4-1 1v2zM2 2v2c0 .6-.4 1-1 1s-1-.4-1-1V0h4c.6 0 1 .4 1 1s-.4 1-1 1H2zM22 2h-2c-.6 0-1-.4-1-1s.4-1 1-1h4v4c0 .6-.4 1-1 1s-1-.4-1-1V2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 11h2v2H0v-2zm0-2h2V7H0v2zm11-7h2V0h-2v2zM7 2h2V0H7v2zm8 0h2V0h-2v2zm-4 22h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zM0 17h2v-2H0v2zm22-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8h2v-2h-2v2z"/></g><path class="dxd-icon-fill" d="M18.5 16h-.9L13.5 5.3c-.1-.2-.3-.3-.5-.3h-2.1c-.2 0-.4.1-.5.3L6.3 16h-.8c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5h-.7l.7-2h4.8l.7 2h-.6c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4.1c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5zm-8.2-4l1.6-4.8h.1l1.7 4.8h-3.4z"/></svg>',
    'dxrd-svg-actions-fit_to_container': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 22v-2c0-.6-.4-1-1-1s-1 .4-1 1v4h4c.6 0 1-.4 1-1s-.4-1-1-1H2zM22 22h-2c-.6 0-1 .4-1 1s.4 1 1 1h4v-4c0-.6-.4-1-1-1s-1 .4-1 1v2zM2 2v2c0 .6-.4 1-1 1s-1-.4-1-1V0h4c.6 0 1 .4 1 1s-.4 1-1 1H2zM22 2h-2c-.6 0-1-.4-1-1s.4-1 1-1h4v4c0 .6-.4 1-1 1s-1-.4-1-1V2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 11h2v2H0v-2zm0-2h2V7H0v2zm11-7h2V0h-2v2zM7 2h2V0H7v2zm8 0h2V0h-2v2zm-4 22h2v-2h-2v2zm-4 0h2v-2H7v2zm8 0h2v-2h-2v2zM0 17h2v-2H0v2zm22-4h2v-2h-2v2zm0-4h2V7h-2v2zm0 8h2v-2h-2v2z"/></g><path class="dxd-icon-fill" d="M16 17H8c-.6 0-1-.5-1-1V8c0-.6.4-1 1-1h8c.5 0 1 .4 1 1v8c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-group_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 23H3c-.5 0-1-.5-1-1v-4c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .5-.4 1-1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 7H3c-.5 0-1-.4-1-1V2c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .6-.4 1-1 1zm7 2H8v2h14V9zm0 4H8v2h14v-2z"/></g></svg>',
    'dxrd-svg-actions-group_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 7H3c-.5 0-1-.4-1-1V2c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .6-.4 1-1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 23H3c-.5 0-1-.5-1-1v-4c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v4c0 .5-.4 1-1 1zm7-14H8v2h14V9zm0 4H8v2h14v-2z"/></g></svg>',
    'dxrd-svg-actions-increase_horizontal_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19.3 13.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3H15c-.6 0-1 .4-1 1s.4 1 1 1h5.2l-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L24 18l-4.7-4.7zM9 17H3.8l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L0 18l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L3.8 19H9c.6 0 1-.4 1-1 0-.5-.4-1-1-1zM13 5h2v2h-2zM9 5h2v2H9zM17 2v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1h-4c-.5 0-1 .5-1 1zM1 2v8c0 .5.4 1 1 1h4c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1z"/></svg>',
    'dxrd-svg-actions-increase_vertical_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 24l4.7-4.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L19 20.2V15c0-.6-.4-1-1-1s-1 .4-1 1v5.2l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4L18 24zm0-24l4.7 4.7c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L19 3.8V9c0 .6-.4 1-1 1s-1-.4-1-1V3.8l-2.3 2.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L18 0zM5 13h2v2H5zM5 9h2v2H5zM10 17H2c-.5 0-1 .4-1 1v4c0 .5.5 1 1 1h8c.5 0 1-.5 1-1v-4c0-.5-.4-1-1-1zM10 1H2c-.5 0-1 .4-1 1v4c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.4-1-1-1z"/></svg>',
    'dxrd-svg-actions-insert_cell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_5_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M6 6h4v4H6z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm0-6h4V0h-4v4zM6 16h4v-4H6v4zM6 4h4V0H6v4zM0 16h4v-4H0v4zm0-6h4V6H0v4zm0-6h4V0H0v4z"/></g></svg>',
    'dxrd-svg-actions-insert_column_to_left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_4_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm0-6h4V0h-4v4zM6 16h4v-4H6v4zm0-6h4V6H6v4zm0-6h4V0H6v4z"/></g><path class="dxd-icon-fill" d="M0 0h4v16H0z"/></svg>',
    'dxrd-svg-actions-insert_column_to_right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_6_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M12 0h4v16h-4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M6 12h4v4H6v-4zm0-2h4V6H6v4zm0-6h4V0H6v4zM0 16h4v-4H0v4zm0-6h4V6H0v4zm0-6h4V0H0v4z"/></g></svg>',
    'dxrd-svg-actions-insert_row_above': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_7_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 12h4v4h-4v-4zm0-2h4V6h-4v4zm-6 6h4v-4H6v4zm0-6h4V6H6v4zm-6 6h4v-4H0v4zm0-6h4V6H0v4z"/></g><path class="dxd-icon-fill" d="M0 0h16v4H0z"/></svg>',
    'dxrd-svg-actions-insert_row_below': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="ZoomIn_8_" class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1z"/><path class="dxd-icon-fill" d="M0 12h16v4H0z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 6h4v4h-4V6zm0-2h4V0h-4v4zm-6 6h4V6H6v4zm0-6h4V0H6v4zm-6 6h4V6H0v4zm0-6h4V0H0v4z"/></g></svg>',
    'dxrd-svg-actions-make_horizontal_spacing_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 5h-4c-.5 0-1 .5-1 1v5h-3V3c0-.5-.5-1-1-1h-4c-.5 0-1 .5-1 1v8H6V9c0-.5-.5-1-1-1H1c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h4c.5 0 1-.5 1-1v-2h3v8c0 .5.5 1 1 1h4c.5 0 1-.5 1-1v-8h3v5c0 .5.5 1 1 1h4c.5 0 1-.5 1-1V6c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-make_same_height': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M9 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h6c.6 0 1-.5 1-1V3c0-.5-.4-1-1-1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M21 8h-6c-.6 0-1 .4-1 1v6c0 .6.4 1 1 1h6c.5 0 1-.4 1-1V9c0-.6-.5-1-1-1z"/></g><path class="dxd-icon-fill" d="M14 2h8v2h-8zM14 20h8v2h-8z"/></svg>',
    'dxrd-svg-actions-make_same_sizes': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 4H8V2h8v2zm0 16H8v2h8v-2zM4 8H2v8h2V8zm18 0h-2v8h2V8z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 16H9c-.6 0-1-.4-1-1V9c0-.6.4-1 1-1h6c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1z"/></g></svg>',
    'dxrd-svg-actions-make_same_width': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15 14H9c-.5 0-1 .5-1 1v6c0 .5.5 1 1 1h6c.5 0 1-.5 1-1v-6c0-.5-.5-1-1-1z"/></g><path class="dxd-icon-fill" d="M20 14h2v8h-2zM2 14h2v8H2z"/></svg>',
    'dxrd-svg-actions-make_vertical_spacing_equal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 23v-4c0-.5-.5-1-1-1h-5v-3h8c.5 0 1-.5 1-1v-4c0-.5-.5-1-1-1h-8V6h2c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1H9c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h2v3H3c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h8v3H6c-.5 0-1 .5-1 1v4c0 .5.5 1 1 1h12c.5 0 1-.5 1-1z"/></svg>',
    'dxrd-svg-actions-master_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H4V6h16v14z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M18 12H6V8h12v4zm0 2H6v4h12v-4z"/></g></svg>',
    'dxrd-svg-actions-none': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
    'dxrd-svg-actions-page_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 20h3v3H4c-.5 0-1-.5-1-1v-2zm5 3h8v-3H8v3zM3 2v2h3V1H4c-.5 0-1 .5-1 1zm5 11h8V6H8v7zm-5 5h3V6H3v12zm15 5h2c.5 0 1-.5 1-1v-2h-3v3zm0-5h3V6h-3v12zm2-17h-2v3h3V2c0-.5-.5-1-1-1zM8 4h8V1H8v3z"/></g><path class="dxd-icon-fill" d="M8 15h8v3H8z"/></svg>',
    'dxrd-svg-actions-page_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 20h3v3H4c-.5 0-1-.5-1-1v-2zm5 3h8v-3H8v3zM3 2v2h3V1H4c-.5 0-1 .5-1 1zm5 16h8v-7H8v7zm-5 0h3V6H3v12zm15 5h2c.5 0 1-.5 1-1v-2h-3v3zm0-5h3V6h-3v12zm2-17h-2v3h3V2c0-.5-.5-1-1-1zM8 4h8V1H8v3z"/></g><path class="dxd-icon-fill" d="M8 6h8v3H8z"/></svg>',
    'dxrd-svg-actions-remove_horizontal_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 18l-4.7 4.7c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L6.2 19H1c-.6 0-1-.4-1-1s.4-1 1-1h5.2l-2.3-2.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L10 18zm4 0l4.7 4.7c.4.4 1 .4 1.4 0 .4-.4.4-1 0-1.4L17.8 19H23c.6 0 1-.4 1-1s-.4-1-1-1h-5.2l2.3-2.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L14 18zM10 11H6c-.6 0-1-.4-1-1V2c0-.5.4-1 1-1h4c.6 0 1 .5 1 1v8c0 .6-.4 1-1 1zm9-1V2c0-.5-.5-1-1-1h-4c-.6 0-1 .5-1 1v8c0 .6.4 1 1 1h4c.5 0 1-.4 1-1z"/></svg>',
    'dxrd-svg-actions-remove_vertical_spacing': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 10l4.7-4.7c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L19 6.2V1c0-.6-.4-1-1-1s-1 .4-1 1v5.2l-2.3-2.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4L18 10zm0 4l4.7 4.7c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L19 17.8V23c0 .6-.4 1-1 1s-1-.4-1-1v-5.2l-2.3 2.3c-.4.4-1 .4-1.4 0-.4-.4-.4-1 0-1.4L18 14zM11 14v4c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1v-4c0-.6.5-1 1-1h8c.5 0 1 .5 1 1zm-1-9H2c-.5 0-1 .4-1 1v4c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V6c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-report_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v2h8V2h-2z"/><path class="dxd-icon-fill" d="M7 16h10v3H7z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M7 6h10v8H7z"/></g></svg>',
    'dxrd-svg-actions-report_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v2h8V2h-2z"/><path class="dxd-icon-fill" d="M7 6h10v3H7z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M7 11h10v8H7z"/></g></svg>',
    'dxrd-svg-actions-reset': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 12h2c0 5.5-4.5 10-10 10-3.3 0-6.2-1.6-8-4v3c0 .6-.4 1-1 1s-1-.4-1-1v-7h7c.6 0 1 .4 1 1s-.4 1-1 1H5.1c1.4 2.4 4 4 6.9 4 4.4 0 8-3.6 8-8zm1-10c-.6 0-1 .4-1 1v3c-1.8-2.4-4.7-4-8-4C6.5 2 2 6.5 2 12h2c0-4.4 3.6-8 8-8 3 0 5.5 1.6 6.9 4H15c-.6 0-1 .4-1 1s.4 1 1 1h7V3c0-.6-.4-1-1-1z"/></svg>',
    'dxrd-svg-actions-send_to_back': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 8h-5V3c0-.5-.5-1-1-1H3c-.5 0-1 .5-1 1v12c0 .5.5 1 1 1h5v5c0 .5.5 1 1 1h12c.5 0 1-.5 1-1V9c0-.5-.5-1-1-1zm-1 12H10V10h10v10z"/></svg>',
    'dxrd-svg-actions-size_to_grid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 8V6h-5V1h-2v5H8V1H6v5H1v2h5v8H1v2h5v5h2v-5h8v5h2v-5h5v-2h-5V8z"/></svg>',
    'dxrd-svg-actions-subband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M14 11H2c-.5 0-1-.4-1-1V4c0-.5.5-1 1-1h12c.6 0 1 .5 1 1v6c0 .6-.4 1-1 1z"/></g><path class="dxd-icon-fill" d="M22 21H10c-.6 0-1-.5-1-1v-6c0-.6.4-1 1-1h12c.5 0 1 .4 1 1v6c0 .5-.5 1-1 1z"/></svg>',
    'dxrd-svg-actions-top_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M3 8v13c0 .5.5 1 1 1h16c.5 0 1-.5 1-1V8H3z"/></g><path class="dxd-icon-fill" d="M20 2H4c-.5 0-1 .5-1 1v3h18V3c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-actions-ungroup': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 4H4.5c-.3 0-.5.2-.5.5V8H2.5c-.3 0-.5-.2-.5-.5v-5c0-.3.2-.5.5-.5h5c.3 0 .5.2.5.5V4zm-.9 5.9c-.3-.3-.4-.6-.4-1s.2-.8.5-1.1l.7-.7c.3-.3.7-.5 1.1-.5s.8.2 1.1.5l.9 1.1V5.5c0-.3-.2-.5-.5-.5H5v5.5c0 .3.2.5.5.5h2.7L7.1 9.9z"/><path class="dxd-icon-fill" d="M14.2 12.8L12.4 11l1.8-1.8c.2-.2.2-.5 0-.7l-.7-.7c-.2-.2-.5-.2-.7 0L11 9.6 9.2 7.8c-.2-.2-.5-.2-.7 0l-.7.7c-.2.2-.2.5 0 .7L9.6 11l-1.8 1.8c-.2.2-.2.5 0 .7l.7.7c.2.2.5.2.7 0l1.8-1.8 1.8 1.8c.2.2.5.2.7 0l.7-.7c.2-.2.2-.5 0-.7z"/></svg>',
    'dxrd-svg-actions-vertical_detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 3h2v3H0V4c0-.5.5-1 1-1zM0 16h3V8H0v8zm5 5h14v-3H5v3zm-5-1c0 .5.5 1 1 1h2v-3H0v2zM23 3h-2v3h3V4c0-.5-.5-1-1-1zm-2 18h2c.5 0 1-.5 1-1v-2h-3v3zm-5-5h3V8h-3v8zM5 16h3V8H5v8zm16 0h3V8h-3v8zM5 6h14V3H5v3z"/></g><path class="dxd-icon-fill" d="M10 8h4v8h-4z"/></svg>',
    'dxrd-svg-actions-vertical_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 3h2v3H0V4c0-.5.5-1 1-1zM0 16h3V8H0v8zm5 5h14v-3H5v3zm-5-1c0 .5.5 1 1 1h2v-3H0v2zM23 3h-2v3h3V4c0-.5-.5-1-1-1zm-2 18h2c.5 0 1-.5 1-1v-2h-3v3zm-11-5h9V8h-9v8zm11 0h3V8h-3v8zM5 6h14V3H5v3z"/></g><path class="dxd-icon-fill" d="M5 8h3v8H5z"/></svg>',
    'dxrd-svg-actions-vertical_total': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 8h3v8H0V8zm0 12c0 .5.5 1 1 1h2v-3H0v2zM0 4v2h3V3H1c-.5 0-1 .5-1 1zm14 4H5v8h9V8zM5 6h14V3H5v3zm16 10h3V8h-3v8zm2-13h-2v3h3V4c0-.5-.5-1-1-1zm-2 18h2c.5 0 1-.5 1-1v-2h-3v3zM5 21h14v-3H5v3z"/></g><path class="dxd-icon-fill" d="M16 8h3v8h-3z"/></svg>',
    'dxrd-svg-bands-bottom_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 20h10v2H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM18 0h2v2h-2zM2 4h2v14H2zM6 4h10v14H6z"/><path class="dxd-icon-fill" d="M18 20h2v2h-2zM2 20h2v2H2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 4h2v14h-2zM2 0h2v2H2z"/></svg>',
    'dxrd-svg-bands-detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v22h18V0H2zm14 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6V8h10v2zm0-4H6V4h10v2z"/></svg>',
    'dxrd-svg-bands-detail_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 2h-2V0H8v2H6v2h10z"/><path class="dxd-icon-fill" d="M18 2v4H4V2H2v22h18V2h-2zm-2 18H6v-2h10v2zm0-4H6v-2h10v2zm0-4H6v-2h10v2z"/></svg>',
    'dxrd-svg-bands-group_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M0 0h12v6H0z"/><path class="dxd-icon-fill" d="M0 16h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 8h14v2H8zM8 12h14v2H8z"/></svg>',
    'dxrd-svg-bands-group_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h12v6H0z"/><path class="dxd-icon-fill" d="M0 0h12v6H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 12h14v2H8zM8 8h14v2H8z"/></svg>',
    'dxrd-svg-bands-master_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2h-2V0H6v2H4v2h8zM14 14h10v4H14zM14 20h10v4H14z"/><path class="dxd-icon-fill" d="M12 12h4V2h-2v4H2V2H0v20h12z"/></svg>',
    'dxrd-svg-bands-page_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM6 4h10v8H6z"/><path class="dxd-icon-fill" d="M6 14h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 0h2v2h-2zM6 20h10v2H6zM2 20h2v2H2zM2 4h2v14H2zM18 20h2v2h-2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-bands-page_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M6 10h10v8H6zM6 20h10v2H6zM18 0h2v2h-2zM2 4h2v14H2z"/><path class="dxd-icon-fill" d="M6 4h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 0h10v2H6zM18 20h2v2h-2zM2 20h2v2H2zM2 0h2v2H2zM18 4h2v14h-2z"/></svg>',
    'dxrd-svg-bands-report_footer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 16h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 2h2v2h-2zM6 6h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-bands-report_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M16 2h-2V0H8v2H6v2h10zM6 22h10v2H6z"/><path class="dxd-icon-fill" d="M6 6h10v4H6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 2h2v2h-2zM6 12h10v8H6zM2 6h2v14H2zM18 22h2v2h-2zM2 22h2v2H2zM2 2h2v2H2zM18 6h2v14h-2z"/></svg>',
    'dxrd-svg-bands-sub_band': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M2 4h14v6H2z"/><path class="dxd-icon-fill" d="M8 14h14v6H8z"/></svg>',
    'dxrd-svg-bands-top_margin': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M6 20h10v2H6z"/><path class="dxd-icon-fill" d="M6 0h10v2H6zM18 0h2v2h-2z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 4h2v14H2zM6 4h10v14H6zM18 20h2v2h-2zM2 20h2v2H2zM18 4h2v14h-2z"/><path class="dxd-icon-fill" d="M2 0h2v2H2z"/></svg>',
    'dxrd-svg-bands-vertical_detail': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g id="VerticalDetail"><path class="dxd-icon-fill" d="M10 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6h-4v10h4V6zM8 6H4v10h4V6zm12-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-vertical_header': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g id="VerticalHeader"><path class="dxd-icon-fill" d="M4 6h4v10H4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM20 6H10v10h10V6zm0-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-bands-vertical_total': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g id="VerticalTotal"><path class="dxd-icon-fill" d="M16 6h4v10h-4z"/><path class="dxd-icon-fill" d="M2 4H0V2h2v2zm0 2H0v10h2V6zm0 12H0v2h2v-2zM14 6H4v10h10V6zm6-4H4v2h16V2zm4 0h-2v2h2V2zm0 4h-2v10h2V6zm0 12h-2v2h2v-2zM4 20h16v-2H4v2z" opacity=".72"/></g></svg>',
    'dxrd-svg-chartstructure-axes': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M24 6V4h-2V2h-2V0h-2v2h-4V0h-2v2H8V0H6v4h14v14h4v-2h-2v-4h2v-2h-2V6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M10 14V6H6v2h2v4H6v2h2v2h2v2h2v-2h4v2h2v-4z"/></svg>',
    'dxrd-svg-chartstructure-axisx': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 17l-6-5v4h-4v-2h-2v2H6v-2H4v2H0v2h4v2h2v-2h4v2h2v-2h4v4zM4 8h2V6h4v4l6-5-6-5v4H6V2H4v2H0v2h4z"/></svg>',
    'dxrd-svg-chartstructure-axisy': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M17 0l-5 6h4v4h-2v2h2v4h-2v2h2v4h2v-4h2v-2h-2v-4h2v-2h-2V6h4zM8 18v-2H6v-4h4L5 6l-5 6h4v4H2v2h2v4h2v-4z"/></svg>',
    'dxrd-svg-chartstructure-chart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M10 22V12H0c.5 5 5 9.5 10 10zM12 12v10c5-.5 9.5-5 10-10H12z"/><path class="dxd-icon-fill" d="M0 6h4v4H0zM6 4h4v6H6zM12 2h4v8h-4z"/><g><path class="dxd-icon-fill" d="M18 0h4v10h-4z"/></g></svg>',
    'dxrd-svg-chartstructure-constantline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 6h-6V0h-2v6H0v2h16v16h2V8h6z"/></svg>',
    'dxrd-svg-chartstructure-constantlines': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M24 6V4h-4V0h-2v4h-4V0h-2v4H6v2h6v4H6v2h6v6h2v-6h4v6h2v-6h4v-2h-4V6h4zm-10 4V6h4v4h-4z"/></svg>',
    'dxrd-svg-chartstructure-defaultpane': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 0v10h10V0H12zm8 8h-6V2h6v6zM12 22h10V12H12v10zm2-8h6v6h-6v-6z"/></svg>',
    'dxrd-svg-chartstructure-diagram': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M0 16h4v6H0zM12 10h4v12h-4z"/><path class="dxd-icon-fill" d="M18 2h4v20h-4zM6 6h4v16H6z"/></svg>',
    'dxrd-svg-chartstructure-legend': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h10v10H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M0 12h10v10H0z"/><path class="dxd-icon-fill" d="M12 2h10v2H12zM12 6h10v2H12zM12 14h10v2H12zM12 18h10v2H12z"/></svg>',
    'dxrd-svg-chartstructure-panes': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h10v22H0z"/><path class="dxd-icon-fill" d="M12 0v10h10V0H12z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 22h10V12H12v10z"/></svg>',
    'dxrd-svg-chartstructure-series': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 22h22V10l-4-4-8 8-4-4-6 6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M18 0l-8 8-4-4-6 6v4l6-6 4 4 8-8 4 4V4z"/></svg>',
    'dxrd-svg-chartstructure-seriescollection': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 20H4V0H2v4H0v2h2v4H0v2h2v4H0v2h2v4h4v2h2v-2h4v2h2v-2h4v2h2v-2h4z"/><path class="dxd-icon-fill" d="M15 7l-9 9v2h18v-2z"/><path class="dxd-icon-fill" d="M15 4l9 9V4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M6 13l9-9-9-4z"/></svg>',
    'dxrd-svg-chartstructure-title': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M4 8v14h14V8H4zm12 8h-2v-2h2v2zm-6 0v-2h2v2h-2zm2 2v2h-2v-2h2zm-4-2H6v-2h2v2zm8-6v2h-2v-2h2zm-4 2h-2v-2h2v2zm-4-2v2H6v-2h2zm-2 8h2v2H6v-2zm8 2v-2h2v2h-2z"/><path class="dxd-icon-fill" d="M8 0h6v6H8z"/></svg>',
    'dxrd-svg-chartstructure-titles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h4v4H2zM10 2h4v4h-4zM10 18h4v4h-4zM18 2h4v4h-4zM2 18h4v4H2zM2 10h4v4H2zM18 17.9h4v4h-4zM18 10h4v4h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/></svg>',
    'dxrd-svg-checkboxglyphs-Heart_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M16 5.5C16 3 14 1 11.5 1c-1.4 0-2.7.7-3.5 1.7C7.2 1.7 5.9 1 4.5 1 2 1 0 3 0 5.5c0 1.2.5 2.4 1.3 3.2L8 15.4l6.7-6.7c.8-.8 1.3-2 1.3-3.2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Heart_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M11.5 1c-1.4 0-2.7.7-3.5 1.7C7.2 1.7 5.9 1 4.5 1 2 1 0 3 0 5.5c0 1.2.5 2.4 1.3 3.2L8 15.4l6.7-6.7c.8-.8 1.3-2 1.3-3.2C16 3 14 1 11.5 1zm1.8 6.3L8 12.5 2.7 7.3C2.3 6.8 2 6.2 2 5.5 2 4.1 3.1 3 4.5 3c.7 0 1.5.3 1.9 1L8 6l1.6-2c.5-.6 1.2-1 1.9-1C12.9 3 14 4.1 14 5.5c0 .7-.3 1.3-.7 1.8z"/></svg>',
    'dxrd-svg-checkboxglyphs-RadioButton_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zm4-6c0 2.2-1.8 4-4 4s-4-1.8-4-4 1.8-4 4-4 4 1.8 4 4z"/></svg>',
    'dxrd-svg-checkboxglyphs-RadioButton_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Green{fill:#039c23}</style><path class="Green" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM10.9 8c.7 0 1.2.6.9 1.3-.5 1.6-2 2.7-3.8 2.7-1.8 0-3.3-1.1-3.8-2.7-.2-.7.3-1.3.9-1.3.4 0 .8.2 1 .6.3.8 1 1.4 1.9 1.4.9 0 1.6-.6 1.9-1.4.1-.4.5-.6 1-.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Indeterminate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM11 11H5c-.6 0-1-.4-1-1s.4-1 1-1h6c.6 0 1 .4 1 1s-.4 1-1 1z"/></svg>',
    'dxrd-svg-checkboxglyphs-Smiley_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6zM7 5.5C7 6.3 6.3 7 5.5 7S4 6.3 4 5.5 4.7 4 5.5 4 7 4.7 7 5.5zm5 0c0 .8-.7 1.5-1.5 1.5S9 6.3 9 5.5 9.7 4 10.5 4s1.5.7 1.5 1.5zM10.9 12c-.4 0-.8-.2-1-.6-.3-.8-1-1.4-1.9-1.4-.9 0-1.6.6-1.9 1.4-.1.4-.5.6-1 .6-.7 0-1.2-.6-.9-1.3C4.7 9.1 6.2 8 8 8c1.8 0 3.3 1.1 3.8 2.7.2.7-.3 1.3-.9 1.3z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v12h12V0H0zm11 11H1V1h10v10z"/><path class="dxd-icon-fill" d="M10 4V2L4 8 2 6v2l2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Indeterminate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v12h12V0H0zm11 11H1V1h10v10z"/><path class="dxd-icon-fill" d="M4 4h4v4H4z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox1_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 12 12" xml:space="preserve"><path class="dxd-icon-fill" d="M12 12H0V0h12v12zM1 11h10V1H1v10z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="Black" d="M11.6 4.6L13 6l-6 6-4-4 1.4-1.4L7 9.2l4.6-4.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Indeterminate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.6 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="Black" d="M4 4h8v8H4z"/></svg>',
    'dxrd-svg-checkboxglyphs-StandardBox2_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.6 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/></svg>',
    'dxrd-svg-checkboxglyphs-Star_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Yellow{fill:#ffb115}</style><path class="Yellow" d="M8 .6l2.5 4.9 5.5.7-4 3.9.9 5.3L8 12.9l-4.9 2.5.9-5.3-4-3.9 5.5-.7z"/></svg>',
    'dxrd-svg-checkboxglyphs-Star_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Black{fill:#727272}</style><path class="Black" d="M16 6.2l-5.5-.7L8 .6 5.5 5.5 0 6.2l4 3.9-.9 5.3L8 12.9l4.9 2.5-.9-5.3 4-3.9zm-5.7 5.6L8 10.7l-2.3 1.2.4-2.4-1.7-1.8 2.4-.3L8 5l1.2 2.3 2.4.3-1.7 1.8.4 2.4z"/></svg>',
    'dxrd-svg-checkboxglyphs-Thumb_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Green{fill:#039c23}</style><path class="Green" d="M0 6h2c.6 0 1 .4 1 1v6c0 .6-.4 1-1 1H0V6zm6 9h5.7c.8 0 1.5-.5 1.8-1.2l2.3-5.4c.1-.3.2-.5.2-.8V6c0-.6-.4-1-1-1H9l1.1-3.7c.1-.4 0-.8-.2-1-.3-.3-.8-.3-1.1 0L4.6 4.4c-.4.4-.6.9-.6 1.4V13c0 1.1.9 2 2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Thumb_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M16 10h-2c-.6 0-1-.4-1-1V3c0-.6.4-1 1-1h2v8zm-6-9H4.3c-.8 0-1.5.5-1.8 1.2L.2 7.6c-.1.3-.2.5-.2.8V10c0 .6.4 1 1 1h6l-1.1 3.7c-.1.4 0 .8.2 1 .3.3.8.3 1.1 0l4.2-4.2c.4-.4.6-.9.6-1.4V3c0-1.1-.9-2-2-2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Toggle_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Green{fill:#039c23}</style><path class="Green" d="M12 4H4C1.8 4 0 5.8 0 8s1.8 4 4 4h8c2.2 0 4-1.8 4-4s-1.8-4-4-4zm0 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-Toggle_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M12 4H4C1.8 4 0 5.8 0 8s1.8 4 4 4h8c2.2 0 4-1.8 4-4s-1.8-4-4-4zm-8 6c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoBox_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Green{fill:#039c23}</style><path class="Green" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.4-1-1-1zm-1 14H2V2h12v12z"/><path class="Green" d="M11.6 4.6L13 6l-6 6-4-4 1.4-1.4L7 9.2l4.6-4.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoBox_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 14H2V2h12v12z"/><path class="Red" d="M13 4.4L11.6 3 8 6.6 4.4 3 3 4.4 6.6 8 3 11.6 4.4 13 8 9.4l3.6 3.6 1.4-1.4L9.4 8z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Green{fill:#039c23}</style><path class="Green" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zM6.9 12L3 8.1l1.4-1.4 2.5 2.5 5.7-5.7L14 4.9 6.9 12z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Indeterminate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Yellow{fill:#ffb115}</style><path class="Yellow" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zM9 13H7v-2h2v2zm0-4H7V3h2v6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNoSolidBox_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M15 0H1C.5 0 0 .5 0 1v14c0 .5.5 1 1 1h14c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-2 11.6L11.6 13 8 9.4 4.4 13 3 11.6 6.6 8 3 4.4 4.4 3 8 6.6 11.6 3 13 4.4 9.4 8l3.6 3.6z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNo_Checked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Green{fill:#039c23}</style><path class="Green" d="M0 8l2-2 4 4 8-8 2 2L6 14z"/></svg>',
    'dxrd-svg-checkboxglyphs-YesNo_Unchecked': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><style>.Red{fill:#d11c1c}</style><path class="Red" d="M14 4l-2-2-4 4-4-4-2 2 4 4-4 4 2 2 4-4 4 4 2-2-4-4z"/></svg>',
    'dxrd-svg-color_gear': '<svg data-bind="svgAttrs" version="1.1" id="Слой_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.White{fill:#fff}</style><path class="White" d="M30 18v-4l-4.4-.7c-.2-.8-.5-1.5-.9-2.1l2.6-3.6-2.8-2.8-3.6 2.6c-.7-.4-1.4-.7-2.1-.9L18 2h-4l-.7 4.4c-.8.2-1.5.5-2.1.9L7.5 4.7 4.7 7.5l2.6 3.6c-.4.7-.7 1.4-.9 2.1L2 14v4l4.4.7c.2.8.5 1.5.9 2.1l-2.6 3.6 2.8 2.8 3.6-2.6c.7.4 1.4.7 2.1.9L14 30h4l.7-4.4c.8-.2 1.5-.5 2.1-.9l3.6 2.6 2.8-2.8-2.6-3.6c.4-.7.7-1.4.9-2.1L30 18zm-14 2c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/></svg>',
    'dxrd-svg-errorPanel-collectErrors': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1.1 7C1.6 3.6 4.5 1 8 1c2 0 3.7.8 5 2.1V2c0-.5.5-1 1-1s1 .5 1 1v5h-5c-.5 0-1-.5-1-1s.5-1 1-1h2c-.9-1.2-2.3-2-4-2-2.4 0-4.4 1.7-4.9 4h-2zm11.8 2c-.5 2.3-2.5 4-4.9 4-1.6 0-3.1-.8-4-2h2c.5 0 1-.5 1-1s-.5-1-1-1H1v5c0 .5.5 1 1 1s1-.5 1-1v-1.1C4.3 14.2 6 15 8 15c3.5 0 6.4-2.6 6.9-6h-2z"/></svg>',
    'dxrd-svg-errorPanel-error': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm3.9 10.4c.2.2.2.5 0 .7l-.7.7c-.2.2-.5.2-.7 0L12 13.4l-2.4 2.4c-.2.2-.6.2-.7.1l-.7-.7c-.2-.2-.2-.6-.1-.8l2.4-2.4-2.4-2.4c-.1-.2-.1-.6 0-.7l.7-.7c.2-.2.6-.2.8-.1l2.4 2.4 2.4-2.4c.2-.1.6-.1.7 0l.7.7c.2.2.2.6.1.8L13.4 12l2.5 2.4z"/></svg>',
    'dxrd-svg-errorPanel-information': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm-.5 3h1c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5h-1c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5zm1 10h-1c-.3 0-.5-.2-.5-.5v-5c0-.3.2-.5.5-.5h1c.3 0 .5.2.5.5v5c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-errorPanel-notification': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 19h4c0 1.1-.9 2-2 2s-2-.9-2-2zm7.6-4.8c-.4-.4-.6-.9-.6-1.4v-.9c-2.3-.5-4-2.5-4-4.9 0-.6.1-1.2.3-1.8-.1 0-.2-.1-.3-.1V4c0-.6-.4-1-1-1s-1 .4-1 1v1.1c-2.3.5-4 2.5-4 4.9v2.8c0 .5-.2 1-.6 1.4l-2.1 2.1c-.6.6-.2 1.7.7 1.7h14c.9 0 1.3-1.1.7-1.7l-2.1-2.1z"/><circle cx="18" cy="7" r="4" fill="#d03044"/></svg>',
    'dxrd-svg-errorPanel-notification_empty': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 19h4c0 1.1-.9 2-2 2s-2-.9-2-2zm9.7-2.7l-2.1-2.1c-.4-.4-.6-.9-.6-1.4V10c0-2.4-1.7-4.4-4-4.9V4c0-.6-.4-1-1-1s-1 .4-1 1v1.1c-2.3.5-4 2.5-4 4.9v2.8c0 .5-.2 1-.6 1.4l-2.1 2.1c-.6.6-.2 1.7.7 1.7h14c.9 0 1.3-1.1.7-1.7z"/></svg>',
    'dxrd-svg-errorPanel-warning': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.8 18.3L12.9 3.5c-.4-.7-1.4-.7-1.8 0L2.2 18.3c-.5.7 0 1.7.9 1.7h17.8c.9 0 1.4-1 .9-1.7zM12.5 17h-1c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h1c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5zm0-4h-1c-.3 0-.5-.2-.5-.5v-4c0-.3.2-.5.5-.5h1c.3 0 .5.2.5.5v4c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-bottommarginband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M2 4h2v8H2V4zm10-1h2V1.5c0-.3-.2-.5-.5-.5H12v2zM5 4v8h6V4H5zm0-3v2h6V1H5zm9 3h-2v8h2V4zM4 3V1H2.5c-.3 0-.5.2-.5.5V3h2z"/></g></svg>',
    'dxrd-svg-fieldlist-calcbool': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm18 8L8 18l-4-4v-4l4 4L18 4v4z"/></svg>',
    'dxrd-svg-fieldlist-calcdate': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm11 18c-3.9 0-7-3.1-7-7s3.1-7 7-7 7 3.1 7 7-3.1 7-7 7z"/><path class="dxd-icon-fill" d="M15 10h-3V7c0-.5-.4-1-1-1-.5 0-1 .4-1 1v4c0 .5.4 1 1 1h4c.5 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-fieldlist-calcdefault': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm17.6 5.8c-.2.1-.4.2-.7.2-.3 0-.5-.1-.7-.2-.2-.1-.2-.3-.2-.4 0-.2 0-.4.1-.6.1-.1.2-.2.2-.3 0-.1 0-.1-.1-.1s-.1-.1-.2-.1c-.4 0-.8.3-1.2.6-.7.6-1.4 2.1-1.8 3.1h2l-1 1.9h-1.6l-.8 2.3c-.6 1.7-1.1 2.8-1.6 3.6-.5.7-1.2 1.3-1.9 1.6-.7.4-1.6.6-2.5.6-.6 0-1-.1-1.3-.3-.2-.1-.3-.5-.3-.7s.2-1 1.2-1c.9 0 1 .8 1 1s-.1.3-.2.4-.2.1-.2.2l.1.1H6c.2 0 .4 0 .5-.1.4-.2.6-.5.8-.9.1-.2.4-.7.7-1.7l1.7-5H8l1-1.9h1.3c.2-.1.6-.9.7-1.1.8-1 1.4-1.7 2.2-2.2.9-.6 1.8-.8 2.9-.8.7 0 1.1.1 1.4.3.3.2.5.4.5.7s-.2.6-.4.8z"/></svg>',
    'dxrd-svg-fieldlist-calcfloat': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm8 16H2v-2h2v-4H2V8h2V6h2v8h2v2zm4 0h-2v-2h2v2zm8-8v2h-2v2h-2v2h4v2h-6v-4h2v-2h2V8h-4V6h6v2z"/></svg>',
    'dxrd-svg-fieldlist-calcinteger': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm6 16H4v-6H2V8h2V6h2v10zm6-9v3h-2v4h2v2H8v-6h2V8H8V6h4v1zm8 0v9h-6v-2h4v-2h-2v-2h2V8h-4V6h6v1z"/></svg>',
    'dxrd-svg-fieldlist-calcstring': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0v22h22V0H0zm10 18H4v-6h4v-2H4V8h6v10zm8-4.3V18h-6V4h2v6h4v3.7z"/><path class="dxd-icon-fill" d="M6 14h2v2H6zM14 12h2v4h-2z"/></svg>',
    'dxrd-svg-fieldlist-component': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 2C5.2 2 3 3.3 3 5v6c0 1.7 2.2 3 5 3s5-1.3 5-3V5c0-1.7-2.2-3-5-3zm0 4c-1.8 0-2.9-.8-3-1 .1-.2 1.2-1 3-1s2.9.8 3 1c-.1.2-1.2 1-3 1z"/></svg>',
    'dxrd-svg-fieldlist-components': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="st1"><path class="dxd-icon-fill" d="M8.3 9V7H11V3c0-1.7-2-3-4.5-3S2 1.3 2 3v5c0 1.7 2 3 4.5 3 2 0 3.6-.8 4.2-2H8.3zm-4-6c0-.4.9-1 2.3-1s2.3.6 2.3 1-1 1-2.4 1-2.2-.6-2.2-1z"/></g><path class="dxd-icon-fill" d="M10.5 5C8 5 6 6.3 6 8v5c0 1.7 2 3 4.5 3s4.5-1.3 4.5-3V8c0-1.7-2-3-4.5-3zm0 4c-1.4 0-2.2-.6-2.2-1s.9-1 2.3-1 2.3.6 2.3 1-1 1-2.4 1z"/></svg>',
    'dxrd-svg-fieldlist-detailband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M13.5 1h-11c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5zM12 12H4V3h8v9zm-2-6H6V5h4v1zm0 2H6V7h4v1zm0 2H6V9h4v1z"/></svg>',
    'dxrd-svg-fieldlist-detailreportband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5zM13 12H3V3h10v9z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M11 7H5V5h6v2zm0 1H5v2h6V8z"/></g></svg>',
    'dxrd-svg-fieldlist-formattingrule': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6.6 10H3V3h7v3h2V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v9c0 .5.5 1 1 1h6.6l-2-2z"/><path class="dxd-icon-fill" d="M15.3 7H6.7c-.6 0-.9.8-.5 1.2L10 12v4h2v-4l3.8-3.8c.4-.4.1-1.2-.5-1.2z"/></svg>',
    'dxrd-svg-fieldlist-formattingrules': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9 12.4L7.6 11H5V5h6v1h2V3.5c0-.3-.2-.5-.5-.5H10V.5c0-.3-.2-.5-.5-.5h-9C.2 0 0 .2 0 .5v9c0 .3.2.5.5.5H3v2.5c0 .3.2.5.5.5H9v-.6zM3 3.5V8H2V2h6v1H3.5c-.3 0-.5.2-.5.5z"/><path class="dxd-icon-fill" d="M15.3 7H6.7c-.6 0-.9.8-.5 1.2L10 12v4h2v-4l3.8-3.8c.4-.4.1-1.2-.5-1.2z"/></svg>',
    'dxrd-svg-fieldlist-groupfooterband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8.5 14h-6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8.5 5h-6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5zM14 6H7v1h7V6zm0 2H7v1h7V8z"/></g></svg>',
    'dxrd-svg-fieldlist-groupheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M9 4.5v-3c0-.3-.2-.5-.5-.5h-6c-.3 0-.5.2-.5.5v3c0 .3.2.5.5.5h6c.3 0 .5-.2.5-.5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8.5 14h-6c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5zM7 9h7V8H7v1zm0-3v1h7V6H7z"/></g></svg>',
    'dxrd-svg-fieldlist-master_report': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm-1 4H6v1h4V6zm0 2H6v1h4V8zm0 2H6v1h4v-1zm3.5-8H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-fieldlist-pagefooterband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 10h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2zm-1-4V4H5v5h6zM4 1H2.5c-.3 0-.5.2-.5.5V3h2V1zm7 0H5v2h6V1zM4 4H2v8h2V4zm9.5-3H12v2h2V1.5c0-.3-.2-.5-.5-.5zM12 12h2V4h-2v8z"/></g></svg>',
    'dxrd-svg-fieldlist-pageheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 4h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2zM4 1H2.5c-.3 0-.5.2-.5.5V3h2V1zm7 0H5v2h6V1zM4 4H2v8h2V4zm9.5-3H12v2h2V1.5c0-.3-.2-.5-.5-.5zM5 7v5h6V7H5zm7 5h2V4h-2v8z"/></g></svg>',
    'dxrd-svg-fieldlist-parametergroup': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 6h6.5c.3 0 .5.2.5.5v6c0 .3-.2.5-.5.5h-6c-.3 0-.5-.2-.5-.5V6zm-1-.5c0-.3.2-.5.5-.5H10V3.5c0-.3-.2-.5-.5-.5h-6c-.3 0-.5.2-.5.5v6c0 .3.2.5.5.5H5V5.5z"/></svg>',
    'dxrd-svg-fieldlist-parameterseparator': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M13.5 9h-11c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h11c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-reportfooterband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm2.5 0H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/><path class="dxd-icon-fill" d="M5 10h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5h6v4H5z"/></g></svg>',
    'dxrd-svg-fieldlist-reportheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm2.5 0H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/><path class="dxd-icon-fill" d="M5 5h6v2H5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 8h6v4H5z"/></g></svg>',
    'dxrd-svg-fieldlist-stylemodel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8.4 11l1.6 1.6C9.2 15 6.9 15 5 15c1.8-1.8 1.9-4 3.4-4zm-.3-1H3V3h7v4.7l2-2V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v9c0 .5.5 1 1 1h3.9c.5-.9 1.1-1.8 2.2-2zm7.8-3.6l-1.3-1.3c-.2-.1-.4-.1-.6 0L9.1 10c-.2.2-.2.4 0 .5l1.3 1.3c.2.2.4.2.5 0l5-4.8c.1-.2.1-.4 0-.6z"/></svg>',
    'dxrd-svg-fieldlist-styles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 16c1.9 0 4.2 0 5-2.4L8.4 12c-1.5 0-1.6 2.2-3.4 4zM8.1 11H5V5h6v2.7l2-2V3.5c0-.3-.2-.5-.5-.5H10V.5c0-.3-.2-.5-.5-.5h-9C.2 0 0 .2 0 .5v9c0 .3.2.5.5.5H3v2.5c0 .3.2.5.5.5h2.4c.5-.9 1.1-1.8 2.2-2zM3 3.5V8H2V2h6v1H3.5c-.3 0-.5.2-.5.5zM15.9 7.4l-1.3-1.3c-.2-.1-.4-.1-.6 0L9.1 11c-.2.2-.2.4 0 .5l1.3 1.3c.2.2.4.2.5 0l5-4.8c.1-.2.1-.4 0-.6z"/></svg>',
    'dxrd-svg-fieldlist-subband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M9.5 7h-8c-.2 0-.5-.2-.5-.5v-4c0-.3.3-.5.5-.5h8c.3 0 .5.2.5.5v4c0 .3-.2.5-.5.5z"/></g><path class="dxd-icon-fill" d="M14.5 14h-8c-.3 0-.5-.2-.5-.5v-4c0-.3.2-.5.5-.5h8c.2 0 .5.2.5.5v4c0 .3-.3.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-topmarginband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4 3H2V1.5c0-.3.2-.5.5-.5H4v2zm7-2H5v2h6V1zm2.5 0H12v2h2V1.5c0-.3-.2-.5-.5-.5z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 15v-2h6v2H5zm-1-2H2v1.5c0 .3.2.5.5.5H4v-2zm8 0v2h1.5c.3 0 .5-.2.5-.5V13h-2zm-1-1V4H5v8h6zM4 4H2v8h2V4zm8 8h2V4h-2v8z"/></g></svg>',
    'dxrd-svg-fieldlist-verticaldetailband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M7 5h2v6H7z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 5h2v6H1V5zm0 8.5c0 .3.2.5.5.5H3v-2H1v1.5zm3 .5h8v-2H4v2zm2-9H4v6h2V5zM1 2.5V4h2V2H1.5c-.3 0-.5.2-.5.5zM14.5 2H13v2h2V2.5c0-.3-.2-.5-.5-.5zM13 11h2V5h-2v6zm0 3h1.5c.3 0 .5-.2.5-.5V12h-2v2zm-3-3h2V5h-2v6zM4 4h8V2H4v2z"/></g></svg>',
    'dxrd-svg-fieldlist-verticalheaderband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4h2v6H4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 4h2v6H1V4zm0 8.5c0 .3.2.5.5.5H3v-2H1v1.5zm3 .5h8v-2H4v2zM1 1.5V3h2V1H1.5c-.3 0-.5.2-.5.5zM14.5 1H13v2h2V1.5c0-.3-.2-.5-.5-.5zM13 10h2V4h-2v6zm0 3h1.5c.3 0 .5-.2.5-.5V11h-2v2zm-6-3h5V4H7v6zM4 3h8V1H4v2z"/></g></svg>',
    'dxrd-svg-fieldlist-verticaltotalband': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M10 4h2v6h-2z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M1 4h2v6H1V4zm0 8.5c0 .3.2.5.5.5H3v-2H1v1.5zm3 .5h8v-2H4v2zm5-9H4v6h5V4zM1 1.5V3h2V1H1.5c-.3 0-.5.2-.5.5zM14.5 1H13v2h2V1.5c0-.3-.2-.5-.5-.5zM13 10h2V4h-2v6zm0 3h1.5c.3 0 .5-.2.5-.5V11h-2v2zM4 3h8V1H4v2z"/></g></svg>',
    'dxrd-svg-fieldlist-xrbarcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M2 14H0V2h2v12zM9 2H7v12h2V2zm3 0h-2v12h2V2zm4 0h-3v12h3V2zM6 2H3v12h3V2z"/></svg>',
    'dxrd-svg-fieldlist-xrcharactercomb': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 3H1c-.5 0-1 .5-1 1v15c0 .5.5 1 1 1h22c.5 0 1-.5 1-1V4c0-.5-.5-1-1-1zM11 18H2V5h9v13zm11 0h-9V5h9v13zM8.3 9.6c.5.4.7 1.1.7 2V15H7.6v-.7c-.3.6-.8.8-1.6.8-.4 0-.8-.1-1.1-.2-.3-.2-.5-.4-.7-.6-.2-.3-.2-.6-.2-.9 0-.6.2-1 .6-1.3.4-.3.9-.5 1.7-.5h1.2c0-.4-.1-.7-.3-.9-.2-.2-.5-.3-.9-.3-.3 0-.6 0-.8.1-.3.1-.5.2-.7.4l-.7-1.2c.3-.2.6-.4 1-.5C5.6 9 6 9 6.4 9c.9 0 1.5.2 1.9.6zM7 13.7c.2-.1.4-.3.4-.6v-.6h-1c-.6 0-1 .2-1 .7 0 .2.1.4.2.5.2.1.4.2.6.2.4 0 .6 0 .8-.2zm12.4-4.4c.4.3.7.6.9 1.1.2.5.3 1 .3 1.6 0 .6-.1 1.2-.3 1.6-.2.5-.5.8-.9 1.1-.4.3-.9.4-1.4.4-.7 0-1.2-.3-1.6-.8v.7H15V7h1.5v2.7c.4-.5.9-.7 1.6-.7.4-.1.9.1 1.3.3zm-.7 3.9c.2-.3.4-.7.4-1.2s-.1-.9-.4-1.2c-.2-.3-.6-.4-.9-.4-.4 0-.7.1-.9.4-.2.3-.4.7-.4 1.2s.1.9.4 1.2c.2.3.6.5.9.5.4 0 .7-.2.9-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrchart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M10 5.5v9c0 .3-.2.5-.5.5h-3c-.3 0-.5-.2-.5-.5v-9c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5zm-9 4v5c0 .3.2.5.5.5h3c.3 0 .5-.2.5-.5v-5c0-.3-.2-.5-.5-.5h-3c-.3 0-.5.2-.5.5zM14.5 1h-3c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h3c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrcheckbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M7.4 11L3.7 7.3l1.4-1.4 2.3 2.3L14.6 1 16 2.4z"/><path class="dxd-icon-fill" d="M13 6.8V13H3V3h8.2l2-2H1.5c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5V4.8l-2 2z"/></svg>',
    'dxrd-svg-fieldlist-xrcrossbandbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15.5 7H.5C.2 7 0 6.8 0 6.5v-2c0-.3.2-.5.5-.5h15c.3 0 .5.2.5.5v2c0 .3-.2.5-.5.5zm.5 4.5v-2c0-.3-.2-.5-.5-.5H.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5h15c.3 0 .5-.2.5-.5z"/></g><path class="dxd-icon-fill" d="M14 9h-2V7h2v2zM4 4V2h8v2h2V0H2v4h2zM2 9h2V7H2v2zm10 3v2H4v-2H2v4h12v-4h-2z"/></svg>',
    'dxrd-svg-fieldlist-xrcrossbandline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M15.5 7H.5C.2 7 0 6.8 0 6.5v-2c0-.3.2-.5.5-.5h15c.3 0 .5.2.5.5v2c0 .3-.2.5-.5.5zm.5 4.5v-2c0-.3-.2-.5-.5-.5H.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5h15c.3 0 .5-.2.5-.5z"/></g><path class="dxd-icon-fill" d="M7 0h2v4H7zM7 7h2v2H7zM7 12h2v4H7z"/></svg>',
    'dxrd-svg-fieldlist-xrcrosstab': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14 15H2c-.9 0-1.3-1.1-.7-1.7L6.6 8 1.3 2.7C.7 2.1 1.1 1 2 1h12v3h-2V3H4.4l5 5-5 5H12v-1h2v3z"/></svg>',
    'dxrd-svg-fieldlist-xrgauge': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M8 0C3.6 0 0 3.6 0 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14c-3.3 0-6-2.7-6-6s2.7-6 6-6 6 2.7 6 6-2.7 6-6 6z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 8c0 .8.3 1.6.9 2.1l-1.4 1.4C3.6 10.6 3 9.4 3 8c0-2.8 2.2-5 5-5 .6 0 1.3.1 1.8.4L8.2 5H8C6.3 5 5 6.3 5 8zm6-.2V8c0 .8-.3 1.6-.9 2.1l1.4 1.4c.9-.9 1.5-2.1 1.5-3.5 0-.6-.1-1.3-.4-1.8L11 7.8z"/></g><path class="dxd-icon-fill" d="M12 5c0-.6-.4-1-1-1-.3 0-.5.1-.7.3L8.5 6.1C8.3 6 8.2 6 8 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.2 0-.3-.1-.5l1.8-1.8c.2-.2.3-.4.3-.7z"/></svg>',
    'dxrd-svg-fieldlist-xrlabel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 12h-.9L9.5 1.3C9.4 1.1 9.2 1 9 1H6.9c-.2 0-.4.1-.5.3L2.3 12h-.8c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4c.3 0 .5-.2.5-.5v-1c0-.3-.2-.5-.5-.5h-.7l.7-2h4.8l.7 2h-.6c-.3 0-.5.2-.5.5v1c0 .3.2.5.5.5h4c.3 0 .5-.2.5-.5v-1c.1-.3-.1-.5-.4-.5zM6.3 8L8 3.2 9.6 8H6.3z"/></svg>',
    'dxrd-svg-fieldlist-xrline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path transform="rotate(-45.001 8 8)" class="dxd-icon-fill" d="M7-.5h2v17H7z"/><path class="dxd-icon-fill" d="M4.5 5h-3c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5zM14.5 15h-3c-.3 0-.5-.2-.5-.5v-3c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5v3c0 .3-.2.5-.5.5z"/></svg>',
    'dxrd-svg-fieldlist-xrpagebreak': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1 7h2v2H1zM4 7h2v2H4zM7 7h2v2H7zM10 7h2v2h-2zM13 7h2v2h-2zM13 1v3H3V1H1v4.5c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5V1h-2zM13 15v-3H3v3H1v-4.5c0-.3.2-.5.5-.5h13c.3 0 .5.2.5.5V15h-2z"/></svg>',
    'dxrd-svg-fieldlist-xrpageinfo': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 11H3V3h8v2c.7 0 1.4.1 2 .3V1.5c0-.3-.2-.5-.5-.5h-11c-.3 0-.5.2-.5.5v11c0 .3.2.5.5.5h3.8c-.2-.6-.3-1.3-.3-2z"/><path class="dxd-icon-fill" d="M11 6c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm1 8h-2v-3h2v3zm0-4h-2V8h2v2z"/></svg>',
    'dxrd-svg-fieldlist-xrpanel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 13H3V3h10v10z"/></svg>',
    'dxrd-svg-fieldlist-xrpdfcontent': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 18h2v4c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1v-4h2v3h14v-3zM5 3h14v2h2V2c0-.5-.5-1-1-1H4c-.5 0-1 .5-1 1v3h2V3zm2.1 6.9h-1v1.7h1c.4 0 .6-.1.8-.2.2-.2.3-.4.3-.6 0-.3-.1-.5-.3-.6-.2-.2-.4-.3-.8-.3zM23 6v11H1V6h22zM9.4 10.8c0-.4-.1-.7-.3-1-.2-.2-.4-.4-.7-.6C8 9.1 7.6 9 7.2 9H5v5h1.2v-1.4h1c.4 0 .8-.1 1.2-.2.3-.1.6-.4.8-.6s.2-.6.2-1zm5.9.7c0-.5-.1-.9-.3-1.3-.2-.4-.6-.7-1-.9-.5-.2-.9-.3-1.5-.3h-2.3v5h2.3c.5 0 1-.1 1.5-.3.4-.2.7-.5 1-.9.2-.4.3-.8.3-1.3zM20 9h-3.8v5h1.2v-1.8h2.3v-.9h-2.3V9.9H20V9zm-7.5.9h-1.1V13h1.1c.5 0 .9-.1 1.2-.4.3-.3.5-.7.5-1.1 0-.5-.2-.9-.5-1.1-.3-.3-.7-.5-1.2-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrpdfsignature': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1.8 15c-.5 0-.8-.3-.8-.8 0-.2.1-.4.2-.6.4-.4.7-.8 1.1-1.1.3-.3.5-.6.8-.8-.5-1.2-.9-2.8-.9-4.3C2.2 3 4.5 1 6.7 1c1.5 0 2.6 1.7 2.6 3.9C9.3 6.6 8.1 8.6 5 12c.4.5.7.8 1 .8.9 0 1.3-.6 2-2 .4-.9 1-2.4 2.4-2.4 1.2 0 1.2 1.5 1.2 2.1v.9c.2-.2.5-.6.8-1l.1-.1c.6-.9 1.4-2 2.7-2 .5 0 .8.3.8.8s-.3.8-.8.8-.8.4-1.5 1.4l-.1.1c-.5.8-1.1 1.7-2.2 1.7-1.6 0-1.6-2-1.6-2.6v-.1c-.1.2-.3.6-.5.9-.6 1.3-1.4 3-3.3 3-.8 0-1.6-.4-2.2-1.2l-.9.9-.6.6c-.1.3-.3.4-.5.4zM6.7 2.6c-1.4 0-2.8 1.5-2.8 4.7 0 1 .2 2 .5 3C6.8 7.6 7.8 6 7.8 4.9 7.7 3.4 7 2.6 6.7 2.6z"/></svg>',
    'dxrd-svg-fieldlist-xrpicturebox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1H2c-.6 0-1 .4-1 1v12.5c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 13H3V3h10v10zm-3-9c1.1 0 2 .9 2 2s-.9 2-2 2-2-.9-2-2 .9-2 2-2zm-6 8V9l2-2 5 5H4z"/></svg>',
    'dxrd-svg-fieldlist-xrpivotgrid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14 15H2c-.9 0-1.3-1.1-.7-1.7L6.6 8 1.3 2.7C.7 2.1 1.1 1 2 1h12v3h-2V3H4.4l5 5-5 5H12v-1h2v3z"/></svg>',
    'dxrd-svg-fieldlist-xrrichtext': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M12 7.4V12H4V4h4.6l2-2H2.5c-.3 0-.5.2-.5.5v11c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5V5.4l-2 2z"/><path transform="rotate(-45.001 14.177 1.823)" class="dxd-icon-fill" d="M13 .4h2.3v2.8H13z"/><path class="dxd-icon-fill" d="M11.6 2.4L7 7v2h2l4.6-4.6z"/><g><path transform="rotate(-45.001 14.177 1.823)" class="dxd-icon-fill" d="M13 .4h2.3v2.8H13z"/><path class="dxd-icon-fill" d="M11.6 2.4L7 7v2h2l4.6-4.6z"/></g></svg>',
    'dxrd-svg-fieldlist-xrshape': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M10 5c-2.8 0-5 2.2-5 5s2.2 5 5 5 5-2.2 5-5-2.2-5-5-5zm0 8c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.3 3-3 3zM4.3 8c-.2.6-.3 1.3-.3 2H2c-.5 0-1-.4-1-1V2c0-.6.5-1 1-1h7c.5 0 1 .4 1 1v2c-.7 0-1.4.1-2 .3V3H3v5h1.3z"/></svg>',
    'dxrd-svg-fieldlist-xrsparkline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 3v.6l-5 5-2-2-3 3V3h10zM3 13v-.6l3-3 2 2 5-5V13H3z"/></svg>',
    'dxrd-svg-fieldlist-xrsubreport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M11 2v2H5V2h1V.5c0-.3.2-.5.5-.5h3c.3 0 .5.2.5.5V2h1zm-1 4H6v1h4V6zm0 2H6v1h4V8zm0 2H6v1h4v-1zm3.5-8H12v11H4V2H2.5c-.3 0-.5.2-.5.5v12c0 .3.2.5.5.5h11c.3 0 .5-.2.5-.5v-12c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-fieldlist-xrtable': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M14.5 1h-13c-.3 0-.5.2-.5.5v13c0 .3.2.5.5.5h13c.3 0 .5-.2.5-.5v-13c0-.3-.2-.5-.5-.5zM13 13H3V3h10v10z"/><path class="dxd-icon-fill" d="M4 4h2v2H4zM7 4h2v2H7zM10 4h2v2h-2zM4 7h2v2H4zM7 7h2v2H7zM10 7h2v2h-2zM4 10h2v2H4zM7 10h2v2H7zM10 10h2v2h-2z"/></svg>',
    'dxrd-svg-fieldlist-xrtablecell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M6 6h4v4H6z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5H1V1h4v4zm5-4H6v4h4V1zm5 0h-4v4h4V1zM5 6H1v4h4V6zm10 0h-4v4h4V6zM5 11H1v4h4v-4zm5 0H6v4h4v-4zm5 0h-4v4h4v-4z"/></g></svg>',
    'dxrd-svg-fieldlist-xrtableofcontents': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M12 4h-2V2h2v2zm0 1h-2v2h2V5zm0 3h-2v2h2V8zm0 3h-2v2h2v-2z"/></g><path class="dxd-icon-fill" d="M9 4H1V2h8v2zm6-2h-2v2h2V2zM9 5H1v2h8V5zm6 0h-2v2h2V5zM9 8H1v2h8V8zm6 0h-2v2h2V8zm-6 3H1v2h8v-2zm6 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-fieldlist-xrtablerow': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M1 6h14v4H1z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M5 5H1V1h4v4zm5-4H6v4h4V1zm5 0h-4v4h4V1zM5 11H1v4h4v-4zm5 0H6v4h4v-4zm5 0h-4v4h4v-4z"/></g></svg>',
    'dxrd-svg-fieldlist-xrzipcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 16 16" xml:space="preserve"><path class="dxd-icon-fill" d="M5 3H2V1.5c0-.3.2-.5.5-.5h2c.3 0 .5.2.5.5V3zM2 3H.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5H2V3zm3 3H2v2h3V6zm1.5-3H5v3h1.5c.3 0 .5-.2.5-.5v-2c0-.3-.2-.5-.5-.5zM2 8H.5c-.3 0-.5.2-.5.5v3c0 .3.2.5.5.5H2V8zm3 4H2v1.5c0 .3.2.5.5.5h2c.3 0 .5-.2.5-.5V12zm1.5-4H5v4h1.5c.3 0 .5-.2.5-.5v-3c0-.3-.2-.5-.5-.5zM13 3h-3V1.5c0-.3.2-.5.5-.5h2c.3 0 .5.2.5.5V3zm-3 0H8.5c-.3 0-.5.2-.5.5v2c0 .3.2.5.5.5H10V3zm3 3h-3v2h3V6zm1.5-3H13v3h1.5c.3 0 .5-.2.5-.5v-2c0-.3-.2-.5-.5-.5zM10 8H8.5c-.3 0-.5.2-.5.5v3c0 .3.2.5.5.5H10V8zm3 4h-3v1.5c0 .3.2.5.5.5h2c.3 0 .5-.2.5-.5V12zm1.5-4H13v4h1.5c.3 0 .5-.2.5-.5v-3c0-.3-.2-.5-.5-.5z"/></svg>',
    'dxrd-svg-landscape': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 34 34" xml:space="preserve"><style>.st0{opacity:.5}</style><g id="Landscape"><path class="dxd-icon-fill" d="M33 4H1c-.5 0-1 .5-1 1v24c0 .5.5 1 1 1h32c.5 0 1-.5 1-1V5c0-.5-.5-1-1-1zm-1 24H2V6h30v22z"/><g class="st0"><path class="dxd-icon-fill" d="M28 12H6v-2h22v2zm0 2H6v2h22v-2zm0 4H6v2h22v-2zm0 4H6v2h22v-2z"/></g></g></svg>',
    'dxrd-svg-menu-add_datasource': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 19c0 .6-.4 1-1 1h-3v3c0 .6-.4 1-1 1s-1-.4-1-1v-3h-3c-.6 0-1-.4-1-1s.4-1 1-1h3v-3c0-.6.4-1 1-1s1 .4 1 1v3h3c.6 0 1 .4 1 1zM9 0C5.1 0 2 1.5 2 3.5v10C2 15.4 5.1 17 9 17s7-1.6 7-3.5v-10c0-2-3.1-3.5-7-3.5zm0 2c2.9 0 4.4 1.1 4.5 1.5C13.4 3.8 11.9 5 9 5S4.6 3.8 4.5 3.4C4.6 3.1 6.1 2 9 2z"/></svg>',
    'dxrd-svg-menu-back': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 12l9-9 2 2-7 7 7 7-2 2z"/></svg>',
    'dxrd-svg-menu-exit': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 20c.6 0 1 .4 1 1 0 .5-.4 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h11c.6 0 1 .5 1 1 0 .6-.4 1-1 1H5v16h10zm4.3-12.7c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l2.3 2.3H11c-.5 0-1 .5-1 1s.5 1 1 1h9.2l-2.3 2.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L24 12l-4.7-4.7z"/></svg>',
    'dxrd-svg-menu-localization': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 6h-8V4c0-.5-.5-1-1-1s-1 .5-1 1v2H3c-.5 0-1 .5-1 1s.5 1 1 1h11c0 2.5-.7 4.7-2 6.6-.8-1.1-1.3-2.4-1.7-3.8-.1-.5-.5-.8-1-.8-.6 0-1.1.6-1 1.2.4 1.8 1.2 3.5 2.3 4.9C8.9 17.9 6.6 19 4 19c-.6 0-1 .4-1 1s.4 1 1 1c3.1 0 5.9-1.3 8-3.3 2.1 2.1 4.9 3.3 8 3.3.6 0 1-.4 1-1s-.4-1-1-1c-2.6 0-4.9-1.1-6.7-2.8C15 13.9 16 11.1 16 8h5c.5 0 1-.5 1-1s-.5-1-1-1z"/></svg>',
    'dxrd-svg-menu-newreport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 8V3c0-.6-.4-1-1-1H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V9c0-.6-.4-1-1-1h-5zm4 12H4V4h10v5c0 .5.5 1 1 1h5v10z"/></svg>',
    'dxrd-svg-menu-new_via_wizard': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19.2 22H3c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h18c.5 0 1 .5 1 1v16.2l-2-2V4H4v16h13.2l2 2zm4.5 1.7c.4-.4.4-1 0-1.4l-7-7c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l7 7c.4.4 1 .4 1.4 0zm-6.2-10.4l-3.2 1-1 3.2c-.2.6-1 .8-1.4.2L10 15H6.6c-.7 0-1-.8-.6-1.3L8 11 6.9 7.9c-.2-.6.4-1.2 1-1L11.1 8l2.7-2c.5-.4 1.3 0 1.3.6V10l2.7 1.9c.4.4.3 1.2-.3 1.4zm-3-1.2L13 11V9l-1.6 1.2-1.8-.6.6 1.8L9 13h2l1.1 1.5.6-1.9 1.8-.5z"/></svg>',
    'dxrd-svg-menu-run_wizard': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.3 22.7l-6-6c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0l6 6c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0zm-2.9-9.9l-4.2 1.3-1.3 4.2c-.2.8-1.3 1-1.8.3L8.5 15H4c-.8 0-1.3-.9-.8-1.6l2.6-3.5-1.4-4.2c-.2-.8.5-1.5 1.3-1.3l4.2 1.4 3.5-2.6A1 1 0 0115 4v4.4l3.6 2.6c.7.5.5 1.6-.2 1.8zm-2.6-1.3l-2.8-2V6l-2.7 2.1L7 7l1.1 3.3L6 13h3.5l2 2.8 1-3.3 3.3-1z"/></svg>',
    'dxrd-svg-multi_select': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 12h12v12H12zM12 0H0v12h4V4h8z"/><path class="dxd-icon-fill" d="M18 6H6v12h4v-8h8z"/></svg>',
    'dxrd-svg-none': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 0v22h16V0H4zm14 14l-2 2-4-4-4 4-2-2 4-4-4-4 2-2 4 4 4-4 2 2-4 4 4 4z"/></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomcenter': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentBottomCenter"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 16h12v12H10z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomleft': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentBottomLeft"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 16h12v12H4z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_bottomright': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentBottomRight"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 16h12v12H16z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_middlecenter': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentCenterCenter"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 10h12v12H10z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_middleleft': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentCenterLeft"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 10h12v12H4z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_middleright': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentCenterRight"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 10h12v12H16z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_topcenter': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentTopCenter"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M10 4h12v12H10z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_topleft': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentTopLeft"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M4 4h12v12H4z"/></g></svg>',
    'dxrd-svg-pictureeditor-alignment_topright': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Green{fill:#039c23}</style><g id="AlignmentTopRight"><path class="Black" d="M31 0H1C.5 0 0 .5 0 1v30c0 .5.5 1 1 1h30c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 30H2V2h28v28z"/><path class="Green" d="M16 4h12v12H16z"/></g></svg>',
    'dxrd-svg-pictureeditor-image_gallery': '<svg data-bind="svgAttrs" version="1.1" id="Image" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><style>.White{fill:#fff}.st0{opacity:.5}</style><path class="White" d="M22 2H2c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H3V4h18v16zM15.5 6C16.9 6 18 7.1 18 8.5S16.9 11 15.5 11 13 9.9 13 8.5 14.1 6 15.5 6zM15 19l-8-8-3 3v5h11z"/><g class="st0"><path class="White" d="M16.4 19H19l-4-4-1.3 1.3z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_cover': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}</style><g id="Cover"><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M6.2 4.8l2.1 2.1-1.4 1.4-2.1-2.1L2 9V2h7L6.2 4.8zm19.6 0l-2.1 2.1 1.4 1.4 2.1-2.1L30 9V2h-7l2.8 2.8zM6.2 27.2l2.1-2.1-1.4-1.4-2.1 2.1L2 23v7h7l-2.8-2.8zM23 30h7v-7l-2.8 2.8-2.1-2.1-1.4 1.4 2.1 2.1L23 30z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_normal': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}.st0{opacity:.35}</style><g id="Normal"><path class="Blue" d="M10 10h12v12H10z"/><g class="st0"><path class="Black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/></g><path class="Black" d="M28 22c-2.2 0-4 1.8-4 4v5c0 .6.4 1 1 1h6c.6 0 1-.4 1-1v-5c0-2.2-1.8-4-4-4zm0 2c1.1 0 2 .9 2 2h-4c0-1.1.9-2 2-2z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_squeeze': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}</style><g id="Squeeze"><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M28.2 26.8l2.1 2.1-1.4 1.4-2.1-2.1L24 31v-7h7l-2.8 2.8zm-24.4 0l-2.1 2.1 1.4 1.4 2.1-2.1L8 31v-7H1l2.8 2.8zM28.2 5.2l2.1-2.1-1.4-1.4-2.1 2.1L24 1v7h7l-2.8-2.8zM1 8h7V1L5.2 3.8 3.1 1.7 1.7 3.1l2.1 2.1L1 8z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_stretchimage': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}</style><g id="Stretch"><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M5 15h3v2H5v4l-5-5 5-5v4zm6-10h4v3h2V5h4l-5-5-5 5zm21 11l-5-5v4h-3v2h3v4l5-5zm-15 8h-2v3h-4l5 5 5-5h-4v-3z"/></g></svg>',
    'dxrd-svg-pictureeditor-size_mode_zoomimage': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Black{fill:#727272}.Blue{fill:#1177d7}</style><g id="Zoom"><path class="Blue" d="M10 10h12v12H10z"/><path class="Black" d="M6.2 4.8l2.1 2.1-1.4 1.4-2.1-2.1L2 9V2h7L6.2 4.8zm19.6 0l-2.1 2.1 1.4 1.4 2.1-2.1L30 9V2h-7l2.8 2.8zM6.2 27.2l2.1-2.1-1.4-1.4-2.1 2.1L2 23v7h7l-2.8-2.8zM23 30h7v-7l-2.8 2.8-2.1-2.1-1.4 1.4 2.1 2.1L23 30z"/></g></svg>',
    'dxrd-svg-pictureeditor-toolbar_brush_options': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><style>.White{fill:#fff}.BrushColor{fill:#000}</style><g id="Painting"><path class="BrushColor" d="M2 21c8.5 8.6 11.8-4.5 19 0-8.4-8.6-11.8 4.6-19 0z"/><path class="White" d="M8 13l2 2c-2.5 4.2-4 4-8 4 2.5-2.5 3.3-6 6-6zm6-1l6.5-6.5c.3-.3.3-.7 0-1l-2-2c-.3-.3-.7-.3-1 0L11 9l3 3zm-5-1c-.3.3-.3.7 0 1l2 2c.3.3.7.3 1 0l1-1-3-3-1 1z"/></g></svg>',
    'dxrd-svg-pictureeditor-toolbar_clear': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><style>.White{fill:#fff}</style><path class="White" d="M19 5c.6 0 1 .4 1 1v1H4V6c0-.6.4-1 1-1h5V4c0-.6.4-1 1-1h2c.6 0 1 .4 1 1v1h5zm0 3v12c0 .6-.4 1-1 1H6c-.6 0-1-.4-1-1V8h14zM9 10H7v9h2v-9zm4 0h-2v9h2v-9zm4 0h-2v9h2v-9z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_open': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><style>.White{fill:#fff}.st0{opacity:.75}</style><g id="Open"><g class="st0"><path class="White" d="M7.9 11.9c.4-.6 1-.9 1.7-.9H19V8.7c0-.4-.3-.7-.7-.7H10V5.7c0-.4-.3-.7-.7-.7H3.7c-.4 0-.7.3-.7.7v14l4.9-7.8z"/></g><path class="White" d="M9.6 12h13.2c.5 0 .9.6.6 1.1l-4 6.5c-.2.3-.5.5-.8.5H4l4.7-7.5c.2-.4.5-.6.9-.6z"/></g></svg>',
    'dxrd-svg-pictureeditor-toolbar_reset': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><style>.White{fill:#fff}</style><path class="White" d="M12 3C9.5 3 7.3 4 5.6 5.6L3 3v8h8L7.8 7.8C8.9 6.7 10.3 6 12 6c3.3 0 6 2.7 6 6s-2.7 6-6 6c-2.6 0-4.8-1.7-5.6-4H3.2c.9 4 4.5 7 8.8 7 5 0 9-4 9-9s-4-9-9-9z"/></svg>',
    'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><style>.White{fill:#fff}</style><path class="White" d="M20 12V4h-8l3 3-8 8-3-3v8h8l-3-3 8-8z" id="Sizing"/></svg>',
    'dxrd-svg-portrait': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 34 34" xml:space="preserve"><style>.st0{opacity:.5}</style><g id="Portrait"><path class="dxd-icon-fill" d="M29 0H5c-.5 0-1 .5-1 1v32c0 .5.5 1 1 1h24c.5 0 1-.5 1-1V1c0-.5-.5-1-1-1zm-1 32H6V2h22v30z"/><g class="st0"><path class="dxd-icon-fill" d="M24 8H10V6h14v2zm0 2H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2zm0 4H10v2h14v-2z"/></g></g></svg>',
    'dxrd-svg-preview-export-export-to-csv': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v11h10v-7l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3zM0 3v7h13V3H0zm4 2H2v3h2v1H2V8H1V5h1V4h2v1zm4 0H6v1h1v1h1v1H7v1H5V8h2V7H6V6H5V5h1V4h2v1zm4 3h-1v1h-1V8H9V4h1v4h1V4h1v4z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4z"/></svg>',
    'dxrd-svg-preview-export-export-to-html': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h19V3H0zm4 6H3V7H2v2H1V4h1v2h1V4h1v5zm4-4H7v4H6V5H5V4h3v1zm6 4h-1V6h-1v1h-1V6h-1v3H9V4h1v1h1v1h1V5h1V4h1v5zm4 0h-3V4h1v4h2v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-image': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm2 6H1V4h1v5zm6 0H7V6H6v1H5V6H4v3H3V4h1v1h1v1h1V5h1V4h1v5zm5-4h-3v3h2V7h1v2h-3V8H9V5h1V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-mht': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1h1v2H3V7H2v2H1V4h2v1h1v1zm4-1H7v4H6V5H5V4h3v1zm4 0h-2v1h1v1h-1v2H9V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-pdf': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM2 5h1v1H2z"/><path class="dxd-icon-fill" d="M0 3v7h13V3H0zm4 3H3v1H2v2H1V4h2v1h1v1zm4 2H7v1H5V4h2v1h1v3zm4-3h-2v1h1v1h-1v2H9V4h3v1z"/><path class="dxd-icon-fill" d="M6 5h1v3H6z"/></svg>',
    'dxrd-svg-preview-export-export-to-rtf': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h14v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h15V3H0zm6 6H5V6H4v1H3V6H2v3H1V4h1v1h1v1h1V5h1V4h1v5zm4 0H9V7H8v2H7V4h1v2h1V4h1v5zm4-4h-1v4h-1V5h-1V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-txt': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h18v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM18 3H0v7h19V3h-1zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1zm4 1h-1v1h1v2h-1V7h-1v2h-1V7h1V6h-1V4h1v2h1V4h1v2z"/></svg>',
    'dxrd-svg-preview-export-export-to-xls': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM12.3 3H0v7h13V3h-.7zM4 6H3v1h1v2H3V7H2v2H1V7h1V6H1V4h1v2h1V4h1v2zm4 3H5V4h1v4h2v1zm4-4h-2v1h1v1h1v1h-1v1H9V8h2V7h-1V6H9V5h1V4h2v1z"/></svg>',
    'dxrd-svg-preview-export-export-to-xlsx': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v2h12v9H2v12h10v-8l2-2h7V0z"/><path class="dxd-icon-fill" d="M17 14h3v3h-3z"/><path class="dxd-icon-fill" d="M21 14v4h-6v-4l-2 2v8h10V14h-2zm0 9h-6v-4h6v4zM0 3v7h13V3H0zm4 2H3v4H2V5H1V4h3v1zm4 1H7v1h1v2H7V7H6v2H5V7h1V6H5V4h1v2h1V4h1v2zm4-1h-1v4h-1V5H9V4h3v1z"/></svg>',
    'dxrd-svg-preview-export-export-to': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7.7 9.1L11 5.8V16c0 .6.4 1 1 1s1-.4 1-1V5.8l3.3 3.3c.4.4 1 .4 1.4 0s.4-1 0-1.4L12 2 6.3 7.7c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0zM22 16v4c0 .5-.5 1-1 1H3c-.5 0-1-.5-1-1v-4c0-.5.5-1 1-1s1 .5 1 1v3h16v-3c0-.5.5-1 1-1s1 .5 1 1z"/></svg>',
    'dxrd-svg-preview-export-Export': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 10l-4-4v2h-1.4C11.8 8 8 11.1 8 15.9V18c1-4.2 4.6-6 8.6-6H18v2l4-4z"/><path class="dxd-icon-fill" d="M18 22H4V2h14l2 2V0H2v24h18v-8l-2 2z"/></svg>',
    'dxrd-svg-preview-first_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7 19c-.6 0-1-.4-1-1V6c0-.5.4-1 1-1 .5 0 1 .4 1 1v12c0 .6-.4 1-1 1zm11.7-.3c.4-.4.4-1 0-1.4L13.4 12l5.3-5.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L10.6 12l6.7 6.7c.4.4 1 .4 1.4 0z"/></svg>',
    'dxrd-svg-preview-last_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6v12c0 .5-.5 1-1 1s-1-.5-1-1V6c0-.5.5-1 1-1s1 .5 1 1zM5.3 5.3c-.4.4-.4 1 0 1.4l5.3 5.3-5.3 5.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l6.7-6.7-6.7-6.7c-.4-.4-1-.4-1.4 0z"/></svg>',
    'dxrd-svg-preview-multi_page_preview': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 1H2c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zM9 9H3V3h6v6zm13-8h-8c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1V2c0-.5-.5-1-1-1zm-1 8h-6V3h6v6zm-11 4H2c-.5 0-1 .5-1 1v8c0 .5.5 1 1 1h8c.5 0 1-.5 1-1v-8c0-.5-.5-1-1-1zm-1 8H3v-6h6v6z"/></svg>',
    'dxrd-svg-preview-next_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M9.7 5.3c-.4-.4-1-.4-1.4 0-.4.4-.4 1 0 1.4l5.3 5.3-5.3 5.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0l6.7-6.7-6.7-6.7z"/></svg>',
    'dxrd-svg-preview-previous_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14.3 18.7L7.6 12l6.7-6.7c.4-.4 1-.4 1.4 0 .4.4.4 1 0 1.4L10.4 12l5.3 5.3c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0z"/></svg>',
    'dxrd-svg-preview-print': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 9c0-.6-.5-1-1-1h-3V2c0-.5-.5-1-1-1H7c-.6 0-1 .5-1 1v6H3c-.5 0-1 .4-1 1v10h4v2c0 .5.4 1 1 1h10c.5 0 1-.5 1-1v-2h4V9zM8 3h8v5H8V3zm8 17H8v-5h8v5zm4-3h-2v-4H6v4H4v-7h16v7z"/></svg>',
    'dxrd-svg-preview-print_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M3 10h16v1h2V9c0-.5-.5-1-1-1h-3V2c0-.5-.5-1-1-1H6c-.5 0-1 .5-1 1v6H2c-.5 0-1 .5-1 1v10h11v-2H3v-7zm4-7h8v5H7V3zm16 9h-9c-.5 0-1 .5-1 1v10c0 .5.5 1 1 1h9c.5 0 1-.5 1-1V13c0-.5-.5-1-1-1zm-1 10h-7v-8h7v8zM5 13h7v2H5v-2z"/></svg>',
    'dxrd-svg-preview-print_preview': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 4l-4-4v4zM21.7 22.3l-4.5-4.5c.5-.8.8-1.8.8-2.8 0-2.8-2.2-5-5-5s-5 2.2-5 5 2.2 5 5 5c1 0 2-.3 2.8-.8l4.5 4.5c.4.4 1 .4 1.4 0s.4-1 0-1.4zM13.1 18c-1.7 0-3-1.3-3-3s1.3-3 3-3 3 1.3 3 3-1.4 3-3 3z"/><path class="dxd-icon-fill" d="M13 8c2 0 3.7.8 5 2.1V6h-6V0H0v20h8.1C6.8 18.7 6 17 6 15c0-3.9 3.1-7 7-7z"/></svg>',
    'dxrd-svg-preview-report_designer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6l-4-4v4h4zM14 18h2l8-8-2-2-8 8z"/><path class="dxd-icon-fill" d="M12 20v-4l6-6V8h-6V2H0v20h18v-4l-2 2h-4zm-6-4c-2.2 0-4-1.8-4-4s1.8-4 4-4 4 1.8 4 4-1.8 4-4 4z"/><path class="dxd-icon-fill" d="M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2H6v-2z"/></svg>',
    'dxrd-svg-preview-search': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21.7 20.3l-5.4-5.4c1.1-1.4 1.7-3.1 1.7-4.9 0-4.4-3.6-8-8-8s-8 3.6-8 8 3.6 8 8 8c1.8 0 3.5-.6 4.9-1.7l5.4 5.4c.4.4 1 .4 1.4 0s.4-1 0-1.4zM4 10c0-3.3 2.7-6 6-6s6 2.7 6 6-2.7 6-6 6-6-2.7-6-6z"/></svg>',
    'dxrd-svg-preview-single_page': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6V2c0-.6-.4-1-1-1H2c-.5 0-1 .5-1 1v20c0 .5.5 1 1 1h20c.5 0 1-.5 1-1V7c0-.6-.4-1-1-1h-4zm3 15H3V3h13v4c0 .5.5 1 1 1h4v13z"/></svg>',
    'dxrd-svg-preview-sort_asc': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 11 11" xml:space="preserve"><path class="dxd-icon-fill" d="M0 7l5-5 5 5z"/></svg>',
    'dxrd-svg-preview-sort_desc': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 11 11" xml:space="preserve"><path class="dxd-icon-fill" d="M10 3L5 8 0 3z"/></svg>',
    'dxrd-svg-reportexplorer-component': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2C7.6 2 4 3.8 4 6v12c0 2.2 3.6 4 8 4s8-1.8 8-4V6c0-2.2-3.6-4-8-4zm0 6C8.1 8 6 6.5 6 6s2.1-2 6-2 6 1.5 6 2-2.1 2-6 2z"/></svg>',
    'dxrd-svg-reportexplorer-components': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 11c0-2.5 2.4-4.3 6-4.9V3c0-1.7-2.7-3-6-3S2 1.3 2 3v10c0 1.7 2.7 3 6 3v-5zm0-9c2.1 0 3.4.6 3.9 1-.5.4-1.8 1-3.9 1s-3.4-.6-3.9-1c.5-.4 1.8-1 3.9-1zm8 6c-3.3 0-6 1.3-6 3v10c0 1.7 2.7 3 6 3s6-1.3 6-3V11c0-1.7-2.7-3-6-3zm0 4c-2.1 0-3.4-.6-3.9-1 .5-.4 1.8-1 3.9-1s3.4.6 3.9 1c-.5.4-1.8 1-3.9 1z"/></svg>',
    'dxrd-svg-reportexplorer-formatting_rule': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 10h6V2H2v18h12v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
    'dxrd-svg-reportexplorer-formatting_rules': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 0H0v16h2V2h10z"/><path class="dxd-icon-fill" d="M10 10h6V4H4v16h10v-2l-4-4z"/><path class="dxd-icon-fill" d="M12 12v2l4 4v4h2v-4l4-4v-2z"/></svg>',
    'dxrd-svg-reportexplorer-style': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V2H0v18h6zm5.4-6.4c-.1.3-.2.4 0 0zM21.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM12.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.3.3-.6.8-.8 1.3-.2.9-.7 1.7-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.3-.7-.5-1-.8z"/></svg>',
    'dxrd-svg-reportexplorer-styles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 0v2H2v14H0V0z"/><path class="dxd-icon-fill" d="M8 20c1-.3 1.5-1.1 1.7-2 .2-.5.4-1 .8-1.4.3-.3.5-.5.9-.6 0 0 .7-.1 1-.5.1-.1.2-.3.2-.3l.7-1.3c.1-.2.8-.9.8-.9.6-.7 1.3-1.4 1.9-2.1V4H4v16h4zm5.4-6.4c-.1.3-.2.4 0 0zM23.8 8.1c-.2-.2-.5-.1-.8.1-.4.4-.9.7-1.3 1.1-2 1.7-3.5 3.4-5.3 5.3-.1.1-.5.5-.5.6-.2.2-.3.4-.6.8.6.5 1.5 1.2 2.1 1.7.4-.3.6-.6.6-.6l.4-.4c.7-.9 1.1-1.5 1.8-2.4 1.3-1.7 2.5-3.5 3.5-5.4.4-.3.3-.6.1-.8zM14.5 18.1c-.1-.1-.2-.1-.3-.1-.7-.1-1.2.2-1.7.7-.4.4-.6.9-.8 1.4-.3.9-.7 1.6-1.7 2h2.6c1 0 1.8-.4 2.5-1.1.4-.4.7-.9.6-1.5 0-.2-.1-.4-.2-.5-.3-.4-.7-.6-1-.9z"/></svg>',
    'dxrd-svg-reportexplorer-tablecell': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 8v8h8V8H8zm6 6h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M2 2v20h20V2H2zm18 6h-4v2h4v4h-4v2h4v4h-4v-4h-2v4h-4v-4H8v4H4v-4h4v-2H4v-4h4V8H4V4h4v4h2V4h4v4h2V4h4v4z"/></svg>',
    'dxrd-svg-reportexplorer-tablerow': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 8H2v8h20V8h-6zm-8 6H4v-4h4v4zm6 0h-4v-4h4v4zm6 0h-4v-4h4v4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M4 8V4h4v4h2V4h4v4h2V4h4v4h2V2H2v6zM20 16v4h-4v-4h-2v4h-4v-4H8v4H4v-4H2v6h20v-6z"/></svg>',
    'dxrd-svg-series-area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 20v-4l8-8 4 4 8-8v16z"/></svg>',
    'dxrd-svg-series-area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M12 8L8 4l-8 8v4h6v-6h14V0z"/></svg>',
    'dxrd-svg-series-bubbles': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><circle class="dxd-icon-fill" cx="8" cy="4" r="2"/><circle class="dxd-icon-fill" cx="16" cy="10" r="4"/><circle class="dxd-icon-fill" cx="7" cy="19" r="3"/></svg>',
    'dxrd-svg-series-candle_stick': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 4V2h-2v2h-2v16h2v2h2v-2h2V4h-2zm0 14h-2V6h2v12zM8 2H6v2H4v16h2v2h2v-2h2V4H8z"/></svg>',
    'dxrd-svg-series-doughnut': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M5.1 10C5.5 7 7 5.5 10 5.1V0C5 .5.5 5 0 10h5.1zM12 5.1c3 .5 5 2.9 5 5.9 0 1.3-.4 2.5-1.1 3.5l3.6 3.6c1.5-2 2.5-4.4 2.5-7.1C22 5.3 18 .5 12 0v5.1zM14.5 15.9c-1 .7-2.2 1.1-3.5 1.1-3 0-5.4-2-5.9-5H0c.5 6 5.2 10 11 10 2.7 0 5.1-1 7-2.6l-3.5-3.5z"/></svg>',
    'dxrd-svg-series-doughnut3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2.5v-5.9L22 12zm0 8h-2v-6h2v6zM10 4.9V0C5 .5.5 5 0 10h5c.5-3 2-4.6 5-5.1zM12 0v4.9c2 .4 4.5 2.1 4.9 5.1h5C21.5 5 17 .5 12 0zM5.1 12H0c.4 5 4 7.9 8 9.1v-5.3C6 14.9 5.4 14 5.1 12z"/></svg>',
    'dxrd-svg-series-full_stacked_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2v14L12 6l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 10L2 20v2h20V8l-6 6z"/></svg>',
    'dxrd-svg-series-full_stacked_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM14 8l6-6V0H0v14L10 4z"/><path class="dxd-icon-fill" d="M10 8L0 18v2h8v-8h6zM20 6l-6 6h6z"/></svg>',
    'dxrd-svg-series-full_stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 4h4v10H4zM10 4h4v6h-4zM10 12h4v8h-4zM16 4h4v8h-4zM16 14h4v6h-4zM4 16h4v4H4z"/></svg>',
    'dxrd-svg-series-full_stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0h4v10H2zM8 0h4v6H8zM8 8h4v4H8zM14 0h4v8h-4zM14 10h4v2h-4zM2 12h4v4H2zM8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
    'dxrd-svg-series-full_stacked_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h20v2H2zM12 8L2 18v4l10-10 4 4 6-6V6l-6 6z"/></svg>',
    'dxrd-svg-series-full_stacked_line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 14v2h4v2H8v2h4v2H8v2h6V14h-2zM20 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h20v2H0z"/><path class="dxd-icon-fill" d="M12 12h4l4-4V4l-6 6-4-4L0 16v4l10-10z"/></svg>',
    'dxrd-svg-series-full_stacked_spline_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 11.9c1.8 0 2.6 1.3 3.3 2.3S6.5 16 8 16c1.4 0 2.6-2.1 3.7-4.2C13.3 9.1 14.9 6 18 6c1.5 0 2.8.7 4 1.8V2H2v9.9z"/><path class="dxd-icon-fill" d="M18 8c-1.9 0-3.2 2.4-4.5 4.7C12.1 15.3 10.6 18 8 18s-3.7-1.6-4.4-2.7C3 14.3 2.7 14 2 14v8h20V10.7C20.8 9.3 19.4 8 18 8z"/></svg>',
    'dxrd-svg-series-full_stacked_spline_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM16 4c1.5 0 2.8.7 4 1.8V0H0v9.9c1.8 0 2.6 1.3 3.3 2.3C4 13.2 4.5 14 6 14c1.4 0 2.6-2.1 3.7-4.2C11.3 7.1 12.9 4 16 4z"/><path class="dxd-icon-fill" d="M11.5 10.8l-.6 1.2H20V8.7C18.8 7.3 17.4 6 16 6c-1.9 0-3.2 2.5-4.5 4.8zM1.6 13.3C1 12.3.7 12 0 12v8h8v-4.6c-1 .4-1.2.6-2 .6-2.6 0-3.6-1.6-4.4-2.7z"/></svg>',
    'dxrd-svg-series-funnel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12h4l6-6H4zM4 2h16v2H4zM10 22l4-2v-6h-4z"/></svg>',
    'dxrd-svg-series-funnel3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 10h4l6-6H0zM0 0h16v2H0zM6 20l2-1v-7H6z"/></svg>',
    'dxrd-svg-series-gantt': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 4h8v4H2zM6 10h14v4H6zM2 16h12v4H2z"/></svg>',
    'dxrd-svg-series-line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 16L12 6l4 4 6-6v4l-6 6-4-4L2 20z"/></svg>',
    'dxrd-svg-series-line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v4L10 6l4 4 6-6z"/><path class="dxd-icon-fill" d="M8 12v2h4v2H8v2h4v2H8v2h6V12h-2zM20 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/></svg>',
    'dxrd-svg-series-manhattan_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 12h4v8H0z"/><path class="dxd-icon-fill dxd-opacity-80" d="M12 5.9h4V10h-4z"/><path class="dxd-icon-fill" d="M8 10h2V2H6v18h2z"/></svg>',
    'dxrd-svg-series-nested_doughnut': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 10h2c-.5-5-5-9.5-10-10v2c4 .5 7.5 4 8 8z"/><path class="dxd-icon-fill" d="M11 20c-5 0-9-4-9-9 0-4.6 3-8.5 8-9V0C4 .5 0 5.2 0 11c0 6.1 4.9 11 11 11 5.7 0 10.5-4 11-10h-2c-.5 5-4.3 8-9 8z"/><path class="dxd-icon-fill" d="M11 16c-2.4 0-4.4-2-4.9-4h-2c.5 3 3.4 6 6.9 6 1.4 0 2.7-.4 3.8-1.2l-1.5-1.5c-.6.5-1.4.7-2.3.7zM4.1 10h2c.5-2 2.5-4 4.9-4 2.8 0 5 2.2 5 5 0 .9-.2 1.7-.7 2.4l1.5 1.5c.8-1.1 1.2-2.5 1.2-3.9 0-3.9-3.1-7-7-7-3.5 0-6.4 3-6.9 6z"/></svg>',
    'dxrd-svg-series-pie': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2v10H2c0 5.5 4.5 10 10 10s10-4.5 10-10S17.5 2 12 2z"/><path class="dxd-icon-fill" d="M10 0C4.5 0 0 4.5 0 10h10V0z"/></svg>',
    'dxrd-svg-series-pie3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM10 0C4.5 0 0 4.5 0 10h10V0zM12 2v8h9.8c-.9-4.6-5-8-9.8-8zM8 21.1V12H2c0 4.1 2 7.6 6 9.1z"/></svg>',
    'dxrd-svg-series-point': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><circle class="dxd-icon-fill" cx="4" cy="16" r="2"/><circle class="dxd-icon-fill" cx="8" cy="8" r="2"/><circle class="dxd-icon-fill" cx="14" cy="12" r="2"/><circle class="dxd-icon-fill" cx="20" cy="6" r="2"/></svg>',
    'dxrd-svg-series-polar_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M6 6h10v10z"/></svg>',
    'dxrd-svg-series-polar_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm.9 19.9V17c0-.5-.5-1-1-1s-1 .5-1 1v3c-4-.4-7.5-3.8-8-8h3.1c.5 0 1-.5 1-1s-.5-1-1-1h-3H2c.5-4.2 4-7.5 8-8v1c0 .5.5 1 1 1s1-.5 1-1v-.9c4 .5 7.5 3.8 7.9 7.9H19c-.5 0-1 .5-1 1s.5 1 1 1h.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/></svg>',
    'dxrd-svg-series-polar_point': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zm8.8 10H12V2.1c4 .5 7.5 3.8 7.9 7.9zM10 2v8H2.1 2c.5-4.2 4-7.5 8-8zm0 18c-4-.4-7.5-3.8-8-8h8v8zm2-.1V12h7.9c-.4 4.1-3.9 7.4-7.9 7.9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/></svg>',
    'dxrd-svg-series-radar_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 16L6 6h10v10zm-6-8l4 4V8h-4z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11.9 15.9c-.3.1-.6.1-.9.1-2.8 0-5-2.2-5-5 0-.3 0-.6.1-.9L4.5 8.5c-.3.8-.5 1.6-.5 2.5 0 3.9 3.1 7 7 7 .9 0 1.7-.2 2.5-.5l-1.6-1.6z"/><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/></svg>',
    'dxrd-svg-series-radar_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="7" cy="15" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-80" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.7 0-1.4-.2-2.1-.5-.2.7-.8 1.3-1.6 1.4 1.1.7 2.3 1 3.6 1 1.3 0 2.6-.4 3.7-1-.7-.1-1.3-.6-1.5-1.4zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM8.9 6.5c.7-.3 1.4-.5 2.1-.5.7 0 1.5.2 2.1.5.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9.7.2 1.3.7 1.5 1.5zM6.5 13.1c-.3-.7-.5-1.4-.5-2.1s.2-1.4.5-2.1c-.8-.2-1.3-.8-1.5-1.6-.6 1.1-1 2.4-1 3.7s.4 2.6 1 3.7c.2-.8.7-1.4 1.5-1.6z"/></g></svg>',
    'dxrd-svg-series-radar_point': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill dxd-opacity-80" d="M11.1 0H11C4.9 0 0 4.9 0 11s4.9 11 11 11 11-4.9 11-11C22 5 17.1.1 11.1 0zM11 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><circle class="dxd-icon-fill" cx="7" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="7" r="1"/><circle class="dxd-icon-fill" cx="15" cy="15" r="1"/><g><path class="dxd-icon-fill dxd-opacity-80" d="M13.1 15.5c-.6.3-1.4.5-2.1.5-.3 0-.6 0-.9-.1h-.2c-.2-.1-.5-.1-.7-.2-.1 0-.2-.1-.3-.1-1.1-.5-2-1.4-2.5-2.5-.1-.1-.1-.2-.1-.3-.1-.2-.2-.4-.2-.7v-.2c-.1-.3-.1-.6-.1-.9 0-.5.1-1 .2-1.5.1-.2.1-.4.2-.6-.7-.2-1.2-.8-1.4-1.6-.1.3-.2.5-.4.8 0 .1-.1.1-.1.2 0 .2-.1.4-.2.6 0 .1-.1.2-.1.3 0 .2-.1.4-.1.6v.3c-.1.3-.1.6-.1.9 0 .3 0 .6.1.9v.2c0 .3.1.5.2.8v.1c.5 1.7 1.6 3.1 3.1 4 .5.3 1.1.6 1.7.8h.1c.3.1.5.1.8.2h.2c.3 0 .6.1.9.1h.5c1.1-.1 2.2-.4 3.1-1-.8-.3-1.4-.8-1.6-1.6zM17 7.4c-.1.8-.7 1.4-1.4 1.6.2.6.4 1.3.4 2s-.2 1.4-.5 2.1c.7.2 1.3.8 1.4 1.6.6-1.1 1-2.3 1-3.6s-.3-2.7-.9-3.7zM7.4 5c.8.1 1.4.7 1.6 1.4.6-.2 1.3-.4 2-.4s1.5.2 2.1.5c.2-.7.8-1.3 1.6-1.4-1.1-.7-2.3-1-3.7-1-1.3-.1-2.6.3-3.6.9z"/></g></svg>',
    'dxrd-svg-series-range_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 14L12 4l4 4 6-6v6l-6 6-4-4L2 20z"/></svg>',
    'dxrd-svg-series-range_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M20 0l-6 6-4-4L0 12v6L10 8l2 2h4l4-4z"/></svg>',
    'dxrd-svg-series-range_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v14h-4z"/></svg>',
    'dxrd-svg-series-scatter_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22.8 8c-1.5-2.7-4-4.7-7-5.5-3-.8-6.1-.8-8.8.8C3 5.6.5 10 0 14h2.1c.4-4 2.5-6.9 6-8.9 2.2-1.3 4.8-1.4 7.2-.7 2.4.6 4.4 2.3 5.7 4.5 1 1.7 1.2 3.8.7 5.7-.5 1.9-1.8 3.5-3.5 4.5-2.7 1.6-6.2.6-7.8-2.2-1.2-2.1-.4-4.8 1.6-6 .8-.4 1.6-.5 2.5-.3.8.2 1.5.8 2 1.6.3.6.4 1.2.2 1.9-.2.6-.6 1.2-1.1 1.5-.8.5-1.9.2-2.4-.7-.3-.6-.1-1.3.4-1.6l-1-1.8c-1.5.9-2.1 2.9-1.2 4.4 1 1.8 3.3 2.5 5.1 1.4 2.1-1.2 2.9-4 1.7-6.1-.7-1.3-1.8-2.1-3.2-2.5-1.4-.4-2.8-.2-4 .5C8 11 6.9 14.9 8.7 18c2.1 3.8 6.8 5.1 10.6 2.9 2.2-1.3 3.8-3.3 4.4-5.7.6-2.4.3-5-.9-7.2z"/></svg>',
    'dxrd-svg-series-side_by_side_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 12h4v8H4zM16 6h4v14h-4zM10 2h4v18h-4z"/></svg>',
    'dxrd-svg-series-side_by_side_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 10h4v8H0zM12 4h4v6h-4zM10 0H6v18h2v-8h2z"/></svg>',
    'dxrd-svg-series-side_by_side_full_stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 0h4v12H0zM0 14h4v8H0zM12 0h4v16h-4zM12 18h4v4h-4zM18 8h4v14h-4zM18 0h4v6h-4zM6 8h4v14H6zM6 0h4v6H6z"/></svg>',
    'dxrd-svg-series-side_by_side_full_stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 0h4v12H0zM0 14h4v8H0zM12 0h4v12h-4zM18 8h4v4h-4zM18 0h4v6h-4zM6 0h4v6H6zM10 8H6v14h2V12h2z"/></svg>',
    'dxrd-svg-series-side_by_side_gantt': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0h8v4H2zM4 12h12v4H4zM6 18h12v4H6zM6 6h14v4H6z"/></svg>',
    'dxrd-svg-series-side_by_side_range_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 12h4v8H0zM12 6h4v12h-4zM18 4h4v12h-4zM6 2h4v14H6z"/></svg>',
    'dxrd-svg-series-side_by_side_stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 10h4v2H0zM0 14h4v8H0zM6 12h4v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v12h-4zM18 2h4v4h-4zM18 8h4v14h-4z"/></svg>',
    'dxrd-svg-series-side_by_side_stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 8h4v4H0zM0 14h4v8H0zM6 12h2v10H6zM6 0h4v10H6zM12 4h4v4h-4zM12 10h4v2h-4zM18 2h4v4h-4zM18 8h4v2h-4z"/></svg>',
    'dxrd-svg-series-spline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 11.5C22.1 8.6 19.7 6 17 6c-3 0-4.7 3.1-6.2 5.8C9.6 13.8 8.4 16 7 16c-1.5 0-2-.8-2.7-1.8-.6-1-1.5-2.2-3.3-2.3-.4 0-.7.1-1 .2V15c0-.1.1-.5.4-.8.2-.2.5-.3.6-.3.7 0 1 .4 1.6 1.3C3.4 16.4 4.4 18 7 18c2.6 0 4.1-2.7 5.5-5.2C13.8 10.4 15.1 8 17 8c2.9 0 5.9 5.4 6.9 7.2l.1.2v-3.9z"/></svg>',
    'dxrd-svg-series-spline3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM15 2c2.9 0 5.9 5.4 6.9 7.2l.1.2V5.5C20.1 2.6 17.7 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v2.3c.2.2.4.5.6.9C1.4 10.4 2.4 12 5 12c2.6 0 4.1-2.7 5.5-5.2C11.8 4.4 13.1 2 15 2z"/></svg>',
    'dxrd-svg-series-spline_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h22V7.5C20.1 4.6 17.8 2 15 2z"/></svg>',
    'dxrd-svg-series-spline_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M22 7.5C20.1 4.6 17.8 2 15 2c-3 0-4.7 3.1-6.2 5.8C7.6 9.8 6.4 12 5 12c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V20h8v-8h14V7.5z"/></svg>',
    'dxrd-svg-series-stacked_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 8l-4-4L2 14v4L12 8l4 4 6-6V2z"/><path class="dxd-icon-fill" d="M12 12L2 22h20V10l-6 6z"/></svg>',
    'dxrd-svg-series-stacked_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 12v2h4v2h-4v2h4v2h-4v2h6V12h-2zM22 12h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM8 22v-8l-8 8z"/><path class="dxd-icon-fill" d="M20 2l-6 6-4-4L0 14v4L10 8l2 2h4l4-4z"/></svg>',
    'dxrd-svg-series-stacked_bar': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 8h4v4H4zM4 14h4v6H4zM10 2h4v6h-4zM10 10h4v10h-4zM16 6h4v4h-4zM16 12h4v8h-4z"/></svg>',
    'dxrd-svg-series-stacked_bar3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM0 6h4v4H0zM0 12h4v6H0zM6 0h4v6H6zM10 8H6v10h2v-6h2zM12 4h4v4h-4zM12 10h4v2h-4z"/></svg>',
    'dxrd-svg-series-stacked_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 8l-4-4L0 14v4L10 8l4 4 8-8V0z"/><path class="dxd-icon-fill" d="M10 10L0 20v4l10-10 8 8 4-4v-4l-4 4z"/></svg>',
    'dxrd-svg-series-stacked_line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 12l8-8V0l-8 8-4-4L0 14v4L10 8zM10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M10 10l-2 2h4zM0 24l8-8v-4l-8 8zM22 10V6l-6 6h4z"/></svg>',
    'dxrd-svg-series-stacked_spline_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0z"/><path class="dxd-icon-fill" d="M15 9c-3 0-4.7 3.1-6.2 5.8C7.6 16.8 6.4 19 5 19c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1V22h22v-7.5C20.1 11.6 17.8 9 15 9z"/></svg>',
    'dxrd-svg-series-stacked_spline_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M15 6c2.8 0 5.1 2.6 7 5.5v-6C20.1 2.6 17.8 0 15 0c-3 0-4.7 3.1-6.2 5.8C7.6 7.8 6.4 10 5 10c-1.5 0-2-.8-2.7-1.8-.5-.8-1.1-1.7-2.3-2.1v6c1.2.4 1.8 1.3 2.3 2.1C3 15.2 3.5 16 5 16c1.4 0 2.6-2.1 3.7-4.2C10.3 9.1 12 6 15 6z"/><path class="dxd-icon-fill" d="M5.1 19c-1.5 0-2.1-.8-2.8-1.8-.5-.8-1.2-1.7-2.3-2.1V22h8v-5.7C7 17.8 6.1 19 5.1 19zM10.4 12h9.7c-1.5-1.7-3.2-3-5.2-3-1.9 0-3.3 1.3-4.5 3z"/></svg>',
    'dxrd-svg-series-step_area': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 6V0h-6v12H6V8H0v14h24V6z"/></svg>',
    'dxrd-svg-series-step_area3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM18 14v10h4l2-2v-6l-2-2h-4zm4 8h-2v-6h2v6z"/><path class="dxd-icon-fill" d="M18 6V0h-6v10H6V6H0v14h8v-8h16V6z"/></svg>',
    'dxrd-svg-series-step_line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 2v18H8v-6H0v2h6v6h10V4h6v8h2V2z"/></svg>',
    'dxrd-svg-series-step_line3d': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M10 14v2h4v2h-4v2h4v2h-4v2h6V14h-2zM22 14h-4v10h4l2-2v-6l-2-2zm0 8h-2v-6h2v6zM6 12H0v2h4v6h4v-2H6zM16 10h4V8h-2V0h-8v12h2V2h4v6z"/></svg>',
    'dxrd-svg-series-stock': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 0H4v4H0v4h4v14h4v-4h4v-4H8zM20 18V0h-8v4h4v18h8v-4z"/></svg>',
    'dxrd-svg-series-swift_plot': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M24 8l-4 4-2-2-6 6-4-4-2 2-4-4-2 2v-2l2-2 4 4 2-2 4 4 6-6 2 2 4-4"/></svg>',
    'dxrd-svg-series-waterfall': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 1h4v22h-4V1zm-6 14h4V1h-4v14zm-6 0h4V9H7v6zm-6 8h4V9H1v14z"/><g class="dxd-icon-fill"><path class="dxd-icon-fill" d="M17 1h2v2h-2V1zM5 11h2V9H5v2zm6 4h2v-2h-2v2z"/></g></svg>',
    'dxrd-svg-tabs-collapse': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 12l-6 6-2-2 4-4-4-4 2-2z"/></svg>',
    'dxrd-svg-tabs-expand': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M8 12l6 6 2-2-4-4 4-4-2-2z"/></svg>',
    'dxrd-svg-tabs-expressions': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 2c-.9 0-2.2.1-3.6.4-2.4.5-2.7 2.2-2.9 3.1L10.9 9H9c-.6 0-1 .4-1 1s.4 1 1 1h1.5l-1.1 6.1-.2 1.4c-.1.5-.2 1-.9 1.2-1.2.2-1.9.3-2.3.3-.6 0-1 .4-1 1s.4 1 1 1c.9 0 1.5-.1 2.9-.4 2.4-.5 2.7-2.2 2.9-3.1l.3-1.4 1.1-6.1h2.9c.6 0 1-.4 1-1s-.4-1-1-1h-2.5l.6-3.5c.1-.5.2-1 .9-1.2 1.1-.2 2.5-.3 2.9-.3.6 0 1-.4 1-1s-.4-1-1-1z"/></svg>',
    'dxrd-svg-tabs-fieldlist': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 2C7.6 2 4 3.8 4 6v12c0 2.2 3.6 4 8 4s8-1.8 8-4V6c0-2.2-3.6-4-8-4zm0 6C8.4 8 6.5 6.5 6.5 6S8.4 4 12 4s5.5 1.5 5.5 2-1.9 2-5.5 2z"/></svg>',
    'dxrd-svg-tabs-parameters': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M14 22h-4c-.6 0-1-.4-1-1v-8.6L1.3 4.7C.7 4.1 1.1 3 2 3h20c.9 0 1.3 1.1.7 1.7L15 12.4V21c0 .6-.4 1-1 1zm-3-2h2v-8.4L19.6 5H4.4l6.6 6.6V20z"/></svg>',
    'dxrd-svg-tabs-reportexplorer': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 15h-3v-3c0-.6-.4-1-1-1h-5V9h3c.6 0 1-.5 1-1V2c0-.5-.4-1-1-1H8c-.6 0-1 .5-1 1v6c0 .5.4 1 1 1h3v2H6c-.6 0-1 .4-1 1v3H2c-.6 0-1 .5-1 1v6c0 .5.4 1 1 1h8c.6 0 1-.5 1-1v-6c0-.5-.4-1-1-1H7v-2h10v2h-3c-.6 0-1 .5-1 1v6c0 .5.4 1 1 1h8c.6 0 1-.5 1-1v-6c0-.5-.4-1-1-1zM9 7V3h6v4H9zm0 10v4H3v-4h6zm12 4h-6v-4h6v4z"/></svg>',
    'dxrd-svg-tabs-search': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2.6 21.4c.8.8 2 .8 2.8 0l4.6-4.5c1.1.7 2.5 1.1 4 1.1 4.4 0 8-3.6 8-8s-3.6-8-8-8-8 3.6-8 8c0 1.5.4 2.9 1.1 4.1l-4.6 4.6c-.7.7-.7 1.9.1 2.7zM10 10c0-2.2 1.8-4 4-4s4 1.8 4 4-1.8 4-4 4-4-1.8-4-4z"/></svg>',
    'dxrd-svg-titles-bottom_center': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M4 0v14h14V0H4zm6 8V6h2v2h-2zm2 2v2h-2v-2h2zm-2-6V2h2v2h-2zM6 2h2v2H6V2zm0 4h2v2H6V6zm0 4h2v2H6v-2zm10 2h-2v-2h2v2zm0-4h-2V6h2v2zm-2-4V2h2v2h-2z"/><path class="dxd-icon-fill" d="M6 18h10v4H6z"/></svg>',
    'dxrd-svg-titles-bottom_left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6 0v14h14V0H6zm6 8V6h1.9v2H12zm1.9 2v2H12v-2h1.9zM12 4V2h1.9v2H12zM8 2h1.9v2H8V2zm0 4h1.9v2H8V6zm0 4h1.9v2H8v-2zm9.9 2H16v-2h1.9v2zm0-4H16V6h1.9v2zM16 4V2h1.9v2H16z"/><path class="dxd-icon-fill" d="M2 18h10v4H2z"/></svg>',
    'dxrd-svg-titles-bottom_right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 0v14h14V0H2zm6 8V6h2v2H8zm2 2v2H8v-2h2zM8 4V2h2v2H8zm6 0h-2V2h2v2zm0 4h-2V6h2v2zm0 4h-2v-2h2v2zM4 10h2v2H4v-2zm0-4h2v2H4V6zm0-2V2h2v2H4z"/><path class="dxd-icon-fill" d="M10 18h10v4H10z"/></svg>',
    'dxrd-svg-titles-left_bottom_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 2H8v14h14V2zm-8 6h2v2h-2V8zm-2 2h-2V8h2v2zm6-2h2v2h-2V8zm0 6v-2h2v2h-2zm-4 0v-2h2v2h-2zm-4 0v-2h2v2h-2zm2-10v2h-2V4h2zm4 0v2h-2V4h2zm2 0h2v2h-2V4z"/><path class="dxd-icon-fill" d="M0 10h4v10H0z"/></svg>',
    'dxrd-svg-titles-left_center_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 4H8v14h14V4zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V6h2zm-4 0v2h-2V6h2zm-4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 6h4v10H0z"/></svg>',
    'dxrd-svg-titles-left_top_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6H8v14h14V6zm-8 6h2v2h-2v-2zm-2 2h-2v-2h2v2zm6-2h2v2h-2v-2zm2-4v2h-2V8h2zm-4 0v2h-2V8h2zm-4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm4 0v-2h2v2h-2zm4-2h2v2h-2v-2z"/><path class="dxd-icon-fill" d="M0 2h4v10H0z"/></svg>',
    'dxrd-svg-titles-right_bottom_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 16h14V2H0v14zm8-6H6V8h2v2zm2-2h2v2h-2V8zm-6 2H2V8h2v2zm-2 4v-2h2v2H2zm4 0v-2h2v2H6zm4 0v-2h2v2h-2zm2-10v2h-2V4h2zM8 4v2H6V4h2zM4 6H2V4h2v2z"/><path class="dxd-icon-fill" d="M18 10h4v10h-4z"/></svg>',
    'dxrd-svg-titles-right_center_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 18h14V4H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V6h2zm4 0v2H6V6h2zm4 0v2h-2V6h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 6h4v10h-4z"/></svg>',
    'dxrd-svg-titles-right_top_vertical': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 20h14V6H0v14zm8-6H6v-2h2v2zm2-2h2v2h-2v-2zm-6 2H2v-2h2v2zm0-6v2H2V8h2zm4 0v2H6V8h2zm4 0v2h-2V8h2zm-2 10v-2h2v2h-2zm-4 0v-2h2v2H6zm-2 0H2v-2h2v2z"/><path class="dxd-icon-fill" d="M18 2h4v10h-4z"/></svg>',
    'dxrd-svg-titles-top_center': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M18 22V8H4v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H6v-2zm0-4h2v2H6v-2zm0-4h2v2H6v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M6 0h10v4H6z"/></svg>',
    'dxrd-svg-titles-top_left': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 22V8H6v14h14zm-6-8v2h-2v-2h2zm-2-2v-2h2v2h-2zm2 6v2h-2v-2h2zm-6 0h2v2H8v-2zm0-4h2v2H8v-2zm0-4h2v2H8v-2zm10 2h-2v-2h2v2zm0 4h-2v-2h2v2zm0 2v2h-2v-2h2z"/><path class="dxd-icon-fill" d="M2 0h10v4H2z"/></svg>',
    'dxrd-svg-titles-top_right': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M16 22V8H2v14h14zm-6-8v2H8v-2h2zm-2-2v-2h2v2H8zm2 6v2H8v-2h2zm4 2h-2v-2h2v2zm0-4h-2v-2h2v2zm0-4h-2v-2h2v2zM4 10h2v2H4v-2zm0 4h2v2H4v-2zm2 4v2H4v-2h2z"/><path class="dxd-icon-fill" d="M10 0h10v4H10z"/></svg>',
    'dxrd-svg-todo-chart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M0 10h4v12H0zM18 12h4v10h-4zM6 6h4v16H6zM12 2h4v20h-4z"/></svg>',
    'dxrd-svg-todo-pdfcontent': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 32 32" xml:space="preserve"><style>.Red{fill:#d02027}</style><path class="Red" d="M6 8h2v2H6V8zm8 6h2V8h-2v6zM30 2v18H0V2h30zM10 8c0-1-1-2-2-2H4v10h2v-4h2c1 0 2-1 2-2V8zm8 0c0-1-1-2-2-2h-4v10h4c1 0 2-1 2-2V8zm8-2h-6v10h2v-4h2v-2h-2V8h4V6z"/></svg>',
    'dxrd-svg-todo-pdfsignature': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 12c-2.1 0-3.3 1.8-4.3 3.2-.6.9-1.2 1.8-1.7 1.8-.2-.2-.2-1.4-.2-1.9 0-1.2-.1-3.1-1.7-3.1-2 0-2.9 1.9-3.6 3.6C10.4 17.7 9.7 19 8 19c-.7 0-1.4-.6-2.1-1.6C11.2 11.7 13 8.7 13 6c0-3.4-1.8-6-4-6-3.4 0-7 3.1-7 10 0 2.2.5 4.9 1.5 7-1 1-2 2.1-3.2 3.3-.2.2-.3.4-.3.7 0 .6.4 1 1 1 .3 0 .5-.1.7-.3 1-1 1.9-2 2.8-2.8C5.4 20.2 6.6 21 8 21c3.1 0 4.3-2.7 5.2-4.6.6-1.2 1-2 1.4-2.3v1.1c0 1.3.1 3.9 2.3 3.9 1.6 0 2.5-1.4 3.4-2.7 1-1.5 1.7-2.4 2.7-2.4.6 0 1-.4 1-1s-.4-1-1-1zM5 15.4c-.6-1.6-1-3.5-1-5.4 0-5.5 2.6-8 5-8 .8 0 2 1.5 2 4 0 2-1.7 4.7-6 9.4z"/></svg>',
    'dxrd-svg-todo-pivotgrid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
    'dxrd-svg-todo-sparkline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 4v16h20V4H2zm18 10l-2-2-4 4-2-2-4 4-2-2-2 2v-4l2-2 2 2 4-4 2 2 4-4 2 2v4z"/></svg>',
    'dxrd-svg-toolbar-fullscreen-exit': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="FullScreen" class="dxd-icon-fill" d="M21 15c.6 0 1 .4 1 1s-.4 1-1 1h-2.6l3.3 3.3c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L17 18.4V21c0 .6-.4 1-1 1s-1-.4-1-1v-6h6zM3 15c-.6 0-1 .4-1 1s.4 1 1 1h2.6l-3.3 3.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L7 18.4V21c0 .6.4 1 1 1s1-.4 1-1v-6H3zm18-6c.6 0 1-.4 1-1s-.4-1-1-1h-2.6l3.3-3.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L17 5.6V3c0-.6-.4-1-1-1s-1 .4-1 1v6h6zM3 9c-.6 0-1-.4-1-1s.4-1 1-1h2.6L2.3 3.7c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0L7 5.6V3c0-.6.4-1 1-1s1 .4 1 1v6H3z"/></svg>',
    'dxrd-svg-toolbar-fullscreen': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path id="FullScreen" class="dxd-icon-fill" d="M8 2c.6 0 1 .4 1 1s-.4 1-1 1H5.4l3.3 3.3c.4.4.4 1 0 1.4-.4.4-1 .4-1.4 0L4 5.4V8c0 .6-.4 1-1 1s-1-.4-1-1V2h6zm8 0c-.6 0-1 .4-1 1s.4 1 1 1h2.6l-3.3 3.3c-.4.4-.4 1 0 1.4.4.4 1 .4 1.4 0L20 5.4V8c0 .6.4 1 1 1s1-.4 1-1V2h-6zM8 22c.6 0 1-.4 1-1s-.4-1-1-1H5.4l3.3-3.3c.4-.4.4-1 0-1.4-.4-.4-1-.4-1.4 0L4 18.6V16c0-.6-.4-1-1-1s-1 .4-1 1v6h6zm8 0c-.6 0-1-.4-1-1s.4-1 1-1h2.6l-3.3-3.3c-.4-.4-.4-1 0-1.4.4-.4 1-.4 1.4 0l3.3 3.3V16c0-.6.4-1 1-1s1 .4 1 1v6h-6z"/></svg>',
    'dxrd-svg-toolbar-hightlightEditingFields': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M15 18.9l2-2V21c0 .5-.5 1-1 1H1c-.5 0-1-.5-1-1v-7c0-.5.5-1 1-1h8.1l-.1.1V15H2v5h13v-1.1zM1 11h10.1l2-2H2V4h13v3.1l2-2V3c0-.5-.5-1-1-1H1c-.5 0-1 .5-1 1v7c0 .5.5 1 1 1zm22.7-2.2L14.5 18H10v-4.5l9.2-9.2c.4-.4 1-.4 1.4 0l3.1 3.1c.4.4.4 1 0 1.4zm-5 2.2L17 9.3l-5 5V16h1.7l5-5zm2.9-2.8l-1.7-1.7L18.4 8 20 9.6l1.6-1.4z"/></svg>',
    'dxrd-svg-toolbar-scripts': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M22 6c-.1-1-1.4-3.4-3-4-.7.5-1.5 1.3-.5 4H22z"/><path class="dxd-icon-fill" d="M16 4c0-1.5.8-2.7 1.9-3.4-.4-.3-1.1-.6-2-.6h-12C1.7 0 0 1.8 0 4v.2L3.4 16H17.2s.2 1.9.4 2.4c.1.3.3 1 .5 1.2.4.6.7 1.1.8 1.1C19.6 20 20 19 20 18L16 4zM17.9.6c.2.1-.1-.1 0 0z"/><path class="dxd-icon-fill" d="M16.4 19.9c-.3-.8-.4-1.9-.4-1.9H0c0 2.2 1.7 4 3.9 4h12c.6 0 1.1-.1 1.6-.3 0-.1-.2-.3-.5-.8-.2-.2-.3-.5-.6-1z"/></svg>',
    'dxrd-svg-toolbar-validateBindingMode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M6.4 16.8L9.2 14c.4-.4 1-.4 1.4 0l2.4 2.4 3-3V4.5C16 2.6 12.9 1 9 1S2 2.6 2 4.5v12c0 1.8 2.7 3.3 6.1 3.5l-1.8-1.8c-.3-.4-.3-1 .1-1.4zM4.5 4.5C4.6 4.1 6.1 3 9 3s4.4 1.1 4.5 1.5C13.4 4.9 11.9 6 9 6S4.6 4.9 4.5 4.5zM24 11L13 22l-4.5-4.5 1.4-1.4 3.1 3.1 9.6-9.6L24 11z"/></svg>',
    'dxrd-svg-toolbox-barcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M3 22H1V2h2v20zM9 2H5v20h4V2zm4 0h-2v20h2V2zm4 0h-2v20h2V2zm6 0h-4v20h4V2z"/></svg>',
    'dxrd-svg-toolbox-charactercomb': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 3H1c-.5 0-1 .5-1 1v15c0 .5.5 1 1 1h22c.5 0 1-.5 1-1V4c0-.5-.5-1-1-1zM11 18H2V5h9v13zm11 0h-9V5h9v13zM8.3 9.6c.5.4.7 1.1.7 2V15H7.6v-.7c-.3.6-.8.8-1.6.8-.4 0-.8-.1-1.1-.2-.3-.2-.5-.4-.7-.6-.2-.3-.2-.6-.2-.9 0-.6.2-1 .6-1.3.4-.3.9-.5 1.7-.5h1.2c0-.4-.1-.7-.3-.9-.2-.2-.5-.3-.9-.3-.3 0-.6 0-.8.1-.3.1-.5.2-.7.4l-.7-1.2c.3-.2.6-.4 1-.5C5.6 9 6 9 6.4 9c.9 0 1.5.2 1.9.6zM7 13.7c.2-.1.4-.3.4-.6v-.6h-1c-.6 0-1 .2-1 .7 0 .2.1.4.2.5.2.1.4.2.6.2.4 0 .6 0 .8-.2zm12.4-4.4c.4.3.7.6.9 1.1.2.5.3 1 .3 1.6 0 .6-.1 1.2-.3 1.6-.2.5-.5.8-.9 1.1-.4.3-.9.4-1.4.4-.7 0-1.2-.3-1.6-.8v.7H15V7h1.5v2.7c.4-.5.9-.7 1.6-.7.4-.1.9.1 1.3.3zm-.7 3.9c.2-.3.4-.7.4-1.2s-.1-.9-.4-1.2c-.2-.3-.6-.4-.9-.4-.4 0-.7.1-.9.4-.2.3-.4.7-.4 1.2s.1.9.4 1.2c.2.3.6.5.9.5.4 0 .7-.2.9-.5z"/></svg>',
    'dxrd-svg-toolbox-chart': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M1 14v8h6v-8H1zm4 6H3v-4h2v4zM9 8v14h6V8H9zm4 12h-2V10h2v10zm4-18v20h6V2h-6zm4 18h-2V4h2v16z"/></svg>',
    'dxrd-svg-toolbox-checkbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 9.4V20c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V4c0-.5.5-1 1-1h12.1l-2 2H5v14h14v-7.6l2-2zm.3-7.4L11 12.3 7.7 9l-1.4 1.4 4.7 4.7L22.7 3.4 21.3 2z"/></svg>',
    'dxrd-svg-toolbox-crossbandbox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 6v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1V6c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1zm0 8v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1z"/></g><path class="dxd-icon-fill" d="M21 1v2c0 .5-.5 1-1 1v1h-2V4c-.5 0-1-.5-1-1H7c0 .5-.5 1-1 1v1H4V4c-.5 0-1-.5-1-1V1c0-.5.5-1 1-1h2c.5 0 1 .5 1 1h10c0-.5.5-1 1-1h2c.5 0 1 .5 1 1zm-1 19v-1h-2v1c-.5 0-1 .5-1 1H7c0-.5-.5-1-1-1v-1H4v1c-.5 0-1 .5-1 1v2c0 .5.5 1 1 1h2c.5 0 1-.5 1-1h10c0 .5.5 1 1 1h2c.5 0 1-.5 1-1v-2c0-.5-.5-1-1-1zM6 11H4v2h2v-2zm14 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-crossbandline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M0 6v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1V6c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1zm0 8v4c0 .6.4 1 1 1h22c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1H1c-.6 0-1 .4-1 1zm2 3"/></g><path class="dxd-icon-fill" d="M14 1v2c0 .5-.5 1-1 1v1h-2V4c-.5 0-1-.5-1-1V1c0-.5.5-1 1-1h2c.5 0 1 .5 1 1zm-1 19v-1h-2v1c-.5 0-1 .5-1 1v2c0 .5.5 1 1 1h2c.5 0 1-.5 1-1v-2c0-.5-.5-1-1-1zm0-9h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-crosstab': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 2H4v2l8 8-8 8v2h16v-2H7l8-8-8-8h13z"/></svg>',
    'dxrd-svg-toolbox-gauge': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M12 1C5.9 1 1 5.9 1 12s4.9 11 11 11 11-4.9 11-11S18.1 1 12 1zm0 20c-5 0-9-4-9-9s4-9 9-9 9 4 9 9-4 9-9 9z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M8 12c0 1.1.4 2.1 1.2 2.8l-2.1 2.1C5.8 15.7 5 13.9 5 12c0-3.9 3.1-7 7-7 1.3 0 2.5.4 3.6 1l-2.2 2.2c-.5-.1-.9-.2-1.4-.2-2.2 0-4 1.8-4 4zm10-3.6l-2.2 2.2c.2.4.2.9.2 1.3 0 1.1-.4 2.1-1.1 2.8l2.1 2.1c1.2-1.3 2-3 2-4.9 0-1.2-.4-2.4-1-3.5z"/></g><path class="dxd-icon-fill" d="M17.4 7.6c-.3-.4-.6-.7-1-1l-2.1 2.1-1.5 1.5c-.2-.1-.5-.2-.8-.2-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2c0-.3-.1-.6-.2-.8l1.5-1.5 2.1-2.1z"/></svg>',
    'dxrd-svg-toolbox-label': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M3.5 19h1.2l5.4-15.4c.2-.3.6-.6 1-.6h1.8c.4 0 .8.3.9.7L19.2 19h1.3c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5h1.2l-1.4-4H8.7l-1.4 4h1.2c.3 0 .5.2.5.5v1c0 .3-.2.5-.5.5h-5c-.3 0-.5-.2-.5-.5v-1c0-.3.2-.5.5-.5zm5.8-6h5.3L12 5.3h-.1L9.3 13z"/></svg>',
    'dxrd-svg-toolbox-line': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 18h-1.6L6 4.6V3c0-.5-.5-1-1-1H3c-.5 0-1 .5-1 1v2c0 .5.5 1 1 1h1.6L18 19.4V21c0 .5.5 1 1 1h2c.5 0 1-.5 1-1v-2c0-.5-.5-1-1-1z"/></svg>',
    'dxrd-svg-toolbox-pagebreak': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 1v7c0 .5-.5 1-1 1H2c-.5 0-1-.5-1-1V1h2v6h18V1h2zM3 23v-6h18v6h2v-7c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v7h2zm3-1h12v-2H6v2zM6 2v2h12V2H6zm-3 9H1v2h2v-2zm4 0H5v2h2v-2zm4 0H9v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2zm4 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-pageinfo': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M9.1 18H3V3h15v6.1c.7.1 1.4.3 2 .5V2c0-.5-.5-1-1-1H2c-.5 0-1 .5-1 1v17c0 .5.5 1 1 1h7.6c-.3-.6-.4-1.3-.5-2z"/><path class="dxd-icon-fill" d="M17 10c-3.9 0-7 3.1-7 7s3.1 7 7 7 7-3.1 7-7-3.1-7-7-7zm1 11h-2v-4h2v4zm0-6h-2v-2h2v2z"/></svg>',
    'dxrd-svg-toolbox-panel': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H4V4h16v16z"/></svg>',
    'dxrd-svg-toolbox-pdfcontent': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M19 18h2v4c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1v-4h2v3h14v-3zM5 3h14v2h2V2c0-.5-.5-1-1-1H4c-.5 0-1 .5-1 1v3h2V3zm2.1 6.9h-1v1.7h1c.4 0 .6-.1.8-.2.2-.2.3-.4.3-.6 0-.3-.1-.5-.3-.6-.2-.2-.4-.3-.8-.3zM23 6v11H1V6h22zM9.4 10.8c0-.4-.1-.7-.3-1-.2-.2-.4-.4-.7-.6C8 9.1 7.6 9 7.2 9H5v5h1.2v-1.4h1c.4 0 .8-.1 1.2-.2.3-.1.6-.4.8-.6s.2-.6.2-1zm5.9.7c0-.5-.1-.9-.3-1.3-.2-.4-.6-.7-1-.9-.5-.2-.9-.3-1.5-.3h-2.3v5h2.3c.5 0 1-.1 1.5-.3.4-.2.7-.5 1-.9.2-.4.3-.8.3-1.3zM20 9h-3.8v5h1.2v-1.8h2.3v-.9h-2.3V9.9H20V9zm-7.5.9h-1.1V13h1.1c.5 0 .9-.1 1.2-.4.3-.3.5-.7.5-1.1 0-.5-.2-.9-.5-1.1-.3-.3-.7-.5-1.2-.5z"/></svg>',
    'dxrd-svg-toolbox-pdfsignature': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M23 13c-2.1 0-3.3 1.8-4.3 3.2-.6.9-1.2 1.8-1.7 1.8-.2-.2-.2-1.4-.2-1.9 0-1.2-.1-3.1-1.7-3.1-2 0-2.9 1.9-3.6 3.6C10.4 18.7 9.7 20 8 20c-.7 0-1.4-.6-2.1-1.6C11.2 12.7 13 9.7 13 7c0-3.4-1.8-6-4-6-3.4 0-7 3.1-7 10 0 2.2.5 4.9 1.5 7-1 1-2 2.1-3.2 3.3-.2.2-.3.4-.3.7 0 .6.4 1 1 1 .3 0 .5-.1.7-.3 1-1 1.9-2 2.8-2.8C5.4 21.2 6.6 22 8 22c3.1 0 4.3-2.7 5.2-4.6.6-1.2 1-2 1.4-2.3v1.1c0 1.3.1 3.9 2.3 3.9 1.6 0 2.5-1.4 3.4-2.7 1-1.5 1.7-2.4 2.7-2.4.6 0 1-.4 1-1s-.4-1-1-1zM5 16.4c-.6-1.6-1-3.5-1-5.4 0-5.5 2.6-8 5-8 .8 0 2 1.5 2 4 0 2-1.7 4.7-6 9.4z"/></svg>',
    'dxrd-svg-toolbox-picturebox': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 18H4V4h16v16z"/><circle class="dxd-icon-fill" cx="15.5" cy="8.5" r="2.5"/><path class="dxd-icon-fill" d="M6 18v-5l3-3 7 8z"/></svg>',
    'dxrd-svg-toolbox-pivotgrid': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 21H4c-.9 0-1.3-1.1-.7-1.7l7.3-7.3-7.3-7.3C2.7 4.1 3.1 3 4 3h16v4h-2V5H6.4l7 7-7 7H18v-2h2v4z"/></svg>',
    'dxrd-svg-toolbox-richtext': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 12.7V20H4V4h7.3l2-2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V10.7l-2 2z"/><path id="EditingFields" class="dxd-icon-fill" d="M23.7 3.4L20.6.3c-.4-.4-1-.4-1.4 0L9 10.5V15h4.5L23.7 4.8c.4-.4.4-1 0-1.4zm-11 9.6H11v-1.7l6-6L18.6 7l-5.9 6zM20 5.6L18.4 4l1.5-1.5 1.7 1.7L20 5.6z"/></svg>',
    'dxrd-svg-toolbox-shape': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M7 16H3c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h12c.5 0 1 .5 1 1v4h-.5c-.5 0-1 .1-1.5.1V4H4v10h3.1c0 .5-.1 1-.1 1.5v.5zm16-.5c0 4.1-3.4 7.5-7.5 7.5S8 19.6 8 15.5 11.4 8 15.5 8s7.5 3.4 7.5 7.5zm-2 0c0-3-2.5-5.5-5.5-5.5S10 12.5 10 15.5s2.5 5.5 5.5 5.5 5.5-2.5 5.5-5.5z"/></svg>',
    'dxrd-svg-toolbox-sparkline': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-1 2v2.6l-7 7-3-3-6 6V4h16zM4 20v-.6l6-6 3 3 7-7V20H4z"/></svg>',
    'dxrd-svg-toolbox-subreport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 3v19c0 .5-.5 1-1 1H4c-.5 0-1-.5-1-1V3c0-.5.5-1 1-1h3v2H5v17h14V4h-2V2h3c.5 0 1 .5 1 1zm-7-1V1c0-.6-.4-1-1-1h-2c-.6 0-1 .4-1 1v1H8v3h8V2h-2zm2 6H8v2h8V8zm0 6H8v-2h8v2zm0 4H8v-2h8v2z"/></svg>',
    'dxrd-svg-toolbox-table': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-7 2v4h-4V4h4zm-4 6h4v4h-4v-4zM4 4h4v4H4V4zm0 6h4v4H4v-4zm0 10v-4h4v4H4zm6 0v-4h4v4h-4zm10 0h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z"/></svg>',
    'dxrd-svg-toolbox-tableofcontents': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M18 5h-2V3h2v2zm0 2h-2v2h2V7zm0 4h-2v2h2v-2zm0 4h-2v2h2v-2zm0 4h-2v2h2v-2z"/></g><path class="dxd-icon-fill" d="M14 5H2V3h12v2zm8-2h-2v2h2V3zm-8 4H2v2h12V7zm8 0h-2v2h2V7zm-8 4H2v2h12v-2zm8 0h-2v2h2v-2zm-8 4H2v2h12v-2zm8 0h-2v2h2v-2zm-8 4H2v2h12v-2zm8 0h-2v2h2v-2z"/></svg>',
    'dxrd-svg-toolbox-zipcode': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M2 2h6v2H2zM0 4h2v6H0zM8 4h2v6H8zM0 12h2v8H0zM8 12h2v8H8zM2 10h6v2H2zM2 20h6v2H2zM14 2h6v2h-6zM12 4h2v6h-2zM20 4h2v6h-2zM12 12h2v8h-2zM20 12h2v8h-2zM14 10h6v2h-6zM14 20h6v2h-6z"/></svg>',
    'dxrd-svg-wizard-crosstab-columns': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-7 2v4h-4V4h4zm-4 6h4v4h-4v-4zM4 4h4v4H4V4zm0 6h4v4H4v-4zm0 10v-4h4v4H4zm6 0v-4h4v4h-4zm10 0h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M4 10h16v4H4z"/></g></svg>',
    'dxrd-svg-wizard-crosstab-data': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M20 21H4c-.9 0-1.3-1.1-.7-1.7l7.3-7.3-7.3-7.3C2.7 4.1 3.1 3 4 3h16v4h-2V5H6.4l7 7-7 7H18v-2h2v4z"/></svg>',
    'dxrd-svg-wizard-crosstab-fields': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 7H3V5h18v2zm0 4H3v2h18v-2zm0 6H3v2h18v-2z"/></svg>',
    'dxrd-svg-wizard-crosstab-rows': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 24 24" xml:space="preserve"><path class="dxd-icon-fill" d="M21 2H3c-.5 0-1 .5-1 1v18c0 .5.5 1 1 1h18c.5 0 1-.5 1-1V3c0-.5-.5-1-1-1zm-7 2v4h-4V4h4zm-4 6h4v4h-4v-4zM4 4h4v4H4V4zm0 6h4v4H4v-4zm0 10v-4h4v4H4zm6 0v-4h4v4h-4zm10 0h-4v-4h4v4zm0-6h-4v-4h4v4zm0-6h-4V4h4v4z"/><g class="dxd-opacity-50"><path class="dxd-icon-fill" d="M10 4h4v16h-4z"/></g></svg>',
    'dxrd-svg-wizard-CrossTabReport': '<svg data-bind="svgAttrs" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 96 96"><style>.Black{fill:#727272}.White{fill:#fff}.Blue{fill:#1177d7}.st0{opacity:.75}.st1{opacity:.25}.st2{opacity:.5}</style><g id="Layer_1"><g class="st0"><path class="Black" d="M84 92H14c-.6 0-1-.5-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .5-.4 1-1 1z"/></g><path class="White" d="M14 5h70v86H14z"/><g class="st1"><path class="Black" d="M48 45H36V35h12v10z"/></g><g class="st2"><path class="Black" d="M34 45H22V35h12v10zm14-12H36V23h12v10zm-14 0H22V23h12v10z"/></g><g class="st2"><path class="Blue" d="M48 47H36v10h12V47zm14-12H50v10h12V35zm0-12H50v10h12V23zM34 57H22V47h12v10z"/></g><path class="Blue" d="M75 47H51c-.6 0-1 .4-1 1v24c0 .6.4 1 1 1h24c.6 0 1-.4 1-1V48c0-.6-.4-1-1-1zm-4 8h-8.8l5 5-5 5H71v3H55l8-8-8-8h16v3z"/></g></svg>',
    'dxrd-svg-wizard-EmptyReport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.White{fill:#fff}.st0{opacity:.75}.st1{opacity:.25}</style><g id="EmptyReport"><g class="st0"><path class="Black" d="M83 93H13c-.6 0-1-.4-1-1V6c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/></g><path class="White" d="M13 6h70v86H13z"/><g class="st1"><path class="Black" d="M83 14v-1h-7V6h-1v7H21V6h-1v7h-7v1h7v70h-7v1h7v7h1v-7h54v7h1v-7h7v-1h-7V14h7zm-8 70H21V14h54v70z"/></g></g></svg>',
    'dxrd-svg-wizard-LabelReport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.White{fill:#fff}.Blue{fill:#1177d7}.st0{opacity:.75}.st1{opacity:.25}</style><g id="LabelReport"><g class="st0"><path class="Black" d="M83 92H13c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/></g><path class="White" d="M13 5h70v86H13z"/><g class="st1"><path class="Blue" d="M47 29H21V13h26v16zm28 0H49V13h26v16zM47 47H21V31h26v16zm28 0H49V31h26v16zM47 65H21V49h26v16zm28 0H49V49h26v16zM47 83H21V67h26v16zm28 0H49V67h26v16z"/></g></g></svg>',
    'dxrd-svg-wizard-StandardReport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.White{fill:#fff}.Blue{fill:#1177d7}.st0{opacity:.75}.st1{opacity:.25}.st2{opacity:.5}</style><g id="StandardReport"><g class="st2"><path class="Black" d="M27.5 15C17.8 15 10 13 10 10.5v32C10 45 17.8 47 27.5 47S45 45 45 42.5v-32C45 13 37.2 15 27.5 15z"/></g><g class="st1"><ellipse class="Black" cx="27.5" cy="8.5" rx="17.5" ry="4.5"/></g><g class="st0"><path class="Black" d="M85.8 30h-13L60 42.8 47.2 30H33.9c-.6 0-1 .4-1 1v60c0 .6.4 1 1 1h51.9c.6 0 1-.4 1-1V31c0-.6-.5-1-1-1z"/></g><path transform="rotate(90 59.864 61)" class="White" d="M29.9 35.1h60V87h-60z"/><g class="st1"><path class="Black" d="M48.9 46h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-29.9 8h-8v6h8v-6zm10 0h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6z"/></g><g class="st2"><path class="Black" d="M41 38h8v6h-8v-6zm14.2 0H51v6h8v-2.2L55.2 38zm5.8 3.8V44h8v-6h-4.2L61 41.8zM71 38v6h8v-6h-8z"/></g><path class="Blue" d="M64 30c0-7.2-6.7-13-15-13 3.9 0 7 5.8 7 13h-6l10 10 10-10h-6z"/></g></svg>',
    'dxrd-svg-wizard-UndefinedReport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272;color:#727272}.White{fill:#fff}.st0{opacity:.75}</style><g id="UndefinedReport"><g class="st0"><path class="Black" d="M83 92H13c-.6 0-1-.4-1-1V5c0-.6.4-1 1-1h70c.6 0 1 .4 1 1v86c0 .6-.4 1-1 1z"/></g><path class="White" d="M13 5h70v86H13V5z"/><foreignObject x="12" y="5" width="70" height="86"><div class="Black dxrd-report-type-item-text" data-bind="text: $root.getLocalization(`Report Template`, `ASPxReportsStringId.ReportDesigner_Wizard_ReportTemplate_Thumbnail`)"/></foreignObject></g></svg>',
    'dxrd-svg-wizard-VerticalReport': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 96 96" xml:space="preserve"><style>.Black{fill:#727272}.White{fill:#fff}.Blue{fill:#1177d7}.st0{opacity:.75}.st1{opacity:.25}.st2{opacity:.5}</style><g id="VerticalReport"><g class="st2"><path class="Black" d="M27.5 15C17.8 15 10 13 10 10.5v32C10 45 17.8 47 27.5 47S45 45 45 42.5v-32C45 13 37.2 15 27.5 15z"/></g><g class="st1"><ellipse class="Black" cx="27.5" cy="8.5" rx="17.5" ry="4.5"/></g><g class="st0"><path class="Black" d="M85.8 30h-13L60 42.8 47.2 30H33.9c-.6 0-1 .4-1 1v60c0 .6.4 1 1 1h51.9c.6 0 1-.4 1-1V31c0-.6-.5-1-1-1z"/></g><path transform="rotate(90 59.864 61)" class="White" d="M29.9 35.1h60V87h-60z"/><g class="st1"><path class="Black" d="M55.2 38H51v6h8v-2.2L55.2 38zm5.8 3.8V44h8v-6h-4.2L61 41.8zM71 38v6h8v-6h-8zm-12.1 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6zm-19.9 8h-8v6h8v-6zm9.9 0h-8v6h8v-6zm10 0h-8v6h8v-6z"/></g><g class="st2"><path class="Black" d="M41 38h8v6h-8v-6zm7.9 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6zm0 8h-8v6h8v-6z"/></g><path class="Blue" d="M64 30c0-7.2-6.7-13-15-13 3.9 0 7 5.8 7 13h-6l10 10 10-10h-6z"/></g></svg>',
    'dxrd-svg-wizard-warning': '<svg data-bind="svgAttrs" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" x="0" y="0" viewBox="0 0 31 31" xml:space="preserve"><path class="dxd-icon-fill" d="M15.5 0C6.9 0 0 6.9 0 15.5S6.9 31 15.5 31 31 24.1 31 15.5 24.1 0 15.5 0zm0 25c-1.4 0-2.5-1.1-2.5-2.5s1.1-2.5 2.5-2.5 2.5 1.1 2.5 2.5-1.1 2.5-2.5 2.5zm0-7C14.1 18 13 9.9 13 8.5 13 7.1 14.1 6 15.5 6S18 7.1 18 8.5 16.9 18 15.5 18z"/></svg>',
});

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/dx-viewer-bindings.js

Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: $data.customGlyphStyleCss', function ($context, $element) { return { 'style': function () { return $context.$data.customGlyphStyleCss; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxSelectBox: { dataSource: items, displayExpr: \'displayName\', value: popupModel.textRangeValue, useItemTextAsTitle: true , placeholder: $root.getLocalization(\'Select Period\', \'AnalyticsCoreStringId.Mobile_DateRange_SelectPeriod\') }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.items, 'displayExpr': 'displayName', 'value': $context.$data.popupModel.textRangeValue, 'useItemTextAsTitle': true, 'placeholder': $context.$root.getLocalization('Select Period', 'AnalyticsCoreStringId.Mobile_DateRange_SelectPeriod') }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'From\',\'AnalyticsCoreStringId.Mobile_DateRange_From\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('From', 'AnalyticsCoreStringId.Mobile_DateRange_From'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: popupModel._dateButtonEditorClassName, dxButton: { text: startDate && popupModel.getStringDate(startDate) || $root.getLocalization(\'Start Date\',\'AnalyticsCoreStringId.Mobile_DateRange_StartDate\'), stylingMode: \'contained\', onClick: popupModel.focusButton, focusStateEnabled: false, activeStateEnabled: false }', function ($context, $element) { return { 'css': function () { return $context.$data.popupModel._dateButtonEditorClassName; }, 'dxButton': function () { return { 'text': $context.$data.startDate && $context.$data.popupModel.getStringDate($context.$data.startDate) || $context.$root.getLocalization('Start Date', 'AnalyticsCoreStringId.Mobile_DateRange_StartDate'), 'stylingMode': 'contained', 'onClick': $context.$data.popupModel.focusButton, 'focusStateEnabled': false, 'activeStateEnabled': false }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: popupModel._dateEditorClassName', function ($context, $element) { return { 'css': function () { return $context.$data.popupModel._dateEditorClassName; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Until\',\'AnalyticsCoreStringId.Mobile_DateRange_Until\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Until', 'AnalyticsCoreStringId.Mobile_DateRange_Until'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: popupModel._dateButtonEditorClassName, dxButton: { text: endDate && popupModel.getStringDate(endDate) || $root.getLocalization(\'End Date\',\'AnalyticsCoreStringId.Mobile_DateRange_EndDate\'), stylingMode: \'contained\', type:\'default\', onClick: popupModel.focusButton, focusStateEnabled: false, activeStateEnabled: false }', function ($context, $element) { return { 'css': function () { return $context.$data.popupModel._dateButtonEditorClassName; }, 'dxButton': function () { return { 'text': $context.$data.endDate && $context.$data.popupModel.getStringDate($context.$data.endDate) || $context.$root.getLocalization('End Date', 'AnalyticsCoreStringId.Mobile_DateRange_EndDate'), 'stylingMode': 'contained', 'type': 'default', 'onClick': $context.$data.popupModel.focusButton, 'focusStateEnabled': false, 'activeStateEnabled': false }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dxrv-daterange-calendar\', data: _createTemplateData(startDate, undefined) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-daterange-calendar', 'data': $context.$data._createTemplateData($context.$data.startDate, undefined) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dxrv-daterange-calendar\', data: _createTemplateData(endDate, startDate) }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-daterange-calendar', 'data': $context.$data._createTemplateData($context.$data.endDate, $context.$data.startDate) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxclick: clickToBrick, styleunit: { width: width, height: height }, autoFit: { autoFitBy: $root.reportPreview.autoFitBy, zoom: zoom, width: originalWidth, height: originalHeight, previewSize: $root.reportPreview.previewSize, brickLoading: brickLoading, skipIfInvisible: true }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.clickToBrick; }, 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; }, 'autoFit': function () { return { 'autoFitBy': $context.$root.reportPreview.autoFitBy, 'zoom': $context.$data.zoom, 'width': $context.$data.originalWidth, 'height': $context.$data.originalHeight, 'previewSize': $context.$root.reportPreview.previewSize, 'brickLoading': $context.$data.brickLoading, 'skipIfInvisible': true }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: width, height: height, lineHeight: height }, style: { \'background-color\': color }, visible: pageLoading, text: loadingText', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height, 'lineHeight': $context.$data.height }; }, 'style': function () { return { 'background-color': $context.$data.color }; }, 'visible': function () { return $context.$data.pageLoading; }, 'text': function () { return $context.$data.loadingText; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { src: displayImageSrc }, style:{ \'background-color\': color }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.displayImageSrc }; }, 'style': function () { return { 'background-color': $context.$data.color }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { \'dxrdp-active\': active() && $parents[1].blocks().length > 1 }, visible: !$root.slideOptions.readerMode', function ($context, $element) { return { 'css': function () { return { 'dxrdp-active': $context.$data.active() && $context.$parents[1].blocks().length > 1 }; }, 'visible': function () { return !$context.$root.slideOptions.readerMode; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active }', function ($context, $element) { return { 'style': function () { return { 'top': $context.$data.topP, 'left': $context.$data.leftP, 'right': $context.$data.rightP, 'height': $context.$data.heightP, 'width': $context.$data.widthP }; }, 'css': function () { return { 'dxrd-report-preview-brick-selected': $context.$data.active }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: activeBricks', function ($context, $element) { return { 'foreach': function () { return $context.$data.activeBricks; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: "dxrd-page-brick-mobile", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-mobile', 'data': $context.$data }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: !brickLoading() && $data.editingFields', function ($context, $element) { return { 'if': function () { return !$context.$data.brickLoading() && $context.$data.editingFields; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: editingFields', function ($context, $element) { return { 'foreach': function () { return $context.$data.editingFields; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit:{ height: height }, dxrdSearchBar: $data', function ($context, $element) { return { 'styleunit': function () { return { 'height': $context.$data.height }; }, 'dxrdSearchBar': function () { return $context.$data; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: !$data.editorVisible(), dxclick: function(s, e) { $data.focusEditor(e); }', function ($context, $element) { return { 'visible': function () { return !$context.$data.editorVisible(); }, 'dxclick': function () { return function (s, e) { $context.$data.focusEditor(e); }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Tap here to Search\', \'ASPxReportsStringId.WebDocumentViewer_Mobile_TapHereToSearch\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Tap here to Search', 'ASPxReportsStringId.WebDocumentViewer_Mobile_TapHereToSearch'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: $data.editorVisible()', function ($context, $element) { return { 'visible': function () { return $context.$data.editorVisible(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxTextBox: { value: searchText, onEnterKey: function() { $data.startSearch(); } }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.searchText, 'onEnterKey': function () { $context.$data.startSearch(); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to\' }, items: items, onItemClick: clickAction }, attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'dxMenu': function () { return { 'wrapperAttr': { 'class': 'dxrd-preview-export-to' }, 'items': $context.$data.items, 'onItemClick': $context.$data.clickAction }; }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization($data.text, $data.textId)', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization($context.$data.text, $context.$data.textId); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: ko.unwrap($data.imageClassName), template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}', function ($context, $element) { return { 'css': function () { return $context.ko.unwrap($context.$data.imageClassName); }, 'template': function () { return { 'name': $context.ko.unwrap($context.$data.imageTemplateName), 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: visible, css: $data.imageClassName, template: { name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, dxclick: clickAction', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.imageClassName; }, 'template': function () { return { 'name': $context.$data.imageTemplateName, 'if': !!$context.ko.unwrap($context.$data.imageTemplateName) }; }, 'dxclick': function () { return $context.$data.clickAction; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxrdMobilePaginator: $data', function ($context, $element) { return { 'dxrdMobilePaginator': function () { return $context.$data; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text : text', function ($context, $element) { return { 'text': function () { return $context.$data.text; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopover: { wrapperAttr: { class: \'dxrd-menu-export-popover\' }, width: \'266px\', height: \'266px\', visible: visible, target: \'.dxrdp-mobile-action.dxrd-image-export-to\', container: $root.getPopupContainer($element), }', function ($context, $element) { return { 'dxPopover': function () { return { 'wrapperAttr': { 'class': 'dxrd-menu-export-popover' }, 'width': '266px', 'height': '266px', 'visible': $context.$data.visible, 'target': '.dxrdp-mobile-action.dxrd-image-export-to', 'container': $context.$root.getPopupContainer($element) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxclick: action, text: text', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; }, 'text': function () { return $context.$data.text; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopup: { wrapperAttr: { class: \'dxrd-menu-parameters-popup\' }, showTitle: false, width: function() {return window.innerWidth }, height: function() {return window.innerHeight }, visible: visible, container: $root.getPopupContainer($element), }', function ($context, $element) { return { 'dxPopup': function () { return { 'wrapperAttr': { 'class': 'dxrd-menu-parameters-popup' }, 'showTitle': false, 'width': function () { return window.innerWidth; }, 'height': function () { return window.innerHeight; }, 'visible': $context.$data.visible, 'container': $context.$root.getPopupContainer($element) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxValidationGroup: {}, css: className', function ($context, $element) { return { 'dxValidationGroup': function () { return {}; }, 'css': function () { return $context.$data.className; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $data.title', function ($context, $element) { return { 'text': function () { return $context.$data.title; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, bounceEnabled: false }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'bounceEnabled': false }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: { data: $data.actionButtons }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.actionButtons }; }, 'cacheElement': function () { return { 'action': function (element) { $context.$data.cacheElementContent(element); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxButton: { text: text, onClick: function(params){ $data.action(params) }, disabled: disabled, visible: visible }, css: className', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$data.text, 'onClick': function (params) { $context.$data.action(params); }, 'disabled': $context.$data.disabled, 'visible': $context.$data.visible }; }, 'css': function () { return $context.$data.className; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: showIcons, foreach: { data: $data.actionIcons }', function ($context, $element) { return { 'visible': function () { return $context.$data.showIcons; }, 'foreach': function () { return { 'data': $context.$data.actionIcons }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxButton: { onClick: function(params){ $data.action(params)}, disabled: disabled }, css: className', function ($context, $element) { return { 'dxButton': function () { return { 'onClick': function (params) { $context.$data.action(params); }, 'disabled': $context.$data.disabled }; }, 'css': function () { return $context.$data.className; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPropertyGrid: { target: ko.observable($data) }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.ko.observable($context.$data) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxrvDateRangeEditor: {value: $data.value(), isMobile: true }', function ($context, $element) { return { 'dxrvDateRangeEditor': function () { return { 'value': $context.$data.value(), 'isMobile': true }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.format', function ($context, $element) { return { 'if': function () { return $context.$data.format; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('ifnot: $data.format', function ($context, $element) { return { 'ifnot': function () { return $context.$data.format; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.enabled', function ($context, $element) { return { 'if': function () { return $context.$data.enabled; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.content', function ($context, $element) { return { 'if': function () { return $context.$data.content; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: $data.content', function ($context, $element) { return { 'template': function () { return $context.$data.content; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dxrv-preview-parameters-mobile\', data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrv-preview-parameters-mobile', 'data': $context.$data }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: $data.contentTemplate, data: model }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.model }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: { pointerEvents: $data.documentId === null ? \'none\' : \'\', touchEvents: $data.documentId === null ? \'none\' : \'\' }, styleunit: { top: topOffset, height: previewWrapperSize().height, width: previewWrapperSize().width }, slide: $root.slideOptions, mobileZoom: { zoom: mobileZoom, zoomUpdating: zoomUpdating }, dxclick: function(s,e) { if(!$root.brickEventsDisabled()) { $data.showActions(s,e); } }, css: { \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.documentId === null ? 'none' : '', 'touchEvents': $context.$data.documentId === null ? 'none' : '' }; }, 'styleunit': function () { return { 'top': $context.$data.topOffset, 'height': $context.$data.previewWrapperSize().height, 'width': $context.$data.previewWrapperSize().width }; }, 'slide': function () { return $context.$root.slideOptions; }, 'mobileZoom': function () { return { 'zoom': $context.$data.mobileZoom, 'zoomUpdating': $context.$data.zoomUpdating }; }, 'dxclick': function () { return function (s, e) { if (!$context.$root.brickEventsDisabled()) {
        $context.$data.showActions(s, e);
    } }; }, 'css': function () { return { 'dxrp-editing-fields-hightlighted': $context.$data.editingFieldsHighlighted }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: { pointerEvents: $data.zoomUpdating() ? \'none\' : \'\', touchEvents: $data.zoomUpdating() ? \'none\' : \'\' }, dxGalleryReportPreview: { dataSource: $root.gallery.items, gallery: $root.gallery, animationEnabled: $root.gallery.animationEnabled, disabled: $data.zoomUpdating, selectedIndex: $root.gallery.selectedIndex, width:\'100%\', height: \'100%\', showIndicator: false, loop: true, onSelectionChanged: onSlide, swipeEnabled: $root.slideOptions.swipeEnabled }', function ($context, $element) { return { 'style': function () { return { 'pointerEvents': $context.$data.zoomUpdating() ? 'none' : '', 'touchEvents': $context.$data.zoomUpdating() ? 'none' : '' }; }, 'dxGalleryReportPreview': function () { return { 'dataSource': $context.$root.gallery.items, 'gallery': $context.$root.gallery, 'animationEnabled': $context.$root.gallery.animationEnabled, 'disabled': $context.$data.zoomUpdating, 'selectedIndex': $context.$root.gallery.selectedIndex, 'width': '100%', 'height': '100%', 'showIndicator': false, 'loop': true, 'onSelectionChanged': $context.$data.onSlide, 'swipeEnabled': $context.$root.slideOptions.swipeEnabled }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: $root.reportPreview.getScrollViewOptions()', function ($context, $element) { return { 'dxScrollView': function () { return $context.$root.reportPreview.getScrollViewOptions(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: $root.gallery.contentSize()', function ($context, $element) { return { 'style': function () { return $context.$root.gallery.contentSize(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: position, css: $data.classSet', function ($context, $element) { return { 'styleunit': function () { return $context.$data.position; }, 'css': function () { return $context.$data.classSet; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: Math.max(page.width(), position().width), height: Math.max(page.height(), position().height) }, style: { \'background-color\': page.color }', function ($context, $element) { return { 'styleunit': function () { return { 'width': Math.max($context.$data.page.width(), $context.$data.position().width), 'height': Math.max($context.$data.page.height(), $context.$data.position().height) }; }, 'style': function () { return { 'background-color': $context.$data.page.color }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { \'dxrdp-active\': page.active() && $parents[0].blocks().length > 1, \'dxrdp-page-padding\': $parents[0].blocks().length > 1 }, visible: $root.slideOptions.readerMode', function ($context, $element) { return { 'css': function () { return { 'dxrdp-active': $context.$data.page.active() && $context.$parents[0].blocks().length > 1, 'dxrdp-page-padding': $context.$parents[0].blocks().length > 1 }; }, 'visible': function () { return $context.$root.slideOptions.readerMode; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: page.width, height: page.height }, style: { pointerEvents: $root.brickEventsDisabled() ? \'none\' : \'\', touchEvents: $root.brickEventsDisabled() ? \'none\' : \'\' }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.page.width, 'height': $context.$data.page.height }; }, 'style': function () { return { 'pointerEvents': $context.$root.brickEventsDisabled() ? 'none' : '', 'touchEvents': $context.$root.brickEventsDisabled() ? 'none' : '' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: {name: \'dxrd-preview-progress-bar\', data: progressBar }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-progress-bar', 'data': $context.$data.progressBar }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: $data.blocks()', function ($context, $element) { return { 'foreach': function () { return $context.$data.blocks(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.page', function ($context, $element) { return { 'if': function () { return $context.$data.page; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name :\'dxrd-preview-page-mobile\', data: page }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-page-mobile', 'data': $context.$data.page }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: containerStyle(), zoom: zoom, css: { active: active(), readonly: field.readOnly() }', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle(); }, 'zoom': function () { return $context.$data.zoom; }, 'css': function () { return { 'active': $context.$data.active(), 'readonly': $context.$data.field.readOnly() }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: borderStyle()', function ($context, $element) { return { 'style': function () { return $context.$data.borderStyle(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxclick: activateEditor', function ($context, $element) { return { 'dxclick': function () { return $context.$data.activateEditor; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: textStyle(), css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}', function ($context, $element) { return { 'style': function () { return $context.$data.textStyle(); }, 'css': function () { return { 'dxrp-editing-field-text-wordwrap': !$context.$data.wordWrap }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: breakOffsetStyle(), html: htmlValue()', function ($context, $element) { return { 'style': function () { return $context.$data.breakOffsetStyle(); }, 'html': function () { return $context.$data.htmlValue(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: breakOffsetStyle(), text: field.editValue()', function ($context, $element) { return { 'style': function () { return $context.$data.breakOffsetStyle(); }, 'text': function () { return $context.$data.field.editValue(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('value: value, valueUpdate: \'keypress\', style: textStyle(), event: { blur: hideEditor, keyup: keypressAction }', function ($context, $element) { return { 'value': function () { return $context.$data.value; }, 'valueUpdate': function () { return 'keypress'; }, 'style': function () { return $context.$data.textStyle(); }, 'event': function () { return { 'blur': $context.$data.hideEditor, 'keyup': $context.$data.keypressAction }; }, '_ko_property_writers': function () { return { 'value': function (_z) { $context.$data.value = _z; } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxTextBox: options, childStyle: { style: textStyle(), selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxTextBox': function () { return $context.$data.options; }, 'childStyle': function () { return { 'style': $context.$data.textStyle(), 'selector': '.dx-texteditor-input' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxNumberBox: options, childStyle: { style: textStyle(), selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxNumberBox': function () { return $context.$data.options; }, 'childStyle': function () { return { 'style': $context.$data.textStyle(), 'selector': '.dx-texteditor-input' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxDateBox: $data.getOptions({ dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), childStyle: { style: textStyle(), selector: \'.dx-texteditor-input\'}', function ($context, $element) { return { 'dxDateBox': function () { return $context.$data.getOptions({ 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'at': 'left bottom', 'collision': 'flipfit flip', 'my': 'left top', 'boundary': $context.$root.getPopupContainer($element), 'of': $element } } }); }, 'childStyle': function () { return { 'style': $context.$data.textStyle(), 'selector': '.dx-texteditor-input' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: containerStyle()', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPictureEditor: $data.getPictureEditorOptions()', function ($context, $element) { return { 'dxPictureEditor': function () { return $context.$data.getPictureEditorOptions(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: containerStyle(), zoom: zoom, click: onClick', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle(); }, 'zoom': function () { return $context.$data.zoom; }, 'click': function () { return $context.$data.onClick; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: checkStyle(), template: {name: $data.checkStateStyleIcon, if: !!ko.unwrap($data.checkStateStyleIcon)}', function ($context, $element) { return { 'style': function () { return $context.$data.checkStyle(); }, 'template': function () { return { 'name': $context.$data.checkStateStyleIcon, 'if': !!$context.ko.unwrap($context.$data.checkStateStyleIcon) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: checkStyle()', function ($context, $element) { return { 'style': function () { return $context.$data.checkStyle(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: { fill: checked() ? \'black\' : \'transparent\' }', function ($context, $element) { return { 'style': function () { return { 'fill': $context.$data.checked() ? 'black' : 'transparent' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: containerStyle(), dxclick: activateEditor, zoom: zoom, css: { active: active(), readonly: field.readOnly() }', function ($context, $element) { return { 'style': function () { return $context.$data.containerStyle(); }, 'dxclick': function () { return $context.$data.activateEditor; }, 'zoom': function () { return $context.$data.zoom; }, 'css': function () { return { 'active': $context.$data.active(), 'readonly': $context.$data.field.readOnly() }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: style, text: text', function ($context, $element) { return { 'style': function () { return $context.$data.style; }, 'text': function () { return $context.$data.text; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('value: field._editorValue, valueUpdate: \'keypress\', style: textStyle(), event: { blur: hideEditor, keyup: keypressAction }', function ($context, $element) { return { 'value': function () { return $context.$data.field._editorValue; }, 'valueUpdate': function () { return 'keypress'; }, 'style': function () { return $context.$data.textStyle(); }, 'event': function () { return { 'blur': $context.$data.hideEditor, 'keyup': $context.$data.keypressAction }; }, '_ko_property_writers': function () { return { 'value': function (_z) { Object($context.$data.field)._editorValue = _z; } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: !active() || field.readOnly()', function ($context, $element) { return { 'if': function () { return !$context.$data.active() || $context.$data.field.readOnly(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: htmlValue()', function ($context, $element) { return { 'if': function () { return $context.$data.htmlValue(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('ifnot: htmlValue()', function ($context, $element) { return { 'ifnot': function () { return $context.$data.htmlValue(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: active() && !field.readOnly()', function ($context, $element) { return { 'if': function () { return $context.$data.active() && !$context.$data.field.readOnly(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: editorTemplate, data: data }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.editorTemplate, 'data': $context.$data.data }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrp-editing-field-image-editor\'', function ($context, $element) { return { 'template': function () { return 'dxrp-editing-field-image-editor'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: cells', function ($context, $element) { return { 'foreach': function () { return $context.$data.cells; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { \'action\': exportActionUri }, foreach: exportFormData', function ($context, $element) { return { 'attr': function () { return { 'action': $context.$data.exportActionUri }; }, 'foreach': function () { return $context.$data.exportFormData; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: {\'name\': name, \'value\': value}', function ($context, $element) { return { 'attr': function () { return { 'name': $context.$data.name, 'value': $context.$data.value }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopup: { width: popupWidth, height: popupHeight, title: getPopupTitle(), visible: popupVisible, showCloseButton: true, toolbarItems: popupButtons, wrapperAttr: { class: \'dxrd-print-dialog dx-editors dx-widget\' }, container: $root.getPopupContainer($element), position: { of: $root.getPopupContainer($element) } }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': $context.$data.popupWidth, 'height': $context.$data.popupHeight, 'title': $context.$data.getPopupTitle(), 'visible': $context.$data.popupVisible, 'showCloseButton': true, 'toolbarItems': $context.$data.popupButtons, 'wrapperAttr': { 'class': 'dxrd-print-dialog dx-editors dx-widget' }, 'container': $context.$root.getPopupContainer($element), 'position': { 'of': $context.$root.getPopupContainer($element) } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'The browser sent the document to the printer.\', \'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Caption\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('The browser sent the document to the printer.', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Caption'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: printingTextPrefix', function ($context, $element) { return { 'text': function () { return $context.$data.printingTextPrefix; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('click: printingLinkCallback, text: $root.getLocalization(\'document in PDF format\', \'ASPxReportsStringId.WebDocumentViewer_Print_Popup_LinkText\')', function ($context, $element) { return { 'click': function () { return $context.$data.printingLinkCallback; }, 'text': function () { return $context.$root.getLocalization('document in PDF format', 'ASPxReportsStringId.WebDocumentViewer_Print_Popup_LinkText'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: printingTextPostfix', function ($context, $element) { return { 'text': function () { return $context.$data.printingTextPostfix; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.printingTextPrefix', function ($context, $element) { return { 'if': function () { return $context.$data.printingTextPrefix; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.printingTextPostfix', function ($context, $element) { return { 'if': function () { return $context.$data.printingTextPostfix; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Export Options\', \'DevExpress.XtraReports.UI.XtraReport.ExportOptions\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Export Options', 'DevExpress.XtraReports.UI.XtraReport.ExportOptions'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); }  }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('accessibilityKeyboardHelper: $data.keyboardHelper', function ($context, $element) { return { 'accessibilityKeyboardHelper': function () { return $context.$data.keyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPropertyGrid: { target: model }', function ($context, $element) { return { 'dxPropertyGrid': function () { return { 'target': $context.$data.model }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { \'aria-label\': $root.getLocalization(text, $data.textId), \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': $data.disabled() ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$root.getLocalization($context.$data.text, $context.$data.textId), 'aria-hidden': $context.ko.unwrap($context.$data.visible) ? 'false' : 'true', 'aria-disabled': $context.$data.disabled() ? 'true' : 'false' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted\' }, disabled: $data.disabled(), items: items, cssClass: \'dxrdp-export-to-menu\', onItemClick: clickAction, onSubmenuShowing: $data.eventHandlers.onSubmenuShowing($root.getPopupContainer($element), $element), onSubmenuShown: $data.eventHandlers.onSubmenuShown, onSubmenuHiding: $data.eventHandlers.onSubmenuHiding, tabIndex: \'-1\' }, attr: { title: $root.getLocalization(text, $data.textId) }', function ($context, $element) { return { 'dxMenu': function () { return { 'wrapperAttr': { 'class': 'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted' }, 'disabled': $context.$data.disabled(), 'items': $context.$data.items, 'cssClass': 'dxrdp-export-to-menu', 'onItemClick': $context.$data.clickAction, 'onSubmenuShowing': $context.$data.eventHandlers.onSubmenuShowing($context.$root.getPopupContainer($element), $element), 'onSubmenuShown': $context.$data.eventHandlers.onSubmenuShown, 'onSubmenuHiding': $context.$data.eventHandlers.onSubmenuHiding, 'tabIndex': '-1' }; }, 'attr': function () { return { 'title': $context.$root.getLocalization($context.$data.text, $context.$data.textId) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: ko.unwrap($data.imageClassName), template: ko.unwrap($data.imageTemplateName)', function ($context, $element) { return { 'css': function () { return $context.ko.unwrap($context.$data.imageClassName); }, 'template': function () { return $context.ko.unwrap($context.$data.imageTemplateName); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: model', function ($context, $element) { return { 'if': function () { return $context.$data.model; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxclick: function(_, event){ onClick(event); event.stopPropagation(); }, style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active, \'dxrd-report-preview-brick-selectable\': !($data.bricks) }', function ($context, $element) { return { 'dxclick': function () { return function (_, event) { $context.$data.onClick(event); event.stopPropagation(); }; }, 'style': function () { return { 'top': $context.$data.topP, 'left': $context.$data.leftP, 'right': $context.$data.rightP, 'height': $context.$data.heightP, 'width': $context.$data.widthP }; }, 'css': function () { return { 'dxrd-report-preview-brick-selected': $context.$data.active, 'dxrd-report-preview-brick-selectable': !($context.$data.bricks) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { \'dxrdp-navigation-brick-drill-down\' : !!navigation.drillDownKey, \'dxrdp-navigation-brick-sorting\' : !!navigation.sortData, \'dxrdp-navigation-brick-sorting-desc\': navigation.sortData && navigation.sortData.order === 1, \'dxrdp-navigation-brick-sorting-asc\': navigation.sortData && navigation.sortData.order === 2 }', function ($context, $element) { return { 'css': function () { return { 'dxrdp-navigation-brick-drill-down': !!$context.$data.navigation.drillDownKey, 'dxrdp-navigation-brick-sorting': !!$context.$data.navigation.sortData, 'dxrdp-navigation-brick-sorting-desc': $context.$data.navigation.sortData && $context.$data.navigation.sortData.order === 1, 'dxrdp-navigation-brick-sorting-asc': $context.$data.navigation.sortData && $context.$data.navigation.sortData.order === 2 }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: {\'aria-label\': $parent.currentPageAriaLabelImgAlt($data.pageIndex) }, dxclick: clickToBrick, \'brick-selection-prog\': { page: $data, preview: $parent, click: function(pageIndex) { $parent.goToPage(pageIndex) } }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$parent.currentPageAriaLabelImgAlt($context.$data.pageIndex) }; }, 'dxclick': function () { return $context.$data.clickToBrick; }, 'brick-selection-prog': function () { return { 'page': $context.$data, 'preview': $context.$parent, 'click': function (pageIndex) { $context.$parent.goToPage(pageIndex); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { \'width\': width() + 2, \'height\': height() + 2 }, visible: pageLoading', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width() + 2, 'height': $context.$data.height() + 2 }; }, 'visible': function () { return $context.$data.pageLoading; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { \'paddingTop\': height() / 2.3 }', function ($context, $element) { return { 'styleunit': function () { return { 'paddingTop': $context.$data.height() / 2.3 }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: loadingText', function ($context, $element) { return { 'text': function () { return $context.$data.loadingText; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { src: displayImageSrc, \'alt\': $parent.currentPageAriaLabelImgAlt($data.pageIndex) }', function ($context, $element) { return { 'attr': function () { return { 'src': $context.$data.displayImageSrc, 'alt': $context.$parent.currentPageAriaLabelImgAlt($context.$data.pageIndex) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('accessibilityKeyboardHelper: $data.editingFieldsKeyboardHelper', function ($context, $element) { return { 'accessibilityKeyboardHelper': function () { return $context.$data.editingFieldsKeyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.navigation', function ($context, $element) { return { 'if': function () { return $context.$data.navigation; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: clickableBricks', function ($context, $element) { return { 'foreach': function () { return $context.$data.clickableBricks; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: "dxrd-page-brick-clickable", data: $data }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-page-brick-clickable', 'data': $context.$data }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxclick: activateEditor, css: parentPopupClass', function ($context, $element) { return { 'dxclick': function () { return $context.$data.activateEditor; }, 'css': function () { return $context.$data.parentPopupClass; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPainter: $data.getPainter()', function ($context, $element) { return { 'dxPainter': function () { return $context.$data.getPainter(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopup: { width: contentData.containerStyle().width, height: contentData.containerStyle().height, position: { boundary: getContainer(), of: getPositionTarget($element), collision: \'flipfit flipfit\' }, container: getContainer(), showTitle: false, target: getContainer(), deferRendering: false, hideOnOutsideClick: true, showCloseButton: false, onContentReady: onContentReady, onHiding: onHiding, onShown: onShown, shading: shading, wrapperAttr: { class: \'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen\' }, animation: { show: { type: \'slide\', duration: 0, to: { opacity: 1 }, from: { opacity: 0 } }, hide: { type: \'fade\', duration: 100, to: { opacity: 0 }, from: { opacity: 1 } } }, visible: isVisible($element) }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': $context.$data.contentData.containerStyle().width, 'height': $context.$data.contentData.containerStyle().height, 'position': { 'boundary': $context.$data.getContainer(), 'of': $context.$data.getPositionTarget($element), 'collision': 'flipfit flipfit' }, 'container': $context.$data.getContainer(), 'showTitle': false, 'target': $context.$data.getContainer(), 'deferRendering': false, 'hideOnOutsideClick': true, 'showCloseButton': false, 'onContentReady': $context.$data.onContentReady, 'onHiding': $context.$data.onHiding, 'onShown': $context.$data.onShown, 'shading': $context.$data.shading, 'wrapperAttr': { 'class': 'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen' }, 'animation': { 'show': { 'type': 'slide', 'duration': 0, 'to': { 'opacity': 1 }, 'from': { 'opacity': 0 } }, 'hide': { 'type': 'fade', 'duration': 100, 'to': { 'opacity': 0 }, 'from': { 'opacity': 1 } } }, 'visible': $context.$data.isVisible($element) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dx-picture-editing-popup\', data: $data.getPopupData() }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-picture-editing-popup', 'data': $context.$data.getPopupData() }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: showContent', function ($context, $element) { return { 'if': function () { return $context.$data.showContent; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: contentTemplate, data: contentData, afterRender: $data.renderedHandler }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.contentData, 'afterRender': $context.$data.renderedHandler }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { \'aria-label\': $root.getLocalization(\'Zoom\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox\'), \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': $data.disabled() ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$root.getLocalization('Zoom', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox'), 'aria-hidden': $context.ko.unwrap($context.$data.visible) ? 'false' : 'true', 'aria-disabled': $context.$data.disabled() ? 'true' : 'false' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxSelectBox: { items: zoomItems, value: $data.zoom, displayExpr: displayExpr, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: onCustomItemCreating, useItemTextAsTitle: true, width: 140, dropDownOptions: { container: $root.getPopupContainer($element), position: { my: \'left top\', at: \'left bottom\', of: $element }, wrapperAttr: { class: \'dx-zoom-selectbox-popup-wrapper\' } }, tabIndex: \'-1\', inputAttr: { \'aria-label\': $root.getLocalization(\'Zoom\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox\') }}', function ($context, $element) { return { 'dxSelectBox': function () { return { 'items': $context.$data.zoomItems, 'value': $context.$data.zoom, 'displayExpr': $context.$data.displayExpr, 'displayCustomValue': true, 'acceptCustomValue': true, 'onCustomItemCreating': $context.$data.onCustomItemCreating, 'useItemTextAsTitle': true, 'width': 140, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'my': 'left top', 'at': 'left bottom', 'of': $element }, 'wrapperAttr': { 'class': 'dx-zoom-selectbox-popup-wrapper' } }, 'tabIndex': '-1', 'inputAttr': { 'aria-label': $context.$root.getLocalization('Zoom', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox') } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: { showScrollbar: \'onHover\', direction: \'horizontal\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'direction': 'horizontal', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('keyDownActions: actionLists, accessibilityKeyboardHelper: $data.keyboardHelper', function ($context, $element) { return { 'keyDownActions': function () { return $context.$data.actionLists; }, 'accessibilityKeyboardHelper': function () { return $context.$data.keyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: active() && visible(), accessibilityKeyboardHelper: $data.keyboardHelper', function ($context, $element) { return { 'visible': function () { return $context.$data.active() && $context.$data.visible(); }, 'accessibilityKeyboardHelper': function () { return $context.$data.keyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Search', 'ASPxReportsStringId.SearchDialog_Header'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxSearchEditor: { searchModel: $data, inputAttr: { \'type\': \'search\', \'title\': $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\') }}', function ($context, $element) { return { 'dxSearchEditor': function () { return { 'searchModel': $context.$data, 'inputAttr': { 'type': 'search', 'title': $context.$root.getLocalization('Search', 'ASPxReportsStringId.SearchDialog_Header') } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxCheckBox: { value: matchCase, text: $root.getLocalization(\'Match case\', \'ASPxReportsStringId.SearchDialog_Case\')}', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.matchCase, 'text': $context.$root.getLocalization('Match case', 'ASPxReportsStringId.SearchDialog_Case') }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxCheckBox: { value: matchWholeWord, text: $root.getLocalization(\'Match whole word only\', \'ASPxReportsStringId.SearchDialog_WholeWord\')}', function ($context, $element) { return { 'dxCheckBox': function () { return { 'value': $context.$data.matchWholeWord, 'text': $context.$root.getLocalization('Match whole word only', 'ASPxReportsStringId.SearchDialog_WholeWord') }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Search result\', \'ASPxReportsStringId.WebDocumentViewer_SearchResultText\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Search result', 'ASPxReportsStringId.WebDocumentViewer_SearchResultText'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxLoadIndicator: { visible: $data.loading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.loading }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxList: { dataSource: searchResultDataSource, pageLoadMode: \'scrollBottom\', focusStateEnabled:false, hoverStateEnabled:false, onItemRendered: onItemRendered, noDataText:  loading() ? \'\' : noResultText(), encodeNoDataText: true, visible: !loading() }', function ($context, $element) { return { 'dxList': function () { return { 'dataSource': $context.$data.searchResultDataSource, 'pageLoadMode': 'scrollBottom', 'focusStateEnabled': false, 'hoverStateEnabled': false, 'onItemRendered': $context.$data.onItemRendered, 'noDataText': $context.$data.loading() ? '' : $context.$data.noResultText(), 'encodeNoDataText': true, 'visible': !$context.$data.loading() }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxAction: { model: $data, action: $parent.itemClickAction }, attr: {\'aria-label\': $data.data.text + \', \' + $root.dx._static.formatSearchResult($data.data) + \', \' + ($parent.searchResult().indexOf($data.data) + 1) + \' of \' + $parent.searchResult().length }', function ($context, $element) { return { 'dxAction': function () { return { 'model': $context.$data, 'action': $context.$parent.itemClickAction }; }, 'attr': function () { return { 'aria-label': $context.$data.data.text + ', ' + $context.$root.dx._static.formatSearchResult($context.$data.data) + ', ' + ($context.$parent.searchResult().indexOf($context.$data.data) + 1) + ' of ' + $context.$parent.searchResult().length }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $data.data.text', function ($context, $element) { return { 'text': function () { return $context.$data.data.text; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.dx._static.formatSearchResult($data.data)', function ($context, $element) { return { 'text': function () { return $context.$root.dx._static.formatSearchResult($context.$data.data); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: visible, css: $data.cssClasses, accessibilityKeyboardHelper: $data.progressBarAccessibility', function ($context, $element) { return { 'visible': function () { return $context.$data.visible; }, 'css': function () { return $context.$data.cssClasses; }, 'accessibilityKeyboardHelper': function () { return $context.$data.progressBarAccessibility; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style : { width: progress()  + \'%\' }', function ($context, $element) { return { 'style': function () { return { 'width': $context.$data.progress() + '%' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: cancelText, visible: $data.cancelVisible, dxAction: { model: $data, action: function() { $data.stop && stop(); }}', function ($context, $element) { return { 'text': function () { return $context.$data.cancelText; }, 'visible': function () { return $context.$data.cancelVisible; }, 'dxAction': function () { return { 'model': $context.$data, 'action': function () { $context.$data.stop && $context.$data.stop(); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Preview Parameters\', \'ASPxReportsStringId.ReportDesigner_Preview_ParametersTitle\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Preview Parameters', 'ASPxReportsStringId.ReportDesigner_Preview_ParametersTitle'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'The report does not contain any parameters.\', \'ASPxReportsStringId.WebDocumentViewer_NoParameters\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('The report does not contain any parameters.', 'ASPxReportsStringId.WebDocumentViewer_NoParameters'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxValidationGroup: {}, accessibilityKeyboardHelper: $data.keyboardHelper', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; }, 'dxValidationGroup': function () { return {}; }, 'accessibilityKeyboardHelper': function () { return $context.$data.keyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxLoadIndicator: { visible: model.parametersLoading }', function ($context, $element) { return { 'dxLoadIndicator': function () { return { 'visible': $context.$data.model.parametersLoading }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxButton: { text: $root.getLocalization(\'Reset\', \'ASPxReportsStringId.ParametersPanel_Reset\'), onClick: function() { model.restore(); } }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalization('Reset', 'ASPxReportsStringId.ParametersPanel_Reset'), 'onClick': function () { $context.$data.model.restore(); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxButton: { text: $root.getLocalization(\'Submit\', \'ASPxReportsStringId.ParametersPanel_Submit\'), onClick: function(params) { model.validateAndSubmit(params); } }', function ($context, $element) { return { 'dxButton': function () { return { 'text': $context.$root.getLocalization('Submit', 'ASPxReportsStringId.ParametersPanel_Submit'), 'onClick': function (params) { $context.$data.model.validateAndSubmit(params); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { \'aria-label\': $root.getLocalization(\'Pager\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox\') , \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': $data.disabled() ? \'true\' : \'false\' }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$root.getLocalization('Pager', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox'), 'aria-hidden': $context.ko.unwrap($context.$data.visible) ? 'false' : 'true', 'aria-disabled': $context.$data.disabled() ? 'true' : 'false' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxSelectBox: { dataSource: pageItems, value: selectedItem, opened: opened, displayExpr: displayExpr, useItemTextAsTitle: true, onFocusOut: focusOut, onKeyUp: keyUp, itemTemplate: itemTemplate, searchMode: searchMode, searchEnabled: searchEnabled, searchTimeout: searchTimeout, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), wrapperAttr: { class: \'dx-page-selectbox-popup-wrapper\' }, }, tabIndex: \'-1\', inputAttr: { \'aria-label\': $root.getLocalization(\'Pager\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox\') } }', function ($context, $element) { return { 'dxSelectBox': function () { return { 'dataSource': $context.$data.pageItems, 'value': $context.$data.selectedItem, 'opened': $context.$data.opened, 'displayExpr': $context.$data.displayExpr, 'useItemTextAsTitle': true, 'onFocusOut': $context.$data.focusOut, 'onKeyUp': $context.$data.keyUp, 'itemTemplate': $context.$data.itemTemplate, 'searchMode': $context.$data.searchMode, 'searchEnabled': $context.$data.searchEnabled, 'searchTimeout': $context.$data.searchTimeout, 'disabled': $context.$data.disabled, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'wrapperAttr': { 'class': 'dx-page-selectbox-popup-wrapper' } }, 'tabIndex': '-1', 'inputAttr': { 'aria-label': $context.$root.getLocalization('Pager', 'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox') } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $root.getLocalization(\'Document Map\', \'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap\')', function ($context, $element) { return { 'text': function () { return $context.$root.getLocalization('Document Map', 'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap'); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, accessibilityKeyboardHelper: $parent.keyboardHelper', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; }, 'accessibilityKeyboardHelper': function () { return $context.$parent.keyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('treelist: documentMapOptions', function ($context, $element) { return { 'treelist': function () { return $context.$data.documentMapOptions; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: searchText().length', function ($context, $element) { return { 'if': function () { return $context.$data.searchText().length; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: (model && !model.isEmpty())', function ($context, $element) { return { 'if': function () { return ($context.$data.model && !$context.$data.model.isEmpty()); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: (!model || model.isEmpty())', function ($context, $element) { return { 'if': function () { return (!$context.$data.model || $context.$data.model.isEmpty()); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dx-propertieseditor\', data: $data.propertyGrid }', function ($context, $element) { return { 'template': function () { return { 'name': 'dx-propertieseditor', 'data': $context.$data.propertyGrid }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('visible: reportPreview.previewVisible, cssArray: [ $data.rootStyle , { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl } ]', function ($context, $element) { return { 'visible': function () { return $context.$data.reportPreview.previewVisible; }, 'cssArray': function () { return [$context.$data.rootStyle, { 'dx-rtl': $context.$data.rtl, 'dx-ltr': !$context.$data.rtl }]; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('textCopier, css: { \'dx-rtl\': $data.rtlReport, \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }', function ($context, $element) { return { 'textCopier': function () { return undefined; }, 'css': function () { return { 'dx-rtl': $context.$data.rtlReport, 'dxrp-editing-fields-hightlighted': $context.$data.editingFieldsHighlighted }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('accessibilityKeyboardHelper: $data.previewBrickKeyboardHelper', function ($context, $element) { return { 'accessibilityKeyboardHelper': function () { return $context.$data.previewBrickKeyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('autoFit: { autoFitBy: $parent.autoFitBy, zoom: zoom, width: originalWidth, height: originalHeight, rightPanelWidth: $root.tabPanel.width, previewSize: $parent.previewSize, brickLoading: brickLoading }, styleunit: { width: width, height: height }', function ($context, $element) { return { 'autoFit': function () { return { 'autoFitBy': $context.$parent.autoFitBy, 'zoom': $context.$data.zoom, 'width': $context.$data.originalWidth, 'height': $context.$data.originalHeight, 'rightPanelWidth': $context.$root.tabPanel.width, 'previewSize': $context.$parent.previewSize, 'brickLoading': $context.$data.brickLoading }; }, 'styleunit': function () { return { 'width': $context.$data.width, 'height': $context.$data.height }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('lazyImages: { enabled: showMultipagePreview, updateCallback: onSizeChanged }', function ($context, $element) { return { 'lazyImages': function () { return { 'enabled': $context.$data.showMultipagePreview, 'updateCallback': $context.$data.onSizeChanged }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { \'width\': width(), \'height\': height() }, toView: { active: active }, css : { \'dxrd-report-preview-active\': active }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.width(), 'height': $context.$data.height() }; }, 'toView': function () { return { 'active': $context.$data.active }; }, 'css': function () { return { 'dxrd-report-preview-active': $context.$data.active }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { \'dxrd-visually-hidden\': currentPage() }', function ($context, $element) { return { 'css': function () { return { 'dxrd-visually-hidden': $context.$data.currentPage() }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: emptyDocumentCaption()', function ($context, $element) { return { 'text': function () { return $context.$data.emptyDocumentCaption(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { \'aria-label\': $root.getLocalization(\'Clipboard\', \'ASPxReportsStringId.WebDocumentViewer_AriaClipboard\') }', function ($context, $element) { return { 'attr': function () { return { 'aria-label': $context.$root.getLocalization('Clipboard', 'ASPxReportsStringId.WebDocumentViewer_AriaClipboard') }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxViewerExport: $data', function ($context, $element) { return { 'dxViewerExport': function () { return $context.$data; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('with: progressBar', function ($context, $element) { return { 'with': function () { return $context.$data.progressBar; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-preview-progress-bar\'', function ($context, $element) { return { 'template': function () { return 'dxrd-preview-progress-bar'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: !showMultipagePreview()', function ($context, $element) { return { 'if': function () { return !$context.$data.showMultipagePreview(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('with: currentPage', function ($context, $element) { return { 'with': function () { return $context.$data.currentPage; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: pageLoading() || (!pageLoading() && displayImageSrc())', function ($context, $element) { return { 'if': function () { return $context.$data.pageLoading() || (!$context.$data.pageLoading() && $context.$data.displayImageSrc()); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dxrd-preview-page\', afterRender: function() { $parent.delayedInit() } }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-preview-page', 'afterRender': function () { $context.$parent.delayedInit(); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: showMultipagePreview() && !!currentPage()', function ($context, $element) { return { 'if': function () { return $context.$data.showMultipagePreview() && !!$context.$data.currentPage(); } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: {data: pages, afterRender: function() { $parent.model.delayedInit() } }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.pages, 'afterRender': function () { $context.$parent.model.delayedInit(); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('lazy: { if: pageLoading() || (!pageLoading() && displayImageSrc()) }', function ($context, $element) { return { 'lazy': function () { return { 'if': $context.$data.pageLoading() || (!$context.$data.pageLoading() && $context.$data.displayImageSrc()) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dxrd-preview-page\'', function ($context, $element) { return { 'template': function () { return 'dxrd-preview-page'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('cacheElement: { action: function(element) { $data._$element = element; } }, dxEllipsisEditor: { value: _displayText, readOnly:true, inputAttr: { \'aria-label\': $parent.displayName }, openOnFieldClick: true, buttonAction: function() { $data._showPopup(); } }', function ($context, $element) { return { 'cacheElement': function () { return { 'action': function (element) { $context.$data._$element = element; } }; }, 'dxEllipsisEditor': function () { return { 'value': $context.$data._displayText, 'readOnly': true, 'inputAttr': { 'aria-label': $context.$parent.displayName }, 'openOnFieldClick': true, 'buttonAction': function () { $context.$data._showPopup(); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopup: { width: \'max-content\', height: $root.calculateWithZoomFactor(362), wrapperAttr: { class: \'dxrv-daterange-editor-popup-wrapper\' }, position: { my: \'right top\', at: \'right bottom\', of: $data._$element, collision: \'fit fit\', offset: \'1 -1\' }, container: $root.getPopupContainer($element), target: $root.getPopupContainer($element), showTitle: false, showCloseButton: false, hideOnOutsideClick: true, animation: {}, shading: false, visible: _popupVisible }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 'max-content', 'height': $context.$root.calculateWithZoomFactor(362), 'wrapperAttr': { 'class': 'dxrv-daterange-editor-popup-wrapper' }, 'position': { 'my': 'right top', 'at': 'right bottom', 'of': $context.$data._$element, 'collision': 'fit fit', 'offset': '1 -1' }, 'container': $context.$root.getPopupContainer($element), 'target': $context.$root.getPopupContainer($element), 'showTitle': false, 'showCloseButton': false, 'hideOnOutsideClick': true, 'animation': {}, 'shading': false, 'visible': $context.$data._popupVisible }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxScrollView: { showScrollbar: \'always\', direction: \'horizontal\', useNative: false, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'dxScrollView': function () { return { 'showScrollbar': 'always', 'direction': 'horizontal', 'useNative': false, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('accessibilityKeyboardHelper: $data.dialogKeyboardHelper', function ($context, $element) { return { 'accessibilityKeyboardHelper': function () { return $context.$data.dialogKeyboardHelper; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('accessibilityKeyboardHelper: $data.dialogKeyboardHelper.predefinedDateRangesKeyboardHelper, dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }', function ($context, $element) { return { 'accessibilityKeyboardHelper': function () { return $context.$data.dialogKeyboardHelper.predefinedDateRangesKeyboardHelper; }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'scrollByContent': false, 'bounceEnabled': false, 'useNative': false, 'scrollByThumb': true, 'onInitialized': function (e) { e.component.option('useKeyboard', false); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { \'aria-selected\': $parent._isSelected($data) }, css: { \'dxd-state-selected\': $parent._isSelected($data) }, dxAction: { model: $data, action: function() { $parent.applyDate($data.range(), true) }}', function ($context, $element) { return { 'attr': function () { return { 'aria-selected': $context.$parent._isSelected($context.$data) }; }, 'css': function () { return { 'dxd-state-selected': $context.$parent._isSelected($context.$data) }; }, 'dxAction': function () { return { 'model': $context.$data, 'action': function () { $context.$parent.applyDate($context.$data.range(), true); } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxCalendar: { value: value, cellTemplate: \'select_cell\', height: \'100%\', min: min }', function ($context, $element) { return { 'dxCalendar': function () { return { 'value': $context.$data.value, 'cellTemplate': 'select_cell', 'height': '100%', 'min': $context.$data.min }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { \'dxd-back-accented\': $parent.inRange(date) }', function ($context, $element) { return { 'css': function () { return { 'dxd-back-accented': $context.$parent.inRange($context.$data.date) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxrvDateRangeEditor: {value: $data.value() }', function ($context, $element) { return { 'dxrvDateRangeEditor': function () { return { 'value': $context.$data.value() }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: popupTemplate, data: popupModel }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.popupTemplate, 'data': $context.$data.popupModel }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxTemplate:{ name:\'select_cell\' }', function () { return { dxTemplate: { name: 'select_cell' } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: \'dxrd-propertieseditor\', data: viewmodel }, css: { \'dxrd-parameters-border\' : !$data.hideBorder, \'dxrd-parameters-horizontal\' : $data.showHorizontally, }', function ($context, $element) { return { 'template': function () { return { 'name': 'dxrd-propertieseditor', 'data': $context.$data.viewmodel }; }, 'css': function () { return { 'dxrd-parameters-border': !$context.$data.hideBorder, 'dxrd-parameters-horizontal': $context.$data.showHorizontally }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxTagBox: $parent.getOptions({ dataSource: $data.dataSource, searchEnabled: true, useItemTextAsTitle: true, searchExpr: $data.searchExpr || [\'displayValue\'], value: $data.value, displayExpr: $data.displayExpr || \'displayValue\', valueExpr: $data.valueExpr || \'value\', multiline: false, showSelectionControls: true, showDropDownButton: !!$data.showDropDownButton, selectAllMode: \'allPages\', selectedItems: $data.selectedItems, inputAttr: { \'aria-label\': $parent.displayName }, disabled: $parent.disabled, selectAllText: $root.getLocalization(\'Select All\', \'AnalyticsCoreStringId.SelectAll\'), placeholder: $root.dx._static.selectPlaceholder(), maxDisplayedTags: $data.maxDisplayedTags, showMultiTagOnly: true, dropDownOptions: { container: $root.getPopupContainer($element), position: { boundary: $root.getPopupContainer($element), collision: \'flipfit flipfit\', of: $element, at: \'bottom\', my: \'top\' } } }), dxValidator: { validationRules: $parent.validationRules || [] }', function ($context, $element) { return { 'dxTagBox': function () { return $context.$parent.getOptions({ 'dataSource': $context.$data.dataSource, 'searchEnabled': true, 'useItemTextAsTitle': true, 'searchExpr': $context.$data.searchExpr || ['displayValue'], 'value': $context.$data.value, 'displayExpr': $context.$data.displayExpr || 'displayValue', 'valueExpr': $context.$data.valueExpr || 'value', 'multiline': false, 'showSelectionControls': true, 'showDropDownButton': !!$context.$data.showDropDownButton, 'selectAllMode': 'allPages', 'selectedItems': $context.$data.selectedItems, 'inputAttr': { 'aria-label': $context.$parent.displayName }, 'disabled': $context.$parent.disabled, 'selectAllText': $context.$root.getLocalization('Select All', 'AnalyticsCoreStringId.SelectAll'), 'placeholder': $context.$root.dx._static.selectPlaceholder(), 'maxDisplayedTags': $context.$data.maxDisplayedTags, 'showMultiTagOnly': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element), 'position': { 'boundary': $context.$root.getPopupContainer($element), 'collision': 'flipfit flipfit', 'of': $element, 'at': 'bottom', 'my': 'top' } } }); }, 'dxValidator': function () { return { 'validationRules': $context.$parent.validationRules || [] }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) }', function ($context, $element) { return { 'dxCollectionEditor': function () { return { 'values': $context.$data.value, 'info': $context.$data.info, 'level': $context.$data.level, 'displayName': $context.$root.getLocalization($context.$data.displayName) }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: value', function ($context, $element) { return { 'if': function () { return $context.$data.value; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxdAccordion: { collapsed: $data.collapsed, alwaysShow: $data.hideCollapsingImage }', function ($context, $element) { return { 'dxdAccordion': function () { return { 'collapsed': $context.$data.collapsed, 'alwaysShow': $context.$data.hideCollapsingImage }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { \'dxrd-empty-header\': $data.hideEditorHeader }', function ($context, $element) { return { 'css': function () { return { 'dxrd-empty-header': $context.$data.hideEditorHeader }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('attr: { role: isComplexEditor && \'tab\', \'id\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-trigger\'), \'aria-controls\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-expanded\': isComplexEditor && (!collapsed() ? \'true\' : \'false\') }, css: { \'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor, \'dxrd-vertical-label\': $data.editorOptions && $data.editorOptions.hasVerticalLabel }', function ($context, $element) { return { 'attr': function () { return { 'role': $context.$data.isComplexEditor && 'tab', 'id': $context.$data.isComplexEditor && $context.$data.getIdByDisplayName('dxrd-accordion-trigger'), 'aria-controls': $context.$data.isComplexEditor && $context.$data.getIdByDisplayName('dxrd-accordion-pannel'), 'aria-expanded': $context.$data.isComplexEditor && (!$context.$data.collapsed() ? 'true' : 'false') }; }, 'css': function () { return { 'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented': $context.$data.isComplexEditor, 'dxrd-vertical-label': $context.$data.editorOptions && $context.$data.editorOptions.hasVerticalLabel }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\', \'dxd-back-secondary\': $data.isGroupLabel, \'dx-accordion-hide-collapsing-image\': $data.hideCollapsingImage }', function ($context, $element) { return { 'styleunit': function () { return $context.$data.padding; }, 'css': function () { return { 'dx-accordion-empty': $context.$data.templateName === 'dx-emptyHeader', 'dxd-back-secondary': $context.$data.isGroupLabel, 'dx-accordion-hide-collapsing-image': $context.$data.hideCollapsingImage }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('ifnot: $data.hideEditorHeader', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hideEditorHeader; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('ifnot: $data.hideCollapsingImage', function ($context, $element) { return { 'ifnot': function () { return $context.$data.hideCollapsingImage; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('zoom: painter.scale', function ($context, $element) { return { 'zoom': function () { return $context.$data.painter.scale; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopup: { width: 48, height: \'auto\', wrapperAttr: { class: \'dx-picture-editing-active\' }, position:{ my: \'left top\', at: \'right top\', boundary: \'.dxrd-preview-surface\', of: $data.$element, collision: \'fit fit\', offset: \'1 -1\' }, container: shadingEnabled() ? \'.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen\' : \'.dx-designer\', target: \'.dx-designer\', showTitle: false, onContentReady: function(e) { e.component && e.component.registerKeyHandler(\'tab\', function(_) { $data.active(false); }); }, showCloseButton: false, animation: {}, shading: false, visible: $data.active }', function ($context, $element) { return { 'dxPopup': function () { return { 'width': 48, 'height': 'auto', 'wrapperAttr': { 'class': 'dx-picture-editing-active' }, 'position': { 'my': 'left top', 'at': 'right top', 'boundary': '.dxrd-preview-surface', 'of': $context.$data.$element, 'collision': 'fit fit', 'offset': '1 -1' }, 'container': $context.$data.shadingEnabled() ? '.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen' : '.dx-designer', 'target': '.dx-designer', 'showTitle': false, 'onContentReady': function (e) { e.component && e.component.registerKeyHandler('tab', function (_) { $context.$data.active(false); }); }, 'showCloseButton': false, 'animation': {}, 'shading': false, 'visible': $context.$data.active }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: $data.actions', function ($context, $element) { return { 'foreach': function () { return $context.$data.actions; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxclick: $data.action, attr: { title: title }', function ($context, $element) { return { 'dxclick': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.title }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: icon, afterRender: $data.renderedHandler }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.icon, 'afterRender': $context.$data.renderedHandler }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('zoom: scale', function ($context, $element) { return { 'zoom': function () { return $context.$data.scale; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxPopover: { width: width, height: height, wrapperAttr: { class: \'dx-picture-edit-popup-content\' }, hideOnOutsideClick: $data.hideOnOutsideClick, onShown: $data.onShown, onContentReady: $data.onContentReady, position: { my: \'left top\', at: \'right top\', boundary: \'.dx-designer\', of: getPositionTarget(), collision: \'flipfit fit\', offset: \'-10 0\' }, container: getPositionTarget(), showTitle: false, target: getPositionTarget(), showCloseButton: false, shading: false, animation: {}, visible: visible }', function ($context, $element) { return { 'dxPopover': function () { return { 'width': $context.$data.width, 'height': $context.$data.height, 'wrapperAttr': { 'class': 'dx-picture-edit-popup-content' }, 'hideOnOutsideClick': $context.$data.hideOnOutsideClick, 'onShown': $context.$data.onShown, 'onContentReady': $context.$data.onContentReady, 'position': { 'my': 'left top', 'at': 'right top', 'boundary': '.dx-designer', 'of': $context.$data.getPositionTarget(), 'collision': 'flipfit fit', 'offset': '-10 0' }, 'container': $context.$data.getPositionTarget(), 'showTitle': false, 'target': $context.$data.getPositionTarget(), 'showCloseButton': false, 'shading': false, 'animation': {}, 'visible': $context.$data.visible }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: brushWidthText', function ($context, $element) { return { 'text': function () { return $context.$data.brushWidthText; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxSlider: { min: 1, max: 9, value: $data.lineWidth, label: { visible: true }, tooltip: { enabled: true, showMode: \'always\', position: \'bottom\' } }', function ($context, $element) { return { 'dxSlider': function () { return { 'min': 1, 'max': 9, 'value': $context.$data.lineWidth, 'label': { 'visible': true }, 'tooltip': { 'enabled': true, 'showMode': 'always', 'position': 'bottom' } }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: brushColorText', function ($context, $element) { return { 'text': function () { return $context.$data.brushColorText; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: $data.colors', function ($context, $element) { return { 'foreach': function () { return $context.$data.colors; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { selected: $data.isSelected }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: { background: $data.value }, dxclick: $data.action', function ($context, $element) { return { 'style': function () { return { 'background': $context.$data.value }; }, 'dxclick': function () { return $context.$data.action; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: sizeModeText', function ($context, $element) { return { 'text': function () { return $context.$data.sizeModeText; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: { data: sizeModeValues }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.sizeModeValues }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { selected: isSelected }, template: $data.iconTemplate, dxclick: $data.action, attr: { title: $data.attrTitle }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; }, 'template': function () { return $context.$data.iconTemplate; }, 'dxclick': function () { return $context.$data.action; }, 'attr': function () { return { 'title': $context.$data.attrTitle }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: alignmentText', function ($context, $element) { return { 'text': function () { return $context.$data.alignmentText; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: { data: alignmentValues }', function ($context, $element) { return { 'foreach': function () { return { 'data': $context.$data.alignmentValues }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('css: { selected: isSelected }, template: $data.iconTemplate, dxclick: $data.action, , attr: { title: $data.attrTitle }', function ($context, $element) { return { 'css': function () { return { 'selected': $context.$data.isSelected }; }, 'template': function () { return $context.$data.iconTemplate; }, 'dxclick': function () { return $context.$data.action; }, '': function () { return undefined; }, 'attr': function () { return { 'title': $context.$data.attrTitle }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: contentWidth }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentWidth }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxTextBox: { value: filter, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true  }', function ($context, $element) { return { 'dxTextBox': function () { return { 'value': $context.$data.filter, 'valueChangeEvent': 'keyup', 'placeholder': $context.$data.searchPlaceholder(), 'showClearButton': true }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: contentWidth }, dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$data.contentWidth }; }, 'dxScrollView': function () { return { 'showScrollbar': 'onHover', 'useNative': false, 'scrollByThumb': true }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: $parent.width + 10 }, visible: visible, click: function() { $parent.action($data); }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$parent.width + 10 }; }, 'visible': function () { return $context.$data.visible; }, 'click': function () { return function () { $context.$parent.action($context.$data); }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('styleunit: { width: $parent.width, height: $parent.height }, style: { backgroundImage: \'url(\' + ($data.url || $data.data) + \')\' }', function ($context, $element) { return { 'styleunit': function () { return { 'width': $context.$parent.width, 'height': $context.$parent.height }; }, 'style': function () { return { 'backgroundImage': 'url(' + ($context.$data.url || $context.$data.data) + ')' }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('searchHighlighting: { text: $data.text, textToSearch: $parent.filter }, attr: { title: $data.text }', function ($context, $element) { return { 'searchHighlighting': function () { return { 'text': $context.$data.text, 'textToSearch': $context.$parent.filter }; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('text: $data.text, attr: { title: $data.text }', function ($context, $element) { return { 'text': function () { return $context.$data.text; }, 'attr': function () { return { 'title': $context.$data.text }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { if: $data.template, name: $data.template, data: $data.templateOptions }', function ($context, $element) { return { 'template': function () { return { 'if': $context.$data.template, 'name': $context.$data.template, 'data': $context.$data.templateOptions }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: { name: contentTemplate, data: contentData }', function ($context, $element) { return { 'template': function () { return { 'name': $context.$data.contentTemplate, 'data': $context.$data.contentData }; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('template: \'dx-picture-editing-imagespicker\'', function ($context, $element) { return { 'template': function () { return 'dx-picture-editing-imagespicker'; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('foreach: images', function ($context, $element) { return { 'foreach': function () { return $context.$data.images; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $data.text', function ($context, $element) { return { 'if': function () { return $context.$data.text; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('if: $parent.filterEnabled', function ($context, $element) { return { 'if': function () { return $context.$parent.filterEnabled; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('ifnot: $parent.filterEnabled', function ($context, $element) { return { 'ifnot': function () { return $context.$parent.filterEnabled; } }; });
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('dxSelectBox: getOptions({ dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, useItemTextAsTitle: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: $data.validationRules || [] }', function ($context, $element) { return { 'dxSelectBox': function () { return $context.$data.getOptions({ 'dataSource': $context.$data.values, 'value': $context.$data.value, 'valueExpr': 'value', 'displayExpr': 'displayValue', 'displayCustomValue': true, 'disabled': $context.$data.disabled, 'useItemTextAsTitle': true, 'noDataText': $context.$root.dx._static.noDataText(), 'encodeNoDataText': true, 'dropDownOptions': { 'container': $context.$root.getPopupContainer($element) }, 'popupPosition': { 'boundary': $context.$root.getPopupContainer($element) }, 'inputAttr': { 'aria-label': $context.$data.displayName } }); }, 'dxValidator': function () { return { 'validationRules': $context.$data.validationRules || [] }; } }; });

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/dx-viewer-templates.js

external_DevExpress_Analytics_Widgets_Internal_["SvgTemplatesEngine"].addTemplates({
    'dxrd-checkboxcustomglyph': '<div class="dxrd-checkbox-custom-glyph" data-bind="style: $data.customGlyphStyleCss"></div>',
    'dxrv-preview-date-range-mobile': '<div class="dxrv-preview-date-range-mobile"> <div class="dx-fieldset"> <div class="dx-field"> <div data-bind="dxSelectBox: { dataSource: items, displayExpr: \'displayName\', value: popupModel.textRangeValue, useItemTextAsTitle: true , placeholder: $root.getLocalization(\'Select Period\', \'AnalyticsCoreStringId.Mobile_DateRange_SelectPeriod\') }"></div> </div> <div class="dx-field"> <div class="dx-fieldset-column"> <div class="dx-fieldset-header" data-bind="text: $root.getLocalization(\'From\',\'AnalyticsCoreStringId.Mobile_DateRange_From\')"></div> <div data-bind="css: popupModel._dateButtonEditorClassName, dxButton: { text: startDate && popupModel.getStringDate(startDate) || $root.getLocalization(\'Start Date\',\'AnalyticsCoreStringId.Mobile_DateRange_StartDate\'), stylingMode: \'contained\', onClick: popupModel.focusButton, focusStateEnabled: false, activeStateEnabled: false }"></div> <div data-bind="css: popupModel._dateEditorClassName"> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: _createTemplateData(startDate, undefined) } --> <!-- /ko --> </div> </div> <div class="dx-fieldset-column dx-fieldset-column-right"> <div class="dx-fieldset-header" data-bind="text: $root.getLocalization(\'Until\',\'AnalyticsCoreStringId.Mobile_DateRange_Until\')"></div> <div class="dxd-back-secondary dx-fieldset-column-separator"></div> <div data-bind="css: popupModel._dateButtonEditorClassName, dxButton: { text: endDate && popupModel.getStringDate(endDate) || $root.getLocalization(\'End Date\',\'AnalyticsCoreStringId.Mobile_DateRange_EndDate\'), stylingMode: \'contained\', type:\'default\', onClick: popupModel.focusButton, focusStateEnabled: false, activeStateEnabled: false }"></div> <div data-bind="css: popupModel._dateEditorClassName"> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: _createTemplateData(endDate, startDate) } --> <!-- /ko --> </div> </div> </div> </div> </div>',
    'dxrd-preview-page-mobile': '<div class="dxrdp-content" data-bind="dxclick: clickToBrick, styleunit: { width: width, height: height }, autoFit: { autoFitBy: $root.reportPreview.autoFitBy, zoom: zoom, width: originalWidth, height: originalHeight, previewSize: $root.reportPreview.previewSize, brickLoading: brickLoading, skipIfInvisible: true }"> <div class="dxrdp-loading-wrapper" data-bind="styleunit: { width: width, height: height, lineHeight: height }, style: { \'background-color\': color }, visible: pageLoading, text: loadingText"> </div> <img style="width:100%; height:100%;" data-bind="attr: { src: displayImageSrc }, style:{ \'background-color\': color }" /> <div class="dxrdp-active-border" data-bind="css: { \'dxrdp-active\': active() && $parents[1].blocks().length > 1 }, visible: !$root.slideOptions.readerMode"></div> <!-- ko foreach: activeBricks --> <!-- ko template: { name: "dxrd-page-brick-mobile", data: $data } --> <!--/ko--> <!--/ko--> <!-- ko if: !brickLoading() && $data.editingFields--> <!-- ko foreach: editingFields --> <!-- ko template: template --> <!--/ko--> <!--/ko--> <!--/ko--> </div>',
    'dxrd-page-brick-mobile': '<div class="dxrd-report-preview-brick" data-bind="style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active }"> </div>',
    'dxrdp-search-mobile': '<!-- ko if: $data.enabled --> <div class="dxrdp-search-wrapper" data-bind="styleunit:{ height: height }, dxrdSearchBar: $data"> <div class="dxrd-mobile-search"> <div class="dxrdp-taptosearch" data-bind="visible: !$data.editorVisible(), dxclick: function(s, e) { $data.focusEditor(e); }"> <div class="dxrdp-taptosearch-text" data-bind="text: $root.getLocalization(\'Tap here to Search\', \'ASPxReportsStringId.WebDocumentViewer_Mobile_TapHereToSearch\')"></div> </div> <div class="dxrdp-search-panel" data-bind="visible: $data.editorVisible()"> <div class="dxrdp-search-editor" data-bind="dxTextBox: { value: searchText, onEnterKey: function() { $data.startSearch(); } }"></div> </div> </div> </div> <!-- /ko -->',
    'dxrd-preview-export-to-mobile': '<div class="dxrd-preview-export-to" data-bind="dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to\' }, items: items, onItemClick: clickAction }, attr: { title: $root.getLocalization(text, $data.textId) }"> <div class="dxrd-preview-export-menu-item" data-options="dxTemplate: { name: \'item\' }" data-bind="attr: { title: $root.getLocalization(text, $data.textId) }"> <!--ko if: $data.format --> <div class="dxrd-preview-export-item-text" data-bind="text: $root.getLocalization($data.text, $data.textId)"></div> <!-- /ko --> <!--ko ifnot: $data.format --> <div class="dxrd-preview-export-item-image-wrapper"> <div class="dxrd-preview-export-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: { name: ko.unwrap($data.imageTemplateName), if: !!ko.unwrap($data.imageTemplateName)}"> </div> </div> <div class="dx-menu-item-popout-container"> <div class="dx-menu-item-popout"></div> </div> <!-- /ko --> </div> </div>',
    'dxrdp-surface-mobile-bottom': '<div class="dxrdp-mobile-actions" data-bind="visible: visible"> <div class="dxrdp-mobile-actions-content"> <!-- ko foreach: actions --> <div class="dxrdp-mobile-action" data-bind="visible: visible, css: $data.imageClassName, template: { name: $data.imageTemplateName, if: !!ko.unwrap($data.imageTemplateName)}, dxclick: clickAction"> </div> <!-- ko if: $data.content --> <!-- ko template: $data.content --> <!-- /ko --> <!-- /ko --> <!-- /ko --> </div> </div>',
    'dxrdp-pages-mobile': '<div class="dxrdp-mobile-paginator" data-bind="dxrdMobilePaginator: $data"> <div class="dxrdp-mobile-paginator-content"> <div class="dxrdp-mobile-paginator-text" data-bind="text : text"></div> </div> </div>',
    'dxrd-menu-export-content': '<div class="dxrd-menu-export-popover" data-bind="dxPopover: { wrapperAttr: { class: \'dxrd-menu-export-popover\' }, width: \'266px\', height: \'266px\', visible: visible, target: \'.dxrdp-mobile-action.dxrd-image-export-to\', container: $root.getPopupContainer($element), }"> <!-- ko foreach: items --> <div class="dxrd-menu-export-item" data-bind="dxclick: action, text: text"> </div> <!-- /ko--> </div>',
    'dxrd-menu-parameters-content': '<div data-bind="dxPopup: { wrapperAttr: { class: \'dxrd-menu-parameters-popup\' }, showTitle: false, width: function() {return window.innerWidth }, height: function() {return window.innerHeight }, visible: visible, container: $root.getPopupContainer($element), }"> <!-- ko template: { name: \'dxrv-preview-parameters-mobile\', data: $data }--> <!-- /ko --> </div>',
    'dxrv-preview-parameters-mobile': '<div class="dxrdp-parameters-mobile" data-bind="dxValidationGroup: {}, css: className"> <div class="dxrdp-parameters-title" data-bind="text: $data.title"> </div> <div class="dxrdp-parameters-scroll" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, bounceEnabled: false }"> <!-- ko template: { name: $data.contentTemplate, data: model }--> <!-- /ko --> </div> <div class="dxrdp-parameters-buttons text-buttons" data-bind="foreach: { data: $data.actionButtons }, cacheElement: { action: function(element) { $data.cacheElementContent(element); } }"> <div class="dxrdp-parameter-action" data-bind="dxButton: { text: text, onClick: function(params){ $data.action(params) }, disabled: disabled, visible: visible }, css: className"></div> </div> <div class="dxrdp-parameters-buttons" data-bind="visible: showIcons, foreach: { data: $data.actionIcons }"> <div class="dxrdp-parameter-icon" data-bind="dxButton: { onClick: function(params){ $data.action(params)}, disabled: disabled }, css: className"></div> </div> </div>',
    'dxrv-preview-parameters-mobile-content': '<div class="dx-fieldset"> <div data-bind="dxPropertyGrid: { target: ko.observable($data) }"></div> </div>',
    'dxrv-range-parameter-mobile': '<div data-bind="dxrvDateRangeEditor: {value: $data.value(), isMobile: true }"></div>',
    'dxrdp-surface-mobile': '<div class="dxrd-preview-wrapper dxrdp-fullscreen dxrd-preview-surface" data-bind="style: { pointerEvents: $data.documentId === null ? \'none\' : \'\', touchEvents: $data.documentId === null ? \'none\' : \'\' }, styleunit: { top: topOffset, height: previewWrapperSize().height, width: previewWrapperSize().width }, slide: $root.slideOptions, mobileZoom: { zoom: mobileZoom, zoomUpdating: zoomUpdating }, dxclick: function(s,e) { if(!$root.brickEventsDisabled()) { $data.showActions(s,e); } }, css: { \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted }"> <!-- ko template: {name: \'dxrd-preview-progress-bar\', data: progressBar }--> <!-- /ko --> <div class="dxrd-mobile-content"> <div class="dxrd-mobile-gallery" data-bind="style: { pointerEvents: $data.zoomUpdating() ? \'none\' : \'\', touchEvents: $data.zoomUpdating() ? \'none\' : \'\' }, dxGalleryReportPreview: { dataSource: $root.gallery.items, gallery: $root.gallery, animationEnabled: $root.gallery.animationEnabled, disabled: $data.zoomUpdating, selectedIndex: $root.gallery.selectedIndex, width:\'100%\', height: \'100%\', showIndicator: false, loop: true, onSelectionChanged: onSlide, swipeEnabled: $root.slideOptions.swipeEnabled }"> <div data-options="dxTemplate: { name: \'item\' }"> <div class="dxrd-scrollView-mobile" data-bind="dxScrollView: $root.reportPreview.getScrollViewOptions()"> <div class="dxrd-gallery-blocks" data-bind="style: $root.gallery.contentSize()"> <!-- ko foreach: $data.blocks() --> <!-- ko if: $data.page --> <div class="dxrd-gallery-block" data-bind="styleunit: position, css: $data.classSet"> <div class="dxrd-gallery-block-content" data-bind="styleunit: { width: Math.max(page.width(), position().width), height: Math.max(page.height(), position().height) }, style: { \'background-color\': page.color }"> <div class="dxrdp-active-border" data-bind="css: { \'dxrdp-active\': page.active() && $parents[0].blocks().length > 1, \'dxrdp-page-padding\': $parents[0].blocks().length > 1 }, visible: $root.slideOptions.readerMode"></div> <div class="dxrd-mobile-page" data-bind="styleunit: { width: page.width, height: page.height }, style: { pointerEvents: $root.brickEventsDisabled() ? \'none\' : \'\', touchEvents: $root.brickEventsDisabled() ? \'none\' : \'\' }"> <!-- ko template: { name :\'dxrd-preview-page-mobile\', data: page } --> <!-- /ko --> </div> </div> </div> <!-- /ko --> <!-- /ko --> </div> </div> </div> </div> </div> </div> <input type="text" style="display:none" />',
    'dxrp-editing-field-container': '<div class="dxrp-editing-field-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle(), zoom: zoom, css: { active: active(), readonly: field.readOnly() }"> <div class="dxrp-editing-field-borders" data-bind="style: borderStyle()"></div> <div class="dxrp-editing-field-content" data-bind="dxclick: activateEditor"> <!-- ko if: !active() || field.readOnly()  --> <div class="dxrp-editing-field-readonly-text" data-bind="style: textStyle(), css: {\'dxrp-editing-field-text-wordwrap\': !wordWrap}"> <!-- ko if: htmlValue()  --> <div class="dxrp-editing-field-text-html dxrp-editing-field-text-html-complex" data-bind="style: breakOffsetStyle(), html: htmlValue()"></div> <!--/ko--> <!-- ko ifnot: htmlValue()  --> <div class="dxrp-editing-field-text-html" data-bind="style: breakOffsetStyle(), text: field.editValue()"></div> <!--/ko--> </div> <!--/ko--> <!-- ko if: active() && !field.readOnly() --> <!-- ko template: { name: editorTemplate, data: data } --> <!--/ko--> <!--/ko--> </div> </div>',
    'dxrp-editing-field-text': '<textarea class="dxrp-editing-field-text" data-bind="value: value, valueUpdate: \'keypress\', style: textStyle(), event: { blur: hideEditor, keyup: keypressAction }"></textarea>',
    'dxrp-editing-field-mask': '<div class="dxrp-editing-field-mask" data-bind="dxTextBox: options, childStyle: { style: textStyle(), selector: \'.dx-texteditor-input\'}"></div>',
    'dxrp-editing-field-number': '<div class="dxrp-editing-field-mask" data-bind="dxNumberBox: options, childStyle: { style: textStyle(), selector: \'.dx-texteditor-input\'}"></div>',
    'dxrp-editing-field-datetime': '<div style="width: 100%" class="dxrp-editing-field-datetime" data-bind="dxDateBox: $data.getOptions({ dropDownOptions: { container: $root.getPopupContainer($element), position: { at: \'left bottom\', collision: \'flipfit flip\', my: \'left top\', boundary: $root.getPopupContainer($element), of: $element } } }), childStyle: { style: textStyle(), selector: \'.dx-texteditor-input\'}"></div>',
    'dxrp-editing-field-image': '<div class="dxrp-editing-field-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle() "> <!-- ko template: \'dxrp-editing-field-image-editor\' --> <!-- /ko --> </div>',
    'dxrp-editing-field-image-editor': '<div style="height: 100%; width: 100%;" data-bind="dxPictureEditor: $data.getPictureEditorOptions()"></div>',
    'dxrp-editing-field-checkbox': '<div class="dxrp-editing-field-check-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle(), zoom: zoom, click: onClick"> <div class="dxrp-editing-field-check" tabindex="1" data-bind="style: checkStyle(), template: {name: $data.checkStateStyleIcon, if: !!ko.unwrap($data.checkStateStyleIcon)}"> </div> </div>',
    'dxrp-editing-field-radio': '<div class="dxrp-editing-field-check-container dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle(), zoom: zoom, click: onClick"> <div class="dxrp-editing-field-check" data-bind="style: checkStyle()"> <svg version="1.0" xmlns="http://www.w3.org/2000/svg" width="100%" height="100%" viewBox="0 0 760 760" preserveAspectRatio="xMidYMid meet"> <g fill="#010101" stroke="none"> <path d="M32,380a348,348 0 1,0 696,0a348,348 0 1,0 -696,0" class="highlight" style="stroke-width: 50;stroke: rgb(0, 0, 0);" /> <path d="M185,380a195,195 0 1,0 390,0a195,195 0 1,0 -390,0" data-bind="style: { fill: checked() ? \'black\' : \'transparent\' }" /> </g> </svg> </div> </div>',
    'dxrp-character-comb-editing-field': '<div class="dxrp-editing-field-charactercomb dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="style: containerStyle(), dxclick: activateEditor, zoom: zoom, css: { active: active(), readonly: field.readOnly() }"> <!-- ko if: !active() || field.readOnly()  --> <!-- ko foreach: cells --> <div class="dxrp-editing-field-charactercomb-cell" data-bind="style: style, text: text"></div> <!-- /ko --> <!-- /ko --> <!-- ko if: active() && !field.readOnly() --> <textarea style="background:white" class="dxrp-editing-field-text" data-bind="value: field._editorValue, valueUpdate: \'keypress\', style: textStyle(), event: { blur: hideEditor, keyup: keypressAction }"></textarea> <!--/ko--> </div>',
    'dxrd-export-tool-content': '<div class="dxrd-visually-hidden"> <form data-bind="attr: { \'action\': exportActionUri }, foreach: exportFormData" method="post"> <input data-bind="attr: {\'name\': name, \'value\': value}"/> </form> </div> <div data-bind="dxPopup: { width: popupWidth, height: popupHeight, title: getPopupTitle(), visible: popupVisible, showCloseButton: true, toolbarItems: popupButtons, wrapperAttr: { class: \'dxrd-print-dialog dx-editors dx-widget\' }, container: $root.getPopupContainer($element), position: { of: $root.getPopupContainer($element) } }"> <div class="dx-popup-content"> <div data-bind="text: $root.getLocalization(\'The browser sent the document to the printer.\', \'ASPxReportsStringId.WebDocumentViewer_Print_Popup_Caption\')"></div> <p></p> <!-- ko if: $data.printingTextPrefix --> <div class="dxrdp-print-text-prefix" data-bind="text: printingTextPrefix"></div> <!-- /ko --> <a href="" class="dxrd-preview-printing-link" data-bind="click: printingLinkCallback, text: $root.getLocalization(\'document in PDF format\', \'ASPxReportsStringId.WebDocumentViewer_Print_Popup_LinkText\')"></a> <!-- ko if: $data.printingTextPostfix --> <div class="dxrdp-print-text-postfix" data-bind="text: printingTextPostfix"></div> <!-- /ko --> </div> </div>',
    'dxrd-preview-export-options': '<div class="dxrd-preview-export-options-wrapper dxrd-preview-property-wrapper" data-bind="visible: active() && visible()"> <div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: $root.getLocalization(\'Export Options\', \'DevExpress.XtraReports.UI.XtraReport.ExportOptions\')"></span> </div> <!-- ko if: model--> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); }  }"> <div class="dx-fieldset" data-bind="accessibilityKeyboardHelper: $data.keyboardHelper"> <div role="tablist" class="dxrd-right-panel-content dxrd-export-options-content" data-bind="dxPropertyGrid: { target: model }"></div> </div> </div> <!-- /ko --></div>',
    'dxrd-preview-export-to': '<div class="dxrd-preview-export-toolbar-item dxrd-toolbar-item" data-bind="visible: visible"> <div role="menu" class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-label\': $root.getLocalization(text, $data.textId), \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': $data.disabled() ? \'true\' : \'false\' }" > <div class="dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted" data-bind="dxMenu: { wrapperAttr: { class: \'dxrd-preview-export-to dxd-button-back-color dxd-state-normal dxd-icon-highlighted\' }, disabled: $data.disabled(), items: items, cssClass: \'dxrdp-export-to-menu\', onItemClick: clickAction, onSubmenuShowing: $data.eventHandlers.onSubmenuShowing($root.getPopupContainer($element), $element), onSubmenuShown: $data.eventHandlers.onSubmenuShown, onSubmenuHiding: $data.eventHandlers.onSubmenuHiding, tabIndex: \'-1\' }, attr: { title: $root.getLocalization(text, $data.textId) }"> <div class="dxrd-preview-export-menu-item" data-options="dxTemplate: { name: \'item\' }" data-bind="attr: { title: $root.getLocalization(text, $data.textId) }"> <!--ko if: $data.format --> <div class="dxrd-preview-export-item-text" data-bind="text: $root.getLocalization($data.text, $data.textId)"></div> <!-- /ko --> <!--ko ifnot: $data.format --> <div class="dxrd-preview-export-item-image-wrapper"> <div class="dxrd-preview-export-item-image" data-bind="css: ko.unwrap($data.imageClassName), template: ko.unwrap($data.imageTemplateName)"> </div> </div> <div class="dx-menu-item-popout-container"> <div class="dx-menu-item-popout"></div> </div> <!-- /ko --> </div> </div> </div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div> </div>',
    'dxrd-page-brick-clickable': '<div class="dxrd-report-preview-brick" data-bind="dxclick: function(_, event){ onClick(event); event.stopPropagation(); }, style: { top: topP, left: $data.leftP, right: $data.rightP, height: heightP, width: widthP }, css: { \'dxrd-report-preview-brick-selected\': $data.active, \'dxrd-report-preview-brick-selectable\': !($data.bricks) }"> <!-- ko if: $data.navigation --> <div class="dxrd-report-preview-brick-navigation" data-bind="css: { \'dxrdp-navigation-brick-drill-down\' : !!navigation.drillDownKey, \'dxrdp-navigation-brick-sorting\' : !!navigation.sortData, \'dxrdp-navigation-brick-sorting-desc\': navigation.sortData && navigation.sortData.order === 1, \'dxrdp-navigation-brick-sorting-asc\': navigation.sortData && navigation.sortData.order === 2 }"></div> <!--/ko--> </div>',
    'dxrd-preview-page': '<div role="img" class="dxrd-report-preview-content" style="position: relative; width: 100%; height: 100%" data-bind="attr: {\'aria-label\': $parent.currentPageAriaLabelImgAlt($data.pageIndex) }, dxclick: clickToBrick, \'brick-selection-prog\': { page: $data, preview: $parent, click: function(pageIndex) { $parent.goToPage(pageIndex) } }"> <div class="dxrd-report-preview-content-loading-wrapper" style="background: white;" data-bind="styleunit: { \'width\': width() + 2, \'height\': height() + 2 }, visible: pageLoading"> <div class="dxrd-report-preview-content-loading-panel" style="text-align: center;" data-bind="styleunit: { \'paddingTop\': height() / 2.3 }"> <div class="dxrd-report-preview-content-loading-panel-text" data-bind="text: loadingText"></div> </div> </div> <div> <img style="pointer-events: none; width: 100%; height: 100%;" data-bind="attr: { src: displayImageSrc, \'alt\': $parent.currentPageAriaLabelImgAlt($data.pageIndex) }" /> <!-- ko foreach: activeBricks --> <!-- ko template: { name: "dxrd-page-brick-mobile", data: $data } --> <!--/ko--> <!--/ko--> <!-- ko foreach: clickableBricks --> <!-- ko template: { name: "dxrd-page-brick-clickable", data: $data } --> <!--/ko--> <!--/ko--> <!-- ko if: !brickLoading() && $data.editingFields--> <div data-bind="accessibilityKeyboardHelper: $data.editingFieldsKeyboardHelper"> <!-- ko foreach: editingFields --> <!-- ko template: template --> <!--/ko--> <!--/ko--> </div> <!--/ko--> </div> </div>',
    'dxrp-popup-editing-field-image': '<div class="dxrp-editing-field-container" data-bind="style: containerStyle() "> <div class="dx-accessibility-editing-field-item dx-accessibility-border-accented" data-bind="dxclick: activateEditor, css: parentPopupClass"> <div class="dxrp-editing-field-popup-container-cloned" data-bind="dxPainter: $data.getPainter()"></div> <!-- ko template: { name: \'dx-picture-editing-popup\', data: $data.getPopupData() } --> <!-- /ko --> </div> </div>',
    'dx-picture-editing-popup': '<div class="dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen" data-bind="dxPopup: { width: contentData.containerStyle().width, height: contentData.containerStyle().height, position: { boundary: getContainer(), of: getPositionTarget($element), collision: \'flipfit flipfit\' }, container: getContainer(), showTitle: false, target: getContainer(), deferRendering: false, hideOnOutsideClick: true, showCloseButton: false, onContentReady: onContentReady, onHiding: onHiding, onShown: onShown, shading: shading, wrapperAttr: { class: \'dx-picture-edit-popup-content dx-picture-edit-popup-content-fullscreen\' }, animation: { show: { type: \'slide\', duration: 0, to: { opacity: 1 }, from: { opacity: 0 } }, hide: { type: \'fade\', duration: 100, to: { opacity: 0 }, from: { opacity: 1 } } }, visible: isVisible($element) }"> <!-- ko if: showContent --> <!-- ko template: { name: contentTemplate, data: contentData, afterRender: $data.renderedHandler } --> <!--/ko--> <!--/ko--> </div>',
    'dxrd-zoom-autofit-select-template': '<div class="dxrd-toolbar-item-zoom" data-bind="visible: visible"> <div role="combobox" class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-label\': $root.getLocalization(\'Zoom\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox\'), \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': $data.disabled() ? \'true\' : \'false\' }" > <div class="dxrd-toolbar-item-zoom-editor" data-bind="dxSelectBox: { items: zoomItems, value: $data.zoom, displayExpr: displayExpr, displayCustomValue: true, acceptCustomValue: true, onCustomItemCreating: onCustomItemCreating, useItemTextAsTitle: true, width: 140, dropDownOptions: { container: $root.getPopupContainer($element), position: { my: \'left top\', at: \'left bottom\', of: $element }, wrapperAttr: { class: \'dx-zoom-selectbox-popup-wrapper\' } }, tabIndex: \'-1\', inputAttr: { \'aria-label\': $root.getLocalization(\'Zoom\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelZoomCombobox\') }}"> </div> </div> </div>',
    'dxrd-preview-toolbar-scrollable': '<div class="dxrd-toolbar-wrapper dxrdp-toolbar-scrollable dx-shadow-top dxd-back-secondary-invariant" data-bind="dxScrollView: { showScrollbar: \'onHover\', direction: \'horizontal\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }"> <div class="dxrd-toolbar" role="toolbar" data-bind="keyDownActions: actionLists, accessibilityKeyboardHelper: $data.keyboardHelper"> <div id="dxrd-preview-toolbar-live-region" class="dxrd-visually-hidden" aria-live="polite" aria-atomic="true"></div> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko template: {name: \'dxrd-toolbar-tmplt\', data: actionLists.toolbarItems } --> <!-- /ko --> </div> </div>',
    'dxrd-preview-search': '<div role="search" aria-haspopup="listbox" class="dxrd-preview-search-wrapper" data-bind="visible: active() && visible(), accessibilityKeyboardHelper: $data.keyboardHelper"> <div id="dxrd-preview-search-live-region" class="dxrd-visually-hidden" aria-live="polite" aria-atomic="true"></div> <!-- ko with: model --> <div class="dxrd-preview-search-tab-header"> <span class="dxrd-preview-search-tab-header-text dxrd-right-panel-header dxd-text-primary" data-bind="text: $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\')"></span> <div class="dxrd-preview-search-editor" data-bind="dxSearchEditor: { searchModel: $data, inputAttr: { \'type\': \'search\', \'title\': $root.getLocalization(\'Search\', \'ASPxReportsStringId.SearchDialog_Header\') }}"></div> <div class="dxrd-preview-search-checkbox" data-bind="dxCheckBox: { value: matchCase, text: $root.getLocalization(\'Match case\', \'ASPxReportsStringId.SearchDialog_Case\')}"></div> <div class="dxrd-preview-search-checkbox" data-bind="dxCheckBox: { value: matchWholeWord, text: $root.getLocalization(\'Match whole word only\', \'ASPxReportsStringId.SearchDialog_WholeWord\')}"></div> </div> <div class="dxrd-preview-search-result-header dxd-border-primary"> <div class="dx-accessibility-focus-border-accented dxrd-preview-search-result-header-text dxd-text-primary" data-bind="text: $root.getLocalization(\'Search result\', \'ASPxReportsStringId.WebDocumentViewer_SearchResultText\')"></div> </div> <!-- ko if: searchText().length --> <div class="dx-accessibility-container-background dxd-back-accented"></div> <div class="dxrdp-search-loading" data-bind="dxLoadIndicator: { visible: $data.loading }"></div> <div class="dxrd-preview-search-result dxd-border-accented" data-bind="dxList: { dataSource: searchResultDataSource, pageLoadMode: \'scrollBottom\', focusStateEnabled:false, hoverStateEnabled:false, onItemRendered: onItemRendered, noDataText:  loading() ? \'\' : noResultText(), encodeNoDataText: true, visible: !loading() }"> <div class="dxrd-preview-search-result-item dxd-list-item-back-color dxd-back-highlighted dx-accessibility-list-item dx-accessibility-focus-border-accented" data-bind="dxAction: { model: $data, action: $parent.itemClickAction }, attr: {\'aria-label\': $data.data.text + \', \' + $root.dx._static.formatSearchResult($data.data) + \', \' + ($parent.searchResult().indexOf($data.data) + 1) + \' of \' + $parent.searchResult().length }" data-options="dxTemplate : { name: \'item\' }" > <div class="dx-accessibility-field-background dxd-back-accented"></div> <div class="dxrd-preview-search-tab-item-text propertygrid-editor-displayName dxd-text-primary" data-bind="text: $data.data.text"></div> <div class="dxrd-preview-search-tab-item-info dxd-text-primary" data-bind="text: $root.dx._static.formatSearchResult($data.data)"></div> </div> </div> <!-- /ko --> <!-- /ko --> </div>',
    'dxrd-preview-progress-bar': '<div role="dialog" class="dxrd-preview-progress dxd-popup-back-color dxd-back-primary2 dxd-border-primary" data-bind="visible: visible, css: $data.cssClasses, accessibilityKeyboardHelper: $data.progressBarAccessibility"> <div class="dxrd-preview-progress-text dxd-text-primary" data-bind="text : text"></div> <div class="dxrd-preview-progress-bar dxd-back-primary"> <div class="dxrd-preview-progress-value dxd-preview-progress-bar-value-color dxd-back-accented" data-bind="style : { width: progress()  + \'%\' }"></div> </div> <div role="button" class="dxrd-preview-progress-cancel dxd-hyperlink-color dxd-border-accented dxd-text-accented dx-accessibility-list-item dx-accessibility-border-accented" data-bind="text: cancelText, visible: $data.cancelVisible, dxAction: { model: $data, action: function() { $data.stop && stop(); }}"></div> </div>',
    'dxrd-preview-parameters': '<div class="dxrd-preview-parameters-wrapper dxrd-preview-property-wrapper" data-bind="visible: active() && visible()"> <div class="dxrd-right-panel-header dxd-text-primary"> <span data-bind="text: $root.getLocalization(\'Preview Parameters\', \'ASPxReportsStringId.ReportDesigner_Preview_ParametersTitle\')"></span> <!-- ko if: (model && !model.isEmpty()) --> <!-- /ko --> </div> <!-- ko if: (!model || model.isEmpty()) --> <div class="dxrd-group-header-parameters-empty dxd-text-primary" data-bind="text: $root.getLocalization(\'The report does not contain any parameters.\', \'ASPxReportsStringId.WebDocumentViewer_NoParameters\')"></div> <!-- /ko --> <!-- ko if: (model && !model.isEmpty()) --> <div class="dxrd-right-panel-body" id="propertiesPanel" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, dxValidationGroup: {}, accessibilityKeyboardHelper: $data.keyboardHelper"> <div role="tablist" class="dx-fieldset dxrd-right-panel-content"> <!-- ko template: { name: \'dx-propertieseditor\', data: $data.propertyGrid } --> <!-- /ko --> </div> <div class="dxrd-preview-parameter-actions-container"> <div class="dxrd-preview-parameter-action dxrd-preview-loading" data-bind="dxLoadIndicator: { visible: model.parametersLoading }"></div> <div class="dxrd-preview-parameter-action dxrdp-parameters-reset dx-accessibility-focus-border-accented" data-bind="dxButton: { text: $root.getLocalization(\'Reset\', \'ASPxReportsStringId.ParametersPanel_Reset\'), onClick: function() { model.restore(); } }"></div> <div class="dxrd-preview-parameter-action dxrdp-parameters-submit dx-accessibility-focus-border-accented" data-bind="dxButton: { text: $root.getLocalization(\'Submit\', \'ASPxReportsStringId.ParametersPanel_Submit\'), onClick: function(params) { model.validateAndSubmit(params); } }"></div> </div> </div> <!-- /ko --> </div>',
    'dxrd-preview-pager': '<div class="dxrd-preview-pager dxrd-toolbar-item" data-bind="visible: visible"> <div role="combobox" class="dx-accessibility-toolbar-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-label\': $root.getLocalization(\'Pager\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox\') , \'aria-hidden\': ko.unwrap($data.visible) ? \'false\' : \'true\', \'aria-disabled\': $data.disabled() ? \'true\' : \'false\' }" > <div class="dxrd-preview-pager-selectbox" data-bind="dxSelectBox: { dataSource: pageItems, value: selectedItem, opened: opened, displayExpr: displayExpr, useItemTextAsTitle: true, onFocusOut: focusOut, onKeyUp: keyUp, itemTemplate: itemTemplate, searchMode: searchMode, searchEnabled: searchEnabled, searchTimeout: searchTimeout, disabled: disabled, dropDownOptions: { container: $root.getPopupContainer($element), wrapperAttr: { class: \'dx-page-selectbox-popup-wrapper\' }, }, tabIndex: \'-1\', inputAttr: { \'aria-label\': $root.getLocalization(\'Pager\', \'ASPxReportsStringId.WebDocumentViewer_AriaLabelPagerCombobox\') } }"> </div> </div> <div class="dxrd-toolbar-item-separator dxd-toolbar-separator-color dxd-border-secondary" data-bind="visible: $data.hasSeparator"></div> </div>',
    'dxrd-preview-document-map': '<div class="dxrd-preview-document-map" data-bind="visible: active() && visible()" style="height: 100%; overflow:hidden"> <div class="dxrd-right-panel-header dxd-text-primary"> <div style="display: inline-block;" data-bind="text: $root.getLocalization(\'Document Map\', \'ASPxReportsStringId.DocumentViewer_RibbonCommandText_DocumentMap\')"></div> </div> <!-- ko if: model --> <!-- ko with: model --> <div class="dxrd-right-panel-body" data-bind="dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }, accessibilityKeyboardHelper: $parent.keyboardHelper"> <div role="tree" id="documentMapTree" data-bind="treelist: documentMapOptions" style="width:100%; height: 100%;"></div> </div> <!-- /ko --> <!-- /ko --></div>',
    'dxrd-report-preview': '<div class="dxrd-preview dxrd-designer-wrapper dxd-scrollbar-color dxd-surface-back-color" data-bind="visible: reportPreview.previewVisible, cssArray: [ $data.rootStyle , { \'dx-rtl\' : $data.rtl, \'dx-ltr\': !$data.rtl } ]"> <!-- ko foreach: parts --> <!-- ko template: { name: templateName, data: model }--> <!-- /ko --> <!-- /ko --> </div>',
    'dxrdp-surface': '<div class="dxrd-preview-wrapper" data-bind="textCopier, css: { \'dx-rtl\': $data.rtlReport, \'dxrp-editing-fields-hightlighted\': editingFieldsHighlighted } "> <!-- ko with: progressBar--> <!-- ko template: \'dxrd-preview-progress-bar\'--> <!-- /ko --> <!-- /ko --> <div class="dxrd-preview-surface" data-bind="accessibilityKeyboardHelper: $data.previewBrickKeyboardHelper"> <!-- ko if: !showMultipagePreview() --> <div class="dxrd-report-preview-holder"> <!-- ko with: currentPage--> <!-- ko if: pageLoading() || (!pageLoading() && displayImageSrc()) --> <div role="tab" class="dxrd-report-preview dx-accessibility-page-item dx-accessibility-border-accented" data-bind="autoFit: { autoFitBy: $parent.autoFitBy, zoom: zoom, width: originalWidth, height: originalHeight, rightPanelWidth: $root.tabPanel.width, previewSize: $parent.previewSize, brickLoading: brickLoading }, styleunit: { width: width, height: height }"> <!-- ko template: { name: \'dxrd-preview-page\', afterRender: function() { $parent.delayedInit() } }--> <!-- /ko --> </div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: showMultipagePreview() && !!currentPage() --> <div class="dxrd-report-preview-holder" data-bind="lazyImages: { enabled: showMultipagePreview, updateCallback: onSizeChanged }"> <!-- ko foreach: {data: pages, afterRender: function() { $parent.model.delayedInit() } }  --> <!-- ko lazy: { if: pageLoading() || (!pageLoading() && displayImageSrc()) } --> <div role="tab" class="dxrd-report-preview dxrd-report-preview-multipage dx-accessibility-page-item dx-accessibility-border-accented" data-bind="styleunit: { \'width\': width(), \'height\': height() }, toView: { active: active }, css : { \'dxrd-report-preview-active\': active }"> <!-- ko template: \'dxrd-preview-page\'--> <!-- /ko --> </div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> <div data-bind="css: { \'dxrd-visually-hidden\': currentPage() }" class="dxrd-report-preview-placeholder"> <div aria-live="assertive" aria-atomic="true" class="dxd-empty-area-placeholder-text-color dxd-text-info" data-bind="text: emptyDocumentCaption()"></div> </div> </div> </div> <div id="dxrd-preview-bricks-live-region" class="dxrd-visually-hidden" aria-live="polite" aria-atomic="true"></div> <div id="clipboard-container" style="position:absolute;top:-100px;"><textarea disabled data-bind="attr: { \'aria-label\': $root.getLocalization(\'Clipboard\', \'ASPxReportsStringId.WebDocumentViewer_AriaClipboard\') }" id="clipboard"></textarea></div>',
    'dxrd-export-tool': '<div data-bind="dxViewerExport: $data"></div>',
    'dxrv-daterange-editor': '<div class="dxrv-daterange-editor"> <div data-bind="cacheElement: { action: function(element) { $data._$element = element; } }, dxEllipsisEditor: { value: _displayText, readOnly:true, inputAttr: { \'aria-label\': $parent.displayName }, openOnFieldClick: true, buttonAction: function() { $data._showPopup(); } }"></div> <!-- ko template: { name: popupTemplate, data: popupModel } --> <!-- /ko --> </div>',
    'dxrv-daterange-editor-popup': '<div role="dialog" aria-modal="true" data-bind="dxPopup: { width: \'max-content\', height: $root.calculateWithZoomFactor(362), wrapperAttr: { class: \'dxrv-daterange-editor-popup-wrapper\' }, position: { my: \'right top\', at: \'right bottom\', of: $data._$element, collision: \'fit fit\', offset: \'1 -1\' }, container: $root.getPopupContainer($element), target: $root.getPopupContainer($element), showTitle: false, showCloseButton: false, hideOnOutsideClick: true, animation: {}, shading: false, visible: _popupVisible }"> <div data-bind="dxScrollView: { showScrollbar: \'always\', direction: \'horizontal\', useNative: false, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }"> <div class="dxrv-daterange-editor-popup-container" data-bind="accessibilityKeyboardHelper: $data.dialogKeyboardHelper"> <div role="listbox" class="dxrv-daterange-editor-list dxrv-daterange-editor-item dxd-border-primary dx-accessibility-daterange-item" data-bind="accessibilityKeyboardHelper: $data.dialogKeyboardHelper.predefinedDateRangesKeyboardHelper, dxScrollView: { showScrollbar: \'onHover\', scrollByContent: false, bounceEnabled: false, useNative: false, scrollByThumb: true, onInitialized: function(e) { e.component.option(\'useKeyboard\', false); } }"> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko foreach: items --> <div role="option" class="dxrv-daterange-editor-list-item dxd-state-normal dxd-back-highlighted dx-accessibility-list-item dx-accessibility-focus-border-accented" data-bind="attr: { \'aria-selected\': $parent._isSelected($data) }, css: { \'dxd-state-selected\': $parent._isSelected($data) }, dxAction: { model: $data, action: function() { $parent.applyDate($data.range(), true) }}"> <div class="dx-accessibility-field-background dxd-back-accented"></div> <!-- ko text: displayName --> <!-- /ko --> </div> <!-- /ko --> </div> <div class="dxrv-daterange-editor-item"> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: _createTemplateData(startDate, undefined) } --> <!-- /ko --> </div> <div class="dxrv-daterange-editor-item"> <div class="dx-accessibility-container-background dxd-back-accented"></div> <!-- ko template: { name: \'dxrv-daterange-calendar\', data: _createTemplateData(endDate, startDate) } --> <!-- /ko --> </div> </div> </div> </div>',
    'dxrv-daterange-calendar': '<div tabIndex="0" class="dx-accessibility-calendar-item dx-accessibility-daterange-item" data-bind="dxCalendar: { value: value, cellTemplate: \'select_cell\', height: \'100%\', min: min }"> <div class="dxrv-daterange-cell" data-options="dxTemplate:{ name:\'select_cell\' }"> <div class="dxrv-daterange-cell-text" data-bind="text: text"></div> <div data-bind="css: { \'dxd-back-accented\': $parent.inRange(date) }"></div> </div> </div>',
    'dxrv-range-parameter': '<div data-bind="dxrvDateRangeEditor: {value: $data.value() }"></div>',
    'dxrd-propertieseditor': '<div data-bind="css: { \'dx-rtl\' : rtl }"> <div class="dx-editors"> <div class="dx-fieldset dxrd-parameters-fieldset dxd-border-primary"> <!-- ko foreach: getEditors() --> <!-- ko template: editorTemplate --> <!-- /ko --> <!-- /ko --> </div> </div> </div>',
    'dxrd-parameters-editor-content': '<!-- ko if: visible --> <div class="dxrd-parameters-group" data-bind="template: { name: \'dxrd-propertieseditor\', data: viewmodel }, css: { \'dxrd-parameters-border\' : !$data.hideBorder, \'dxrd-parameters-horizontal\' : $data.showHorizontally, }"> </div> <!-- /ko -->',
    'dxrd-parameters-separator': '<div class="dxrd-parameters-item-separator"> <div class="dxrd-item-separator dxd-border-secondary"></div> </div>',
    'dxrd-multivalue': '<!-- ko with: value --> <div data-bind="dxTagBox: $parent.getOptions({ dataSource: $data.dataSource, searchEnabled: true, useItemTextAsTitle: true, searchExpr: $data.searchExpr || [\'displayValue\'], value: $data.value, displayExpr: $data.displayExpr || \'displayValue\', valueExpr: $data.valueExpr || \'value\', multiline: false, showSelectionControls: true, showDropDownButton: !!$data.showDropDownButton, selectAllMode: \'allPages\', selectedItems: $data.selectedItems, inputAttr: { \'aria-label\': $parent.displayName }, disabled: $parent.disabled, selectAllText: $root.getLocalization(\'Select All\', \'AnalyticsCoreStringId.SelectAll\'), placeholder: $root.dx._static.selectPlaceholder(), maxDisplayedTags: $data.maxDisplayedTags, showMultiTagOnly: true, dropDownOptions: { container: $root.getPopupContainer($element), position: { boundary: $root.getPopupContainer($element), collision: \'flipfit flipfit\', of: $element, at: \'bottom\', my: \'top\' } } }), dxValidator: { validationRules: $parent.validationRules || [] }"> </div> <!-- /ko -->',
    'dxrd-multivalue-editable': '<!-- ko if: value --> <div class="dxrd-editor" data-bind="visible: visible"> <div data-bind="dxCollectionEditor: { values: value, info: info, level: level, displayName: $root.getLocalization(displayName) }"> <div data-bind="dxPropertyGrid: { target: value, level: editor.level + 1 }"></div> </div> </div> <!-- /ko -->',
    'dxrd-parameters-property-editor': '<div class="dx-editor" data-bind="visible: visible"> <div class="dx-group" data-bind="dxdAccordion: { collapsed: $data.collapsed, alwaysShow: $data.hideCollapsingImage }"> <div class="dx-editor-header" data-bind="css: { \'dxrd-empty-header\': $data.hideEditorHeader }"> <!-- ko ifnot: $data.hideEditorHeader --> <div class="dx-field" data-bind="attr: { role: isComplexEditor && \'tab\', \'id\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-trigger\'), \'aria-controls\': isComplexEditor && getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-expanded\': isComplexEditor && (!collapsed() ? \'true\' : \'false\') }, css: { \'dxrd-accessibility-accordion-trigger dx-accessibility-focus-border-accented\': isComplexEditor, \'dxrd-vertical-label\': $data.editorOptions && $data.editorOptions.hasVerticalLabel }"> <div class="dx-field-label dxrd-group-label dxd-back-secondary dx-accordion-header dxd-text-primary" data-bind="styleunit: padding, css: { \'dx-accordion-empty\': templateName === \'dx-emptyHeader\', \'dxd-back-secondary\': $data.isGroupLabel, \'dx-accordion-hide-collapsing-image\': $data.hideCollapsingImage }"> <!-- ko if: isComplexEditor --> <div data-bind="enable: templateName === \'dx-emptyHeader\'"> <!-- ko ifnot: $data.hideCollapsingImage --> <div class="propertygrid-editor-collapsed dx-collapsing-image" data-bind="template: \'dxrd-svg-collapsed\', css: { \'dx-image-expanded\': !collapsed() }"></div> <!-- /ko --> <!-- ko if: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="dx-group-header-font" data-bind="text: displayName, attr: { \'title\': displayName }"></div> <!-- /ko --> </div> <!-- /ko --> <!-- ko if: !isComplexEditor --> <!-- ko if: !!$data.textToSearch --> <div class="propertygrid-editor-displayName" data-bind="searchHighlighting: { text: displayName, textToSearch: textToSearch }, attr: { \'title\': displayName }, css: { \'dx-field-label-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}"></div> <!-- /ko --> <!-- ko ifnot: !!$data.textToSearch --> <div class="propertygrid-editor-displayName" data-bind="text: displayName, attr: { \'title\': displayName }, css: { \'dx-property-required\': isRequired }, style: { fontWeight: isPropertyModified() ? \'Bold\' : \'\'}"></div> <!-- /ko --> <!-- /ko --> </div> <div class="dx-field-value" data-bind="css: { \'dxd-border-accented\': $data.isPropertyHighlighted }"> <div data-bind="service: { name: \'createEditorAddOn\' }"></div> <!-- ko if: templateName !== \'dx-emptyHeader\' --> <!-- ko lazy: { innerBindings: { template: templateName }, isResolved: $data.isRendered } --> <!-- /ko --> <!-- /ko --> </div> </div> <!-- /ko --> </div> <!-- ko if: isComplexEditor --> <div class="dx-editor-content dx-accordion-content" role="tabpanel" data-bind="attr:{\'aria-labelledby\': getIdByDisplayName(\'dxrd-accordion-trigger\'), \'id\': getIdByDisplayName(\'dxrd-accordion-pannel\'), \'aria-hidden\': collapsed() ? \'true\' : \'false\' }"> <!-- ko if: (!$data.editorCreated || editorCreated) --> <!-- ko template: contentTemplateName --> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div> </div>',
    'dx-picture-editing': '<div class="dx-picture-editing"> <canvas data-bind="zoom: painter.scale"></canvas> <div class="dx-picture-editing-active" data-bind="dxPopup: { width: 48, height: \'auto\', wrapperAttr: { class: \'dx-picture-editing-active\' }, position:{ my: \'left top\', at: \'right top\', boundary: \'.dxrd-preview-surface\', of: $data.$element, collision: \'fit fit\', offset: \'1 -1\' }, container: shadingEnabled() ? \'.dx-overlay-wrapper.dx-picture-edit-popup-content-fullscreen\' : \'.dx-designer\', target: \'.dx-designer\', showTitle: false, onContentReady: function(e) { e.component && e.component.registerKeyHandler(\'tab\', function(_) { $data.active(false); }); }, showCloseButton: false, animation: {}, shading: false, visible: $data.active }"> <div data-options="dxTemplate: { name: \'content\' }"> <div class="dx-picture-editing-toolbar" data-bind="foreach: $data.actions"> <div class="dx-picture-editing-toolbar-item" data-bind="dxclick: $data.action, attr: { title: title }"> <div class="dx-picture-editing-toolbar-item-icon" data-bind="template: { name: icon, afterRender: $data.renderedHandler }"> </div> </div> <!-- ko template: { if: $data.template, name: $data.template, data: $data.templateOptions }--> <!-- /ko --> </div> </div> </div> </div>',
    'dx-painter': '<div class="dx-painter"> <canvas data-bind="zoom: scale"></canvas> </div>',
    'dx-picture-editing-toolbar-popup': '<div class="dx-picture-edit-popup-content" data-bind="dxPopover: { width: width, height: height, wrapperAttr: { class: \'dx-picture-edit-popup-content\' }, hideOnOutsideClick: $data.hideOnOutsideClick, onShown: $data.onShown, onContentReady: $data.onContentReady, position: { my: \'left top\', at: \'right top\', boundary: \'.dx-designer\', of: getPositionTarget(), collision: \'flipfit fit\', offset: \'-10 0\' }, container: getPositionTarget(), showTitle: false, target: getPositionTarget(), showCloseButton: false, shading: false, animation: {}, visible: visible }"> <!-- ko template: { name: contentTemplate, data: contentData } --> <!--/ko--> </div>',
    'dx-picture-editing-brush-options': '<div class="dx-picture-editing-brush-options"> <div class="dx-picture-editing-line-width"> <div class="dx-picture-editing-text" data-bind="text: brushWidthText"></div> <div class="dx-picture-editing-line-width-slider" data-bind="dxSlider: { min: 1, max: 9, value: $data.lineWidth, label: { visible: true }, tooltip: { enabled: true, showMode: \'always\', position: \'bottom\' } }"></div> </div> <div class="dx-picture-editing-line-color"> <div class="dx-picture-editing-text" data-bind="text: brushColorText"></div> <div class="dx-picture-editing-brush-options-colors" data-bind="foreach: $data.colors"> <div class="dx-picture-editing-brush-options-color" data-bind="css: { selected: $data.isSelected }"> <div class="dx-picture-editing-brush-options-color-cell" data-bind="style: { background: $data.value }, dxclick: $data.action"></div> </div> </div> </div> </div>',
    'dx-picture-editing-sizemode-alignment': '<div class="dx-picture-editing-sizemode-alignment"> <div class="dx-picture-editing-sizemode"> <div class="dx-picture-editing-text" data-bind="text: sizeModeText"></div> <div class="dx-picture-editing-sizemode-values" data-bind="foreach: { data: sizeModeValues }"> <div class="dx-picture-editing-sizemode-alignment-value" data-bind="css: { selected: isSelected }, template: $data.iconTemplate, dxclick: $data.action, attr: { title: $data.attrTitle }"> </div> </div> </div> <div class="dx-picture-editing-alignment"> <div class="dx-picture-editing-text" data-bind="text: alignmentText"></div> <div class="dx-picture-editing-alignment-values" data-bind="foreach: { data: alignmentValues }"> <div class="dx-picture-editing-sizemode-alignment-value" data-bind="css: { selected: isSelected }, template: $data.iconTemplate, dxclick: $data.action, , attr: { title: $data.attrTitle }"> </div> </div> </div> </div>',
    'dx-picture-editing-imagepickerwithfilter': '<div class="dx-picture-editing-filtercontent" data-bind="styleunit: { width: contentWidth }"> <div class="dx-picture-editing-filtercontent-editor" data-bind="dxTextBox: { value: filter, valueChangeEvent: \'keyup\', placeholder: searchPlaceholder(), showClearButton: true  }"></div> <div class="dx-picture-editing-filtercontent-images"> <!-- ko template: \'dx-picture-editing-imagespicker\' --> <!-- /ko --> </div> </div>',
    'dx-picture-editing-imagespicker': '<div class="dx-picture-editing-imagescontainer dxd-text-primary" data-bind="styleunit: { width: contentWidth }, dxScrollView: { showScrollbar: \'onHover\', useNative: false, scrollByThumb: true }"> <!-- ko foreach: images --> <div class="dx-picture-editing-block dxd-state-normal dxd-back-highlighted" data-bind="styleunit: { width: $parent.width + 10 }, visible: visible, click: function() { $parent.action($data); }"> <div class="dx-picture-editing-block-image" data-bind="styleunit: { width: $parent.width, height: $parent.height }, style: { backgroundImage: \'url(\' + ($data.url || $data.data) + \')\' }"></div> <!-- ko if: $data.text--> <!-- ko if: $parent.filterEnabled --> <div class="dx-picture-editing-block-text" data-bind="searchHighlighting: { text: $data.text, textToSearch: $parent.filter }, attr: { title: $data.text }"></div> <!-- /ko --> <!-- ko ifnot: $parent.filterEnabled --> <div class="dx-picture-editing-block-text" data-bind="text: $data.text, attr: { title: $data.text }"></div> <!-- /ko --> <!-- /ko --> </div> <!-- /ko --> </div>',
    'dx-selectbox': '<div data-bind="dxSelectBox: getOptions({ dataSource: values, value: value, valueExpr: \'value\', displayExpr: \'displayValue\', displayCustomValue: true, disabled: disabled, useItemTextAsTitle: true, noDataText: $root.dx._static.noDataText(), encodeNoDataText: true, dropDownOptions: { container: $root.getPopupContainer($element) }, popupPosition: { boundary: $root.getPopupContainer($element) }, inputAttr: { \'aria-label\': displayName } }), dxValidator: { validationRules: $data.validationRules || [] }"></div>'
});

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-editing.js

















// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-export.js























// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-export-metadata.js



// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/internal/_bindings.js





external_ko_["bindingHandlers"]['toView'] = {
    init: (element, valueAccessor, allBindings, viewModel, bindingContext) => {
        var $previewPage = external_jQuery_["fn"].constructor(element), $container = $previewPage.parent('.dxrd-report-preview-holder'), pageActive = valueAccessor().active, subscription = pageActive.subscribe((active) => {
            if (active) {
                var pageTop = $previewPage.position().top;
                if (pageTop < 0 && (pageTop + $previewPage.height() < 0) || pageTop >= $container.height()) {
                    $container.scrollTop($container.scrollTop() + pageTop);
                }
            }
        });
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            subscription.dispose();
        });
    }
};
external_ko_["bindingHandlers"]['lazyImages'] = {
    init: (element, valueAccessor, allBindings, viewModel, bindingContext) => {
        var $element = external_jQuery_["fn"].constructor(element), enabled = valueAccessor().enabled, load = null, loadVisibleImages = (time = 300) => {
            load && clearTimeout(load);
            load = setTimeout(function () {
                if (!enabled()) {
                    return;
                }
                var visibleArea = $element.height() + 100;
                for (var i = 0; i < element.children.length; i++) {
                    var previewPage = element.children[i], rect = previewPage.getBoundingClientRect(), pageTop = rect.top;
                    if (visibleArea > pageTop && pageTop >= 0 || pageTop < 0 && pageTop + rect.height > -100) {
                        var previewPageModel = external_ko_["dataFor"](previewPage);
                        previewPageModel && previewPageModel.isClientVisible && previewPageModel.isClientVisible(true);
                    }
                }
            }, time);
        };
        if (external_ko_["isObservable"](valueAccessor().updateCallback)) {
            valueAccessor().updateCallback(loadVisibleImages);
        }
        var subscribtion = enabled.subscribe((newVal) => {
            newVal && loadVisibleImages(500);
        });
        var scrollLoad = () => loadVisibleImages(700);
        element.addEventListener('scroll', scrollLoad);
        loadVisibleImages(500);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            element.removeEventListener('scroll', scrollLoad);
            subscribtion.dispose();
        });
    }
};
external_ko_["bindingHandlers"]['textCopier'] = {
    init: (element, valueAccessor, allBindings, viewModel, bindingContext) => {
        var keyDownHandler = function (e) {
            var value = viewModel.getSelectedContent();
            if (!value || !(e.ctrlKey || e.metaKey)
                || external_jQuery_["fn"].constructor(e.target).is('input:visible,textarea:visible')
                || window.getSelection && window.getSelection() && window.getSelection().toString()
                || document['selection'] && document['selection'].createRange().text) {
                return;
            }
            var $clipboardContainer = external_jQuery_["fn"].constructor('#clipboard-container');
            $clipboardContainer.empty().show();
            external_jQuery_["fn"].constructor("<textarea id='clipboard'></textarea>").val(value)
                .appendTo($clipboardContainer)
                .focus()
                .select();
        };
        var keyUpHandler = function (e) {
            if (external_jQuery_["fn"].constructor(e.target).is('#clipboard')) {
                external_jQuery_["fn"].constructor('#clipboard-container').empty().hide();
            }
        };
        document.addEventListener('keydown', keyDownHandler);
        document.addEventListener('keyup', keyUpHandler);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            document.removeEventListener('keydown', keyDownHandler);
            document.removeEventListener('keyup', keyUpHandler);
        });
    }
};
external_ko_["bindingHandlers"]['autoFit'] = {
    init: (element, valueAccessor) => {
        var options = valueAccessor();
        var subscriptions = [];
        var updateZoom = (newOptions) => {
            var $element = external_jQuery_["fn"].constructor(element);
            var autoFitBy = newOptions.autoFitBy();
            if (autoFitBy != ZoomAutoBy.None) {
                if (options.skipIfInvisible && $element.filter(':visible').length == 0)
                    return;
                var newZoom = Object(external_DevExpress_Analytics_Internal_["roundingXDecimals"])(updatePreviewZoomWithAutoFit(newOptions.width(), newOptions.height(), $element, autoFitBy), true);
                newOptions.zoom(Math.max(newZoom, 0.1));
            }
        };
        updateZoom(options);
        var onResize = () => {
            updateZoom(options);
        };
        window.addEventListener('resize', onResize);
        var subscribe = (value) => {
            if (value) {
                subscriptions.push(value.subscribe((newVal) => {
                    updateZoom(options);
                }));
            }
        };
        subscribe(options.rightPanelWidth);
        subscribe(options.width);
        subscribe(options.height);
        subscribe(options.autoFitBy);
        subscribe(options.brickLoading);
        subscribe(options.previewSize);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            window.removeEventListener('resize', onResize);
            subscriptions.forEach((subscription) => {
                subscription.dispose();
            });
        });
    }
};
external_ko_["bindingHandlers"]['childStyle'] = {
    init: function (element, valueAccessor) {
        var values = valueAccessor();
        external_jQuery_["fn"].constructor(element).find(values.selector).css(values.style);
    }
};

// EXTERNAL MODULE: external "DevExpress.registerComponent"
var external_DevExpress_registerComponent_ = __webpack_require__(13);
var external_DevExpress_registerComponent_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_registerComponent_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/search/_dxSearchEditor.js






var editor_prefix = 'dx-searcheditor', EDITOR_CLASS = editor_prefix + '', EDITOR_BUTTON_CLASS = editor_prefix + '-button dx-widget dx-dropdowneditor-button', EDITOR_BUTTON_SELECTOR = '.' + editor_prefix + '-button', EDITOR_BUTTON_ICON_CLASS = editor_prefix + '-icon dx-dropdowneditor-icon dx-icon-dxrd-image-move', EDITOR_BUTTON_ICON_UP_TEMPLATE = 'dxrd-svg-operations-moveup', EDITOR_BUTTON_ICON_DOWN_TEMPLATE = 'dxrd-svg-operations-movedown';
class _dxSearchEditor_dxSearchEditor extends external_DevExpress_ui_dxTextBox_default.a {
    constructor(element, options) {
        super(element, options);
        this.option('onKeyDown', function (e) {
            if (e.event.key === external_DevExpress_Analytics_Internal_["KeyboardEnum"].Enter) {
                e.event.stopPropagation();
                e.event.preventDefault();
                e.component['findNext'](e.event.shiftKey);
            }
        });
        this.option('onFocusOut', function (e) {
            e.component['_searchModel'].searchText(e.component.option('text'));
        });
        this._activeStateUnit = EDITOR_BUTTON_SELECTOR;
        this._focusRequestRaised = () => { this.focus(); };
        this._searchModel = options.searchModel;
        this._searchModel.focusRequested.subscribe((val) => this._focusRequestRaised());
    }
    findNext(searchUp) {
        if (this._searchModel.searchText() !== this.option('text')) {
            this._searchModel.searchText(this.option('text'));
        }
        else {
            try {
                if (searchUp) {
                    (!this._searchModel.loading()) && this._searchModel.findUp();
                }
                else {
                    (!this._searchModel.loading()) && this._searchModel.findDown();
                }
            }
            finally {
                return true;
            }
        }
    }
    _init() {
        super['_init'].apply(this);
        var $element = external_jQuery_["fn"].constructor(this.element());
        $element.addClass(EDITOR_CLASS);
        this._koContext = external_ko_["contextFor"]($element.get(0));
    }
    _render() {
        super['_render'].apply(this);
        this._$buttons = [];
        this.on('keyDown', (e) => {
            if (e.event.key == 'ArrowUp')
                this.findNext(true) && e.event.stopPropagation();
            if (e.event.key == 'ArrowDown')
                this.findNext(false) && e.event.stopPropagation();
        });
        this._renderButton('Up');
        this._renderButton('Down');
    }
    _renderButton(direction) {
        this._$button = external_jQuery_["fn"].constructor('<div />').addClass(EDITOR_BUTTON_CLASS);
        this._attachButtonEvents(direction);
        this._$buttonIcon = external_jQuery_["fn"].constructor('<div />').addClass(EDITOR_BUTTON_ICON_CLASS + direction.toLowerCase())
            .append(external_DevExpress_Analytics_Widgets_Internal_["SvgTemplatesEngine"].templates[direction.toLowerCase() === 'up' ? EDITOR_BUTTON_ICON_UP_TEMPLATE : EDITOR_BUTTON_ICON_DOWN_TEMPLATE])
            .appendTo(this._$button);
        external_ko_["applyBindingsToDescendants"](this._koContext, this._$buttonIcon[0]);
        var buttonsContainer = this['_buttonsContainer']();
        this._$button.appendTo(buttonsContainer);
        this._$buttons.push(this._$button);
    }
    _attachButtonEvents(direction) {
        this._$button.off('click');
        var onClick = (e) => {
            this.findNext(direction.toLowerCase() === 'up') && e.stopPropagation();
        };
        if (!this.option('disabled')) {
            this._$button.on('click', onClick);
            Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(this._$button[0], () => {
                this._$buttons.forEach($button => {
                    $button.off('click');
                });
            });
        }
    }
}
external_DevExpress_registerComponent_default()('dxSearchEditor', _dxSearchEditor_dxSearchEditor);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-internal.js













































// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile.js



// EXTERNAL MODULE: external "DevExpress.ui.dxGallery"
var external_DevExpress_ui_dxGallery_ = __webpack_require__(8);
var external_DevExpress_ui_dxGallery_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxGallery_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_eventProcessor.js





var slowdownDisctanceFactor = 2.5;
var minScale = 0.92;
function setTransform($element, transform) {
    $element.css({
        '-webkit-transform': transform,
        'transform': transform
    });
}
class _eventProcessor_EventProcessor {
    constructor(element, slideOptions) {
        this.element = element;
        this.slideOptions = slideOptions;
        this._direction = {
            vertical: false,
            horizontal: false,
            scrollDown: false
        };
        this.isLeftMove = false;
        this.isRightMove = false;
        this.$window = external_jQuery_["fn"].constructor(window);
        this.$element = external_jQuery_["fn"].constructor(element),
            this.$body = external_jQuery_["fn"].constructor(document.body),
            this.$gallery = this.$element.find('.dxrd-mobile-gallery');
        this.$galleryblocks = this.$gallery.find('.dxrd-gallery-blocks');
        this.firstMobilePageOffset = this._getFirstPageOffset();
        this.slideOptions.searchPanel.height.subscribe((newVal) => {
            if (slideOptions.disabled())
                return;
            if (!this.firstMobilePageOffset)
                this.firstMobilePageOffset = this._getFirstPageOffset();
            if (this.slideOptions.readerMode) {
                this.slideOptions.topOffset(newVal);
            }
            else {
                this.slideOptions.topOffset(Math.min(newVal, Math.max(0, _mobileSearch_MobileSearchViewModel.maxHeight - this.firstMobilePageOffset.top)));
            }
            if (!newVal) {
                this.applySearchAnimation(newVal);
            }
            else if (newVal === _mobileSearch_MobileSearchViewModel.maxHeight) {
                this.slideOptions.searchPanel.searchPanelVisible(true);
                this.applySearchAnimation(newVal);
            }
            else {
                var dif = 1 - minScale;
                var perc = newVal / _mobileSearch_MobileSearchViewModel.maxHeight;
                var scale = 1 - dif * perc;
                setTransform(this.$galleryblocks, 'scale(' + Math.max(minScale, scale) + ')');
            }
        });
    }
    _getFirstPageOffset() {
        return this.$galleryblocks.find('.dxrd-mobile-page').eq(0).offset();
    }
    getDirection(x, y) {
        var differenceY = y - this._startingPositionY;
        var distanceY = Math.abs(differenceY);
        var distanceX = Math.abs(x - this._startingPositionX);
        if (distanceY === 0 && distanceX === 0) {
            this._direction.horizontal = false;
            this._direction.vertical = false;
            return this._direction;
        }
        var tg = !distanceX ? 10 : distanceY / distanceX;
        if (tg < 2) {
            this._direction.horizontal = true;
            this._direction.vertical = false;
            this._direction.scrollDown = false;
        }
        else {
            this._direction.horizontal = false;
            this._direction.vertical = true;
            this._direction.scrollDown = differenceY > 0;
        }
        return this._direction;
    }
    setPosition(x, y) {
        this.isLeftMove = this.latestX > x;
        this.isRightMove = this.latestX < x;
        this.latestY = y;
        this.latestX = x;
    }
    initialize(x, y) {
        this._startingPositionX = x;
        this._startingPositionY = y;
        this.latestX = x;
        this.latestY = y;
        this._direction = { horizontal: false, vertical: false, scrollDown: false };
    }
    start(e) {
        this.$body.addClass('dxrd-prevent-refresh');
        this.$galleryblocks = this.$gallery.find('.dxrd-gallery-blocks');
        if (!this.slideOptions.topOffset()) {
            this.firstMobilePageOffset = this._getFirstPageOffset();
            if (this.firstMobilePageOffset) {
                this.firstMobilePageOffset.top = this.firstMobilePageOffset.top * minScale;
            }
        }
        this.initialize(e.pageX, e.pageY);
    }
    move(e) {
        if (this.slideOptions.zoomUpdating() || this.slideOptions.galleryIsAnimated() || this.slideOptions.disabled()) {
            return;
        }
        if (SearchAvailable() && !this.slideOptions.searchPanel.editorVisible()) {
            var direction = this.getDirection(e.pageX, e.pageY);
            if (!direction.vertical && !direction.horizontal)
                return;
            if (direction.vertical && direction.scrollDown || this.slideOptions.searchPanel.height() !== 0) {
                if (this.slideOptions.reachedTop() && (_mobileSearch_MobileSearchViewModel.maxHeight + this.$element.offset().top) > this.$window.scrollTop()) {
                    this.slideOptions.brickEventsDisabled(true);
                    e.stopPropagation();
                    var currentHeight = this.slideOptions.searchPanel.height();
                    var difference = currentHeight + (e.clientY - this.latestY) / slowdownDisctanceFactor;
                    var distance = difference > 0 ? Math.min(difference, _mobileSearch_MobileSearchViewModel.maxHeight) : 0;
                    this.slideOptions.searchPanel.height(distance);
                }
            }
        }
        this.setPosition(e.clientX, e.clientY);
    }
    end(e) {
        if (this.slideOptions.zoomUpdating() || this.slideOptions.galleryIsAnimated()) {
            var touches = e['touches'];
            if (!touches || touches.length === 0) {
                if (this.slideOptions.zoomUpdating()) {
                    e.stopPropagation();
                }
                this.slideOptions.zoomUpdating(false);
            }
            return;
        }
        var direction = this.getDirection(e.pageX, e.pageY);
        if (this.slideOptions.scrollAvailable()) {
            if (direction.horizontal && this.slideOptions.swipeEnabled()) {
                var galleryInstance = external_DevExpress_ui_dxGallery_default.a.getInstance(this.$gallery.get(0));
                var repaintTimeout = this.slideOptions.repaintTimeout;
                if (this.slideOptions.reachedLeft() && this.isRightMove && galleryInstance.gallery.swipeLeftEnable()) {
                    galleryInstance.prevItem();
                    clearTimeout(repaintTimeout());
                    repaintTimeout(setTimeout(() => galleryInstance.repaint(), 410));
                }
                else if (this.slideOptions.reachedRight() && this.isLeftMove && galleryInstance.gallery.swipeRightEnable()) {
                    galleryInstance.nextItem();
                    clearTimeout(repaintTimeout());
                    repaintTimeout(setTimeout(() => galleryInstance.repaint(), 410));
                }
            }
        }
        if (SearchAvailable() && !this.slideOptions.searchPanel.editorVisible()) {
            if (this.slideOptions.searchPanel.height() >= _mobileSearch_MobileSearchViewModel.maxHeight / 2) {
                this.slideOptions.searchPanel.height(_mobileSearch_MobileSearchViewModel.maxHeight);
            }
            else {
                this.slideOptions.searchPanel.height(0);
            }
            if (this.slideOptions.searchPanel.height() == _mobileSearch_MobileSearchViewModel.maxHeight) {
                this.slideOptions.autoFitBy(ZoomAutoBy.PageWidth);
            }
        }
        this.$body.removeClass('dxrd-prevent-refresh');
        setTimeout(() => { this.slideOptions.brickEventsDisabled(false); }, 10);
    }
    applySearchAnimation(value) {
        if (this.slideOptions.animationSettings.zoomEnabled()) {
            this.$galleryblocks.addClass('dxrdp-animation');
            this.$element.addClass('dxrdp-animation');
            setTimeout(() => {
                this.$galleryblocks.removeClass('dxrdp-animation');
                this.$element.removeClass('dxrdp-animation');
            }, 410);
        }
        setTransform(this.$galleryblocks, !value ? '' : 'scale(0.92)');
    }
}

// EXTERNAL MODULE: external "DevExpress.events"
var external_DevExpress_events_ = __webpack_require__(6);

// EXTERNAL MODULE: external "\"\""
var external_ = __webpack_require__(15);

// EXTERNAL MODULE: external "DevExpress.ui.dxScrollView"
var external_DevExpress_ui_dxScrollView_ = __webpack_require__(20);
var external_DevExpress_ui_dxScrollView_default = /*#__PURE__*/__webpack_require__.n(external_DevExpress_ui_dxScrollView_);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/_mobileBindings.js






external_ko_["bindingHandlers"]['mobileZoom'] = {
    init: function (element, valueAccessor) {
        var options = valueAccessor();
        var scroll;
        var zoom = options.zoom();
        Object(external_DevExpress_events_["on"])(element, 'dxpinch', (e) => {
            e.stopPropagation();
            e.preventDefault();
            var scale = e['scale'];
            var newZoom = zoom;
            newZoom *= scale;
            newZoom = Math.max(0.15, Math.min(2, newZoom));
            options.zoom(newZoom);
        });
        Object(external_DevExpress_events_["on"])(element, 'dxpinchstart', (e) => {
            scroll = external_DevExpress_ui_dxScrollView_default.a.getInstance(element.getElementsByClassName('dxrd-scrollView-mobile')[0]);
            e.stopPropagation();
            e.preventDefault();
            options.zoomUpdating(true);
            scroll && scroll.option('disabled', true);
            zoom = options.zoom.peek();
        });
        Object(external_DevExpress_events_["on"])(element, 'dxpinchend', (e) => {
            e.stopPropagation();
            options.zoomUpdating(false);
            setTimeout(() => {
                scroll && scroll.option('disabled', false);
                scroll && scroll.refresh();
            }, 10);
        });
    }
};
external_ko_["bindingHandlers"]['slide'] = {
    init: function (element, valueAccessor) {
        var slideOptionsValue = valueAccessor();
        var isStarted = false;
        var processor = new _eventProcessor_EventProcessor(element, slideOptionsValue);
        Object(external_DevExpress_events_["on"])(element, 'dxpointerdown', (e) => {
            processor.start(e);
            isStarted = true;
        });
        Object(external_DevExpress_events_["on"])(element, 'dxpointermove', (e) => {
            isStarted && processor.move(e);
        });
        ['dxpointercancel', 'dxpointerleave', 'dxpointerup'].forEach((value) => {
            Object(external_DevExpress_events_["on"])(element, value, (e) => {
                if (isStarted) {
                    processor.end(e);
                    isStarted = false;
                }
            });
        });
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/mobile/internal/gallery/_galleryComponent.js





class _galleryComponent_dxGalleryReportPreview extends external_DevExpress_ui_dxGallery_default.a {
    constructor(element, options) {
        super(element, options);
        this._animationClassName = 'dxrdp-gallery-item-animation';
        this.currentBlockItem = null;
        this.nextBlockItem = null;
        this.initializeBlockItems = () => {
            this.blockItems = [];
            var $items = this['_getAvailableItems']();
            for (var i = 0; i < $items.length; i++) {
                var left = parseFloat($items[i]['style'].left);
                left = isNaN(left) ? 0 : left;
                this.blockItems.push({
                    element: external_jQuery_["fn"].constructor($items[i]),
                    left: left
                });
            }
        };
        this.initializeBlockItems();
        this.gallery = this['option']('gallery');
        var subscription = this.gallery.repaint.subscribe((newVal) => {
            if (!this.gallery.preview._hasActiveEditingFields()) {
                this.repaint();
            }
        });
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, () => {
            subscription.dispose();
        });
    }
    repaint() {
        super.repaint.apply(this);
        this.initializeBlockItems();
    }
    _swipeStartHandler(e) {
        super['_swipeStartHandler'].apply(this, [e]);
        var swipeRightEnable = this.gallery.swipeRightEnable();
        var swipeLeftEnable = this.gallery.swipeLeftEnable();
        if (!swipeRightEnable || !swipeLeftEnable) {
            var selectedIndex = swipeRightEnable ? 0 : 2;
            var startOffset = 3 - selectedIndex - 1, endOffset = selectedIndex;
            if (!swipeRightEnable && !swipeLeftEnable) {
                startOffset = 0;
                endOffset = 0;
            }
            e.event.maxLeftOffset = startOffset;
            e.event.maxRightOffset = endOffset;
        }
        this.gallery.isAnimated(true);
        if (this.gallery.animationEnabled()) {
            this.currentBlockItem && this.currentBlockItem.element.removeClass(this._animationClassName);
            this.nextBlockItem && this.nextBlockItem.element.removeClass(this._animationClassName);
        }
    }
    _getNextIndex(offset) {
        var index = this.gallery.selectedIndex();
        if (offset < 0) {
            if (index === 2) {
                index = 0;
            }
            else {
                index++;
            }
        }
        else {
            if (index === 0) {
                index = 2;
            }
            else {
                index--;
            }
        }
        return index;
    }
    _setSwipeAnimation(element, difference, offset, right) {
        var diffperc = 100 * offset / 4;
        var newLeft = '0%';
        if (right) {
            newLeft = (element.left + diffperc) + '%';
        }
        else {
            newLeft = (element.left - diffperc) + '%';
        }
        element.element.css({
            'opacity': difference,
            'transform': 'scale(' + difference + ')',
            'left': newLeft
        });
    }
    _addAnimation(item) {
        if (item) {
            if (this.gallery.animationEnabled()) {
                item.element.addClass(this._animationClassName);
            }
        }
    }
    _restoreDefault(item) {
        if (item) {
            item.element.css({
                'opacity': 1,
                'transform': 'scale(' + 1 + ')',
                'left': item.left + '%'
            });
        }
    }
    _getItem(index, loopTest) {
        var realIndex = index;
        var currentBlockIndex = this.blockItems.indexOf(this.currentBlockItem);
        if (loopTest) {
            if (currentBlockIndex === 2 && index === 0) {
                realIndex = 3;
            }
            else if (currentBlockIndex === 0 && index === 2) {
                realIndex = 4;
            }
        }
        var item = this.blockItems[realIndex];
        if (this.gallery.animationEnabled()) {
            item.element.removeClass(this._animationClassName);
        }
        return item;
    }
    _swipeUpdateHandler(e) {
        super['_swipeUpdateHandler'].apply(this, [e]);
        var offset = e.event.offset;
        var nextIndex = this._getNextIndex(offset);
        var currentIndex = this.gallery.selectedIndex();
        var currentBlockIndex = this.blockItems.indexOf(this.currentBlockItem);
        var nextBlockIndex = this.blockItems.indexOf(this.nextBlockItem);
        if (!this.currentBlockItem || currentBlockIndex !== currentIndex) {
            this.currentBlockItem = this._getItem(currentIndex, false);
        }
        if (!this.nextBlockItem || nextBlockIndex !== nextIndex) {
            this.nextBlockItem = this._getItem(nextIndex, true);
        }
        if (this.gallery.animationEnabled()) {
            offset = Math.abs(offset);
            var right = (nextIndex - currentIndex === 1) || (currentIndex === 2 && nextIndex === 0);
            this._setSwipeAnimation(this.currentBlockItem, Math.min(1, (1 - offset)), offset, right);
            this._setSwipeAnimation(this.nextBlockItem, Math.min(1, offset * 1.5), offset, !right);
        }
    }
    _swipeEndHandler(e) {
        super['_swipeEndHandler'].apply(this, [e]);
        if (this.gallery.animationEnabled()) {
            for (var i = 0; i < this.blockItems.length; i++) {
                if (this.blockItems[i] === this.currentBlockItem || this.blockItems[i] === this.nextBlockItem) {
                    this._addAnimation(this.blockItems[i]);
                }
                this._restoreDefault(this.blockItems[i]);
            }
        }
        else {
            this.gallery.isAnimated(false);
            this.gallery.updatePagesVisible(this.gallery.preview);
        }
    }
    _endSwipe() {
        super['_endSwipe'].apply(this, arguments);
        this.gallery.isAnimated(false);
        this.gallery.updatePagesVisible(this.gallery.preview);
    }
}
external_DevExpress_registerComponent_default()('dxGalleryReportPreview', _galleryComponent_dxGalleryReportPreview);

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-mobile-internal.js





























// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-parameters.js













// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-settings.js



// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/utils/initializer.js


// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/utils/utils.js


// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-utils.js





// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/dateRange/dateRangeEditor.js








class CSDateTime {
    constructor(_date = null) {
        this._date = _date;
    }
    static get today() {
        return new CSDateTime().now();
    }
    get date() {
        return this._date;
    }
    get day() {
        return this._date.getDay();
    }
    get month() {
        return this._date.getMonth();
    }
    get year() {
        return this._date.getFullYear();
    }
    addMonths(months) {
        return new CSDateTime(new Date(this._date.setMonth(CSDateTime.today.month + months)));
    }
    addDays(days) {
        var newDate = this.date.getDate() + days;
        return new CSDateTime(new Date(this._date.setDate(newDate)));
    }
    addHours(hours) {
        var newDate = this.date.getHours() + hours;
        return new CSDateTime(new Date(this._date.setHours(newDate)));
    }
    addYears(years) {
        return new CSDateTime(new Date(this._date.setFullYear(this._date.getFullYear() + years)));
    }
    now() {
        return new CSDateTime(new Date(new Date().setHours(0, 0, 0, 0)));
    }
}
function createRangeItem(displayName, localizationId, range) {
    var item = {
        displayName: Object(external_DevExpress_Analytics_Utils_["getLocalization"])(displayName, localizationId),
        range: range
    };
    Object.defineProperty(item, 'displayName', {
        get: () => Object(external_DevExpress_Analytics_Utils_["getLocalization"])(displayName, localizationId),
        configurable: true
    });
    return item;
}
var predefinedDateRanges = [
    createRangeItem('Today', 'PreviewStringId.DateRangeParameterEditor_Today', () => [
        CSDateTime.today.date,
        CSDateTime.today.date
    ]),
    createRangeItem('Yesterday', 'PreviewStringId.DateRangeParameterEditor_Yesterday', () => [
        CSDateTime.today.addDays(-1).date,
        CSDateTime.today.addDays(-1).date
    ]),
    createRangeItem('Current Week', 'PreviewStringId.DateRangeParameterEditor_CurrentWeek', () => [
        CSDateTime.today.addDays(-CSDateTime.today.day).date,
        CSDateTime.today.addDays(-CSDateTime.today.day).addDays(6).date
    ]),
    createRangeItem('Last Week', 'PreviewStringId.DateRangeParameterEditor_LastWeek', () => [
        CSDateTime.today.addDays(-7).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Week', 'PreviewStringId.DateRangeParameterEditor_PreviousWeek', () => [
        CSDateTime.today.addDays(-CSDateTime.today.day - 7).date,
        CSDateTime.today.addDays(-CSDateTime.today.day - 1).date
    ]),
    createRangeItem('Current Month', 'PreviewStringId.DateRangeParameterEditor_CurrentMonth', () => [
        new Date(CSDateTime.today.year, CSDateTime.today.month, 1),
        new Date(CSDateTime.today.year, CSDateTime.today.month + 1, 0),
    ]),
    createRangeItem('Last Month', 'PreviewStringId.DateRangeParameterEditor_LastMonth', () => [
        CSDateTime.today.addMonths(-1).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Month', 'PreviewStringId.DateRangeParameterEditor_PreviousMonth', () => [
        new Date(CSDateTime.today.year, CSDateTime.today.month - 1, 1),
        new Date(CSDateTime.today.year, CSDateTime.today.month, 0),
    ]),
    createRangeItem('Current Quarter', 'PreviewStringId.DateRangeParameterEditor_CurrentQuarter', () => [
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3).date,
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3 + 3).date,
    ]),
    createRangeItem('Previous Quarter', 'PreviewStringId.DateRangeParameterEditor_PreviousQuarter', () => [
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3 - 3).date,
        CSDateTime.today.addMonths(-CSDateTime.today.month % 3).date,
    ]),
    createRangeItem('Current Year', 'PreviewStringId.DateRangeParameterEditor_CurrentYear', () => [
        new Date(CSDateTime.today.year, 0, 1),
        new Date(CSDateTime.today.year, 11, 31),
    ]),
    createRangeItem('Last Year', 'PreviewStringId.DateRangeParameterEditor_LastYear', () => [
        CSDateTime.today.addYears(-1).date,
        CSDateTime.today.date
    ]),
    createRangeItem('Previous Year', 'PreviewStringId.DateRangeParameterEditor_PreviousYear', () => [
        new Date(CSDateTime.today.year - 1, 0, 1),
        new Date(CSDateTime.today.year - 1, 11, 31),
    ])
];
class dateRangeEditor_DateRangeEditor extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(_options) {
        super();
        this._options = _options;
        this._locker = new Locker();
        this._popupVisible = external_ko_["observable"](false);
        this._showPopup = () => {
            this._popupVisible(true);
        };
        this._hidePopup = () => {
            this._popupVisible(false);
            this._$element.get(0).querySelector('input').focus();
        };
        this._accessibilityDialogItems = external_ko_["observableArray"]([]);
        this.popupTemplate = 'dxrv-daterange-editor-popup';
        this.items = [];
        this.startDate = external_ko_["observable"](new Date(new Date().setHours(0, 0, 0, 0)));
        this.endDate = external_ko_["observable"](new Date(new Date().setHours(0, 0, 0, 0)));
        this._disposables.push(_options.value.subscribe((newVal) => this.applyDate(newVal)), this._displayText = external_ko_["computed"](() => this._getStringValue([this.startDate(), this.endDate()])), this.startDate.subscribe(() => this.applyValue(this.startDate() > this.endDate())), this.endDate.subscribe(() => this.applyValue()));
        this.applyDate(this._options.value());
        this.items = predefinedDateRanges;
        if (_options.isMobile) {
            this.popupTemplate = 'dxrd-menu-parameters-content';
            this.popupModel = new _parametersPopup_DateRangeParemeterPopupModel(this);
        }
        else {
            this.popupModel = this;
        }
        this.dialogKeyboardHelper = new _dateRangeKeyboardHelper_DateRangeDialogElementsKeyboardHelper(this._hidePopup, this._popupVisible);
        this._disposables.push(this.dialogKeyboardHelper);
    }
    _getStringValue(range) {
        return range.map(x => Object(external_DevExpress_Analytics_Internal_["formatDate"])(x)).join(' - ');
    }
    _isSelected(item) {
        return this._displayText() === this._getStringValue(item.range());
    }
    _toParameterValue() {
        return [this.startDate(), this.endDate()];
    }
    _createTemplateData(value, min) {
        return {
            value,
            min,
            inRange: (date) => this.inRange(date)
        };
    }
    applyDate(range, force = false) {
        this._locker.lock(() => {
            if (range[1] < this.startDate()) {
                this.startDate(range[0]);
                this.endDate(range[1]);
            }
            else {
                this.endDate(range[1]);
                this.startDate(range[0]);
            }
        });
        if (force)
            this.applyValue();
    }
    inRange(date) {
        var _end = new Date(this.endDate().getTime());
        var _start = new Date(this.startDate().getTime());
        return date <= new Date(_end.setHours(0, 0, 0, 0)) &&
            date >= new Date(_start.setHours(0, 0, 0, 0));
    }
    applyValue(updateEndDate = false) {
        this._locker.lock(() => {
            updateEndDate && this.endDate(this.startDate());
            this._options.value(this._toParameterValue());
        });
    }
}
external_ko_["bindingHandlers"]['dxrvDateRangeEditor'] = {
    init: (element, valueAccessor, bindings, model, bindingContext) => {
        var rangeEditor = new dateRangeEditor_DateRangeEditor(valueAccessor());
        external_jQuery_["fn"].constructor(element).children().remove();
        var templateHtml = Object(external_DevExpress_Analytics_Widgets_["getTemplate"])('dxrv-daterange-editor'), $element = external_jQuery_["fn"].constructor(element).append(templateHtml);
        var context = bindingContext.createChildContext(rangeEditor);
        external_ko_["applyBindingsToDescendants"](context, $element.children()[0]);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, () => rangeEditor.dispose());
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets.js







// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/_multiValueEditor.js


class _multiValueEditor_MultiValueEditorOptions extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(value, items) {
        super();
        this.selectedItems = external_ko_["observable"]([]);
        var values = value();
        this.value = value;
        var valueHasMutated = () => {
            this.editorValue.notifySubscribers(this.displayItems[0]);
        };
        this._items = items.map((item) => {
            var selected = external_ko_["observable"](this._isValueSelected(item.value, values));
            return { selected: selected, value: item.value, displayValue: item.displayValue || item.value, toggleSelected: () => { selected(!selected()); valueHasMutated(); } };
        });
        this._disposables.push(this.selectedItems = external_ko_["pureComputed"](() => {
            return this._items.filter((item) => { return item.selected(); });
        }));
        var selectionInProcess = external_ko_["observable"](false), isSelectedAllState, stringValue;
        this._disposables.push(this.selectedValuesString = external_ko_["pureComputed"]({
            read: () => {
                if (selectionInProcess())
                    return stringValue;
                stringValue = '';
                this.selectedItems().forEach((item, index, array) => {
                    stringValue += item.displayValue;
                    if (index < array.length - 1) {
                        stringValue += ', ';
                    }
                });
                return stringValue;
            },
            write: (newValue) => { }
        }));
        this._disposables.push(this.isSelectedAll = external_ko_["pureComputed"]({
            read: () => {
                if (selectionInProcess())
                    return isSelectedAllState;
                var selectedItemCount = this.selectedItems().length;
                if (selectedItemCount > 0 && selectedItemCount < this._items.length) {
                    return undefined;
                }
                isSelectedAllState = selectedItemCount === this._items.length;
                return isSelectedAllState;
            },
            write: (newValue) => {
                isSelectedAllState = newValue;
                try {
                    selectionInProcess(true);
                    this._items.forEach((item) => { item.selected(newValue); });
                }
                finally {
                    selectionInProcess(false);
                }
            }
        }));
        var selectAllItem = { selected: this.isSelectedAll, value: null, displayValue: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('(Select All)', 'AnalyticsCoreStringId.SelectAll'), toggleSelected: () => { this.isSelectedAll(!this.isSelectedAll()); valueHasMutated(); } };
        this.displayItems = [selectAllItem].concat(this._items);
        this.dataSource = this.displayItems;
        this.editorValue = external_ko_["observable"](selectAllItem);
        this.updateValue = () => {
            value(this._items.filter((item) => { return item.selected(); }).map((item) => { return item.value; }));
            valueHasMutated();
        };
        this.onOptionChanged = (e) => {
            if (e.name !== 'opened' || e.value)
                return;
            this.updateValue();
        };
    }
    _isValueSelected(value, array) {
        if (value instanceof Date) {
            return array.filter((item) => { return item - value === 0; }).length > 0;
        }
        return array.indexOf(value) !== -1;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_imagePainter.js



class _imagePainter_ImagePainter {
    constructor(options) {
        this.format = external_ko_["observable"]();
        this.image = options.imageSource;
        this.sizeMode = options.sizeMode;
        this.alignment = options.alignment;
    }
    _drawImage(imageSource, context, scale, contentSize) {
        var deferred = external_jQuery_["Deferred"]();
        if (!imageSource)
            return deferred.resolve().promise();
        var background = new Image();
        var prefix = 'data:image/' + (this.format() || 'png') + ';base64,';
        if (this.format() === 'svg') {
            prefix = 'data:image/svg+xml;charset=UTF-8;base64,';
        }
        var imageBase64 = imageSource.indexOf('base64,') !== -1 ? imageSource : prefix + imageSource;
        background.src = imageBase64;
        background.onload = () => {
            var size = this._getImageSize(background, scale, contentSize);
            var location = this._getImageCoordinate(size, contentSize);
            context.drawImage(background, location.x, location.y, size.width, size.height);
            deferred.resolve();
        };
        return deferred.promise();
    }
    _getImageSize(image, scale, contentSize) {
        var sizeMode = this.sizeMode();
        var width = image.width * scale, height = image.height * scale;
        if (sizeMode === ImageSizeMode.StretchImage) {
            width = contentSize.width;
            height = contentSize.height;
        }
        else if (sizeMode === ImageSizeMode.Cover || sizeMode === ImageSizeMode.ZoomImage || (sizeMode === ImageSizeMode.Squeeze && (contentSize.width < width || contentSize.height < height))) {
            var ratio = (sizeMode === ImageSizeMode.Cover ? Math.max : Math.min)(contentSize.width / width, contentSize.height / height);
            width *= ratio;
            height *= ratio;
        }
        return { width: width, height: height };
    }
    _getImageCoordinate(imageSize, contentSize) {
        var alignment = this.alignment();
        var x = 0, y = 0;
        if (!(alignment in ImageAlignment) && (this.sizeMode() === ImageSizeMode.Cover || this.sizeMode() === ImageSizeMode.ZoomImage || this.sizeMode() === ImageSizeMode.Squeeze)) {
            alignment = ImageAlignment.MiddleCenter;
        }
        if (alignment === ImageAlignment.MiddleLeft || alignment === ImageAlignment.MiddleCenter || alignment === ImageAlignment.MiddleRight) {
            y = (contentSize.height - imageSize.height) / 2;
        }
        else if (alignment === ImageAlignment.BottomLeft || alignment === ImageAlignment.BottomCenter || alignment === ImageAlignment.BottomRight) {
            y = contentSize.height - imageSize.height;
        }
        if (alignment === ImageAlignment.TopCenter || alignment === ImageAlignment.MiddleCenter || alignment === ImageAlignment.BottomCenter) {
            x = (contentSize.width - imageSize.width) / 2;
        }
        else if (alignment === ImageAlignment.TopRight || alignment === ImageAlignment.MiddleRight || alignment === ImageAlignment.BottomRight) {
            x = contentSize.width - imageSize.width;
        }
        return { x: x, y: y };
    }
    refresh(context, scale = 1, contentSize) {
        contentSize = contentSize || {
            width: context.canvas.width,
            height: context.canvas.height
        };
        return this._drawImage(this.image(), context, scale, contentSize);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_signaturePainter.js


class _signaturePainter_SignaturePainter extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor() {
        super();
        this._points = external_ko_["observableArray"]([]);
        this.hasPoints = external_ko_["computed"](() => { return this._points().length > 0; });
        this._disposables.push(this.hasPoints);
    }
    dispose() {
        super.dispose();
        this.reset();
    }
    _drawPath(context, x, y, lastX, lastY, color, lineWidth) {
        context.beginPath();
        context.strokeStyle = color;
        context.lineWidth = lineWidth;
        context.lineJoin = 'round';
        context.moveTo(lastX, lastY);
        context.lineTo(x, y);
        context.closePath();
        context.stroke();
    }
    _drawCircle(context, x, y, color, lineWidth) {
        context.beginPath();
        context.fillStyle = color;
        context.arc(x, y, lineWidth / 2, 0, 2 * Math.PI, false);
        context.fill();
    }
    _drawAllPoints(context) {
        this._points().forEach((point) => {
            if (point.isStart) {
                this._drawCircle(context, point.x, point.y, point.color, point.width);
            }
            else {
                this._drawPath(context, point.x, point.y, point.lastX, point.lastY, point.color, point.width);
            }
        });
    }
    drawCircle(context, x, y, color, width) {
        this._lastX = x;
        this._lastY = y;
        this._drawCircle(context, x, y, color, width);
        this._points.push({ x: this._lastX, y: this._lastY, color: color, width: width, isStart: true });
    }
    drawPath(context, x, y, color, width) {
        this._drawPath(context, x, y, this._lastX, this._lastY, color, width);
        this._points.push({ x: x, y: y, lastX: this._lastX, lastY: this._lastY, color: color, width: width });
        this._lastX = x;
        this._lastY = y;
    }
    resetLastPosition() {
        this._lastX = undefined;
        this._lastY = undefined;
    }
    resetPoints() {
        this._points([]);
    }
    reset() {
        this.resetLastPosition();
        this.resetPoints();
    }
    refresh(context) {
        this._drawAllPoints(context);
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_painter.js










class _painter_Painter extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(options) {
        super();
        this._pointerDownHandler = (e) => {
            var point = this._getContextPoint(e);
            point && this.signaturePainter.drawCircle(this._context, point.x, point.y, this.lineColor(), this.lineWidth());
        };
        this._pointerMoveHandler = (e) => {
            if (e.pointerType === 'touch' || e.pointerType === 'pen' || (e.pointerType === 'mouse' && e.originalEvent['buttons'] == 1)) {
                var point = this._getContextPoint(e);
                point && this.signaturePainter.drawPath(this._context, point.x, point.y, this.lineColor(), this.lineWidth());
            }
        };
        this._pointerLeaveHandler = (e) => {
            this.signaturePainter.resetLastPosition();
        };
        this.format = (newVal) => {
            if (newVal)
                this.imagePainter.format(newVal);
            return this.imagePainter.format();
        };
        this.imageSizeMode = external_ko_["observable"](ImageSizeMode.Normal);
        this.imageAlignment = external_ko_["observable"](ImageAlignment.TopLeft);
        this.lineWidth = external_ko_["observable"](1);
        this.lineColor = external_ko_["observable"]('#000000');
        this.zoom = options.zoom;
        this.image = external_ko_["observable"](options.imageSource);
        this.imageSizeMode(options.sizeMode);
        this.imageAlignment(options.alignment);
        this.imagePainter = new _imagePainter_ImagePainter({
            alignment: this.imageAlignment,
            imageSource: this.image,
            sizeMode: this.imageSizeMode
        });
        this.format(options.imageType);
        this._disposables.push(this.signaturePainter = new _signaturePainter_SignaturePainter());
        this._disposables.push(this.signaturePainter.hasPoints.subscribe((newVal) => {
            if (newVal)
                this._setCanvasSize(this.initialSize.width, this.initialSize.height);
            else
                this._setCanvasSize(this.initialSize.width * this.zoom(), this.initialSize.height * this.zoom());
            this.refresh();
        }));
        this._disposables.push(this.scale = external_ko_["computed"](() => {
            return this.hasSignature() ? this.zoom() : 1;
        }));
        if (options.canDraw) {
            this._disposables.push((options.canDraw).subscribe((newValue) => {
                if (newValue) {
                    this._addEvents();
                }
                else {
                    this._removeEvents();
                }
            }));
        }
        this._disposables.push(this.zoom.subscribe((newVal) => {
            if (!this.signaturePainter.hasPoints()) {
                this._setCanvasSize(this.initialSize.width * newVal, this.initialSize.height * newVal);
                this.refresh();
            }
        }));
    }
    _getContextPoint(e) {
        if (e.target.nodeName !== 'CANVAS')
            return;
        var zoom = this.zoom();
        var x, y;
        if (e.offsetX && e.offsetY) {
            zoom = this.hasSignature() ? 1 : zoom;
            x = e.offsetX / zoom;
            y = e.offsetY / zoom;
        }
        else {
            var rect = this._context.canvas.getBoundingClientRect();
            x = (e.clientX - rect.left) / zoom;
            y = (e.clientY - rect.top) / zoom;
        }
        return { x, y };
    }
    _addEvents() {
        var element = this.$element.get(0);
        external_DevExpress_events_["on"](element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_["on"](element, 'dxpointermove', this._pointerMoveHandler);
        external_DevExpress_events_["on"](element, 'dxpointerleave', this._pointerLeaveHandler);
    }
    _removeEvents() {
        var element = this.$element.get(0);
        external_DevExpress_events_["off"](element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_["off"](element, 'dxpointermove', this._pointerMoveHandler);
        external_DevExpress_events_["off"](element, 'dxpointerleave', this._pointerLeaveHandler);
    }
    _setCanvasSize(width, height) {
        this._context.canvas.setAttribute('width', width);
        this._context.canvas.setAttribute('height', height);
    }
    _cleanCanvas() {
        this._context.clearRect(0, 0, this._context.canvas.width, this._context.canvas.height);
    }
    clear() {
        this.image(null);
        this.signaturePainter.reset();
        this._cleanCanvas();
    }
    refresh() {
        this._cleanCanvas();
        var zoom = this.signaturePainter.hasPoints() ? 1 : this.zoom();
        var size = this.signaturePainter.hasPoints() ? this.initialSize : undefined;
        this.imagePainter.refresh(this._context, zoom, size)
            .done(() => this.signaturePainter.refresh(this._context));
    }
    initSize(element, zoom) {
        this.$element = element;
        this.initialSize = {
            width: this.$element.outerWidth() / zoom,
            height: this.$element.outerHeight() / zoom
        };
    }
    initCanvas(element, zoom) {
        var canvas = this.$element.find('canvas')[0];
        this._context = canvas.getContext('2d');
        this._setCanvasSize(this.initialSize.width * zoom, this.initialSize.height * zoom);
        this.imagePainter.refresh(this._context, zoom, {
            width: this._context.canvas.offsetWidth,
            height: this._context.canvas.offsetHeight
        });
    }
    imageFormatByType(imageType) {
        return imageType === imageEditingField_ImageEditingFieldViewModel.__DefaultImageType ? 'png' : imageType;
    }
    getImage() {
        return this._context.canvas.toDataURL('image/png');
    }
    hasSignature() {
        return this.signaturePainter.hasPoints();
    }
    dispose() {
        super.dispose();
        this._removeEvents();
        this.$element = null;
        this._context = null;
    }
    reset(initialImage, initialAlignment, initialSizeMode, initialImageType) {
        this.image(initialImage);
        this.imageAlignment(initialAlignment);
        this.imageSizeMode(initialSizeMode);
        this.format(this.imageFormatByType(initialImageType));
        this.signaturePainter.reset();
        this.refresh();
    }
}
external_ko_["bindingHandlers"]['dxPainter'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var options = (valueAccessor());
        external_jQuery_["fn"].constructor(element).children().remove();
        var templateHtml = Object(external_DevExpress_Analytics_Widgets_["getTemplate"])('dx-painter');
        var $element = external_jQuery_["fn"].constructor(element).append(templateHtml);
        var child = $element.children()[0];
        var $child = external_jQuery_["fn"].constructor(child);
        var model = new _painter_Painter(options);
        model.initSize($child, options.zoom());
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            model.dispose();
        });
        external_ko_["applyBindings"](model, child);
        model.initCanvas($child, options.zoom());
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorToolbarItem.js


class PictureEditorToolbarItem {
    constructor(options) {
        this.id = options.id;
        this.icon = options.icon;
        this.action = options.action;
        this.active = options.active;
        this.renderedHandler = options.renderedHandler;
        this.title = options.title;
    }
    dispose() {
        this.renderedHandler = null;
        this.action = null;
    }
}
class _pictureEditorToolbarItem_PictureEditorToolbarItemWithPopup extends PictureEditorToolbarItem {
    constructor(options) {
        super(options);
        this.template = options.template;
        if (options.templateOptions) {
            this.templateOptions = options.templateOptions;
            this._popup = new external_DevExpress_Analytics_Widgets_Internal_["PopupComponentBase"]();
            this.templateOptions.onContentReady = this._popup.onContentReady;
            this.templateOptions.hideOnOutsideClick = this._popup.hideOnOutsideClick;
            this.templateOptions.onShown = (e) => {
                var $element = external_jQuery_["fn"].constructor(e.element);
                var topElement = $element.position().top;
                var popupsOffset = e['model'].getPositionTarget().offset().top - external_jQuery_["fn"].constructor(e.component.content()).offset().top;
                var $arrow = external_jQuery_["fn"].constructor($element.find('.dx-popover-arrow')[0]);
                $arrow.css('top', popupsOffset + topElement - 24 - 11);
            };
        }
    }
    dispose() {
        super.dispose();
        this._popup.dispose();
        this.templateOptions = null;
    }
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorActionProvider.js









class _pictureEditorActionProvider_PictureEditorActionProvider extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(_editorModel, _popupOptions) {
        super();
        this._editorModel = _editorModel;
        this._popupOptions = _popupOptions;
    }
    _getValues(enumType, prefix, propertyName, info) {
        var array = [];
        getEnumValues(enumType).forEach((item) => {
            var attrTitle = undefined;
            if (info && info.valuesArray.length > 0) {
                var displayValue = info.valuesArray.filter((value) => value.value === item)[0];
                attrTitle = Object(external_DevExpress_Analytics_Utils_["getLocalization"])(displayValue.displayValue || displayValue.value, displayValue.localizationId);
            }
            array.push({
                value: item,
                iconTemplate: 'dxrd-svg-pictureeditor-' + prefix + '_' + item.toLowerCase(),
                attrTitle,
                isSelected: external_ko_["computed"](() => { return this._editorModel.painter[propertyName]() === enumType[item]; }),
                action: () => {
                    this._editorModel.painter[propertyName](enumType[item]);
                    this._editorModel.painter.refresh();
                }
            });
        });
        return array;
    }
    _getColorValues() {
        var array = [];
        _pictureEditorActionProvider_PictureEditorActionProvider.colors.forEach((item) => {
            array.push({
                value: item,
                isSelected: external_ko_["computed"](() => { return this._editorModel.painter.lineColor() === item; }),
                action: (e) => {
                    this._editorModel.painter.lineColor(item);
                }
            });
        });
        return array;
    }
    _initPopupOptions(options) {
        options.boundary = this._popupOptions.boundary;
        options.getPositionTarget = () => this._popupOptions.getPositionTarget();
        options.target = this._popupOptions.target;
        options.container = this._popupOptions.container;
        return options;
    }
    createOpenFileAction(action) {
        var openFileActionOptions = {
            id: PictureEditorActionId.OpenFile,
            icon: 'dxrd-svg-pictureeditor-toolbar_open',
            title: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Load Image', 'PreviewStringId.ImageEditingFieldEditor_LoadImage'),
            active: external_ko_["observable"](false),
            action: (e) => action(e)
        };
        return new PictureEditorToolbarItem(openFileActionOptions);
    }
    createImagePickerAction(images, filterEnabled, action) {
        filterEnabled = filterEnabled && images.every((image) => image.text !== undefined);
        var active = external_ko_["observable"](false);
        var filter = external_ko_["observable"]('');
        images.forEach((image) => {
            if (filterEnabled) {
                this._disposables.push(image.visible = external_ko_["computed"](() => !!Object(external_DevExpress_Analytics_Internal_["findMatchesInString"])(image.text, filter())));
            }
            else {
                image.visible = true;
            }
        });
        var popupOptions = this._initPopupOptions({
            width: 'auto',
            height: Object(external_DevExpress_Analytics_Internal_["calculateWithZoomFactor"])(300) + 'px',
            visible: active,
            contentTemplate: filterEnabled ? 'dx-picture-editing-imagepickerwithfilter' : 'dx-picture-editing-imagespicker',
            contentData: {
                filterEnabled: filterEnabled,
                filter: filter,
                searchPlaceholder: () => Object(external_DevExpress_Analytics_Internal_["searchPlaceholder"])(),
                contentWidth: this._editorModel.painter.initialSize.width * 2 + 35,
                width: Math.min(this._editorModel.painter.initialSize.width, 150),
                height: Math.min(this._editorModel.painter.initialSize.height, 150),
                action: (data) => {
                    if (data.url) {
                        getImageBase64(data.url).done((result) => {
                            action(result);
                        }).fail((e) => {
                            Object(external_DevExpress_Analytics_Internal_["ShowMessage"])(e.name + ' :' + e.message.split(':').pop(), 'error');
                        });
                    }
                    else {
                        action(data.data);
                    }
                },
                images: images
            }
        });
        return new _pictureEditorToolbarItem_PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.PickImage,
            icon: 'dxrd-svg-pictureeditor-image_gallery',
            title: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Choose Image', 'PreviewStringId.ImageEditingFieldEditor_ChooseImage'),
            active: active,
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createSizingAction() {
        var alignmentActive = external_ko_["observable"](false);
        var popupOptions = this._initPopupOptions({
            width: Object(external_DevExpress_Analytics_Internal_["calculateWithZoomFactor"])(174) + 'px',
            height: Object(external_DevExpress_Analytics_Internal_["calculateWithZoomFactor"])(300) + 'px',
            visible: alignmentActive,
            contentTemplate: 'dx-picture-editing-sizemode-alignment',
            contentData: {
                sizeModeText: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Size Mode', 'PreviewStringId.ImageEditingFieldEditor_SizeMode'),
                sizeMode: this._editorModel.painter.imageSizeMode,
                sizeModeValues: this._getValues(ImageSizeMode, 'size_mode', 'imageSizeMode', sizing),
                alignmentText: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Alignment', 'PreviewStringId.ImageEditingFieldEditor_Alignment'),
                alignment: this._editorModel.painter.imageAlignment,
                alignmentValues: this._getValues(ImageAlignment, 'alignment', 'imageAlignment', imageAlignment),
            }
        });
        return new _pictureEditorToolbarItem_PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.Alignment,
            icon: 'dxrd-svg-pictureeditor-toolbar_size_mode_and_alignment',
            title: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Size Mode and Alignment', 'PreviewStringId.ImageEditingFieldEditor_SizeModeAndAlignment'),
            active: alignmentActive,
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions
        });
    }
    createBrushAction() {
        var brushItemActive = external_ko_["observable"](false);
        var popupOptions = this._initPopupOptions({
            width: Object(external_DevExpress_Analytics_Internal_["calculateWithZoomFactor"])(226) + 'px',
            height: Object(external_DevExpress_Analytics_Internal_["calculateWithZoomFactor"])(295) + 'px',
            visible: brushItemActive,
            contentTemplate: 'dx-picture-editing-brush-options',
            contentData: {
                lineWidth: this._editorModel.painter.lineWidth,
                lineColor: this._editorModel.painter.lineColor,
                colors: this._getColorValues(),
                brushWidthText: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Brush size', 'PreviewStringId.ImageEditingFieldEditor_BrushSize'),
                brushColorText: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Brush color', 'PreviewStringId.ImageEditingFieldEditor_BrushColor'),
            }
        });
        return new _pictureEditorToolbarItem_PictureEditorToolbarItemWithPopup({
            id: PictureEditorActionId.Brush,
            icon: 'dxrd-svg-pictureeditor-toolbar_brush_options',
            title: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Brush Options', 'PreviewStringId.ImageEditingFieldEditor_BrushOptions'),
            active: brushItemActive,
            template: 'dx-picture-editing-toolbar-popup',
            templateOptions: popupOptions,
            renderedHandler: (elem, mod) => {
                if (elem[0].nodeName.toLowerCase() === 'svg') {
                    var brushIcon = external_jQuery_["fn"].constructor(elem[0]).find('.BrushColor');
                    if (brushIcon) {
                        brushIcon.attr('data-bind', '{ style: { fill: $data.templateOptions.contentData.lineColor }}');
                        external_ko_["applyBindingsToDescendants"](mod, brushIcon[0]);
                    }
                }
            }
        });
    }
    createResetItem(action) {
        var clearItemOptions = {
            id: PictureEditorActionId.Reset,
            icon: 'dxrd-svg-pictureeditor-toolbar_reset',
            title: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Reset', 'PreviewStringId.ImageEditingFieldEditor_Reset'),
            active: external_ko_["observable"](false),
            action: (e) => action()
        };
        return new PictureEditorToolbarItem(clearItemOptions);
    }
    createClearItem(action) {
        var clearItemOptions = {
            id: PictureEditorActionId.Clear,
            icon: 'dxrd-svg-pictureeditor-toolbar_clear',
            title: Object(external_DevExpress_Analytics_Utils_["getLocalization"])('Clear', 'PreviewStringId.ImageEditingFieldEditor_Clear'),
            active: external_ko_["observable"](false),
            action: (e) => action()
        };
        return new PictureEditorToolbarItem(clearItemOptions);
    }
}
_pictureEditorActionProvider_PictureEditorActionProvider.colors = ['#FFFFFF', '#FFC0C0', '#FFE0C0', '#FFFFC0', '#C0FFC0', '#C0FFFF', '#C0C0FF', '#FFC0FF', '#E0E0E0', '#FF8080', '#FFC080', '#FFFF80', '#80FF80', '#80FFFF', '#8080FF', '#FF80FF', '#C0C0C0', '#FF0000', '#FF8000', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#FF00FF', '#808080', '#C00000', '#C04000', '#C0C000', '#00C000', '#00C0C0', '#0000C0', '#C000C0', '#404040', '#800000', '#804000', '#808000', '#008000', '#008080', '#000080', '#800080', '#000000', '#400000', '#804040', '#404000', '#004000', '#004040', '#000040', '#400040'];
Object(external_DevExpress_Analytics_Widgets_Internal_["addToBindingsCache"])('style: { fill: $data.templateOptions.contentData.lineColor }', function ($context, $element) {
    return {
        'style': function () {
            return {
                'fill': $context.$data.templateOptions.contentData.lineColor
            };
        }
    };
});

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/viewer/widgets/pictureEditor/_pictureEditorModel.js











class _pictureEditorModel_PictureEditorModel extends external_DevExpress_Analytics_Utils_["Disposable"] {
    constructor(options, element) {
        super();
        this.GESTURE_COVER_CLASS = 'dx-gesture-cover';
        this.ACTIVE_POPUP_CLASS = '.dx-picture-editing-active';
        this._getPopupContent = () => {
            var popupInstance = external_DevExpress_ui_dxPopup_default.a['getInstance'](this.$element.find(this.ACTIVE_POPUP_CLASS).get(0));
            return popupInstance && external_jQuery_["fn"].constructor(popupInstance.content());
        };
        this.actions = [];
        this.canDraw = external_ko_["observable"](false);
        this._initialImageType = external_ko_["unwrap"](options.imageType) || 'png';
        this.zoom = options.zoom || external_ko_["observable"](1);
        this.editMode = external_ko_["unwrap"](options.imageMode) || PictureEditMode.Image;
        this._initialImage = external_ko_["unwrap"](options.image);
        this._initialAlignment = external_ko_["unwrap"](options.alignment);
        this._initialSizeMode = external_ko_["unwrap"](options.sizeMode);
        this._callbacks = options.callbacks;
        this.$element = external_jQuery_["fn"].constructor(element);
        this.shadingEnabled = options.shadingEnabled;
        this.active = external_ko_["isObservable"](options.active) ? options.active : external_ko_["observable"](!!options.active);
        var painterOptions = {
            alignment: this._initialAlignment,
            canDraw: this.editMode !== PictureEditMode.Image && this.canDraw,
            imageSource: this._initialImage,
            imageType: this._initialImageType,
            sizeMode: this._initialSizeMode,
            zoom: this.zoom
        };
        this.painter = new _painter_Painter(painterOptions);
        this._disposables.push(this.painter);
        this.painter.initSize(this.$element, this.zoom());
        this.actionsProvider = new _pictureEditorActionProvider_PictureEditorActionProvider(this, external_jQuery_["extend"](true, {
            getPositionTarget: () => {
                return this._getPopupContent().find('.dx-picture-editing-toolbar');
            }
        }, (options.popupOptions || {})));
        this._disposables.push(this.actionsProvider);
        this._initActions(options.callbacks && options.callbacks.customizeActions);
        this.applyBindings();
    }
    _takeFocus() {
        if (!this.active()) {
            this._callbacks && this._callbacks.onFocusIn && this._callbacks.onFocusIn(this);
            this.active(true);
        }
        else if (this.editMode !== PictureEditMode.Image) {
            this.canDraw(true);
            this._callbacks && this._callbacks.onDraw && this._callbacks.onDraw(this);
        }
    }
    _releaseFocus() {
        if (this.active()) {
            this._callbacks && this._callbacks.onFocusOut && this._callbacks.onFocusOut(this);
            this.active(false);
            this.canDraw(false);
        }
    }
    _wrapButtonAction(item, model) {
        var oldAction = item.action;
        item.action = (sender, event) => {
            model.changeActiveButton(sender);
            if (oldAction)
                oldAction(event, model);
        };
    }
    _initActions(customizeActionsCallback) {
        if (this.editMode == PictureEditMode.Image || this.editMode == PictureEditMode.ImageAndSignature) {
            this.actions.push(this.actionsProvider.createOpenFileAction((e) => this._loadImage(e)));
            this.actions.push(this.actionsProvider.createSizingAction());
        }
        if (this.editMode == PictureEditMode.Signature || this.editMode == PictureEditMode.ImageAndSignature) {
            this.actions.push(this.actionsProvider.createBrushAction());
        }
        if (!!this._initialImage) {
            this.actions.push(this.actionsProvider.createResetItem(() => {
                this.painter.reset(this._initialImage, this._initialAlignment, this._initialSizeMode, this._initialImageType);
            }));
        }
        this.actions.push(this.actionsProvider.createClearItem(() => {
            this.painter.clear();
        }));
        customizeActionsCallback && customizeActionsCallback(this, this.actions);
        this.actions.forEach((item) => this._wrapButtonAction(item, this));
    }
    _loadImage(event) {
        event.stopPropagation();
        event.preventDefault();
        Object(external_DevExpress_Analytics_Internal_["uploadFile"])({
            accept: 'image/*'
        }).done(result => {
            this.painter.format(result.format);
            this.painter.image(result.content);
            this.painter.refresh();
        });
    }
    _addEvents() {
        this._pointerDownHandler = (e) => {
            this._takeFocus();
        };
        this._pointerCancelHandler = (e) => {
            this._releaseFocus();
        };
        this._pointerUpHandler = (e) => {
            if (!this.active())
                return;
            var isUnderCursor = (componentContent) => {
                return componentContent && (componentContent.is(e.target) || componentContent.has(e.target).length > 0);
            };
            var isEditorContainer = this.$element.is(e.target) || this.$element.has(e.target).length > 0
                || isUnderCursor(this._getPopupContent())
                || this.actions.some(a => {
                    if (!a.active())
                        return false;
                    var component = external_ko_["unwrap"](a.component);
                    return isUnderCursor(component && external_jQuery_["fn"].constructor(component.content()));
                })
                || (e.target && e.target.className && e.target.className.indexOf && e.target.className.indexOf(this.GESTURE_COVER_CLASS) !== -1);
            if (!isEditorContainer) {
                this._releaseFocus();
            }
        };
        var element = this.$element.get(0);
        external_DevExpress_events_["on"](element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_["on"](element, 'dxpointercancel', this._pointerCancelHandler);
        external_DevExpress_events_["on"](document, 'dxpointerup', this._pointerUpHandler);
    }
    changeActiveButton(selectedItem) {
        this.actions.forEach(action => {
            action.active(action === selectedItem && !action.active());
        });
    }
    applyBindings() {
        external_ko_["cleanNode"](this.$element[0]);
        external_ko_["applyBindings"](this, this.$element[0]);
        this._addEvents();
        this.painter.initCanvas(this.$element, this.zoom());
    }
    dispose() {
        super.dispose();
        var element = this.$element.get(0);
        external_DevExpress_events_["off"](element, 'dxpointerdown', this._pointerDownHandler);
        external_DevExpress_events_["off"](element, 'dxpointercancel', this._pointerCancelHandler);
        external_DevExpress_events_["off"](document, 'dxpointerup', this._pointerUpHandler);
        this.actions.forEach(action => action.dispose && action.dispose());
        this.$element = null;
    }
    getImage() {
        return this.painter.getImage();
    }
    reset(image, alignment, sizeMode, imageType) {
        this._initialImage = image;
        this._initialAlignment = alignment;
        this._initialSizeMode = sizeMode;
        this._initialImageType = imageType;
        this.painter.reset(this._initialImage, this._initialAlignment, this._initialSizeMode, this._initialImageType);
    }
    getCurrentOptions() {
        var imageBase64 = (this.painter.hasSignature() ? this.painter.getImage() : this.painter.image()) || '';
        var imageParts = imageBase64.split(',');
        return {
            sizeMode: this.painter.imageSizeMode(),
            alignment: this.painter.imageAlignment(),
            imageType: this.painter.hasSignature() ? imageEditingField_ImageEditingFieldViewModel.__DefaultImageType : this.painter.format(),
            image: imageParts[imageParts.length - 1]
        };
    }
}
external_ko_["bindingHandlers"]['dxPictureEditor'] = {
    init: function (element, valueAccessor, allBindings, viewModel, bindingContext) {
        var options = (valueAccessor());
        external_jQuery_["fn"].constructor(element).children().remove();
        var templateHtml = Object(external_DevExpress_Analytics_Widgets_["getTemplate"])('dx-picture-editing');
        var $element = external_jQuery_["fn"].constructor(element).append(templateHtml);
        var child = $element.children()[0];
        var model = new _pictureEditorModel_PictureEditorModel(options, child);
        Object(external_DevExpress_Analytics_Internal_["addDisposeCallback"])(element, function () {
            model.dispose();
        });
        return { controlsDescendantBindings: true };
    }
};

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/scopes/reporting-viewer-widgets-internal.js



















// CONCATENATED MODULE: ./node_modules/devexpress-reporting/bundle/_add-viewer-to-bundle.js



















function _addViewerToBundle(bundle) {
    bundle.Reporting = reporting_namespaceObject;
    bundle.Reporting.Editing = reporting_editing_namespaceObject;
    bundle.Reporting.Export = reporting_export_namespaceObject;
    bundle.Reporting.Export.Metadata = reporting_export_metadata_namespaceObject;
    bundle.Reporting.Internal = reporting_internal_namespaceObject;
    bundle.Reporting.Metadata = reporting_metadata_namespaceObject;
    bundle.Reporting.Viewer = reporting_viewer_namespaceObject;
    bundle.Reporting.Viewer.Editing = reporting_viewer_editing_namespaceObject;
    bundle.Reporting.Viewer.Export = reporting_viewer_export_namespaceObject;
    bundle.Reporting.Viewer.Export.Metadata = reporting_viewer_export_metadata_namespaceObject;
    bundle.Reporting.Viewer.Internal = reporting_viewer_internal_namespaceObject;
    bundle.Reporting.Viewer.Mobile = reporting_viewer_mobile_namespaceObject;
    bundle.Reporting.Viewer.Mobile.Internal = reporting_viewer_mobile_internal_namespaceObject;
    bundle.Reporting.Viewer.Parameters = reporting_viewer_parameters_namespaceObject;
    bundle.Reporting.Viewer.Settings = reporting_viewer_settings_namespaceObject;
    bundle.Reporting.Viewer.Utils = reporting_viewer_utils_namespaceObject;
    bundle.Reporting.Viewer.Widgets = reporting_viewer_widgets_namespaceObject;
    bundle.Reporting.Viewer.Widgets.Internal = reporting_viewer_widgets_internal_namespaceObject;
    bundle.Reporting.VERSION = version;
    return bundle;
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/bundle/_validator.js
const _validator_version = '%VERSION%';
function checkVersions() {
    const DevExpress = window.DevExpress;
    var reportingVersion = DevExpress['Reporting']['VERSION'];
    var analyticsVersion = DevExpress['Analytics']['VERSION'];
    if (reportingVersion != analyticsVersion)
        console.warn(`Reporting (v${reportingVersion}) and Analytics-Core (v${analyticsVersion}) versions do not match.`);
}

// CONCATENATED MODULE: ./node_modules/devexpress-reporting/bundle/viewer-bundle.js


const DevExpress = window.DevExpress || {};
_addViewerToBundle(DevExpress);
checkVersions();
/* harmony default export */ var viewer_bundle = __webpack_exports__["default"] = (DevExpress['Reporting']);


/***/ })
/******/ ]);